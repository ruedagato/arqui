                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:22 2015
                              5 ;--------------------------------------------------------
                              6 	.module _atof
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _atof
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
   0000                      32 _atof_s_1_1:
   0000                      33 	.ds 3
   0003                      34 _atof_value_1_1:
   0003                      35 	.ds 4
   0007                      36 _atof_fraction_1_1:
   0007                      37 	.ds 4
   000B                      38 _atof_sloc0_1_0:
   000B                      39 	.ds 3
   000E                      40 _atof_sloc1_1_0:
   000E                      41 	.ds 4
                             42 ;--------------------------------------------------------
                             43 ; overlayable items in internal ram 
                             44 ;--------------------------------------------------------
                             45 	.area OSEG    (OVR,DATA)
                             46 ;--------------------------------------------------------
                             47 ; indirectly addressable internal ram data
                             48 ;--------------------------------------------------------
                             49 	.area ISEG    (DATA)
                             50 ;--------------------------------------------------------
                             51 ; absolute internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area IABS    (ABS,DATA)
                             54 	.area IABS    (ABS,DATA)
                             55 ;--------------------------------------------------------
                             56 ; bit data
                             57 ;--------------------------------------------------------
                             58 	.area BSEG    (BIT)
   0000                      59 _atof_sign_1_1:
   0000                      60 	.ds 1
                             61 ;--------------------------------------------------------
                             62 ; paged external ram data
                             63 ;--------------------------------------------------------
                             64 	.area PSEG    (PAG,XDATA)
                             65 ;--------------------------------------------------------
                             66 ; external ram data
                             67 ;--------------------------------------------------------
                             68 	.area XSEG    (XDATA)
                             69 ;--------------------------------------------------------
                             70 ; absolute external ram data
                             71 ;--------------------------------------------------------
                             72 	.area XABS    (ABS,XDATA)
                             73 ;--------------------------------------------------------
                             74 ; external initialized ram data
                             75 ;--------------------------------------------------------
                             76 	.area XISEG   (XDATA)
                             77 	.area HOME    (CODE)
                             78 	.area GSINIT0 (CODE)
                             79 	.area GSINIT1 (CODE)
                             80 	.area GSINIT2 (CODE)
                             81 	.area GSINIT3 (CODE)
                             82 	.area GSINIT4 (CODE)
                             83 	.area GSINIT5 (CODE)
                             84 	.area GSINIT  (CODE)
                             85 	.area GSFINAL (CODE)
                             86 	.area CSEG    (CODE)
                             87 ;--------------------------------------------------------
                             88 ; global & static initialisations
                             89 ;--------------------------------------------------------
                             90 	.area HOME    (CODE)
                             91 	.area GSINIT  (CODE)
                             92 	.area GSFINAL (CODE)
                             93 	.area GSINIT  (CODE)
                             94 ;--------------------------------------------------------
                             95 ; Home
                             96 ;--------------------------------------------------------
                             97 	.area HOME    (CODE)
                             98 	.area HOME    (CODE)
                             99 ;--------------------------------------------------------
                            100 ; code
                            101 ;--------------------------------------------------------
                            102 	.area CSEG    (CODE)
                            103 ;------------------------------------------------------------
                            104 ;Allocation info for local variables in function 'atof'
                            105 ;------------------------------------------------------------
                            106 ;s                         Allocated with name '_atof_s_1_1'
                            107 ;value                     Allocated with name '_atof_value_1_1'
                            108 ;fraction                  Allocated with name '_atof_fraction_1_1'
                            109 ;iexp                      Allocated to registers r2 
                            110 ;sloc0                     Allocated with name '_atof_sloc0_1_0'
                            111 ;sloc1                     Allocated with name '_atof_sloc1_1_0'
                            112 ;------------------------------------------------------------
                            113 ;	_atof.c:33: float atof(const char * s)
                            114 ;	-----------------------------------------
                            115 ;	 function atof
                            116 ;	-----------------------------------------
   0000                     117 _atof:
                    0002    118 	ar2 = 0x02
                    0003    119 	ar3 = 0x03
                    0004    120 	ar4 = 0x04
                    0005    121 	ar5 = 0x05
                    0006    122 	ar6 = 0x06
                    0007    123 	ar7 = 0x07
                    0000    124 	ar0 = 0x00
                    0001    125 	ar1 = 0x01
   0000 85 82*00            126 	mov	_atof_s_1_1,dpl
   0003 85 83*01            127 	mov	(_atof_s_1_1 + 1),dph
   0006 85 F0*02            128 	mov	(_atof_s_1_1 + 2),b
                            129 ;	_atof.c:40: while (isspace(*s)) s++;
   0009 AD*00               130 	mov	r5,_atof_s_1_1
   000B AE*01               131 	mov	r6,(_atof_s_1_1 + 1)
   000D AF*02               132 	mov	r7,(_atof_s_1_1 + 2)
   000F                     133 00101$:
   000F 8D 82               134 	mov	dpl,r5
   0011 8E 83               135 	mov	dph,r6
   0013 8F F0               136 	mov	b,r7
   0015 12s00r00            137 	lcall	__gptrget
   0018 F5 82               138 	mov	dpl,a
   001A C0 05               139 	push	ar5
   001C C0 06               140 	push	ar6
   001E C0 07               141 	push	ar7
   0020 12s00r00            142 	lcall	_isspace
   0023 E5 82               143 	mov	a,dpl
   0025 D0 07               144 	pop	ar7
   0027 D0 06               145 	pop	ar6
   0029 D0 05               146 	pop	ar5
   002B 60 07               147 	jz	00148$
   002D 0D                  148 	inc	r5
   002E BD 00 DE            149 	cjne	r5,#0x00,00101$
   0031 0E                  150 	inc	r6
   0032 80 DB               151 	sjmp	00101$
   0034                     152 00148$:
   0034 8D*00               153 	mov	_atof_s_1_1,r5
   0036 8E*01               154 	mov	(_atof_s_1_1 + 1),r6
   0038 8F*02               155 	mov	(_atof_s_1_1 + 2),r7
                            156 ;	_atof.c:43: if (*s == '-')
   003A 8D 82               157 	mov	dpl,r5
   003C 8E 83               158 	mov	dph,r6
   003E 8F F0               159 	mov	b,r7
   0040 12s00r00            160 	lcall	__gptrget
   0043 F8                  161 	mov	r0,a
   0044 B8 2D 0F            162 	cjne	r0,#0x2D,00107$
                            163 ;	_atof.c:45: sign=1;
   0047 D2*00               164 	setb	_atof_sign_1_1
                            165 ;	_atof.c:46: s++;
   0049 74 01               166 	mov	a,#0x01
   004B 2D                  167 	add	a,r5
   004C F5*00               168 	mov	_atof_s_1_1,a
   004E E4                  169 	clr	a
   004F 3E                  170 	addc	a,r6
   0050 F5*01               171 	mov	(_atof_s_1_1 + 1),a
   0052 8F*02               172 	mov	(_atof_s_1_1 + 2),r7
   0054 80 10               173 	sjmp	00108$
   0056                     174 00107$:
                            175 ;	_atof.c:50: sign=0;
   0056 C2*00               176 	clr	_atof_sign_1_1
                            177 ;	_atof.c:51: if (*s == '+') s++;
   0058 B8 2B 0B            178 	cjne	r0,#0x2B,00108$
   005B 74 01               179 	mov	a,#0x01
   005D 2D                  180 	add	a,r5
   005E F5*00               181 	mov	_atof_s_1_1,a
   0060 E4                  182 	clr	a
   0061 3E                  183 	addc	a,r6
   0062 F5*01               184 	mov	(_atof_s_1_1 + 1),a
   0064 8F*02               185 	mov	(_atof_s_1_1 + 2),r7
   0066                     186 00108$:
                            187 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
   0066 E4                  188 	clr	a
   0067 F5*03               189 	mov	_atof_value_1_1,a
   0069 F5*04               190 	mov	(_atof_value_1_1 + 1),a
   006B F5*05               191 	mov	(_atof_value_1_1 + 2),a
   006D F5*06               192 	mov	(_atof_value_1_1 + 3),a
   006F 85*00*0B            193 	mov	_atof_sloc0_1_0,_atof_s_1_1
   0072 85*01*0C            194 	mov	(_atof_sloc0_1_0 + 1),(_atof_s_1_1 + 1)
   0075 85*02*0D            195 	mov	(_atof_sloc0_1_0 + 2),(_atof_s_1_1 + 2)
   0078                     196 00121$:
   0078 85*0B 82            197 	mov	dpl,_atof_sloc0_1_0
   007B 85*0C 83            198 	mov	dph,(_atof_sloc0_1_0 + 1)
   007E 85*0D F0            199 	mov	b,(_atof_sloc0_1_0 + 2)
   0081 12s00r00            200 	lcall	__gptrget
   0084 F5 82               201 	mov	dpl,a
   0086 12s00r00            202 	lcall	_isdigit
   0089 E5 82               203 	mov	a,dpl
   008B 60 7B               204 	jz	00149$
                            205 ;	_atof.c:57: value=10.0*value+(*s-'0');
   008D C0*03               206 	push	_atof_value_1_1
   008F C0*04               207 	push	(_atof_value_1_1 + 1)
   0091 C0*05               208 	push	(_atof_value_1_1 + 2)
   0093 C0*06               209 	push	(_atof_value_1_1 + 3)
   0095 90 00 00            210 	mov	dptr,#0x0000
   0098 75 F0 20            211 	mov	b,#0x20
   009B 74 41               212 	mov	a,#0x41
   009D 12s00r00            213 	lcall	___fsmul
   00A0 85 82*0E            214 	mov	_atof_sloc1_1_0,dpl
   00A3 85 83*0F            215 	mov	(_atof_sloc1_1_0 + 1),dph
   00A6 85 F0*10            216 	mov	(_atof_sloc1_1_0 + 2),b
   00A9 F5*11               217 	mov	(_atof_sloc1_1_0 + 3),a
   00AB E5 81               218 	mov	a,sp
   00AD 24 FC               219 	add	a,#0xfc
   00AF F5 81               220 	mov	sp,a
   00B1 85*0B 82            221 	mov	dpl,_atof_sloc0_1_0
   00B4 85*0C 83            222 	mov	dph,(_atof_sloc0_1_0 + 1)
   00B7 85*0D F0            223 	mov	b,(_atof_sloc0_1_0 + 2)
   00BA 12s00r00            224 	lcall	__gptrget
   00BD FA                  225 	mov	r2,a
   00BE A3                  226 	inc	dptr
   00BF 85 82*0B            227 	mov	_atof_sloc0_1_0,dpl
   00C2 85 83*0C            228 	mov	(_atof_sloc0_1_0 + 1),dph
   00C5 EA                  229 	mov	a,r2
   00C6 33                  230 	rlc	a
   00C7 95 E0               231 	subb	a,acc
   00C9 FB                  232 	mov	r3,a
   00CA EA                  233 	mov	a,r2
   00CB 24 D0               234 	add	a,#0xd0
   00CD F5 82               235 	mov	dpl,a
   00CF EB                  236 	mov	a,r3
   00D0 34 FF               237 	addc	a,#0xff
   00D2 F5 83               238 	mov	dph,a
   00D4 12s00r00            239 	lcall	___sint2fs
   00D7 AA 82               240 	mov	r2,dpl
   00D9 AB 83               241 	mov	r3,dph
   00DB AC F0               242 	mov	r4,b
   00DD F9                  243 	mov	r1,a
   00DE C0 02               244 	push	ar2
   00E0 C0 03               245 	push	ar3
   00E2 C0 04               246 	push	ar4
   00E4 C0 01               247 	push	ar1
   00E6 85*0E 82            248 	mov	dpl,_atof_sloc1_1_0
   00E9 85*0F 83            249 	mov	dph,(_atof_sloc1_1_0 + 1)
   00EC 85*10 F0            250 	mov	b,(_atof_sloc1_1_0 + 2)
   00EF E5*11               251 	mov	a,(_atof_sloc1_1_0 + 3)
   00F1 12s00r00            252 	lcall	___fsadd
   00F4 85 82*03            253 	mov	_atof_value_1_1,dpl
   00F7 85 83*04            254 	mov	(_atof_value_1_1 + 1),dph
   00FA 85 F0*05            255 	mov	(_atof_value_1_1 + 2),b
   00FD F5*06               256 	mov	(_atof_value_1_1 + 3),a
   00FF E5 81               257 	mov	a,sp
   0101 24 FC               258 	add	a,#0xfc
   0103 F5 81               259 	mov	sp,a
                            260 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
   0105 02s00r78            261 	ljmp	00121$
   0108                     262 00149$:
   0108 85*0B*00            263 	mov	_atof_s_1_1,_atof_sloc0_1_0
   010B 85*0C*01            264 	mov	(_atof_s_1_1 + 1),(_atof_sloc0_1_0 + 1)
   010E 85*0D*02            265 	mov	(_atof_s_1_1 + 2),(_atof_sloc0_1_0 + 2)
                            266 ;	_atof.c:61: if (*s == '.')
   0111 85*0B 82            267 	mov	dpl,_atof_sloc0_1_0
   0114 85*0C 83            268 	mov	dph,(_atof_sloc0_1_0 + 1)
   0117 85*0D F0            269 	mov	b,(_atof_sloc0_1_0 + 2)
   011A 12s00r00            270 	lcall	__gptrget
   011D FA                  271 	mov	r2,a
   011E BA 2E 02            272 	cjne	r2,#0x2E,00157$
   0121 80 03               273 	sjmp	00158$
   0123                     274 00157$:
   0123 02s02r0E            275 	ljmp	00110$
   0126                     276 00158$:
                            277 ;	_atof.c:63: s++;
   0126 74 01               278 	mov	a,#0x01
   0128 25*0B               279 	add	a,_atof_sloc0_1_0
   012A F5*00               280 	mov	_atof_s_1_1,a
   012C E4                  281 	clr	a
   012D 35*0C               282 	addc	a,(_atof_sloc0_1_0 + 1)
   012F F5*01               283 	mov	(_atof_s_1_1 + 1),a
   0131 85*0D*02            284 	mov	(_atof_s_1_1 + 2),(_atof_sloc0_1_0 + 2)
                            285 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
   0134 75*07 CD            286 	mov	_atof_fraction_1_1,#0xCD
   0137 75*08 CC            287 	mov	(_atof_fraction_1_1 + 1),#0xCC
   013A 75*09 CC            288 	mov	(_atof_fraction_1_1 + 2),#0xCC
   013D 75*0A 3D            289 	mov	(_atof_fraction_1_1 + 3),#0x3D
   0140 AA*00               290 	mov	r2,_atof_s_1_1
   0142 AB*01               291 	mov	r3,(_atof_s_1_1 + 1)
   0144 AC*02               292 	mov	r4,(_atof_s_1_1 + 2)
   0146                     293 00125$:
   0146 8A 82               294 	mov	dpl,r2
   0148 8B 83               295 	mov	dph,r3
   014A 8C F0               296 	mov	b,r4
   014C 12s00r00            297 	lcall	__gptrget
   014F F5 82               298 	mov	dpl,a
   0151 C0 02               299 	push	ar2
   0153 C0 03               300 	push	ar3
   0155 C0 04               301 	push	ar4
   0157 12s00r00            302 	lcall	_isdigit
   015A E5 82               303 	mov	a,dpl
   015C D0 04               304 	pop	ar4
   015E D0 03               305 	pop	ar3
   0160 D0 02               306 	pop	ar2
   0162 70 03               307 	jnz	00159$
   0164 02s02r08            308 	ljmp	00150$
   0167                     309 00159$:
                            310 ;	_atof.c:66: value+=(*s-'0')*fraction;
   0167 8A 82               311 	mov	dpl,r2
   0169 8B 83               312 	mov	dph,r3
   016B 8C F0               313 	mov	b,r4
   016D 12s00r00            314 	lcall	__gptrget
   0170 F9                  315 	mov	r1,a
   0171 A3                  316 	inc	dptr
   0172 AA 82               317 	mov	r2,dpl
   0174 AB 83               318 	mov	r3,dph
   0176 E9                  319 	mov	a,r1
   0177 33                  320 	rlc	a
   0178 95 E0               321 	subb	a,acc
   017A FD                  322 	mov	r5,a
   017B E9                  323 	mov	a,r1
   017C 24 D0               324 	add	a,#0xd0
   017E F5 82               325 	mov	dpl,a
   0180 ED                  326 	mov	a,r5
   0181 34 FF               327 	addc	a,#0xff
   0183 F5 83               328 	mov	dph,a
   0185 C0 02               329 	push	ar2
   0187 C0 03               330 	push	ar3
   0189 C0 04               331 	push	ar4
   018B 12s00r00            332 	lcall	___sint2fs
   018E AD 82               333 	mov	r5,dpl
   0190 AE 83               334 	mov	r6,dph
   0192 AF F0               335 	mov	r7,b
   0194 F8                  336 	mov	r0,a
   0195 C0*07               337 	push	_atof_fraction_1_1
   0197 C0*08               338 	push	(_atof_fraction_1_1 + 1)
   0199 C0*09               339 	push	(_atof_fraction_1_1 + 2)
   019B C0*0A               340 	push	(_atof_fraction_1_1 + 3)
   019D 8D 82               341 	mov	dpl,r5
   019F 8E 83               342 	mov	dph,r6
   01A1 8F F0               343 	mov	b,r7
   01A3 E8                  344 	mov	a,r0
   01A4 12s00r00            345 	lcall	___fsmul
   01A7 AD 82               346 	mov	r5,dpl
   01A9 AE 83               347 	mov	r6,dph
   01AB AF F0               348 	mov	r7,b
   01AD F8                  349 	mov	r0,a
   01AE E5 81               350 	mov	a,sp
   01B0 24 FC               351 	add	a,#0xfc
   01B2 F5 81               352 	mov	sp,a
   01B4 C0 05               353 	push	ar5
   01B6 C0 06               354 	push	ar6
   01B8 C0 07               355 	push	ar7
   01BA C0 00               356 	push	ar0
   01BC 85*03 82            357 	mov	dpl,_atof_value_1_1
   01BF 85*04 83            358 	mov	dph,(_atof_value_1_1 + 1)
   01C2 85*05 F0            359 	mov	b,(_atof_value_1_1 + 2)
   01C5 E5*06               360 	mov	a,(_atof_value_1_1 + 3)
   01C7 12s00r00            361 	lcall	___fsadd
   01CA 85 82*03            362 	mov	_atof_value_1_1,dpl
   01CD 85 83*04            363 	mov	(_atof_value_1_1 + 1),dph
   01D0 85 F0*05            364 	mov	(_atof_value_1_1 + 2),b
   01D3 F5*06               365 	mov	(_atof_value_1_1 + 3),a
   01D5 E5 81               366 	mov	a,sp
   01D7 24 FC               367 	add	a,#0xfc
   01D9 F5 81               368 	mov	sp,a
                            369 ;	_atof.c:67: fraction*=0.1;
   01DB C0*07               370 	push	_atof_fraction_1_1
   01DD C0*08               371 	push	(_atof_fraction_1_1 + 1)
   01DF C0*09               372 	push	(_atof_fraction_1_1 + 2)
   01E1 C0*0A               373 	push	(_atof_fraction_1_1 + 3)
   01E3 90 CC CD            374 	mov	dptr,#0xCCCD
   01E6 75 F0 CC            375 	mov	b,#0xCC
   01E9 74 3D               376 	mov	a,#0x3D
   01EB 12s00r00            377 	lcall	___fsmul
   01EE 85 82*07            378 	mov	_atof_fraction_1_1,dpl
   01F1 85 83*08            379 	mov	(_atof_fraction_1_1 + 1),dph
   01F4 85 F0*09            380 	mov	(_atof_fraction_1_1 + 2),b
   01F7 F5*0A               381 	mov	(_atof_fraction_1_1 + 3),a
   01F9 E5 81               382 	mov	a,sp
   01FB 24 FC               383 	add	a,#0xfc
   01FD F5 81               384 	mov	sp,a
   01FF D0 04               385 	pop	ar4
   0201 D0 03               386 	pop	ar3
   0203 D0 02               387 	pop	ar2
                            388 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
   0205 02s01r46            389 	ljmp	00125$
   0208                     390 00150$:
   0208 8A*00               391 	mov	_atof_s_1_1,r2
   020A 8B*01               392 	mov	(_atof_s_1_1 + 1),r3
   020C 8C*02               393 	mov	(_atof_s_1_1 + 2),r4
   020E                     394 00110$:
                            395 ;	_atof.c:72: if (toupper(*s)=='E')
   020E 85*00 82            396 	mov	dpl,_atof_s_1_1
   0211 85*01 83            397 	mov	dph,(_atof_s_1_1 + 1)
   0214 85*02 F0            398 	mov	b,(_atof_s_1_1 + 2)
   0217 12s00r00            399 	lcall	__gptrget
   021A F5 82               400 	mov	dpl,a
   021C 12s00r00            401 	lcall	_islower
   021F E5 82               402 	mov	a,dpl
   0221 60 12               403 	jz	00131$
   0223 85*00 82            404 	mov	dpl,_atof_s_1_1
   0226 85*01 83            405 	mov	dph,(_atof_s_1_1 + 1)
   0229 85*02 F0            406 	mov	b,(_atof_s_1_1 + 2)
   022C 12s00r00            407 	lcall	__gptrget
   022F FA                  408 	mov	r2,a
   0230 53 02 DF            409 	anl	ar2,#0xDF
   0233 80 0D               410 	sjmp	00132$
   0235                     411 00131$:
   0235 85*00 82            412 	mov	dpl,_atof_s_1_1
   0238 85*01 83            413 	mov	dph,(_atof_s_1_1 + 1)
   023B 85*02 F0            414 	mov	b,(_atof_s_1_1 + 2)
   023E 12s00r00            415 	lcall	__gptrget
   0241 FA                  416 	mov	r2,a
   0242                     417 00132$:
   0242 BA 45 75            418 	cjne	r2,#0x45,00118$
                            419 ;	_atof.c:74: s++;
   0245 05*00               420 	inc	_atof_s_1_1
   0247 E4                  421 	clr	a
   0248 B5*00 02            422 	cjne	a,_atof_s_1_1,00163$
   024B 05*01               423 	inc	(_atof_s_1_1 + 1)
   024D                     424 00163$:
                            425 ;	_atof.c:75: iexp=(signed char)atoi(s);
   024D 85*00 82            426 	mov	dpl,_atof_s_1_1
   0250 85*01 83            427 	mov	dph,(_atof_s_1_1 + 1)
   0253 85*02 F0            428 	mov	b,(_atof_s_1_1 + 2)
   0256 12s00r00            429 	lcall	_atoi
   0259 AA 82               430 	mov	r2,dpl
   025B AB 83               431 	mov	r3,dph
                            432 ;	_atof.c:77: while(iexp!=0)
   025D                     433 00114$:
   025D EA                  434 	mov	a,r2
   025E 60 5A               435 	jz	00118$
                            436 ;	_atof.c:79: if(iexp<0)
   0260 EA                  437 	mov	a,r2
   0261 30 E7 2B            438 	jnb	acc.7,00112$
                            439 ;	_atof.c:81: value*=0.1;
   0264 C0 02               440 	push	ar2
   0266 C0*03               441 	push	_atof_value_1_1
   0268 C0*04               442 	push	(_atof_value_1_1 + 1)
   026A C0*05               443 	push	(_atof_value_1_1 + 2)
   026C C0*06               444 	push	(_atof_value_1_1 + 3)
   026E 90 CC CD            445 	mov	dptr,#0xCCCD
   0271 75 F0 CC            446 	mov	b,#0xCC
   0274 74 3D               447 	mov	a,#0x3D
   0276 12s00r00            448 	lcall	___fsmul
   0279 85 82*03            449 	mov	_atof_value_1_1,dpl
   027C 85 83*04            450 	mov	(_atof_value_1_1 + 1),dph
   027F 85 F0*05            451 	mov	(_atof_value_1_1 + 2),b
   0282 F5*06               452 	mov	(_atof_value_1_1 + 3),a
   0284 E5 81               453 	mov	a,sp
   0286 24 FC               454 	add	a,#0xfc
   0288 F5 81               455 	mov	sp,a
   028A D0 02               456 	pop	ar2
                            457 ;	_atof.c:82: iexp++;
   028C 0A                  458 	inc	r2
   028D 80 CE               459 	sjmp	00114$
   028F                     460 00112$:
                            461 ;	_atof.c:86: value*=10.0;
   028F C0 02               462 	push	ar2
   0291 C0*03               463 	push	_atof_value_1_1
   0293 C0*04               464 	push	(_atof_value_1_1 + 1)
   0295 C0*05               465 	push	(_atof_value_1_1 + 2)
   0297 C0*06               466 	push	(_atof_value_1_1 + 3)
   0299 90 00 00            467 	mov	dptr,#0x0000
   029C 75 F0 20            468 	mov	b,#0x20
   029F 74 41               469 	mov	a,#0x41
   02A1 12s00r00            470 	lcall	___fsmul
   02A4 85 82*03            471 	mov	_atof_value_1_1,dpl
   02A7 85 83*04            472 	mov	(_atof_value_1_1 + 1),dph
   02AA 85 F0*05            473 	mov	(_atof_value_1_1 + 2),b
   02AD F5*06               474 	mov	(_atof_value_1_1 + 3),a
   02AF E5 81               475 	mov	a,sp
   02B1 24 FC               476 	add	a,#0xfc
   02B3 F5 81               477 	mov	sp,a
   02B5 D0 02               478 	pop	ar2
                            479 ;	_atof.c:87: iexp--;
   02B7 1A                  480 	dec	r2
   02B8 80 A3               481 	sjmp	00114$
   02BA                     482 00118$:
                            483 ;	_atof.c:93: if(sign) value*=-1.0;
   02BA 30*00 06            484 	jnb	_atof_sign_1_1,00120$
   02BD E5*06               485 	mov	a,(_atof_value_1_1 + 3)
   02BF B2 E7               486 	cpl	acc.7
   02C1 F5*06               487 	mov	(_atof_value_1_1 + 3),a
   02C3                     488 00120$:
                            489 ;	_atof.c:94: return (value);
   02C3 85*03 82            490 	mov	dpl,_atof_value_1_1
   02C6 85*04 83            491 	mov	dph,(_atof_value_1_1 + 1)
   02C9 85*05 F0            492 	mov	b,(_atof_value_1_1 + 2)
   02CC E5*06               493 	mov	a,(_atof_value_1_1 + 3)
   02CE 22                  494 	ret
                            495 	.area CSEG    (CODE)
                            496 	.area CONST   (CODE)
                            497 	.area XINIT   (CODE)
                            498 	.area CABS    (ABS,CODE)
