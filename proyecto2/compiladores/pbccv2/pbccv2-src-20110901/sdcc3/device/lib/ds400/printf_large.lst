                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:20 2015
                              5 ;--------------------------------------------------------
                              6 	.module printf_large
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl __print_format_PARM_4
                             31 	.globl __print_format_PARM_3
                             32 	.globl __print_format_PARM_2
                             33 	.globl _output_float_PARM_3
                             34 	.globl _output_float_PARM_2
                             35 	.globl _output_float_PARM_7
                             36 	.globl _output_float_PARM_6
                             37 	.globl _output_float_PARM_5
                             38 	.globl _output_float_PARM_4
                             39 	.globl __print_format
                             40 ;--------------------------------------------------------
                             41 ; special function registers
                             42 ;--------------------------------------------------------
                    0080     43 _P4	=	0x0080
                    0081     44 _SP	=	0x0081
                    0082     45 _DPL	=	0x0082
                    0083     46 _DPH	=	0x0083
                    0084     47 _DPL1	=	0x0084
                    0085     48 _DPH1	=	0x0085
                    0086     49 _DPS	=	0x0086
                    0087     50 _PCON	=	0x0087
                    0088     51 _TCON	=	0x0088
                    0089     52 _TMOD	=	0x0089
                    008A     53 _TL0	=	0x008a
                    008B     54 _TL1	=	0x008b
                    008C     55 _TH0	=	0x008c
                    008D     56 _TH1	=	0x008d
                    008E     57 _CKCON	=	0x008e
                    0090     58 _P1	=	0x0090
                    0091     59 _EXIF	=	0x0091
                    0092     60 _P4CNT	=	0x0092
                    0093     61 _DPX	=	0x0093
                    0095     62 _DPX1	=	0x0095
                    0098     63 _SCON0	=	0x0098
                    0099     64 _SBUF0	=	0x0099
                    009B     65 _ESP	=	0x009b
                    009C     66 _AP	=	0x009c
                    009D     67 _ACON	=	0x009d
                    00A0     68 _P2	=	0x00a0
                    00A1     69 _P5	=	0x00a1
                    00A2     70 _P5CNT	=	0x00a2
                    00A8     71 _IE	=	0x00a8
                    00B0     72 _P3	=	0x00b0
                    00B8     73 _IP	=	0x00b8
                    00C0     74 _SCON1	=	0x00c0
                    00C1     75 _SBUF1	=	0x00c1
                    00C4     76 _PMR	=	0x00c4
                    00C6     77 _MCON	=	0x00c6
                    00C7     78 _TA	=	0x00c7
                    00C8     79 _T2CON	=	0x00c8
                    00C9     80 _T2MOD	=	0x00c9
                    00CA     81 _RCAP2L	=	0x00ca
                    00CA     82 _RTL2	=	0x00ca
                    00CB     83 _RCAP2H	=	0x00cb
                    00CB     84 _RTH2	=	0x00cb
                    00CC     85 _TL2	=	0x00cc
                    00CD     86 _TH2	=	0x00cd
                    00D0     87 _PSW	=	0x00d0
                    00D1     88 _MCNT0	=	0x00d1
                    00D2     89 _MCNT1	=	0x00d2
                    00D3     90 _MA	=	0x00d3
                    00D4     91 _MB	=	0x00d4
                    00D5     92 _MC	=	0x00d5
                    00D8     93 _WDCON	=	0x00d8
                    00E0     94 _ACC	=	0x00e0
                    00E8     95 _EIE	=	0x00e8
                    00EA     96 _MXAX	=	0x00ea
                    00F0     97 _B	=	0x00f0
                    00F8     98 _EIP	=	0x00f8
                    8C8A     99 _TMR0	=	0x8c8a
                    8D8B    100 _TMR1	=	0x8d8b
                    CDCC    101 _TMR2	=	0xcdcc
                    CBCA    102 _RCAP2	=	0xcbca
                            103 ;--------------------------------------------------------
                            104 ; special function bits
                            105 ;--------------------------------------------------------
                    0088    106 _IT0	=	0x0088
                    0089    107 _IE0	=	0x0089
                    008A    108 _IT1	=	0x008a
                    008B    109 _IE1	=	0x008b
                    008C    110 _TR0	=	0x008c
                    008D    111 _TF0	=	0x008d
                    008E    112 _TR1	=	0x008e
                    008F    113 _TF1	=	0x008f
                    0090    114 _T2	=	0x0090
                    0091    115 _T2EX	=	0x0091
                    0092    116 _RXD1	=	0x0092
                    0093    117 _TXD1	=	0x0093
                    0094    118 _INT2	=	0x0094
                    0095    119 _INT3	=	0x0095
                    0096    120 _INT4	=	0x0096
                    0097    121 _INT5	=	0x0097
                    0098    122 _RI_0	=	0x0098
                    0099    123 _TI_0	=	0x0099
                    009A    124 _RB8_0	=	0x009a
                    009B    125 _TB8_0	=	0x009b
                    009C    126 _REN_0	=	0x009c
                    009D    127 _SM2_0	=	0x009d
                    009E    128 _SM1_0	=	0x009e
                    009F    129 _SM0_0	=	0x009f
                    009F    130 _FE_0	=	0x009f
                    00A8    131 _EX0	=	0x00a8
                    00A9    132 _ET0	=	0x00a9
                    00AA    133 _EX1	=	0x00aa
                    00AB    134 _ET1	=	0x00ab
                    00AC    135 _ES0	=	0x00ac
                    00AD    136 _ET2	=	0x00ad
                    00AE    137 _ES1	=	0x00ae
                    00AF    138 _EA	=	0x00af
                    00B0    139 _RXD0	=	0x00b0
                    00B1    140 _TXD0	=	0x00b1
                    00B2    141 _INT0	=	0x00b2
                    00B3    142 _INT1	=	0x00b3
                    00B4    143 _T0	=	0x00b4
                    00B5    144 _T1	=	0x00b5
                    00B6    145 _WR	=	0x00b6
                    00B7    146 _RD	=	0x00b7
                    00B8    147 _PX0	=	0x00b8
                    00B9    148 _PT0	=	0x00b9
                    00BA    149 _PX1	=	0x00ba
                    00BB    150 _PT1	=	0x00bb
                    00BC    151 _PS0	=	0x00bc
                    00BD    152 _PT2	=	0x00bd
                    00BE    153 _PS1	=	0x00be
                    00C0    154 _RI_1	=	0x00c0
                    00C1    155 _TI_1	=	0x00c1
                    00C2    156 _RB8_1	=	0x00c2
                    00C3    157 _TB8_1	=	0x00c3
                    00C4    158 _REN_1	=	0x00c4
                    00C5    159 _SM2_1	=	0x00c5
                    00C6    160 _SM1_1	=	0x00c6
                    00C7    161 _SM0_1	=	0x00c7
                    00C7    162 _FE_1	=	0x00c7
                    00C8    163 _CP_RL	=	0x00c8
                    00C9    164 _C_T	=	0x00c9
                    00CA    165 _TR2	=	0x00ca
                    00CB    166 _EXEN2	=	0x00cb
                    00CC    167 _TCLK	=	0x00cc
                    00CD    168 _RCLK	=	0x00cd
                    00CE    169 _EXF2	=	0x00ce
                    00CF    170 _TF2	=	0x00cf
                    00D0    171 _P	=	0x00d0
                    00D1    172 _F1	=	0x00d1
                    00D2    173 _OV	=	0x00d2
                    00D3    174 _RS0	=	0x00d3
                    00D4    175 _RS1	=	0x00d4
                    00D5    176 _F0	=	0x00d5
                    00D6    177 _AC	=	0x00d6
                    00D7    178 _CY	=	0x00d7
                    00D8    179 _RWT	=	0x00d8
                    00D9    180 _EWT	=	0x00d9
                    00DA    181 _WDRF	=	0x00da
                    00DB    182 _WDIF	=	0x00db
                    00DC    183 _PFI	=	0x00dc
                    00DD    184 _EPFI	=	0x00dd
                    00DE    185 _POR	=	0x00de
                    00DF    186 _SMOD_1	=	0x00df
                    00E8    187 _EX2	=	0x00e8
                    00E9    188 _EX3	=	0x00e9
                    00EA    189 _EX4	=	0x00ea
                    00EB    190 _EX5	=	0x00eb
                    00EC    191 _EWDI	=	0x00ec
                    00ED    192 _C1IE	=	0x00ed
                    00EE    193 _C0IE	=	0x00ee
                    00EF    194 _CANBIE	=	0x00ef
                    00F8    195 _PX2	=	0x00f8
                    00F9    196 _PX3	=	0x00f9
                    00FA    197 _PX4	=	0x00fa
                    00FB    198 _PX5	=	0x00fb
                    00FC    199 _PWDI	=	0x00fc
                    00FD    200 _C1IP	=	0x00fd
                    00FE    201 _C0IP	=	0x00fe
                    00FF    202 _CANBIP	=	0x00ff
                            203 ;--------------------------------------------------------
                            204 ; overlayable register banks
                            205 ;--------------------------------------------------------
                            206 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     207 	.ds 8
                            208 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                     209 	.ds 8
                            210 ;--------------------------------------------------------
                            211 ; internal ram data
                            212 ;--------------------------------------------------------
                            213 	.area DSEG    (DATA)
                            214 ;--------------------------------------------------------
                            215 ; overlayable items in internal ram 
                            216 ;--------------------------------------------------------
                            217 	.area	OSEG    (OVR,DATA)
                            218 ;--------------------------------------------------------
                            219 ; indirectly addressable internal ram data
                            220 ;--------------------------------------------------------
                            221 	.area ISEG    (DATA)
                            222 ;--------------------------------------------------------
                            223 ; absolute internal ram data
                            224 ;--------------------------------------------------------
                            225 	.area IABS    (ABS,DATA)
                            226 	.area IABS    (ABS,DATA)
                            227 ;--------------------------------------------------------
                            228 ; bit data
                            229 ;--------------------------------------------------------
                            230 	.area BSEG    (BIT)
   0000                     231 _lower_case:
   0000                     232 	.ds 1
   0001                     233 _output_float_PARM_4:
   0001                     234 	.ds 1
   0002                     235 _output_float_PARM_5:
   0002                     236 	.ds 1
   0003                     237 _output_float_PARM_6:
   0003                     238 	.ds 1
   0004                     239 _output_float_PARM_7:
   0004                     240 	.ds 1
   0005                     241 _output_float_negative_1_1:
   0005                     242 	.ds 1
   0006                     243 __print_format_left_justify_1_1:
   0006                     244 	.ds 1
   0007                     245 __print_format_zero_padding_1_1:
   0007                     246 	.ds 1
   0008                     247 __print_format_prefix_sign_1_1:
   0008                     248 	.ds 1
   0009                     249 __print_format_prefix_space_1_1:
   0009                     250 	.ds 1
   000A                     251 __print_format_signed_argument_1_1:
   000A                     252 	.ds 1
   000B                     253 __print_format_char_argument_1_1:
   000B                     254 	.ds 1
   000C                     255 __print_format_long_argument_1_1:
   000C                     256 	.ds 1
   000D                     257 __print_format_float_argument_1_1:
   000D                     258 	.ds 1
   000E                     259 __print_format_lsd_1_1:
   000E                     260 	.ds 1
                            261 ;--------------------------------------------------------
                            262 ; paged external ram data
                            263 ;--------------------------------------------------------
                            264 	.area PSEG    (PAG,XDATA)
                            265 ;--------------------------------------------------------
                            266 ; external ram data
                            267 ;--------------------------------------------------------
                            268 	.area XSEG    (XDATA)
   0000                     269 _output_char:
   0000                     270 	.ds 3
   0003                     271 _p:
   0003                     272 	.ds 4
   0007                     273 _value:
   0007                     274 	.ds 5
   000C                     275 _charsOutputted:
   000C                     276 	.ds 2
   000E                     277 _output_float_PARM_2:
   000E                     278 	.ds 1
   000F                     279 _output_float_PARM_3:
   000F                     280 	.ds 1
   0010                     281 _output_float_f_1_1:
   0010                     282 	.ds 4
   0014                     283 _output_float_fpBuffer_1_1:
   0014                     284 	.ds 128
   0094                     285 _output_float_integerPart_1_1:
   0094                     286 	.ds 4
   0098                     287 _output_float_rounding_1_1:
   0098                     288 	.ds 4
   009C                     289 _output_float_decimalPart_1_1:
   009C                     290 	.ds 4
   00A0                     291 __print_format_PARM_2:
   00A0                     292 	.ds 4
   00A4                     293 __print_format_PARM_3:
   00A4                     294 	.ds 4
   00A8                     295 __print_format_PARM_4:
   00A8                     296 	.ds 4
   00AC                     297 __print_format_radix_1_1:
   00AC                     298 	.ds 1
   00AD                     299 __print_format_width_1_1:
   00AD                     300 	.ds 1
   00AE                     301 __print_format_length_1_1:
   00AE                     302 	.ds 1
   00AF                     303 __print_format_store_4_23:
   00AF                     304 	.ds 6
   00B5                     305 __print_format_pstore_4_23:
   00B5                     306 	.ds 3
                            307 ;--------------------------------------------------------
                            308 ; absolute external ram data
                            309 ;--------------------------------------------------------
                            310 	.area XABS    (ABS,XDATA)
                            311 ;--------------------------------------------------------
                            312 ; external initialized ram data
                            313 ;--------------------------------------------------------
                            314 	.area XISEG   (XDATA)
                            315 ;--------------------------------------------------------
                            316 ; global & static initialisations
                            317 ;--------------------------------------------------------
                            318 	.area HOME    (CODE)
                            319 	.area GSINIT  (CODE)
                            320 	.area GSFINAL (CODE)
                            321 	.area GSINIT  (CODE)
                            322 ;--------------------------------------------------------
                            323 ; Home
                            324 ;--------------------------------------------------------
                            325 	.area HOME    (CODE)
                            326 	.area HOME    (CODE)
                            327 ;--------------------------------------------------------
                            328 ; code
                            329 ;--------------------------------------------------------
                            330 	.area CSEG    (CODE)
                            331 ;------------------------------------------------------------
                            332 ;Allocation info for local variables in function '_output_char'
                            333 ;------------------------------------------------------------
                            334 ;c                         Allocated to registers r2 
                            335 ;------------------------------------------------------------
                            336 ;	printf_large.c:105: _output_char (unsigned char c)
                            337 ;	-----------------------------------------
                            338 ;	 function _output_char
                            339 ;	-----------------------------------------
   0000                     340 __output_char:
                    0002    341 	ar2 = 0x02
                    0003    342 	ar3 = 0x03
                    0004    343 	ar4 = 0x04
                    0005    344 	ar5 = 0x05
                    0006    345 	ar6 = 0x06
                    0007    346 	ar7 = 0x07
                    0000    347 	ar0 = 0x00
                    0001    348 	ar1 = 0x01
   0000 AA 82               349 	mov	r2,dpl
                            350 ;	printf_large.c:107: output_char( c, p );
   0002 90s00r00r03         351 	mov	dptr,#_p
   0006 E0                  352 	movx	a,@dptr
   0007 C0 E0               353 	push	acc
   0009 A3                  354 	inc	dptr
   000A E0                  355 	movx	a,@dptr
   000B C0 E0               356 	push	acc
   000D A3                  357 	inc	dptr
   000E E0                  358 	movx	a,@dptr
   000F C0 E0               359 	push	acc
   0011 A3                  360 	inc	dptr
   0012 E0                  361 	movx	a,@dptr
   0013 C0 E0               362 	push	acc
   0015 74r33               363 	mov	a,#00103$
   0017 C0 E0               364 	push	acc
   0019 74s00               365 	mov	a,#(00103$ >> 8)
   001B C0 E0               366 	push	acc
   001D 74s00               367 	mov	a,#(00103$ >> 16)
   001F C0 E0               368 	push	acc
   0021 90s00r00r00         369 	mov	dptr,#_output_char
   0025 E0                  370 	movx	a,@dptr
   0026 C0 E0               371 	push	acc
   0028 A3                  372 	inc	dptr
   0029 E0                  373 	movx	a,@dptr
   002A C0 E0               374 	push	acc
   002C A3                  375 	inc	dptr
   002D E0                  376 	movx	a,@dptr
   002E C0 E0               377 	push	acc
   0030 8A 82               378 	mov	dpl,r2
   0032 22                  379 	ret
   0033                     380 00103$:
                            381 ;	stack adjustment for parms
   0033 D0 E0               382 	pop	acc
   0035 D0 E0               383 	pop	acc
   0037 D0 E0               384 	pop	acc
   0039 D0 E0               385 	pop	acc
                            386 ;	printf_large.c:108: charsOutputted++;
   003B 90s00r00r0C         387 	mov	dptr,#_charsOutputted
   003F E0                  388 	movx	a,@dptr
   0040 24 01               389 	add	a,#0x01
   0042 F0                  390 	movx	@dptr,a
   0043 A3                  391 	inc	dptr
   0044 E0                  392 	movx	a,@dptr
   0045 34 00               393 	addc	a,#0x00
   0047 F0                  394 	movx	@dptr,a
   0048                     395 00101$:
   0048 22                  396 	ret
                            397 ;------------------------------------------------------------
                            398 ;Allocation info for local variables in function 'output_digit'
                            399 ;------------------------------------------------------------
                            400 ;c                         Allocated to registers r2 
                            401 ;n                         Allocated to registers r2 
                            402 ;------------------------------------------------------------
                            403 ;	printf_large.c:130: output_digit (unsigned char n)
                            404 ;	-----------------------------------------
                            405 ;	 function output_digit
                            406 ;	-----------------------------------------
   0049                     407 _output_digit:
   0049 AA 82               408 	mov	r2,dpl
                            409 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
   004B 74 30               410 	mov	a,#0x30
   004D 2A                  411 	add	a,r2
   004E FA                  412 	mov	r2,a
                            413 ;	printf_large.c:134: if (c > (unsigned char)'9')
   004F C3                  414 	clr	c
   0050 74 39               415 	mov	a,#0x39
   0052 9A                  416 	subb	a,r2
   0053 50 0A               417 	jnc  00104$
   0055                     418 00109$:
                            419 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
   0055 74 07               420 	mov	a,#0x07
   0057 2A                  421 	add	a,r2
   0058 FA                  422 	mov	r2,a
                            423 ;	printf_large.c:137: if (lower_case)
   0059 30*00 03            424 	jnb  _lower_case,00104$
   005C                     425 00110$:
                            426 ;	printf_large.c:138: c = tolower(c);
   005C 43 02 20            427 	orl	ar2,#0x20
   005F                     428 00104$:
                            429 ;	printf_large.c:140: _output_char( c );
   005F 8A 82               430 	mov	dpl,r2
   0061 12s00r00r00         431 	lcall	__output_char
   0065                     432 00105$:
   0065 22                  433 	ret
                            434 ;------------------------------------------------------------
                            435 ;Allocation info for local variables in function 'output_2digits'
                            436 ;------------------------------------------------------------
                            437 ;b                         Allocated to registers r2 
                            438 ;------------------------------------------------------------
                            439 ;	printf_large.c:157: output_2digits (unsigned char b)
                            440 ;	-----------------------------------------
                            441 ;	 function output_2digits
                            442 ;	-----------------------------------------
   0066                     443 _output_2digits:
   0066 AA 82               444 	mov	r2,dpl
                            445 ;	printf_large.c:159: output_digit( b>>4   );
   0068 EA                  446 	mov	a,r2
   0069 C4                  447 	swap	a
   006A 54 0F               448 	anl	a,#0x0F
   006C FB                  449 	mov	r3,a
   006D C0 02               450 	push	ar2
   006F 8B 82               451 	mov	dpl,r3
   0071 12s00r00r49         452 	lcall	_output_digit
   0075 D0 02               453 	pop	ar2
                            454 ;	printf_large.c:160: output_digit( b&0x0F );
   0077 53 02 0F            455 	anl	ar2,#0x0F
   007A 8A 82               456 	mov	dpl,r2
   007C 12s00r00r49         457 	lcall	_output_digit
   0080                     458 00101$:
   0080 22                  459 	ret
                            460 ;------------------------------------------------------------
                            461 ;Allocation info for local variables in function 'calculate_digit'
                            462 ;------------------------------------------------------------
                            463 ;radix                     Allocated to registers r2 
                            464 ;ul                        Allocated to registers r3 r4 r5 r6 
                            465 ;b4                        Allocated to registers r7 
                            466 ;i                         Allocated to registers r0 
                            467 ;------------------------------------------------------------
                            468 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                            469 ;	-----------------------------------------
                            470 ;	 function calculate_digit
                            471 ;	-----------------------------------------
   0081                     472 _calculate_digit:
   0081 AA 82               473 	mov	r2,dpl
                            474 ;	printf_large.c:191: register unsigned long ul = value.ul;
   0083 90s00r00r07         475 	mov	dptr,#_value
   0087 E0                  476 	movx	a,@dptr
   0088 A3                  477 	inc	dptr
   0089 FB                  478 	mov	r3,a
   008A E0                  479 	movx	a,@dptr
   008B A3                  480 	inc	dptr
   008C FC                  481 	mov	r4,a
   008D E0                  482 	movx	a,@dptr
   008E A3                  483 	inc	dptr
   008F FD                  484 	mov	r5,a
   0090 E0                  485 	movx	a,@dptr
   0091 FE                  486 	mov	r6,a
                            487 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
   0092 90s00r00r0B         488 	mov	dptr,#(_value + 0x000004)
   0096 E0                  489 	movx	a,@dptr
   0097 FF                  490 	mov	r7,a
                            491 ;	printf_large.c:195: do
                            492 ;	genAssign: resultIsFar = FALSE
   0098 78 20               493 	mov	r0,#0x20
   009A                     494 00103$:
                            495 ;	printf_large.c:197: b4 = (b4 << 1);
   009A EF                  496 	mov	a,r7
   009B 25 E0               497 	add	a,acc
   009D FF                  498 	mov	r7,a
                            499 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
   009E EE                  500 	mov	a,r6
   009F 23                  501 	rl	a
   00A0 54 01               502 	anl	a,#0x01
   00A2 F9                  503 	mov  r1,a
   00A3 42 07               504 	orl	ar7,a
                            505 ;	printf_large.c:199: ul <<= 1;
   00A5 75 F0 02            506 	mov	b,#0x02
   00A8 80 0D               507 	sjmp	00113$
   00AA                     508 00112$:
   00AA EB                  509 	mov	a,r3
   00AB 25 E0               510 	add	a,acc
   00AD FB                  511 	mov	r3,a
   00AE EC                  512 	mov	a,r4
   00AF 33                  513 	rlc	a
   00B0 FC                  514 	mov	r4,a
   00B1 ED                  515 	mov	a,r5
   00B2 33                  516 	rlc	a
   00B3 FD                  517 	mov	r5,a
   00B4 EE                  518 	mov	a,r6
   00B5 33                  519 	rlc	a
   00B6 FE                  520 	mov	r6,a
   00B7                     521 00113$:
   00B7 D5 F0 F0            522 	djnz	b,00112$
                            523 ;	printf_large.c:201: if (radix <= b4 )
   00BA C3                  524 	clr	c
   00BB EF                  525 	mov	a,r7
   00BC 9A                  526 	subb	a,r2
   00BD 40 07               527 	jc   00104$
   00BF                     528 00114$:
                            529 ;	printf_large.c:203: b4 -= radix;
   00BF C3                  530 	clr	c
   00C0 EF                  531 	mov	a,r7
   00C1 9A                  532 	subb	a,r2
   00C2 FF                  533 	mov	r7,a
                            534 ;	printf_large.c:204: ul |= 1;
   00C3 43 03 01            535 	orl	ar3,#0x01
   00C6                     536 00104$:
                            537 ;	printf_large.c:206: } while (--i);
   00C6 D8 D2               538 	djnz  r0,00103$
   00C8                     539 00115$:
   00C8                     540 00116$:
                            541 ;	printf_large.c:207: value.ul = ul;
   00C8 90s00r00r07         542 	mov	dptr,#_value
   00CC EB                  543 	mov	a,r3
   00CD F0                  544 	movx	@dptr,a
   00CE A3                  545 	inc	dptr
   00CF EC                  546 	mov	a,r4
   00D0 F0                  547 	movx	@dptr,a
   00D1 A3                  548 	inc	dptr
   00D2 ED                  549 	mov	a,r5
   00D3 F0                  550 	movx	@dptr,a
   00D4 A3                  551 	inc	dptr
   00D5 EE                  552 	mov	a,r6
   00D6 F0                  553 	movx	@dptr,a
                            554 ;	printf_large.c:208: value.byte[4] = b4;
   00D7 90s00r00r0B         555 	mov	dptr,#(_value + 0x000004)
   00DB EF                  556 	mov	a,r7
   00DC F0                  557 	movx	@dptr,a
   00DD                     558 00106$:
   00DD 22                  559 	ret
                            560 ;------------------------------------------------------------
                            561 ;Allocation info for local variables in function 'output_float'
                            562 ;------------------------------------------------------------
                            563 ;reqWidth                  Allocated with name '_output_float_PARM_2'
                            564 ;reqDecimals               Allocated with name '_output_float_PARM_3'
                            565 ;f                         Allocated with name '_output_float_f_1_1'
                            566 ;fpBuffer                  Allocated with name '_output_float_fpBuffer_1_1'
                            567 ;integerPart               Allocated with name '_output_float_integerPart_1_1'
                            568 ;rounding                  Allocated with name '_output_float_rounding_1_1'
                            569 ;decimalPart               Allocated with name '_output_float_decimalPart_1_1'
                            570 ;fpBI                      Allocated to registers r6 
                            571 ;fpBD                      Allocated to registers 
                            572 ;minWidth                  Allocated to registers r3 
                            573 ;i                         Allocated to registers r2 
                            574 ;exp                       Allocated to registers r7 
                            575 ;sloc0                     Allocated with name '_output_float_sloc0_1_0'
                            576 ;sloc1                     Allocated with name '_output_float_sloc1_1_0'
                            577 ;sloc2                     Allocated with name '_output_float_sloc2_1_0'
                            578 ;------------------------------------------------------------
                            579 ;	printf_large.c:241: output_float (float f, unsigned char reqWidth,
                            580 ;	-----------------------------------------
                            581 ;	 function output_float
                            582 ;	-----------------------------------------
   00DE                     583 _output_float:
   00DE 75 86 01            584 	mov     dps, #1
   00E1 90s00r00r10         585 	mov     dptr, #_output_float_f_1_1
   00E5 E5 82               586 	mov	a,dpl
   00E7 F0                  587 	movx	@dptr,a
   00E8 A3                  588 	inc	dptr
   00E9 E5 83               589 	mov	a,dph
   00EB F0                  590 	movx	@dptr,a
   00EC A3                  591 	inc	dptr
   00ED E5 93               592 	mov	a,dpx
   00EF F0                  593 	movx	@dptr,a
   00F0 A3                  594 	inc	dptr
   00F1 E5 F0               595 	mov	a,b
   00F3 F0                  596 	movx	@dptr,a
   00F4 75 86 00            597 	mov	dps,#0
                            598 ;	printf_large.c:247: BOOL negative = 0;
                            599 ;	genAssign: resultIsFar = FALSE
   00F7 C2*05               600 	clr	_output_float_negative_1_1
                            601 ;	printf_large.c:251: char fpBI=0, fpBD;
                            602 ;	genAssign: resultIsFar = TRUE
   00F9 7E 00               603 	mov	r6,#0x00
                            604 ;	printf_large.c:253: signed char exp = -128;
                            605 ;	genAssign: resultIsFar = TRUE
   00FB 7F 80               606 	mov	r7,#0x80
                            607 ;	printf_large.c:256: if (f<0) {
                            608 ;	genAssign: resultIsFar = TRUE
   00FD 90s00r00r00         609 	mov	dptr,#___fslt_PARM_2
   0101 E4                  610 	clr	a
   0102 F0                  611 	movx	@dptr,a
   0103 A3                  612 	inc	dptr
   0104 F0                  613 	movx	@dptr,a
   0105 A3                  614 	inc	dptr
   0106 F0                  615 	movx	@dptr,a
   0107 A3                  616 	inc	dptr
   0108 F0                  617 	movx	@dptr,a
   0109 C0 07               618 	push	ar7
   010B 05 86               619 	inc	dps
   010D 90s00r00r10         620 	mov	dptr,#_output_float_f_1_1
   0111 E0                  621 	movx	a,@dptr
   0112 F5 82               622 	mov	dpl,a
   0114 A3                  623 	inc	dptr
   0115 E0                  624 	movx	a,@dptr
   0116 F5 83               625 	mov	dph,a
   0118 A3                  626 	inc	dptr
   0119 E0                  627 	movx	a,@dptr
   011A F5 93               628 	mov	dpx,a
   011C A3                  629 	inc	dptr
   011D E0                  630 	movx	a,@dptr
   011E F5 F0               631 	mov	b,a
   0120 75 86 00            632 	mov	dps,#0
   0123 12s00r00r00         633 	lcall	___fslt
   0127 D0 07               634 	pop	ar7
   0129 E5 82               635 	mov	a,dpl
   012B 60 30               636 	jz  00102$
   012D                     637 00257$:
                            638 ;	printf_large.c:257: negative=1;
                            639 ;	genAssign: resultIsFar = FALSE
   012D D2*05               640 	setb	_output_float_negative_1_1
                            641 ;	printf_large.c:258: f=-f;
   012F 90s00r00r10         642 	mov	dptr,#_output_float_f_1_1
   0133 75 86 01            643 	mov	dps, #1
   0136 90s00r00r10         644 	mov	dptr, #_output_float_f_1_1
   013A 15 86               645 	dec	dps
   013C E0                  646 	movx	a,@dptr
   013D 05 86               647 	inc	dps
   013F F0                  648 	movx	@dptr,a
   0140 15 86               649 	dec	dps
   0142 A3                  650 	inc	dptr
   0143 E0                  651 	movx	a,@dptr
   0144 05 86               652 	inc	dps
   0146 A3                  653 	inc	dptr
   0147 F0                  654 	movx	@dptr,a
   0148 15 86               655 	dec	dps
   014A A3                  656 	inc	dptr
   014B E0                  657 	movx	a,@dptr
   014C 05 86               658 	inc	dps
   014E A3                  659 	inc	dptr
   014F F0                  660 	movx	@dptr,a
   0150 15 86               661 	dec	dps
   0152 A3                  662 	inc	dptr
   0153 E0                  663 	movx	a,@dptr
   0154 B2 E7               664 	cpl	acc.7
   0156 05 86               665 	inc	dps
   0158 A3                  666 	inc	dptr
   0159 F0                  667 	movx	@dptr,a
   015A 75 86 00            668 	mov	dps,#0
   015D                     669 00102$:
                            670 ;	printf_large.c:261: if (f>0x00ffffff) {
                            671 ;	genAssign: resultIsFar = TRUE
   015D 90s00r00r00         672 	mov	dptr,#___fsgt_PARM_2
   0161 74 FF               673 	mov  a,#0xFF
   0163 F0                  674 	movx @dptr,a
   0164 A3                  675 	inc  dptr
   0165 F0                  676 	movx @dptr,a
   0166 A3                  677 	inc	dptr
   0167 74 7F               678 	mov	a,#0x7F
   0169 F0                  679 	movx	@dptr,a
   016A A3                  680 	inc	dptr
   016B 74 4B               681 	mov	a,#0x4B
   016D F0                  682 	movx	@dptr,a
   016E C0 07               683 	push	ar7
   0170 05 86               684 	inc	dps
   0172 90s00r00r10         685 	mov	dptr,#_output_float_f_1_1
   0176 E0                  686 	movx	a,@dptr
   0177 F5 82               687 	mov	dpl,a
   0179 A3                  688 	inc	dptr
   017A E0                  689 	movx	a,@dptr
   017B F5 83               690 	mov	dph,a
   017D A3                  691 	inc	dptr
   017E E0                  692 	movx	a,@dptr
   017F F5 93               693 	mov	dpx,a
   0181 A3                  694 	inc	dptr
   0182 E0                  695 	movx	a,@dptr
   0183 F5 F0               696 	mov	b,a
   0185 75 86 00            697 	mov	dps,#0
   0188 12s00r00r00         698 	lcall	___fsgt
   018C D0 07               699 	pop	ar7
   018E E5 82               700 	mov	a,dpl
   0190 70 04               701 	jnz	00258$
   0192 02s00r02rCA         702 	ljmp	00109$
   0196                     703 00258$:
                            704 ;	printf_large.c:264: for (exp = 0; f >= 10.0; exp++) f /=10.0;
                            705 ;	genAssign: resultIsFar = TRUE
   0196 7F 00               706 	mov	r7,#0x00
                            707 ;	genAssign: resultIsFar = FALSE
   0198 7E 00               708 	mov	r6,#0x00
   019A                     709 00176$:
                            710 ;	genAssign: resultIsFar = TRUE
   019A 90s00r00r00         711 	mov	dptr,#___fslt_PARM_2
   019E E4                  712 	clr  a
   019F F0                  713 	movx @dptr,a
   01A0 A3                  714 	inc  dptr
   01A1 F0                  715 	movx @dptr,a
   01A2 A3                  716 	inc	dptr
   01A3 74 20               717 	mov	a,#0x20
   01A5 F0                  718 	movx	@dptr,a
   01A6 A3                  719 	inc	dptr
   01A7 74 41               720 	mov	a,#0x41
   01A9 F0                  721 	movx	@dptr,a
   01AA C0 06               722 	push	ar6
   01AC 05 86               723 	inc	dps
   01AE 90s00r00r10         724 	mov	dptr,#_output_float_f_1_1
   01B2 E0                  725 	movx	a,@dptr
   01B3 F5 82               726 	mov	dpl,a
   01B5 A3                  727 	inc	dptr
   01B6 E0                  728 	movx	a,@dptr
   01B7 F5 83               729 	mov	dph,a
   01B9 A3                  730 	inc	dptr
   01BA E0                  731 	movx	a,@dptr
   01BB F5 93               732 	mov	dpx,a
   01BD A3                  733 	inc	dptr
   01BE E0                  734 	movx	a,@dptr
   01BF F5 F0               735 	mov	b,a
   01C1 75 86 00            736 	mov	dps,#0
   01C4 12s00r00r00         737 	lcall	___fslt
   01C8 D0 06               738 	pop	ar6
   01CA E5 82               739 	mov	a,dpl
   01CC 70 4E               740 	jnz  00205$
   01CE                     741 00259$:
                            742 ;	genAssign: resultIsFar = TRUE
   01CE 90s00r00r00         743 	mov	dptr,#___fsdiv_PARM_2
   01D2 E4                  744 	clr  a
   01D3 F0                  745 	movx @dptr,a
   01D4 A3                  746 	inc  dptr
   01D5 F0                  747 	movx @dptr,a
   01D6 A3                  748 	inc	dptr
   01D7 74 20               749 	mov	a,#0x20
   01D9 F0                  750 	movx	@dptr,a
   01DA A3                  751 	inc	dptr
   01DB 74 41               752 	mov	a,#0x41
   01DD F0                  753 	movx	@dptr,a
   01DE C0 06               754 	push	ar6
   01E0 05 86               755 	inc	dps
   01E2 90s00r00r10         756 	mov	dptr,#_output_float_f_1_1
   01E6 E0                  757 	movx	a,@dptr
   01E7 F5 82               758 	mov	dpl,a
   01E9 A3                  759 	inc	dptr
   01EA E0                  760 	movx	a,@dptr
   01EB F5 83               761 	mov	dph,a
   01ED A3                  762 	inc	dptr
   01EE E0                  763 	movx	a,@dptr
   01EF F5 93               764 	mov	dpx,a
   01F1 A3                  765 	inc	dptr
   01F2 E0                  766 	movx	a,@dptr
   01F3 F5 F0               767 	mov	b,a
   01F5 75 86 00            768 	mov	dps,#0
   01F8 12s00r00r00         769 	lcall	___fsdiv
   01FC AA 82               770 	mov	r2,dpl
   01FE AB 83               771 	mov	r3,dph
   0200 AC 93               772 	mov	r4,dpx
   0202 AD F0               773 	mov	r5,b
   0204 D0 06               774 	pop	ar6
                            775 ;	genAssign: resultIsFar = TRUE
   0206 90s00r00r10         776 	mov	dptr,#_output_float_f_1_1
   020A EA                  777 	mov	a,r2
   020B F0                  778 	movx	@dptr,a
   020C A3                  779 	inc	dptr
   020D EB                  780 	mov	a,r3
   020E F0                  781 	movx	@dptr,a
   020F A3                  782 	inc	dptr
   0210 EC                  783 	mov	a,r4
   0211 F0                  784 	movx	@dptr,a
   0212 A3                  785 	inc	dptr
   0213 ED                  786 	mov	a,r5
   0214 F0                  787 	movx	@dptr,a
   0215 0E                  788 	inc	r6
                            789 ;	genAssign: resultIsFar = TRUE
   0216 8E 07               790 	mov	ar7,r6
   0218 02s00r01r9A         791 	ljmp	00176$
   021C                     792 00205$:
                            793 ;	genAssign: resultIsFar = FALSE
   021C                     794 00180$:
                            795 ;	printf_large.c:265: for (       ; f < 1.0;   exp--) f *=10.0;
                            796 ;	genAssign: resultIsFar = TRUE
   021C 90s00r00r00         797 	mov	dptr,#___fslt_PARM_2
   0220 E4                  798 	clr  a
   0221 F0                  799 	movx @dptr,a
   0222 A3                  800 	inc  dptr
   0223 F0                  801 	movx @dptr,a
   0224 A3                  802 	inc	dptr
   0225 74 80               803 	mov	a,#0x80
   0227 F0                  804 	movx	@dptr,a
   0228 A3                  805 	inc	dptr
   0229 74 3F               806 	mov	a,#0x3F
   022B F0                  807 	movx	@dptr,a
   022C C0 06               808 	push	ar6
   022E 05 86               809 	inc	dps
   0230 90s00r00r10         810 	mov	dptr,#_output_float_f_1_1
   0234 E0                  811 	movx	a,@dptr
   0235 F5 82               812 	mov	dpl,a
   0237 A3                  813 	inc	dptr
   0238 E0                  814 	movx	a,@dptr
   0239 F5 83               815 	mov	dph,a
   023B A3                  816 	inc	dptr
   023C E0                  817 	movx	a,@dptr
   023D F5 93               818 	mov	dpx,a
   023F A3                  819 	inc	dptr
   0240 E0                  820 	movx	a,@dptr
   0241 F5 F0               821 	mov	b,a
   0243 75 86 00            822 	mov	dps,#0
   0246 12s00r00r00         823 	lcall	___fslt
   024A D0 06               824 	pop	ar6
   024C E5 82               825 	mov	a,dpl
   024E 60 4C               826 	jz  00248$
   0250                     827 00260$:
   0250 90s00r00r10         828 	mov	dptr,#_output_float_f_1_1
                            829 ;	genAssign: resultIsFar = TRUE
   0254 75 86 21            830 	mov	dps,#0x21
   0257 90s00r00r00         831 	mov	dptr,#___fsmul_PARM_2
   025B E0                  832 	movx	a,@dptr
   025C F0                  833 	movx	@dptr,a
   025D A3                  834 	inc	dptr
   025E A3                  835 	inc	dptr
   025F E0                  836 	movx	a,@dptr
   0260 F0                  837 	movx	@dptr,a
   0261 A3                  838 	inc	dptr
   0262 A3                  839 	inc	dptr
   0263 E0                  840 	movx	a,@dptr
   0264 F0                  841 	movx	@dptr,a
   0265 A3                  842 	inc	dptr
   0266 A3                  843 	inc	dptr
   0267 E0                  844 	movx	a,@dptr
   0268 F0                  845 	movx	@dptr,a
   0269 75 86 00            846 	mov	dps,#0
   026C C0 06               847 	push	ar6
   026E 90 00 00 00         848 	mov  dptr,#0x0000
   0272 75 93 20            849 	mov	dpx,#0x20
   0275 75 F0 41            850 	mov	b,#0x41
   0278 12s00r00r00         851 	lcall	___fsmul
   027C AA 82               852 	mov	r2,dpl
   027E AB 83               853 	mov	r3,dph
   0280 AC 93               854 	mov	r4,dpx
   0282 AD F0               855 	mov	r5,b
   0284 D0 06               856 	pop	ar6
                            857 ;	genAssign: resultIsFar = TRUE
   0286 90s00r00r10         858 	mov	dptr,#_output_float_f_1_1
   028A EA                  859 	mov	a,r2
   028B F0                  860 	movx	@dptr,a
   028C A3                  861 	inc	dptr
   028D EB                  862 	mov	a,r3
   028E F0                  863 	movx	@dptr,a
   028F A3                  864 	inc	dptr
   0290 EC                  865 	mov	a,r4
   0291 F0                  866 	movx	@dptr,a
   0292 A3                  867 	inc	dptr
   0293 ED                  868 	mov	a,r5
   0294 F0                  869 	movx	@dptr,a
   0295 1E                  870 	dec	r6
                            871 ;	genAssign: resultIsFar = TRUE
   0296 8E 07               872 	mov	ar7,r6
   0298 02s00r02r1C         873 	ljmp	00180$
   029C                     874 00248$:
                            875 ;	genAssign: resultIsFar = TRUE
   029C 8E 07               876 	mov	ar7,r6
                            877 ;	printf_large.c:267: if (negative) {
   029E 30*05 0D            878 	jnb  _output_float_negative_1_1,00106$
   02A1                     879 00261$:
                            880 ;	printf_large.c:268: OUTPUT_CHAR ('-', p);
   02A1 C0 07               881 	push	ar7
   02A3 75 82 2D            882 	mov	dpl,#0x2D
   02A6 12s00r00r00         883 	lcall	__output_char
   02AA D0 07               884 	pop	ar7
   02AC 80 0E               885 	sjmp 00107$
   02AE                     886 00106$:
                            887 ;	printf_large.c:270: if (sign) {
   02AE 30*03 0B            888 	jnb  _output_float_PARM_6,00107$
   02B1                     889 00262$:
                            890 ;	printf_large.c:271: OUTPUT_CHAR ('+', p);
   02B1 C0 07               891 	push	ar7
   02B3 75 82 2B            892 	mov	dpl,#0x2B
   02B6 12s00r00r00         893 	lcall	__output_char
   02BA D0 07               894 	pop	ar7
   02BC                     895 00107$:
                            896 ;	printf_large.c:274: reqWidth = 0;
                            897 ;	genAssign: resultIsFar = TRUE
   02BC 90s00r00r0E         898 	mov	dptr,#_output_float_PARM_2
   02C0 E4                  899 	clr  a
   02C1 F0                  900 	movx	@dptr,a
                            901 ;	printf_large.c:275: left = 0;
                            902 ;	genAssign: resultIsFar = FALSE
   02C2 C2*01               903 	clr	_output_float_PARM_4
                            904 ;	printf_large.c:276: zero = 0;
                            905 ;	genAssign: resultIsFar = FALSE
   02C4 C2*02               906 	clr	_output_float_PARM_5
                            907 ;	printf_large.c:277: sign = 0;
                            908 ;	genAssign: resultIsFar = FALSE
   02C6 C2*03               909 	clr	_output_float_PARM_6
                            910 ;	printf_large.c:278: space = 0;
                            911 ;	genAssign: resultIsFar = FALSE
   02C8 C2*04               912 	clr	_output_float_PARM_7
   02CA                     913 00109$:
                            914 ;	printf_large.c:282: if (reqDecimals==-1)
   02CA 90s00r00r0F         915 	mov	dptr,#_output_float_PARM_3
   02CE E0                  916 	movx	a,@dptr
   02CF B4 FF 07            917 	cjne a,#0xFF,00111$
   02D2                     918 00264$:
                            919 ;	printf_large.c:283: reqDecimals=DEFAULT_FLOAT_PRECISION;
                            920 ;	genAssign: resultIsFar = TRUE
   02D2 90s00r00r0F         921 	mov	dptr,#_output_float_PARM_3
   02D6 74 06               922 	mov	a,#0x06
   02D8 F0                  923 	movx	@dptr,a
   02D9                     924 00111$:
                            925 ;	printf_large.c:286: rounding = 0.5;
                            926 ;	genAssign: resultIsFar = TRUE
   02D9 90s00r00r98         927 	mov	dptr,#_output_float_rounding_1_1
   02DD E4                  928 	clr  a
   02DE F0                  929 	movx @dptr,a
   02DF A3                  930 	inc  dptr
   02E0 F0                  931 	movx @dptr,a
   02E1 A3                  932 	inc	dptr
   02E2 E4                  933 	clr  a
   02E3 F0                  934 	movx	@dptr,a
   02E4 A3                  935 	inc	dptr
   02E5 74 3F               936 	mov	a,#0x3F
   02E7 F0                  937 	movx	@dptr,a
                            938 ;	printf_large.c:287: for (i=reqDecimals; i>0; i--) {
   02E8 90s00r00r0F         939 	mov	dptr,#_output_float_PARM_3
                            940 ;	genAssign: resultIsFar = TRUE
   02EC E0                  941 	movx	a,@dptr
   02ED F8                  942 	mov	r0,a
                            943 ;	genAssign: resultIsFar = FALSE
   02EE                     944 00184$:
   02EE E8                  945 	mov	a,r0
   02EF 60 04               946 	jz  00194$
   02F1                     947 00265$:
                            948 ;	genAssign: resultIsFar = FALSE
   02F1 79 01               949 	mov	r1,#0x01
   02F3 80 02               950 	sjmp 00195$
   02F5                     951 00194$:
                            952 ;	genAssign: resultIsFar = FALSE
   02F5 79 00               953 	mov	r1,#0x00
   02F7                     954 00195$:
   02F7 E9                  955 	mov	a,r1
   02F8 60 4E               956 	jz  00187$
   02FA                     957 00266$:
                            958 ;	printf_large.c:288: rounding /= 10.0;
   02FA C0 07               959 	push	ar7
                            960 ;	genAssign: resultIsFar = TRUE
   02FC 90s00r00r00         961 	mov	dptr,#___fsdiv_PARM_2
   0300 E4                  962 	clr  a
   0301 F0                  963 	movx @dptr,a
   0302 A3                  964 	inc  dptr
   0303 F0                  965 	movx @dptr,a
   0304 A3                  966 	inc	dptr
   0305 74 20               967 	mov	a,#0x20
   0307 F0                  968 	movx	@dptr,a
   0308 A3                  969 	inc	dptr
   0309 74 41               970 	mov	a,#0x41
   030B F0                  971 	movx	@dptr,a
   030C C0 00               972 	push	ar0
   030E 05 86               973 	inc	dps
   0310 90s00r00r98         974 	mov	dptr,#_output_float_rounding_1_1
   0314 E0                  975 	movx	a,@dptr
   0315 F5 82               976 	mov	dpl,a
   0317 A3                  977 	inc	dptr
   0318 E0                  978 	movx	a,@dptr
   0319 F5 83               979 	mov	dph,a
   031B A3                  980 	inc	dptr
   031C E0                  981 	movx	a,@dptr
   031D F5 93               982 	mov	dpx,a
   031F A3                  983 	inc	dptr
   0320 E0                  984 	movx	a,@dptr
   0321 F5 F0               985 	mov	b,a
   0323 75 86 00            986 	mov	dps,#0
   0326 12s00r00r00         987 	lcall	___fsdiv
   032A A9 82               988 	mov	r1,dpl
   032C AF 83               989 	mov	r7,dph
   032E AA 93               990 	mov	r2,dpx
   0330 AB F0               991 	mov	r3,b
   0332 D0 00               992 	pop	ar0
                            993 ;	genAssign: resultIsFar = TRUE
   0334 90s00r00r98         994 	mov	dptr,#_output_float_rounding_1_1
   0338 E9                  995 	mov	a,r1
   0339 F0                  996 	movx	@dptr,a
   033A A3                  997 	inc	dptr
   033B EF                  998 	mov	a,r7
   033C F0                  999 	movx	@dptr,a
   033D A3                 1000 	inc	dptr
   033E EA                 1001 	mov	a,r2
   033F F0                 1002 	movx	@dptr,a
   0340 A3                 1003 	inc	dptr
   0341 EB                 1004 	mov	a,r3
   0342 F0                 1005 	movx	@dptr,a
                           1006 ;	printf_large.c:287: for (i=reqDecimals; i>0; i--) {
   0343 18                 1007 	dec	r0
   0344 D0 07              1008 	pop	ar7
   0346 80 A6              1009 	sjmp 00184$
   0348                    1010 00187$:
                           1011 ;	printf_large.c:290: f += rounding;
   0348 C0 07              1012 	push	ar7
   034A 90s00r00r98        1013 	mov	dptr,#_output_float_rounding_1_1
                           1014 ;	genAssign: resultIsFar = TRUE
   034E 75 86 21           1015 	mov	dps,#0x21
   0351 90s00r00r00        1016 	mov	dptr,#___fsadd_PARM_2
   0355 E0                 1017 	movx	a,@dptr
   0356 F0                 1018 	movx	@dptr,a
   0357 A3                 1019 	inc	dptr
   0358 A3                 1020 	inc	dptr
   0359 E0                 1021 	movx	a,@dptr
   035A F0                 1022 	movx	@dptr,a
   035B A3                 1023 	inc	dptr
   035C A3                 1024 	inc	dptr
   035D E0                 1025 	movx	a,@dptr
   035E F0                 1026 	movx	@dptr,a
   035F A3                 1027 	inc	dptr
   0360 A3                 1028 	inc	dptr
   0361 E0                 1029 	movx	a,@dptr
   0362 F0                 1030 	movx	@dptr,a
   0363 75 86 00           1031 	mov	dps,#0
   0366 C0 07              1032 	push	ar7
   0368 05 86              1033 	inc	dps
   036A 90s00r00r10        1034 	mov	dptr,#_output_float_f_1_1
   036E E0                 1035 	movx	a,@dptr
   036F F5 82              1036 	mov	dpl,a
   0371 A3                 1037 	inc	dptr
   0372 E0                 1038 	movx	a,@dptr
   0373 F5 83              1039 	mov	dph,a
   0375 A3                 1040 	inc	dptr
   0376 E0                 1041 	movx	a,@dptr
   0377 F5 93              1042 	mov	dpx,a
   0379 A3                 1043 	inc	dptr
   037A E0                 1044 	movx	a,@dptr
   037B F5 F0              1045 	mov	b,a
   037D 75 86 00           1046 	mov	dps,#0
   0380 12s00r00r00        1047 	lcall	___fsadd
   0384 AA 82              1048 	mov	r2,dpl
   0386 AB 83              1049 	mov	r3,dph
   0388 AC 93              1050 	mov	r4,dpx
   038A AD F0              1051 	mov	r5,b
   038C D0 07              1052 	pop	ar7
                           1053 ;	genAssign: resultIsFar = TRUE
   038E 90s00r00r10        1054 	mov	dptr,#_output_float_f_1_1
   0392 EA                 1055 	mov	a,r2
   0393 F0                 1056 	movx	@dptr,a
   0394 A3                 1057 	inc	dptr
   0395 EB                 1058 	mov	a,r3
   0396 F0                 1059 	movx	@dptr,a
   0397 A3                 1060 	inc	dptr
   0398 EC                 1061 	mov	a,r4
   0399 F0                 1062 	movx	@dptr,a
   039A A3                 1063 	inc	dptr
   039B ED                 1064 	mov	a,r5
   039C F0                 1065 	movx	@dptr,a
                           1066 ;	printf_large.c:293: integerPart = f;
   039D C0 07              1067 	push	ar7
   039F 05 86              1068 	inc	dps
   03A1 90s00r00r10        1069 	mov	dptr,#_output_float_f_1_1
   03A5 E0                 1070 	movx	a,@dptr
   03A6 F5 82              1071 	mov	dpl,a
   03A8 A3                 1072 	inc	dptr
   03A9 E0                 1073 	movx	a,@dptr
   03AA F5 83              1074 	mov	dph,a
   03AC A3                 1075 	inc	dptr
   03AD E0                 1076 	movx	a,@dptr
   03AE F5 93              1077 	mov	dpx,a
   03B0 A3                 1078 	inc	dptr
   03B1 E0                 1079 	movx	a,@dptr
   03B2 F5 F0              1080 	mov	b,a
   03B4 75 86 00           1081 	mov	dps,#0
   03B7 12s00r00r00        1082 	lcall	___fs2ulong
   03BB AA 82              1083 	mov	r2,dpl
   03BD AB 83              1084 	mov	r3,dph
   03BF AC 93              1085 	mov	r4,dpx
   03C1 AD F0              1086 	mov	r5,b
   03C3 D0 07              1087 	pop	ar7
                           1088 ;	genAssign: resultIsFar = TRUE
   03C5 90s00r00r94        1089 	mov	dptr,#_output_float_integerPart_1_1
   03C9 EA                 1090 	mov	a,r2
   03CA F0                 1091 	movx	@dptr,a
   03CB A3                 1092 	inc	dptr
   03CC EB                 1093 	mov	a,r3
   03CD F0                 1094 	movx	@dptr,a
   03CE A3                 1095 	inc	dptr
   03CF EC                 1096 	mov	a,r4
   03D0 F0                 1097 	movx	@dptr,a
   03D1 A3                 1098 	inc	dptr
   03D2 ED                 1099 	mov	a,r5
   03D3 F0                 1100 	movx	@dptr,a
                           1101 ;	printf_large.c:294: decimalPart = f - integerPart;
   03D4 05 86              1102 	inc	dps
   03D6 90s00r00r94        1103 	mov	dptr,#_output_float_integerPart_1_1
   03DA E0                 1104 	movx	a,@dptr
   03DB F5 82              1105 	mov	dpl,a
   03DD A3                 1106 	inc	dptr
   03DE E0                 1107 	movx	a,@dptr
   03DF F5 83              1108 	mov	dph,a
   03E1 A3                 1109 	inc	dptr
   03E2 E0                 1110 	movx	a,@dptr
   03E3 F5 93              1111 	mov	dpx,a
   03E5 A3                 1112 	inc	dptr
   03E6 E0                 1113 	movx	a,@dptr
   03E7 F5 F0              1114 	mov	b,a
   03E9 75 86 00           1115 	mov	dps,#0
   03EC 12s00r00r00        1116 	lcall	___ulong2fs
   03F0 A8 82              1117 	mov	r0,dpl
   03F2 A9 83              1118 	mov	r1,dph
   03F4 AF 93              1119 	mov	r7,dpx
   03F6 AA F0              1120 	mov	r2,b
                           1121 ;	genAssign: resultIsFar = TRUE
   03F8 90s00r00r00        1122 	mov	dptr,#___fssub_PARM_2
   03FC E8                 1123 	mov	a,r0
   03FD F0                 1124 	movx	@dptr,a
   03FE A3                 1125 	inc	dptr
   03FF E9                 1126 	mov	a,r1
   0400 F0                 1127 	movx	@dptr,a
   0401 A3                 1128 	inc	dptr
   0402 EF                 1129 	mov	a,r7
   0403 F0                 1130 	movx	@dptr,a
   0404 A3                 1131 	inc	dptr
   0405 EA                 1132 	mov	a,r2
   0406 F0                 1133 	movx	@dptr,a
   0407 C0 07              1134 	push	ar7
   0409 05 86              1135 	inc	dps
   040B 90s00r00r10        1136 	mov	dptr,#_output_float_f_1_1
   040F E0                 1137 	movx	a,@dptr
   0410 F5 82              1138 	mov	dpl,a
   0412 A3                 1139 	inc	dptr
   0413 E0                 1140 	movx	a,@dptr
   0414 F5 83              1141 	mov	dph,a
   0416 A3                 1142 	inc	dptr
   0417 E0                 1143 	movx	a,@dptr
   0418 F5 93              1144 	mov	dpx,a
   041A A3                 1145 	inc	dptr
   041B E0                 1146 	movx	a,@dptr
   041C F5 F0              1147 	mov	b,a
   041E 75 86 00           1148 	mov	dps,#0
   0421 12s00r00r00        1149 	lcall	___fssub
   0425 AA 82              1150 	mov	r2,dpl
   0427 AB 83              1151 	mov	r3,dph
   0429 AC 93              1152 	mov	r4,dpx
   042B AD F0              1153 	mov	r5,b
   042D D0 07              1154 	pop	ar7
                           1155 ;	genAssign: resultIsFar = TRUE
   042F 90s00r00r9C        1156 	mov	dptr,#_output_float_decimalPart_1_1
   0433 EA                 1157 	mov	a,r2
   0434 F0                 1158 	movx	@dptr,a
   0435 A3                 1159 	inc	dptr
   0436 EB                 1160 	mov	a,r3
   0437 F0                 1161 	movx	@dptr,a
   0438 A3                 1162 	inc	dptr
   0439 EC                 1163 	mov	a,r4
   043A F0                 1164 	movx	@dptr,a
   043B A3                 1165 	inc	dptr
   043C ED                 1166 	mov	a,r5
   043D F0                 1167 	movx	@dptr,a
                           1168 ;	printf_large.c:408: return;
   043E D0 07              1169 	pop	ar7
                           1170 ;	printf_large.c:297: while (integerPart) {
                           1171 ;	genAssign: resultIsFar = FALSE
   0440 7A 00              1172 	mov	r2,#0x00
   0442                    1173 00112$:
   0442 90s00r00r94        1174 	mov	dptr,#_output_float_integerPart_1_1
   0446 E0                 1175 	movx	a,@dptr
   0447 F5 F0              1176 	mov	b,a
   0449 A3                 1177 	inc	dptr
   044A E0                 1178 	movx	a,@dptr
   044B 42 F0              1179 	orl	b,a
   044D A3                 1180 	inc	dptr
   044E E0                 1181 	movx	a,@dptr
   044F 42 F0              1182 	orl	b,a
   0451 A3                 1183 	inc	dptr
   0452 E0                 1184 	movx	a,@dptr
   0453 45 F0              1185 	orl	a,b
   0455 70 04              1186 	jnz	00267$
   0457 02s00r05r04        1187 	ljmp	00250$
   045B                    1188 00267$:
                           1189 ;	printf_large.c:298: fpBuffer[fpBI++]='0' + integerPart%10;
                           1190 ;	genAssign: resultIsFar = FALSE
   045B 8A 03              1191 	mov	ar3,r2
   045D 0A                 1192 	inc	r2
                           1193 ;	genAssign: resultIsFar = TRUE
   045E 8A 06              1194 	mov	ar6,r2
   0460 EB                 1195 	mov	a,r3
   0461 24r14              1196 	add	a,#_output_float_fpBuffer_1_1
   0463 FB                 1197 	mov	r3,a
   0464 E4                 1198 	clr	a
   0465 34s00              1199 	addc	a,#(_output_float_fpBuffer_1_1 >> 8)
   0467 FC                 1200 	mov	r4,a
   0468 E4                 1201 	clr	a
   0469 34s00              1202 	addc	a,#(_output_float_fpBuffer_1_1 >> 16)
   046B FD                 1203 	mov	r5,a
                           1204 ;	genAssign: resultIsFar = TRUE
   046C 90s00r00r00        1205 	mov	dptr,#__modulong_PARM_2
   0470 74 0A              1206 	mov	a,#0x0A
   0472 F0                 1207 	movx	@dptr,a
   0473 E4                 1208 	clr	a
   0474 A3                 1209 	inc	dptr
   0475 F0                 1210 	movx	@dptr,a
   0476 A3                 1211 	inc	dptr
   0477 F0                 1212 	movx	@dptr,a
   0478 A3                 1213 	inc	dptr
   0479 F0                 1214 	movx	@dptr,a
   047A C0 02              1215 	push	ar2
   047C C0 03              1216 	push	ar3
   047E C0 04              1217 	push	ar4
   0480 C0 05              1218 	push	ar5
   0482 C0 07              1219 	push	ar7
   0484 05 86              1220 	inc	dps
   0486 90s00r00r94        1221 	mov	dptr,#_output_float_integerPart_1_1
   048A E0                 1222 	movx	a,@dptr
   048B F5 82              1223 	mov	dpl,a
   048D A3                 1224 	inc	dptr
   048E E0                 1225 	movx	a,@dptr
   048F F5 83              1226 	mov	dph,a
   0491 A3                 1227 	inc	dptr
   0492 E0                 1228 	movx	a,@dptr
   0493 F5 93              1229 	mov	dpx,a
   0495 A3                 1230 	inc	dptr
   0496 E0                 1231 	movx	a,@dptr
   0497 F5 F0              1232 	mov	b,a
   0499 75 86 00           1233 	mov	dps,#0
   049C 12s00r00r00        1234 	lcall	__modulong
   04A0 D0 07              1235 	pop	ar7
   04A2 D0 05              1236 	pop	ar5
   04A4 D0 04              1237 	pop	ar4
   04A6 D0 03              1238 	pop	ar3
   04A8 D0 02              1239 	pop	ar2
   04AA A8 82              1240 	mov	r0,dpl
   04AC 74 30              1241 	mov	a,#0x30
   04AE 28                 1242 	add	a,r0
   04AF F8                 1243 	mov  r0,a
   04B0 8B 82              1244 	mov  dpl,r3
   04B2 8C 83              1245 	mov  dph,r4
   04B4 8D 93              1246 	mov  dpx,r5
   04B6 F0                 1247 	movx	@dptr,a
                           1248 ;	printf_large.c:299: integerPart /= 10;
                           1249 ;	genAssign: resultIsFar = TRUE
   04B7 90s00r00r00        1250 	mov	dptr,#__divulong_PARM_2
   04BB 74 0A              1251 	mov	a,#0x0A
   04BD F0                 1252 	movx	@dptr,a
   04BE E4                 1253 	clr	a
   04BF A3                 1254 	inc	dptr
   04C0 F0                 1255 	movx	@dptr,a
   04C1 A3                 1256 	inc	dptr
   04C2 F0                 1257 	movx	@dptr,a
   04C3 A3                 1258 	inc	dptr
   04C4 F0                 1259 	movx	@dptr,a
   04C5 C0 02              1260 	push	ar2
   04C7 C0 07              1261 	push	ar7
   04C9 05 86              1262 	inc	dps
   04CB 90s00r00r94        1263 	mov	dptr,#_output_float_integerPart_1_1
   04CF E0                 1264 	movx	a,@dptr
   04D0 F5 82              1265 	mov	dpl,a
   04D2 A3                 1266 	inc	dptr
   04D3 E0                 1267 	movx	a,@dptr
   04D4 F5 83              1268 	mov	dph,a
   04D6 A3                 1269 	inc	dptr
   04D7 E0                 1270 	movx	a,@dptr
   04D8 F5 93              1271 	mov	dpx,a
   04DA A3                 1272 	inc	dptr
   04DB E0                 1273 	movx	a,@dptr
   04DC F5 F0              1274 	mov	b,a
   04DE 75 86 00           1275 	mov	dps,#0
   04E1 12s00r00r00        1276 	lcall	__divulong
   04E5 AB 82              1277 	mov	r3,dpl
   04E7 AC 83              1278 	mov	r4,dph
   04E9 AD 93              1279 	mov	r5,dpx
   04EB A8 F0              1280 	mov	r0,b
   04ED D0 07              1281 	pop	ar7
   04EF D0 02              1282 	pop	ar2
                           1283 ;	genAssign: resultIsFar = TRUE
   04F1 90s00r00r94        1284 	mov	dptr,#_output_float_integerPart_1_1
   04F5 EB                 1285 	mov	a,r3
   04F6 F0                 1286 	movx	@dptr,a
   04F7 A3                 1287 	inc	dptr
   04F8 EC                 1288 	mov	a,r4
   04F9 F0                 1289 	movx	@dptr,a
   04FA A3                 1290 	inc	dptr
   04FB ED                 1291 	mov	a,r5
   04FC F0                 1292 	movx	@dptr,a
   04FD A3                 1293 	inc	dptr
   04FE E8                 1294 	mov	a,r0
   04FF F0                 1295 	movx	@dptr,a
   0500 02s00r04r42        1296 	ljmp	00112$
   0504                    1297 00250$:
                           1298 ;	genAssign: resultIsFar = TRUE
   0504 8A 06              1299 	mov	ar6,r2
                           1300 ;	printf_large.c:301: if (!fpBI) {
   0506 EA                 1301 	mov	a,r2
   0507 70 16              1302 	jnz  00116$
   0509                    1303 00268$:
                           1304 ;	printf_large.c:303: fpBuffer[fpBI++]='0';
   0509 74 01              1305 	mov	a,#0x01
   050B 2A                 1306 	add	a,r2
   050C FE                 1307 	mov	r6,a
   050D EA                 1308 	mov	a,r2
   050E 24r14              1309 	add	a,#_output_float_fpBuffer_1_1
   0510 F5 82              1310 	mov	dpl,a
   0512 E4                 1311 	clr	a
   0513 34s00              1312 	addc	a,#(_output_float_fpBuffer_1_1 >> 8)
   0515 F5 83              1313 	mov	dph,a
   0517 E4                 1314 	clr	a
   0518 34s00              1315 	addc	a,#(_output_float_fpBuffer_1_1 >> 16)
   051A F5 93              1316 	mov	dpx,a
   051C 74 30              1317 	mov	a,#0x30
   051E F0                 1318 	movx	@dptr,a
   051F                    1319 00116$:
                           1320 ;	printf_large.c:309: for (i=reqDecimals; i>0; i--) {
   051F 90s00r00r0F        1321 	mov	dptr,#_output_float_PARM_3
                           1322 ;	genAssign: resultIsFar = TRUE
   0523 E0                 1323 	movx	a,@dptr
   0524 FA                 1324 	mov	r2,a
                           1325 ;	genAssign: resultIsFar = FALSE
   0525 8E 03              1326 	mov	ar3,r6
                           1327 ;	genAssign: resultIsFar = FALSE
   0527                    1328 00188$:
   0527 EA                 1329 	mov	a,r2
   0528 60 04              1330 	jz  00196$
   052A                    1331 00269$:
                           1332 ;	genAssign: resultIsFar = FALSE
   052A 7C 01              1333 	mov	r4,#0x01
   052C 80 02              1334 	sjmp 00197$
   052E                    1335 00196$:
                           1336 ;	genAssign: resultIsFar = FALSE
   052E 7C 00              1337 	mov	r4,#0x00
   0530                    1338 00197$:
   0530 EC                 1339 	mov	a,r4
   0531 70 04              1340 	jnz	00270$
   0533 02s00r06r76        1341 	ljmp	00251$
   0537                    1342 00270$:
                           1343 ;	printf_large.c:310: decimalPart *= 10.0;
   0537 90s00r00r9C        1344 	mov	dptr,#_output_float_decimalPart_1_1
                           1345 ;	genAssign: resultIsFar = TRUE
   053B 75 86 21           1346 	mov	dps,#0x21
   053E 90s00r00r00        1347 	mov	dptr,#___fsmul_PARM_2
   0542 E0                 1348 	movx	a,@dptr
   0543 F0                 1349 	movx	@dptr,a
   0544 A3                 1350 	inc	dptr
   0545 A3                 1351 	inc	dptr
   0546 E0                 1352 	movx	a,@dptr
   0547 F0                 1353 	movx	@dptr,a
   0548 A3                 1354 	inc	dptr
   0549 A3                 1355 	inc	dptr
   054A E0                 1356 	movx	a,@dptr
   054B F0                 1357 	movx	@dptr,a
   054C A3                 1358 	inc	dptr
   054D A3                 1359 	inc	dptr
   054E E0                 1360 	movx	a,@dptr
   054F F0                 1361 	movx	@dptr,a
   0550 75 86 00           1362 	mov	dps,#0
   0553 C0 02              1363 	push	ar2
   0555 C0 03              1364 	push	ar3
   0557 C0 06              1365 	push	ar6
   0559 C0 07              1366 	push	ar7
   055B 90 00 00 00        1367 	mov  dptr,#0x0000
   055F 75 93 20           1368 	mov	dpx,#0x20
   0562 75 F0 41           1369 	mov	b,#0x41
   0565 12s00r00r00        1370 	lcall	___fsmul
   0569 AC 82              1371 	mov	r4,dpl
   056B AD 83              1372 	mov	r5,dph
   056D A8 93              1373 	mov	r0,dpx
   056F A9 F0              1374 	mov	r1,b
   0571 D0 07              1375 	pop	ar7
   0573 D0 06              1376 	pop	ar6
   0575 D0 03              1377 	pop	ar3
   0577 D0 02              1378 	pop	ar2
                           1379 ;	genAssign: resultIsFar = TRUE
   0579 90s00r00r9C        1380 	mov	dptr,#_output_float_decimalPart_1_1
   057D EC                 1381 	mov	a,r4
   057E F0                 1382 	movx	@dptr,a
   057F A3                 1383 	inc	dptr
   0580 ED                 1384 	mov	a,r5
   0581 F0                 1385 	movx	@dptr,a
   0582 A3                 1386 	inc	dptr
   0583 E8                 1387 	mov	a,r0
   0584 F0                 1388 	movx	@dptr,a
   0585 A3                 1389 	inc	dptr
   0586 E9                 1390 	mov	a,r1
   0587 F0                 1391 	movx	@dptr,a
                           1392 ;	printf_large.c:312: integerPart = decimalPart;
   0588 C0 02              1393 	push	ar2
   058A C0 03              1394 	push	ar3
   058C C0 06              1395 	push	ar6
   058E C0 07              1396 	push	ar7
   0590 05 86              1397 	inc	dps
   0592 90s00r00r9C        1398 	mov	dptr,#_output_float_decimalPart_1_1
   0596 E0                 1399 	movx	a,@dptr
   0597 F5 82              1400 	mov	dpl,a
   0599 A3                 1401 	inc	dptr
   059A E0                 1402 	movx	a,@dptr
   059B F5 83              1403 	mov	dph,a
   059D A3                 1404 	inc	dptr
   059E E0                 1405 	movx	a,@dptr
   059F F5 93              1406 	mov	dpx,a
   05A1 A3                 1407 	inc	dptr
   05A2 E0                 1408 	movx	a,@dptr
   05A3 F5 F0              1409 	mov	b,a
   05A5 75 86 00           1410 	mov	dps,#0
   05A8 12s00r00r00        1411 	lcall	___fs2ulong
   05AC AC 82              1412 	mov	r4,dpl
   05AE AD 83              1413 	mov	r5,dph
   05B0 A8 93              1414 	mov	r0,dpx
   05B2 A9 F0              1415 	mov	r1,b
   05B4 D0 07              1416 	pop	ar7
   05B6 D0 06              1417 	pop	ar6
   05B8 D0 03              1418 	pop	ar3
   05BA D0 02              1419 	pop	ar2
                           1420 ;	genAssign: resultIsFar = TRUE
   05BC 90s00r00r94        1421 	mov	dptr,#_output_float_integerPart_1_1
   05C0 EC                 1422 	mov	a,r4
   05C1 F0                 1423 	movx	@dptr,a
   05C2 A3                 1424 	inc	dptr
   05C3 ED                 1425 	mov	a,r5
   05C4 F0                 1426 	movx	@dptr,a
   05C5 A3                 1427 	inc	dptr
   05C6 E8                 1428 	mov	a,r0
   05C7 F0                 1429 	movx	@dptr,a
   05C8 A3                 1430 	inc	dptr
   05C9 E9                 1431 	mov	a,r1
   05CA F0                 1432 	movx	@dptr,a
                           1433 ;	printf_large.c:313: fpBuffer[fpBD++] = '0' + integerPart;
                           1434 ;	genAssign: resultIsFar = FALSE
   05CB 8B 04              1435 	mov	ar4,r3
   05CD 0B                 1436 	inc	r3
   05CE EC                 1437 	mov	a,r4
   05CF 24r14              1438 	add	a,#_output_float_fpBuffer_1_1
   05D1 F5 84              1439 	mov	dpl1,a
   05D3 E4                 1440 	clr	a
   05D4 34s00              1441 	addc	a,#(_output_float_fpBuffer_1_1 >> 8)
   05D6 F5 85              1442 	mov	dph1,a
   05D8 E4                 1443 	clr	a
   05D9 34s00              1444 	addc	a,#(_output_float_fpBuffer_1_1 >> 16)
   05DB F5 95              1445 	mov	dpx1,a
   05DD 90s00r00r94        1446 	mov	dptr,#_output_float_integerPart_1_1
   05E1 E0                 1447 	movx	a,@dptr
   05E2 24 30              1448 	add  a,#0x30
   05E4 F9                 1449 	mov  r1,a
   05E5 05 86              1450 	inc	dps
   05E7 F0                 1451 	movx	@dptr,a
   05E8 75 86 00           1452 	mov	dps,#0
                           1453 ;	printf_large.c:314: decimalPart -= integerPart;
   05EB C0 02              1454 	push	ar2
   05ED C0 03              1455 	push	ar3
   05EF C0 06              1456 	push	ar6
   05F1 C0 07              1457 	push	ar7
   05F3 05 86              1458 	inc	dps
   05F5 90s00r00r94        1459 	mov	dptr,#_output_float_integerPart_1_1
   05F9 E0                 1460 	movx	a,@dptr
   05FA F5 82              1461 	mov	dpl,a
   05FC A3                 1462 	inc	dptr
   05FD E0                 1463 	movx	a,@dptr
   05FE F5 83              1464 	mov	dph,a
   0600 A3                 1465 	inc	dptr
   0601 E0                 1466 	movx	a,@dptr
   0602 F5 93              1467 	mov	dpx,a
   0604 A3                 1468 	inc	dptr
   0605 E0                 1469 	movx	a,@dptr
   0606 F5 F0              1470 	mov	b,a
   0608 75 86 00           1471 	mov	dps,#0
   060B 12s00r00r00        1472 	lcall	___ulong2fs
   060F AC 82              1473 	mov	r4,dpl
   0611 AD 83              1474 	mov	r5,dph
   0613 A8 93              1475 	mov	r0,dpx
   0615 A9 F0              1476 	mov	r1,b
   0617 D0 07              1477 	pop	ar7
   0619 D0 06              1478 	pop	ar6
   061B D0 03              1479 	pop	ar3
   061D D0 02              1480 	pop	ar2
                           1481 ;	genAssign: resultIsFar = TRUE
   061F 90s00r00r00        1482 	mov	dptr,#___fssub_PARM_2
   0623 EC                 1483 	mov	a,r4
   0624 F0                 1484 	movx	@dptr,a
   0625 A3                 1485 	inc	dptr
   0626 ED                 1486 	mov	a,r5
   0627 F0                 1487 	movx	@dptr,a
   0628 A3                 1488 	inc	dptr
   0629 E8                 1489 	mov	a,r0
   062A F0                 1490 	movx	@dptr,a
   062B A3                 1491 	inc	dptr
   062C E9                 1492 	mov	a,r1
   062D F0                 1493 	movx	@dptr,a
   062E C0 02              1494 	push	ar2
   0630 C0 03              1495 	push	ar3
   0632 C0 06              1496 	push	ar6
   0634 C0 07              1497 	push	ar7
   0636 05 86              1498 	inc	dps
   0638 90s00r00r9C        1499 	mov	dptr,#_output_float_decimalPart_1_1
   063C E0                 1500 	movx	a,@dptr
   063D F5 82              1501 	mov	dpl,a
   063F A3                 1502 	inc	dptr
   0640 E0                 1503 	movx	a,@dptr
   0641 F5 83              1504 	mov	dph,a
   0643 A3                 1505 	inc	dptr
   0644 E0                 1506 	movx	a,@dptr
   0645 F5 93              1507 	mov	dpx,a
   0647 A3                 1508 	inc	dptr
   0648 E0                 1509 	movx	a,@dptr
   0649 F5 F0              1510 	mov	b,a
   064B 75 86 00           1511 	mov	dps,#0
   064E 12s00r00r00        1512 	lcall	___fssub
   0652 AC 82              1513 	mov	r4,dpl
   0654 AD 83              1514 	mov	r5,dph
   0656 A8 93              1515 	mov	r0,dpx
   0658 A9 F0              1516 	mov	r1,b
   065A D0 07              1517 	pop	ar7
   065C D0 06              1518 	pop	ar6
   065E D0 03              1519 	pop	ar3
   0660 D0 02              1520 	pop	ar2
                           1521 ;	genAssign: resultIsFar = TRUE
   0662 90s00r00r9C        1522 	mov	dptr,#_output_float_decimalPart_1_1
   0666 EC                 1523 	mov	a,r4
   0667 F0                 1524 	movx	@dptr,a
   0668 A3                 1525 	inc	dptr
   0669 ED                 1526 	mov	a,r5
   066A F0                 1527 	movx	@dptr,a
   066B A3                 1528 	inc	dptr
   066C E8                 1529 	mov	a,r0
   066D F0                 1530 	movx	@dptr,a
   066E A3                 1531 	inc	dptr
   066F E9                 1532 	mov	a,r1
   0670 F0                 1533 	movx	@dptr,a
                           1534 ;	printf_large.c:309: for (i=reqDecimals; i>0; i--) {
   0671 1A                 1535 	dec	r2
   0672 02s00r05r27        1536 	ljmp	00188$
   0676                    1537 00251$:
                           1538 ;	genAssign: resultIsFar = TRUE
                           1539 ;	printf_large.c:317: minWidth=fpBI; // we need at least these
                           1540 ;	genAssign: resultIsFar = TRUE
   0676 8E 03              1541 	mov	ar3,r6
                           1542 ;	printf_large.c:318: minWidth+=reqDecimals?reqDecimals+1:0; // maybe these
   0678 90s00r00r0F        1543 	mov	dptr,#_output_float_PARM_3
   067C E0                 1544 	movx	a,@dptr
   067D 60 0A              1545 	jz  00198$
   067F                    1546 00271$:
   067F 90s00r00r0F        1547 	mov	dptr,#_output_float_PARM_3
   0683 E0                 1548 	movx	a,@dptr
   0684 24 01              1549 	add	a,#0x01
   0686 FC                 1550 	mov	r4,a
   0687 80 02              1551 	sjmp 00199$
   0689                    1552 00198$:
                           1553 ;	genAssign: resultIsFar = FALSE
   0689 7C 00              1554 	mov	r4,#0x00
   068B                    1555 00199$:
   068B EC                 1556 	mov	a,r4
   068C 2B                 1557 	add	a,r3
   068D FB                 1558 	mov	r3,a
                           1559 ;	printf_large.c:319: if (negative || sign || space)
   068E 20*05 06           1560 	jb   _output_float_negative_1_1,00117$
   0691                    1561 00272$:
   0691 20*03 03           1562 	jb   _output_float_PARM_6,00117$
   0694                    1563 00273$:
   0694 30*04 01           1564 	jnb  _output_float_PARM_7,00118$
   0697                    1565 00274$:
   0697                    1566 00117$:
                           1567 ;	printf_large.c:320: minWidth++; // and maybe even this :)
   0697 0B                 1568 	inc	r3
   0698                    1569 00118$:
                           1570 ;	printf_large.c:322: if (!left && reqWidth>i) {
   0698 30*01 04           1571 	jnb	_output_float_PARM_4,00275$
   069B 02s00r07rA9        1572 	ljmp	00155$
   069F                    1573 00275$:
   069F 90s00r00r0E        1574 	mov	dptr,#_output_float_PARM_2
   06A3 C3                 1575 	clr	c
   06A4 EA                 1576 	mov	a,r2
   06A5 C5 F0              1577 	xch	a, b
   06A7 E0                 1578 	movx	a,@dptr
   06A8 C5 F0              1579 	xch	a, b
   06AA 95 F0              1580 	subb	a,b
   06AC 40 04              1581 	jc	00276$
   06AE 02s00r07rA9        1582 	ljmp	00155$
   06B2                    1583 00276$:
                           1584 ;	printf_large.c:323: if (zero) {
   06B2 30*02 77           1585 	jnb  _output_float_PARM_5,00230$
   06B5                    1586 00277$:
                           1587 ;	printf_large.c:324: if (negative)
   06B5 30*05 15           1588 	jnb  _output_float_negative_1_1,00127$
   06B8                    1589 00278$:
                           1590 ;	printf_large.c:326: OUTPUT_CHAR('-', p);
   06B8 C0 03              1591 	push	ar3
   06BA C0 06              1592 	push	ar6
   06BC C0 07              1593 	push	ar7
   06BE 75 82 2D           1594 	mov	dpl,#0x2D
   06C1 12s00r00r00        1595 	lcall	__output_char
   06C5 D0 07              1596 	pop	ar7
   06C7 D0 06              1597 	pop	ar6
   06C9 D0 03              1598 	pop	ar3
   06CB 80 2E              1599 	sjmp 00228$
   06CD                    1600 00127$:
                           1601 ;	printf_large.c:328: else if (sign)
   06CD 30*03 15           1602 	jnb  _output_float_PARM_6,00124$
   06D0                    1603 00279$:
                           1604 ;	printf_large.c:330: OUTPUT_CHAR('+', p);
   06D0 C0 03              1605 	push	ar3
   06D2 C0 06              1606 	push	ar6
   06D4 C0 07              1607 	push	ar7
   06D6 75 82 2B           1608 	mov	dpl,#0x2B
   06D9 12s00r00r00        1609 	lcall	__output_char
   06DD D0 07              1610 	pop	ar7
   06DF D0 06              1611 	pop	ar6
   06E1 D0 03              1612 	pop	ar3
   06E3 80 16              1613 	sjmp 00228$
   06E5                    1614 00124$:
                           1615 ;	printf_large.c:332: else if (space)
   06E5 30*04 13           1616 	jnb  _output_float_PARM_7,00228$
   06E8                    1617 00280$:
                           1618 ;	printf_large.c:334: OUTPUT_CHAR(' ', p);
   06E8 C0 03              1619 	push	ar3
   06EA C0 06              1620 	push	ar6
   06EC C0 07              1621 	push	ar7
   06EE 75 82 20           1622 	mov	dpl,#0x20
   06F1 12s00r00r00        1623 	lcall	__output_char
   06F5 D0 07              1624 	pop	ar7
   06F7 D0 06              1625 	pop	ar6
   06F9 D0 03              1626 	pop	ar3
                           1627 ;	printf_large.c:336: while (reqWidth-->minWidth)
   06FB                    1628 00228$:
   06FB 90s00r00r0E        1629 	mov	dptr,#_output_float_PARM_2
                           1630 ;	genAssign: resultIsFar = FALSE
   06FF E0                 1631 	movx	a,@dptr
   0700 FC                 1632 	mov	r4,a
   0701                    1633 00129$:
                           1634 ;	genAssign: resultIsFar = FALSE
   0701 8C 05              1635 	mov	ar5,r4
   0703 1C                 1636 	dec	r4
                           1637 ;	genAssign: resultIsFar = TRUE
   0704 90s00r00r0E        1638 	mov	dptr,#_output_float_PARM_2
   0708 EC                 1639 	mov	a,r4
   0709 F0                 1640 	movx	@dptr,a
   070A C3                 1641 	clr	c
   070B EB                 1642 	mov	a,r3
   070C 9D                 1643 	subb	a,r5
   070D 40 04              1644 	jc	00281$
   070F 02s00r07rF1        1645 	ljmp	00252$
   0713                    1646 00281$:
                           1647 ;	printf_large.c:338: OUTPUT_CHAR('0', p);
   0713 C0 03              1648 	push	ar3
   0715 C0 04              1649 	push	ar4
   0717 C0 06              1650 	push	ar6
   0719 C0 07              1651 	push	ar7
   071B 75 82 30           1652 	mov	dpl,#0x30
   071E 12s00r00r00        1653 	lcall	__output_char
   0722 D0 07              1654 	pop	ar7
   0724 D0 06              1655 	pop	ar6
   0726 D0 04              1656 	pop	ar4
   0728 D0 03              1657 	pop	ar3
                           1658 ;	printf_large.c:341: while (reqWidth-->minWidth)
   072A 80 D5              1659 	sjmp 00129$
   072C                    1660 00230$:
   072C 90s00r00r0E        1661 	mov	dptr,#_output_float_PARM_2
                           1662 ;	genAssign: resultIsFar = FALSE
   0730 E0                 1663 	movx	a,@dptr
   0731 FD                 1664 	mov	r5,a
   0732                    1665 00132$:
                           1666 ;	genAssign: resultIsFar = FALSE
   0732 8D 00              1667 	mov	ar0,r5
   0734 1D                 1668 	dec	r5
                           1669 ;	genAssign: resultIsFar = TRUE
   0735 90s00r00r0E        1670 	mov	dptr,#_output_float_PARM_2
   0739 ED                 1671 	mov	a,r5
   073A F0                 1672 	movx	@dptr,a
   073B C3                 1673 	clr	c
   073C EB                 1674 	mov	a,r3
   073D 98                 1675 	subb	a,r0
   073E 50 19              1676 	jnc  00253$
   0740                    1677 00282$:
                           1678 ;	printf_large.c:343: OUTPUT_CHAR(' ', p);
   0740 C0 03              1679 	push	ar3
   0742 C0 05              1680 	push	ar5
   0744 C0 06              1681 	push	ar6
   0746 C0 07              1682 	push	ar7
   0748 75 82 20           1683 	mov	dpl,#0x20
   074B 12s00r00r00        1684 	lcall	__output_char
   074F D0 07              1685 	pop	ar7
   0751 D0 06              1686 	pop	ar6
   0753 D0 05              1687 	pop	ar5
   0755 D0 03              1688 	pop	ar3
   0757 80 D9              1689 	sjmp 00132$
   0759                    1690 00253$:
                           1691 ;	genAssign: resultIsFar = TRUE
   0759 90s00r00r0E        1692 	mov	dptr,#_output_float_PARM_2
   075D ED                 1693 	mov	a,r5
   075E F0                 1694 	movx	@dptr,a
                           1695 ;	printf_large.c:345: if (negative)
   075F 30*05 17           1696 	jnb  _output_float_negative_1_1,00141$
   0762                    1697 00283$:
                           1698 ;	printf_large.c:347: OUTPUT_CHAR('-', p);
   0762 C0 03              1699 	push	ar3
   0764 C0 06              1700 	push	ar6
   0766 C0 07              1701 	push	ar7
   0768 75 82 2D           1702 	mov	dpl,#0x2D
   076B 12s00r00r00        1703 	lcall	__output_char
   076F D0 07              1704 	pop	ar7
   0771 D0 06              1705 	pop	ar6
   0773 D0 03              1706 	pop	ar3
   0775 02s00r07rF7        1707 	ljmp	00156$
   0779                    1708 00141$:
                           1709 ;	printf_large.c:349: else if (sign)
   0779 30*03 15           1710 	jnb  _output_float_PARM_6,00138$
   077C                    1711 00284$:
                           1712 ;	printf_large.c:351: OUTPUT_CHAR('+', p);
   077C C0 03              1713 	push	ar3
   077E C0 06              1714 	push	ar6
   0780 C0 07              1715 	push	ar7
   0782 75 82 2B           1716 	mov	dpl,#0x2B
   0785 12s00r00r00        1717 	lcall	__output_char
   0789 D0 07              1718 	pop	ar7
   078B D0 06              1719 	pop	ar6
   078D D0 03              1720 	pop	ar3
   078F 80 66              1721 	sjmp 00156$
   0791                    1722 00138$:
                           1723 ;	printf_large.c:353: else if (space)
   0791 30*04 63           1724 	jnb  _output_float_PARM_7,00156$
   0794                    1725 00285$:
                           1726 ;	printf_large.c:355: OUTPUT_CHAR(' ', p);
   0794 C0 03              1727 	push	ar3
   0796 C0 06              1728 	push	ar6
   0798 C0 07              1729 	push	ar7
   079A 75 82 20           1730 	mov	dpl,#0x20
   079D 12s00r00r00        1731 	lcall	__output_char
   07A1 D0 07              1732 	pop	ar7
   07A3 D0 06              1733 	pop	ar6
   07A5 D0 03              1734 	pop	ar3
   07A7 80 4E              1735 	sjmp 00156$
   07A9                    1736 00155$:
                           1737 ;	printf_large.c:359: if (negative)
   07A9 30*05 15           1738 	jnb  _output_float_negative_1_1,00152$
   07AC                    1739 00286$:
                           1740 ;	printf_large.c:361: OUTPUT_CHAR('-', p);
   07AC C0 03              1741 	push	ar3
   07AE C0 06              1742 	push	ar6
   07B0 C0 07              1743 	push	ar7
   07B2 75 82 2D           1744 	mov	dpl,#0x2D
   07B5 12s00r00r00        1745 	lcall	__output_char
   07B9 D0 07              1746 	pop	ar7
   07BB D0 06              1747 	pop	ar6
   07BD D0 03              1748 	pop	ar3
   07BF 80 36              1749 	sjmp 00156$
   07C1                    1750 00152$:
                           1751 ;	printf_large.c:363: else if (sign)
   07C1 30*03 15           1752 	jnb  _output_float_PARM_6,00149$
   07C4                    1753 00287$:
                           1754 ;	printf_large.c:365: OUTPUT_CHAR('+', p);
   07C4 C0 03              1755 	push	ar3
   07C6 C0 06              1756 	push	ar6
   07C8 C0 07              1757 	push	ar7
   07CA 75 82 2B           1758 	mov	dpl,#0x2B
   07CD 12s00r00r00        1759 	lcall	__output_char
   07D1 D0 07              1760 	pop	ar7
   07D3 D0 06              1761 	pop	ar6
   07D5 D0 03              1762 	pop	ar3
   07D7 80 1E              1763 	sjmp 00156$
   07D9                    1764 00149$:
                           1765 ;	printf_large.c:367: else if (space)
   07D9 30*04 1B           1766 	jnb  _output_float_PARM_7,00156$
   07DC                    1767 00288$:
                           1768 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
   07DC C0 03              1769 	push	ar3
   07DE C0 06              1770 	push	ar6
   07E0 C0 07              1771 	push	ar7
   07E2 75 82 20           1772 	mov	dpl,#0x20
   07E5 12s00r00r00        1773 	lcall	__output_char
   07E9 D0 07              1774 	pop	ar7
   07EB D0 06              1775 	pop	ar6
   07ED D0 03              1776 	pop	ar3
                           1777 ;	printf_large.c:408: return;
                           1778 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
   07EF 80 06              1779 	sjmp 00156$
   07F1                    1780 00252$:
                           1781 ;	genAssign: resultIsFar = TRUE
   07F1 90s00r00r0E        1782 	mov	dptr,#_output_float_PARM_2
   07F5 EC                 1783 	mov	a,r4
   07F6 F0                 1784 	movx	@dptr,a
   07F7                    1785 00156$:
                           1786 ;	printf_large.c:374: i=fpBI-1;
   07F7 EE                 1787 	mov	a,r6
   07F8 14                 1788 	dec	a
                           1789 ;	genAssign: resultIsFar = TRUE
   07F9 FA                 1790 	mov	r2,a
                           1791 ;	printf_large.c:375: do {
                           1792 ;	genAssign: resultIsFar = FALSE
   07FA                    1793 00158$:
                           1794 ;	printf_large.c:376: OUTPUT_CHAR (fpBuffer[i], p);
   07FA EA                 1795 	mov	a,r2
   07FB 24r14              1796 	add	a,#_output_float_fpBuffer_1_1
   07FD F5 82              1797 	mov	dpl,a
   07FF E4                 1798 	clr	a
   0800 34s00              1799 	addc	a,#(_output_float_fpBuffer_1_1 >> 8)
   0802 F5 83              1800 	mov	dph,a
   0804 E4                 1801 	clr	a
   0805 34s00              1802 	addc	a,#(_output_float_fpBuffer_1_1 >> 16)
   0807 F5 93              1803 	mov	dpx,a
   0809 E0                 1804 	movx	a,@dptr
   080A FC                 1805 	mov	r4,a
   080B C0 02              1806 	push	ar2
   080D C0 03              1807 	push	ar3
   080F C0 06              1808 	push	ar6
   0811 C0 07              1809 	push	ar7
   0813 8C 82              1810 	mov	dpl,r4
   0815 12s00r00r00        1811 	lcall	__output_char
   0819 D0 07              1812 	pop	ar7
   081B D0 06              1813 	pop	ar6
   081D D0 03              1814 	pop	ar3
   081F D0 02              1815 	pop	ar2
                           1816 ;	printf_large.c:377: } while (i--);
                           1817 ;	genAssign: resultIsFar = FALSE
   0821 8A 04              1818 	mov	ar4,r2
   0823 1A                 1819 	dec	r2
   0824 EC                 1820 	mov	a,r4
   0825 70 D3              1821 	jnz  00158$
   0827                    1822 00289$:
                           1823 ;	printf_large.c:380: if (reqDecimals) {
   0827 90s00r00r0F        1824 	mov	dptr,#_output_float_PARM_3
   082B E0                 1825 	movx	a,@dptr
   082C 60 4D              1826 	jz  00165$
   082E                    1827 00290$:
                           1828 ;	printf_large.c:381: OUTPUT_CHAR ('.', p);
   082E C0 03              1829 	push	ar3
   0830 C0 06              1830 	push	ar6
   0832 C0 07              1831 	push	ar7
   0834 75 82 2E           1832 	mov	dpl,#0x2E
   0837 12s00r00r00        1833 	lcall	__output_char
   083B D0 07              1834 	pop	ar7
   083D D0 06              1835 	pop	ar6
   083F D0 03              1836 	pop	ar3
                           1837 ;	printf_large.c:383: while (reqDecimals--)
                           1838 ;	genAssign: resultIsFar = FALSE
   0841 8E 02              1839 	mov	ar2,r6
   0843 90s00r00r0F        1840 	mov	dptr,#_output_float_PARM_3
                           1841 ;	genAssign: resultIsFar = FALSE
   0847 E0                 1842 	movx	a,@dptr
   0848 FC                 1843 	mov	r4,a
   0849                    1844 00161$:
                           1845 ;	genAssign: resultIsFar = FALSE
   0849 8C 05              1846 	mov	ar5,r4
   084B 1C                 1847 	dec	r4
   084C ED                 1848 	mov	a,r5
   084D 60 2C              1849 	jz  00165$
   084F                    1850 00291$:
                           1851 ;	printf_large.c:385: OUTPUT_CHAR (fpBuffer[i++], p);
                           1852 ;	genAssign: resultIsFar = FALSE
   084F 8A 05              1853 	mov	ar5,r2
   0851 0A                 1854 	inc	r2
   0852 ED                 1855 	mov	a,r5
   0853 24r14              1856 	add	a,#_output_float_fpBuffer_1_1
   0855 F5 82              1857 	mov	dpl,a
   0857 E4                 1858 	clr	a
   0858 34s00              1859 	addc	a,#(_output_float_fpBuffer_1_1 >> 8)
   085A F5 83              1860 	mov	dph,a
   085C E4                 1861 	clr	a
   085D 34s00              1862 	addc	a,#(_output_float_fpBuffer_1_1 >> 16)
   085F F5 93              1863 	mov	dpx,a
   0861 E0                 1864 	movx	a,@dptr
   0862 FD                 1865 	mov	r5,a
   0863 C0 02              1866 	push	ar2
   0865 C0 03              1867 	push	ar3
   0867 C0 04              1868 	push	ar4
   0869 C0 07              1869 	push	ar7
   086B 8D 82              1870 	mov	dpl,r5
   086D 12s00r00r00        1871 	lcall	__output_char
   0871 D0 07              1872 	pop	ar7
   0873 D0 04              1873 	pop	ar4
   0875 D0 03              1874 	pop	ar3
   0877 D0 02              1875 	pop	ar2
   0879 80 CE              1876 	sjmp 00161$
   087B                    1877 00165$:
                           1878 ;	printf_large.c:389: if (left && reqWidth>minWidth) {
   087B 30*01 32           1879 	jnb  _output_float_PARM_4,00170$
   087E                    1880 00292$:
   087E 90s00r00r0E        1881 	mov	dptr,#_output_float_PARM_2
   0882 C3                 1882 	clr	c
   0883 EB                 1883 	mov	a,r3
   0884 C5 F0              1884 	xch	a, b
   0886 E0                 1885 	movx	a,@dptr
   0887 C5 F0              1886 	xch	a, b
   0889 95 F0              1887 	subb	a,b
   088B 50 23              1888 	jnc  00170$
   088D                    1889 00293$:
                           1890 ;	printf_large.c:390: while (reqWidth-->minWidth)
   088D 90s00r00r0E        1891 	mov	dptr,#_output_float_PARM_2
                           1892 ;	genAssign: resultIsFar = FALSE
   0891 E0                 1893 	movx	a,@dptr
   0892 FA                 1894 	mov	r2,a
   0893                    1895 00166$:
                           1896 ;	genAssign: resultIsFar = FALSE
   0893 8A 04              1897 	mov	ar4,r2
   0895 1A                 1898 	dec	r2
   0896 C3                 1899 	clr	c
   0897 EB                 1900 	mov	a,r3
   0898 9C                 1901 	subb	a,r4
   0899 50 15              1902 	jnc  00170$
   089B                    1903 00294$:
                           1904 ;	printf_large.c:392: OUTPUT_CHAR(' ', p);
   089B C0 02              1905 	push	ar2
   089D C0 03              1906 	push	ar3
   089F C0 07              1907 	push	ar7
   08A1 75 82 20           1908 	mov	dpl,#0x20
   08A4 12s00r00r00        1909 	lcall	__output_char
   08A8 D0 07              1910 	pop	ar7
   08AA D0 03              1911 	pop	ar3
   08AC D0 02              1912 	pop	ar2
   08AE 80 E3              1913 	sjmp 00166$
   08B0                    1914 00170$:
                           1915 ;	printf_large.c:396: if (exp != -128) {
   08B0 EF                 1916 	mov	a,r7
   08B1 B4 80 02           1917 	cjne	a,#0x80,00295$
   08B4 80 5E              1918 	sjmp 00175$
   08B6                    1919 00295$:
                           1920 ;	printf_large.c:397: OUTPUT_CHAR ('e', p);
   08B6 C0 07              1921 	push	ar7
   08B8 75 82 65           1922 	mov	dpl,#0x65
   08BB 12s00r00r00        1923 	lcall	__output_char
   08BF D0 07              1924 	pop	ar7
                           1925 ;	printf_large.c:398: if (exp<0) {
   08C1 EF                 1926 	mov	a,r7
   08C2 30 E7 0F           1927 	jnb  acc.7,00173$
   08C5                    1928 00296$:
                           1929 ;	printf_large.c:399: OUTPUT_CHAR ('-', p);
   08C5 C0 07              1930 	push	ar7
   08C7 75 82 2D           1931 	mov	dpl,#0x2D
   08CA 12s00r00r00        1932 	lcall	__output_char
   08CE D0 07              1933 	pop	ar7
                           1934 ;	printf_large.c:400: exp = -exp;
   08D0 C3                 1935 	clr	c
   08D1 E4                 1936 	clr	a
   08D2 9F                 1937 	subb	a,r7
   08D3 FF                 1938 	mov	r7,a
   08D4                    1939 00173$:
                           1940 ;	printf_large.c:402: OUTPUT_CHAR ('0'+exp/10, p);
   08D4 C2 D5              1941 	clr	F0
   08D6 75 F0 0A           1942 	mov	b,#0x0a
   08D9 EF                 1943 	mov	a,r7
   08DA 30 E7 04           1944 	jnb	acc.7,00297$
   08DD B2 D5              1945 	cpl	F0
   08DF F4                 1946 	cpl	a
   08E0 04                 1947 	inc	a
   08E1                    1948 00297$:
   08E1 00                 1949 	nop	; workaround for DS80C390 div bug.
   08E2 84                 1950 	div	ab
   08E3 30 D5 02           1951 	jnb	F0,00298$
   08E6 F4                 1952 	cpl	a
   08E7 04                 1953 	inc	a
   08E8                    1954 00298$:
   08E8 24 30              1955 	add  a,#0x30
   08EA FA                 1956 	mov  r2,a
   08EB C0 07              1957 	push	ar7
   08ED 8A 82              1958 	mov	dpl,r2
   08EF 12s00r00r00        1959 	lcall	__output_char
   08F3 D0 07              1960 	pop	ar7
                           1961 ;	printf_large.c:403: OUTPUT_CHAR ('0'+exp%10, p);
   08F5 75 F0 0A           1962 	mov	b,#0x0a
   08F8 EF                 1963 	mov	a,r7
   08F9 C2 D5              1964 	clr	F0
   08FB 30 E7 04           1965 	jnb	acc.7,00299$
   08FE D2 D5              1966 	setb	F0
   0900 F4                 1967 	cpl	a
   0901 04                 1968 	inc	a
   0902                    1969 00299$:
   0902 00                 1970 	nop	; workaround for DS80C390 div bug.
   0903 84                 1971 	div	ab
   0904 E5 F0              1972 	mov	a,b
   0906 30 D5 02           1973 	jnb	F0,00300$
   0909 F4                 1974 	cpl	a
   090A 04                 1975 	inc	a
   090B                    1976 00300$:
   090B 24 30              1977 	add  a,#0x30
   090D FF                 1978 	mov  r7,a
   090E 8F 82              1979 	mov	dpl,r7
   0910 12s00r00r00        1980 	lcall	__output_char
   0914                    1981 00175$:
                           1982 ;	printf_large.c:408: return;
   0914                    1983 00192$:
   0914 22                 1984 	ret
                           1985 ;------------------------------------------------------------
                           1986 ;Allocation info for local variables in function '_print_format'
                           1987 ;------------------------------------------------------------
                           1988 ;pvoid                     Allocated with name '__print_format_PARM_2'
                           1989 ;format                    Allocated with name '__print_format_PARM_3'
                           1990 ;ap                        Allocated with name '__print_format_PARM_4'
                           1991 ;pfn                       Allocated to registers 
                           1992 ;radix                     Allocated with name '__print_format_radix_1_1'
                           1993 ;width                     Allocated with name '__print_format_width_1_1'
                           1994 ;decimals                  Allocated to registers r5 
                           1995 ;length                    Allocated with name '__print_format_length_1_1'
                           1996 ;c                         Allocated to registers r2 
                           1997 ;memtype                   Allocated to registers r2 
                           1998 ;store                     Allocated with name '__print_format_store_4_23'
                           1999 ;pstore                    Allocated with name '__print_format_pstore_4_23'
                           2000 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                           2001 ;------------------------------------------------------------
                           2002 ;	printf_large.c:414: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                           2003 ;	-----------------------------------------
                           2004 ;	 function _print_format
                           2005 ;	-----------------------------------------
   0915                    2006 __print_format:
   0915 75 86 01           2007 	mov     dps, #1
   0918 90s00r00r00        2008 	mov     dptr, #_output_char
   091C E5 82              2009 	mov	a,dpl
   091E F0                 2010 	movx	@dptr,a
   091F A3                 2011 	inc	dptr
   0920 E5 83              2012 	mov	a,dph
   0922 F0                 2013 	movx	@dptr,a
   0923 A3                 2014 	inc	dptr
   0924 E5 93              2015 	mov	a,dpx
   0926 F0                 2016 	movx	@dptr,a
   0927 75 86 00           2017 	mov	dps,#0
                           2018 ;	printf_large.c:442: p = pvoid;
   092A 90s00r00rA0        2019 	mov	dptr,#__print_format_PARM_2
                           2020 ;	genAssign: resultIsFar = FALSE
   092E E0                 2021 	movx	a,@dptr
   092F FA                 2022 	mov	r2,a
   0930 A3                 2023 	inc	dptr
   0931 E0                 2024 	movx	a,@dptr
   0932 FB                 2025 	mov	r3,a
   0933 A3                 2026 	inc	dptr
   0934 E0                 2027 	movx	a,@dptr
   0935 FC                 2028 	mov	r4,a
   0936 A3                 2029 	inc	dptr
   0937 E0                 2030 	movx	a,@dptr
   0938 FD                 2031 	mov	r5,a
                           2032 ;	genAssign: resultIsFar = TRUE
   0939 90s00r00r03        2033 	mov	dptr,#_p
   093D EA                 2034 	mov	a,r2
   093E F0                 2035 	movx	@dptr,a
   093F A3                 2036 	inc	dptr
   0940 EB                 2037 	mov	a,r3
   0941 F0                 2038 	movx	@dptr,a
   0942 A3                 2039 	inc	dptr
   0943 EC                 2040 	mov	a,r4
   0944 F0                 2041 	movx	@dptr,a
   0945 A3                 2042 	inc	dptr
   0946 ED                 2043 	mov	a,r5
   0947 F0                 2044 	movx	@dptr,a
                           2045 ;	printf_large.c:446: charsOutputted = 0;
                           2046 ;	genAssign: resultIsFar = TRUE
   0948 90s00r00r0C        2047 	mov	dptr,#_charsOutputted
   094C E4                 2048 	clr	a
   094D F0                 2049 	movx	@dptr,a
   094E A3                 2050 	inc	dptr
   094F F0                 2051 	movx	@dptr,a
                           2052 ;	printf_large.c:449: if (format==0) {
   0950 90s00r00rA4        2053 	mov	dptr,#__print_format_PARM_3
                           2054 ;	genAssign: resultIsFar = FALSE
   0954 E0                 2055 	movx	a,@dptr
   0955 FA                 2056 	mov	r2,a
   0956 A3                 2057 	inc	dptr
   0957 E0                 2058 	movx	a,@dptr
   0958 FB                 2059 	mov	r3,a
   0959 A3                 2060 	inc	dptr
   095A E0                 2061 	movx	a,@dptr
   095B FC                 2062 	mov	r4,a
   095C A3                 2063 	inc	dptr
   095D E0                 2064 	movx	a,@dptr
   095E FD                 2065 	mov	r5,a
   095F EA                 2066 	mov	a,r2
   0960 4B                 2067 	orl	a,r3
   0961 4C                 2068 	orl	a,r4
   0962 70 13              2069 	jnz  00249$
   0964                    2070 00325$:
                           2071 ;	printf_large.c:450: format=NULL_STRING;
   0964 90s00r00rA4        2072 	mov	dptr,#__print_format_PARM_3
   0968 74r00              2073 	mov	a,#__str_0
   096A F0                 2074 	movx	@dptr,a
   096B A3                 2075 	inc	dptr
   096C 74s00              2076 	mov	a,#(__str_0 >> 8)
   096E F0                 2077 	movx	@dptr,a
   096F A3                 2078 	inc	dptr
   0970 74s00              2079 	mov	a,#(__str_0 >> 16)
   0972 F0                 2080 	movx	@dptr,a
   0973 A3                 2081 	inc	dptr
   0974 74 80              2082 	mov	a,#0x80
   0976 F0                 2083 	movx	@dptr,a
                           2084 ;	printf_large.c:454: while( c=*format++ )
   0977                    2085 00249$:
   0977                    2086 00238$:
   0977 90s00r00rA4        2087 	mov	dptr,#__print_format_PARM_3
                           2088 ;	genAssign: resultIsFar = FALSE
   097B E0                 2089 	movx	a,@dptr
   097C FA                 2090 	mov	r2,a
   097D A3                 2091 	inc	dptr
   097E E0                 2092 	movx	a,@dptr
   097F FB                 2093 	mov	r3,a
   0980 A3                 2094 	inc	dptr
   0981 E0                 2095 	movx	a,@dptr
   0982 FC                 2096 	mov	r4,a
   0983 A3                 2097 	inc	dptr
   0984 E0                 2098 	movx	a,@dptr
   0985 FD                 2099 	mov	r5,a
   0986 8A 82              2100 	mov	dpl,r2
   0988 8B 83              2101 	mov	dph,r3
   098A 8C 93              2102 	mov	dpx,r4
   098C 8D F0              2103 	mov	b,r5
   098E 12s00r00r00        2104 	lcall	__gptrget
   0992 FE                 2105 	mov	r6,a
   0993 90s00r00rA4        2106 	mov	dptr,#__print_format_PARM_3
   0997 74 01              2107 	mov	a,#0x01
   0999 2A                 2108 	add	a,r2
   099A F0                 2109 	movx	@dptr,a
   099B E4                 2110 	clr  a
   099C 3B                 2111 	addc	a,r3
   099D A3                 2112 	inc	dptr
   099E F0                 2113 	movx	@dptr,a
   099F E4                 2114 	clr  a
   09A0 3C                 2115 	addc	a,r4
   09A1 A3                 2116 	inc	dptr
   09A2 F0                 2117 	movx	@dptr,a
   09A3 A3                 2118 	inc	dptr
   09A4 ED                 2119 	mov	a,r5
   09A5 F0                 2120 	movx	@dptr,a
                           2121 ;	genAssign: resultIsFar = TRUE
   09A6 8E 02              2122 	mov	ar2,r6
   09A8 EE                 2123 	mov	a,r6
   09A9 70 04              2124 	jnz	00326$
   09AB 02s00r12rE5        2125 	ljmp	00240$
   09AF                    2126 00326$:
                           2127 ;	printf_large.c:456: if ( c=='%' )
   09AF EA                 2128 	mov	a,r2
   09B0 B4 25 02           2129 	cjne	a,#0x25,00327$
   09B3 80 04              2130 	sjmp	00328$
   09B5                    2131 00327$:
   09B5 02s00r12rDB        2132 	ljmp	00236$
   09B9                    2133 00328$:
                           2134 ;	printf_large.c:458: left_justify    = 0;
                           2135 ;	genAssign: resultIsFar = FALSE
   09B9 C2*06              2136 	clr	__print_format_left_justify_1_1
                           2137 ;	printf_large.c:459: zero_padding    = 0;
                           2138 ;	genAssign: resultIsFar = FALSE
   09BB C2*07              2139 	clr	__print_format_zero_padding_1_1
                           2140 ;	printf_large.c:460: prefix_sign     = 0;
                           2141 ;	genAssign: resultIsFar = FALSE
   09BD C2*08              2142 	clr	__print_format_prefix_sign_1_1
                           2143 ;	printf_large.c:461: prefix_space    = 0;
                           2144 ;	genAssign: resultIsFar = FALSE
   09BF C2*09              2145 	clr	__print_format_prefix_space_1_1
                           2146 ;	printf_large.c:462: signed_argument = 0;
                           2147 ;	genAssign: resultIsFar = FALSE
   09C1 C2*0A              2148 	clr	__print_format_signed_argument_1_1
                           2149 ;	printf_large.c:463: char_argument   = 0;
                           2150 ;	genAssign: resultIsFar = FALSE
   09C3 C2*0B              2151 	clr	__print_format_char_argument_1_1
                           2152 ;	printf_large.c:464: long_argument   = 0;
                           2153 ;	genAssign: resultIsFar = FALSE
   09C5 C2*0C              2154 	clr	__print_format_long_argument_1_1
                           2155 ;	printf_large.c:465: float_argument  = 0;
                           2156 ;	genAssign: resultIsFar = FALSE
   09C7 C2*0D              2157 	clr	__print_format_float_argument_1_1
                           2158 ;	printf_large.c:466: radix           = 0;
                           2159 ;	genAssign: resultIsFar = TRUE
   09C9 90s00r00rAC        2160 	mov	dptr,#__print_format_radix_1_1
                           2161 ;	printf_large.c:467: width           = 0;
                           2162 ;	genAssign: resultIsFar = TRUE
   09CD E4                 2163 	clr   a
   09CE F0                 2164 	movx  @dptr,a
   09CF 90s00r00rAD        2165 	mov   dptr,#__print_format_width_1_1
   09D3 F0                 2166 	movx  @dptr,a
                           2167 ;	printf_large.c:468: decimals        = -1;
                           2168 ;	genAssign: resultIsFar = TRUE
   09D4 7D FF              2169 	mov	r5,#0xFF
                           2170 ;	printf_large.c:470: get_conversion_spec:
   09D6 90s00r00rA4        2171 	mov	dptr,#__print_format_PARM_3
                           2172 ;	genAssign: resultIsFar = FALSE
   09DA E0                 2173 	movx	a,@dptr
   09DB FE                 2174 	mov	r6,a
   09DC A3                 2175 	inc	dptr
   09DD E0                 2176 	movx	a,@dptr
   09DE FF                 2177 	mov	r7,a
   09DF A3                 2178 	inc	dptr
   09E0 E0                 2179 	movx	a,@dptr
   09E1 F8                 2180 	mov	r0,a
   09E2 A3                 2181 	inc	dptr
   09E3 E0                 2182 	movx	a,@dptr
   09E4 F9                 2183 	mov	r1,a
   09E5                    2184 00103$:
                           2185 ;	printf_large.c:472: c = *format++;
   09E5 8E 82              2186 	mov	dpl,r6
   09E7 8F 83              2187 	mov	dph,r7
   09E9 88 93              2188 	mov	dpx,r0
   09EB 89 F0              2189 	mov	b,r1
   09ED 12s00r00r00        2190 	lcall	__gptrget
   09F1 FB                 2191 	mov	r3,a
   09F2 A3                 2192 	inc	dptr
   09F3 AE 82              2193 	mov	r6,dpl
   09F5 AF 83              2194 	mov	r7,dph
   09F7 A8 93              2195 	mov	r0,dpx
   09F9 A9 F0              2196 	mov	r1,b
                           2197 ;	genAssign: resultIsFar = TRUE
   09FB 90s00r00rA4        2198 	mov	dptr,#__print_format_PARM_3
   09FF EE                 2199 	mov	a,r6
   0A00 F0                 2200 	movx	@dptr,a
   0A01 A3                 2201 	inc	dptr
   0A02 EF                 2202 	mov	a,r7
   0A03 F0                 2203 	movx	@dptr,a
   0A04 A3                 2204 	inc	dptr
   0A05 E8                 2205 	mov	a,r0
   0A06 F0                 2206 	movx	@dptr,a
   0A07 A3                 2207 	inc	dptr
   0A08 E9                 2208 	mov	a,r1
   0A09 F0                 2209 	movx	@dptr,a
                           2210 ;	genAssign: resultIsFar = TRUE
   0A0A 8B 02              2211 	mov	ar2,r3
                           2212 ;	printf_large.c:474: if (c=='%') {
   0A0C EA                 2213 	mov	a,r2
   0A0D B4 25 0A           2214 	cjne a,#0x25,00105$
   0A10                    2215 00330$:
                           2216 ;	printf_large.c:475: OUTPUT_CHAR(c, p);
   0A10 8A 82              2217 	mov	dpl,r2
   0A12 12s00r00r00        2218 	lcall	__output_char
                           2219 ;	printf_large.c:476: continue;
   0A16 02s00r09r77        2220 	ljmp	00238$
   0A1A                    2221 00105$:
                           2222 ;	printf_large.c:479: if (isdigit(c)) {
                           2223 ;	genAssign: resultIsFar = FALSE
   0A1A 8A 03              2224 	mov	ar3,r2
   0A1C BB 30 00           2225 	cjne	r3,#0x30,00331$
   0A1F                    2226 00331$:
   0A1F 40 45              2227 	jc   00112$
   0A21                    2228 00332$:
                           2229 ;	genAssign: resultIsFar = FALSE
   0A21 8A 03              2230 	mov	ar3,r2
   0A23 C3                 2231 	clr	c
   0A24 74 39              2232 	mov	a,#0x39
   0A26 9B                 2233 	subb	a,r3
   0A27 40 3D              2234 	jc   00112$
   0A29                    2235 00333$:
                           2236 ;	printf_large.c:480: if (decimals==-1) {
   0A29 ED                 2237 	mov	a,r5
   0A2A B4 FF 1D           2238 	cjne a,#0xFF,00109$
   0A2D                    2239 00335$:
                           2240 ;	printf_large.c:481: width = 10*width + c - '0';
   0A2D 90s00r00rAD        2241 	mov	dptr,#__print_format_width_1_1
   0A31 75 F0 0A           2242 	mov	b,#0x0A
   0A34 E0                 2243 	movx	a,@dptr
   0A35 A4                 2244 	mul	ab
   0A36 2A                 2245 	add	a,r2
   0A37 FB                 2246 	mov  r3,a
   0A38 24 D0              2247 	add	a,#0xD0
                           2248 ;	genAssign: resultIsFar = TRUE
   0A3A 90s00r00rAD        2249 	mov	dptr,#__print_format_width_1_1
   0A3E F0                 2250 	movx	@dptr,a
                           2251 ;	printf_large.c:482: if (width == 0) {
   0A3F 90s00r00rAD        2252 	mov	dptr,#__print_format_width_1_1
   0A43 E0                 2253 	movx	a,@dptr
   0A44 70 9F              2254 	jnz  00103$
   0A46                    2255 00336$:
                           2256 ;	printf_large.c:484: zero_padding = 1;
                           2257 ;	genAssign: resultIsFar = FALSE
   0A46 D2*07              2258 	setb	__print_format_zero_padding_1_1
   0A48 80 9B              2259 	sjmp 00103$
   0A4A                    2260 00109$:
                           2261 ;	printf_large.c:487: decimals = 10*decimals + c - '0';
   0A4A C2 D5              2262 	clr	F0
   0A4C 75 F0 0A           2263 	mov	b,#0x0A
   0A4F ED                 2264 	mov	a,r5
   0A50 30 E7 04           2265 	jnb	acc.7,00337$
   0A53 B2 D5              2266 	cpl	F0
   0A55 F4                 2267 	cpl	a
   0A56 04                 2268 	inc	a
   0A57                    2269 00337$:
   0A57 A4                 2270 	mul	ab
   0A58 30 D5 02           2271 	jnb	F0,00338$
   0A5B F4                 2272 	cpl	a
   0A5C 04                 2273 	inc	a
   0A5D                    2274 00338$:
   0A5D 2A                 2275 	add	a,r2
   0A5E FB                 2276 	mov  r3,a
   0A5F 24 D0              2277 	add	a,#0xD0
                           2278 ;	genAssign: resultIsFar = TRUE
   0A61 FD                 2279 	mov	r5,a
                           2280 ;	printf_large.c:489: goto get_conversion_spec;
   0A62 02s00r09rE5        2281 	ljmp	00103$
   0A66                    2282 00112$:
                           2283 ;	printf_large.c:492: if (c=='.') {
   0A66 EA                 2284 	mov	a,r2
   0A67 B4 2E 10           2285 	cjne a,#0x2E,00117$
   0A6A                    2286 00340$:
                           2287 ;	printf_large.c:493: if (decimals==-1) decimals=0;
   0A6A ED                 2288 	mov	a,r5
   0A6B B4 FF 02           2289 	cjne	a,#0xFF,00341$
   0A6E 80 04              2290 	sjmp	00342$
   0A70                    2291 00341$:
   0A70 02s00r09rE5        2292 	ljmp	00103$
   0A74                    2293 00342$:
                           2294 ;	genAssign: resultIsFar = TRUE
   0A74 7D 00              2295 	mov	r5,#0x00
                           2296 ;	printf_large.c:496: goto get_conversion_spec;
   0A76 02s00r09rE5        2297 	ljmp	00103$
   0A7A                    2298 00117$:
                           2299 ;	printf_large.c:499: if (islower(c))
                           2300 ;	genAssign: resultIsFar = FALSE
   0A7A 8A 03              2301 	mov	ar3,r2
   0A7C BB 61 00           2302 	cjne	r3,#0x61,00343$
   0A7F                    2303 00343$:
   0A7F 40 0F              2304 	jc   00119$
   0A81                    2305 00344$:
                           2306 ;	genAssign: resultIsFar = FALSE
   0A81 8A 03              2307 	mov	ar3,r2
   0A83 C3                 2308 	clr	c
   0A84 74 7A              2309 	mov	a,#0x7A
   0A86 9B                 2310 	subb	a,r3
   0A87 40 07              2311 	jc   00119$
   0A89                    2312 00345$:
                           2313 ;	printf_large.c:501: c = toupper(c);
   0A89 53 02 DF           2314 	anl	ar2,#0xDF
                           2315 ;	printf_large.c:502: lower_case = 1;
                           2316 ;	genAssign: resultIsFar = FALSE
   0A8C D2*00              2317 	setb	_lower_case
   0A8E 80 02              2318 	sjmp 00120$
   0A90                    2319 00119$:
                           2320 ;	printf_large.c:505: lower_case = 0;
                           2321 ;	genAssign: resultIsFar = FALSE
   0A90 C2*00              2322 	clr	_lower_case
   0A92                    2323 00120$:
                           2324 ;	printf_large.c:507: switch( c )
   0A92 EA                 2325 	mov	a,r2
   0A93 B4 20 02           2326 	cjne	a,#0x20,00346$
   0A96 80 6E              2327 	sjmp 00124$
   0A98                    2328 00346$:
   0A98 EA                 2329 	mov	a,r2
   0A99 B4 2B 02           2330 	cjne	a,#0x2B,00347$
   0A9C 80 62              2331 	sjmp 00123$
   0A9E                    2332 00347$:
   0A9E EA                 2333 	mov	a,r2
   0A9F B4 2D 02           2334 	cjne	a,#0x2D,00348$
   0AA2 80 56              2335 	sjmp 00122$
   0AA4                    2336 00348$:
   0AA4 EA                 2337 	mov	a,r2
   0AA5 B4 42 02           2338 	cjne	a,#0x42,00349$
   0AA8 80 62              2339 	sjmp 00125$
   0AAA                    2340 00349$:
   0AAA EA                 2341 	mov	a,r2
   0AAB B4 43 02           2342 	cjne	a,#0x43,00350$
   0AAE 80 68              2343 	sjmp 00127$
   0AB0                    2344 00350$:
   0AB0 EA                 2345 	mov	a,r2
   0AB1 B4 44 04           2346 	cjne	a,#0x44,00351$
   0AB4 02s00r0Er48        2347 	ljmp	00164$
   0AB8                    2348 00351$:
   0AB8 EA                 2349 	mov	a,r2
   0AB9 B4 46 04           2350 	cjne	a,#0x46,00352$
   0ABC 02s00r0Er6E        2351 	ljmp	00168$
   0AC0                    2352 00352$:
   0AC0 EA                 2353 	mov	a,r2
   0AC1 B4 49 04           2354 	cjne	a,#0x49,00353$
   0AC4 02s00r0Er48        2355 	ljmp	00164$
   0AC8                    2356 00353$:
   0AC8 EA                 2357 	mov	a,r2
   0AC9 B4 4C 02           2358 	cjne	a,#0x4C,00354$
   0ACC 80 44              2359 	sjmp 00126$
   0ACE                    2360 00354$:
   0ACE EA                 2361 	mov	a,r2
   0ACF B4 4F 04           2362 	cjne	a,#0x4F,00355$
   0AD2 02s00r0Er53        2363 	ljmp	00165$
   0AD6                    2364 00355$:
   0AD6 EA                 2365 	mov	a,r2
   0AD7 B4 50 04           2366 	cjne	a,#0x50,00356$
   0ADA 02s00r0Dr76        2367 	ljmp	00153$
   0ADE                    2368 00356$:
   0ADE EA                 2369 	mov	a,r2
   0ADF B4 53 04           2370 	cjne	a,#0x53,00357$
   0AE2 02s00r0Br9C        2371 	ljmp	00131$
   0AE6                    2372 00357$:
   0AE6 EA                 2373 	mov	a,r2
   0AE7 B4 55 04           2374 	cjne	a,#0x55,00358$
   0AEA 02s00r0Er5C        2375 	ljmp	00166$
   0AEE                    2376 00358$:
   0AEE EA                 2377 	mov	a,r2
   0AEF B4 58 04           2378 	cjne	a,#0x58,00359$
   0AF2 02s00r0Er65        2379 	ljmp	00167$
   0AF6                    2380 00359$:
   0AF6 02s00r0Er72        2381 	ljmp	00169$
                           2382 ;	printf_large.c:509: case '-':
   0AFA                    2383 00122$:
                           2384 ;	printf_large.c:510: left_justify = 1;
                           2385 ;	genAssign: resultIsFar = FALSE
   0AFA D2*06              2386 	setb	__print_format_left_justify_1_1
                           2387 ;	printf_large.c:511: goto get_conversion_spec;
   0AFC 02s00r09rE5        2388 	ljmp	00103$
                           2389 ;	printf_large.c:512: case '+':
   0B00                    2390 00123$:
                           2391 ;	printf_large.c:513: prefix_sign = 1;
                           2392 ;	genAssign: resultIsFar = FALSE
   0B00 D2*08              2393 	setb	__print_format_prefix_sign_1_1
                           2394 ;	printf_large.c:514: goto get_conversion_spec;
   0B02 02s00r09rE5        2395 	ljmp	00103$
                           2396 ;	printf_large.c:515: case ' ':
   0B06                    2397 00124$:
                           2398 ;	printf_large.c:516: prefix_space = 1;
                           2399 ;	genAssign: resultIsFar = FALSE
   0B06 D2*09              2400 	setb	__print_format_prefix_space_1_1
                           2401 ;	printf_large.c:517: goto get_conversion_spec;
   0B08 02s00r09rE5        2402 	ljmp	00103$
                           2403 ;	printf_large.c:518: case 'B':
   0B0C                    2404 00125$:
                           2405 ;	printf_large.c:519: char_argument = 1;
                           2406 ;	genAssign: resultIsFar = FALSE
   0B0C D2*0B              2407 	setb	__print_format_char_argument_1_1
                           2408 ;	printf_large.c:520: goto get_conversion_spec;
   0B0E 02s00r09rE5        2409 	ljmp	00103$
                           2410 ;	printf_large.c:521: case 'L':
   0B12                    2411 00126$:
                           2412 ;	printf_large.c:522: long_argument = 1;
                           2413 ;	genAssign: resultIsFar = FALSE
   0B12 D2*0C              2414 	setb	__print_format_long_argument_1_1
                           2415 ;	printf_large.c:523: goto get_conversion_spec;
   0B14 02s00r09rE5        2416 	ljmp	00103$
                           2417 ;	printf_large.c:525: case 'C':
   0B18                    2418 00127$:
                           2419 ;	printf_large.c:526: if( char_argument )
   0B18 30*0B 38           2420 	jnb  __print_format_char_argument_1_1,00129$
   0B1B                    2421 00360$:
                           2422 ;	printf_large.c:527: c = va_arg(ap,char);
   0B1B 90s00r00rA8        2423 	mov	dptr,#__print_format_PARM_4
                           2424 ;	genAssign: resultIsFar = FALSE
   0B1F E0                 2425 	movx	a,@dptr
   0B20 FE                 2426 	mov	r6,a
   0B21 A3                 2427 	inc	dptr
   0B22 E0                 2428 	movx	a,@dptr
   0B23 FF                 2429 	mov	r7,a
   0B24 A3                 2430 	inc	dptr
   0B25 E0                 2431 	movx	a,@dptr
   0B26 F8                 2432 	mov	r0,a
   0B27 A3                 2433 	inc	dptr
   0B28 E0                 2434 	movx	a,@dptr
   0B29 F9                 2435 	mov	r1,a
   0B2A 1E                 2436 	dec	r6
   0B2B BE FF 05           2437 	cjne	r6,#0xFF,00361$
   0B2E 1F                 2438 	dec	r7
   0B2F BF FF 01           2439 	cjne	r7,#0xFF,00361$
   0B32 18                 2440 	dec	r0
   0B33                    2441 00361$:
                           2442 ;	genAssign: resultIsFar = TRUE
   0B33 90s00r00rA8        2443 	mov	dptr,#__print_format_PARM_4
   0B37 EE                 2444 	mov	a,r6
   0B38 F0                 2445 	movx	@dptr,a
   0B39 A3                 2446 	inc	dptr
   0B3A EF                 2447 	mov	a,r7
   0B3B F0                 2448 	movx	@dptr,a
   0B3C A3                 2449 	inc	dptr
   0B3D E8                 2450 	mov	a,r0
   0B3E F0                 2451 	movx	@dptr,a
   0B3F A3                 2452 	inc	dptr
   0B40 E9                 2453 	mov	a,r1
   0B41 F0                 2454 	movx	@dptr,a
   0B42 8E 82              2455 	mov	dpl,r6
   0B44 8F 83              2456 	mov	dph,r7
   0B46 88 93              2457 	mov	dpx,r0
   0B48 89 F0              2458 	mov	b,r1
   0B4A 12s00r00r00        2459 	lcall	__gptrget
   0B4E FE                 2460 	mov	r6,a
                           2461 ;	genAssign: resultIsFar = TRUE
   0B4F 8E 02              2462 	mov	ar2,r6
   0B51 80 3B              2463 	sjmp 00130$
   0B53                    2464 00129$:
                           2465 ;	printf_large.c:529: c = va_arg(ap,int);
   0B53 90s00r00rA8        2466 	mov	dptr,#__print_format_PARM_4
                           2467 ;	genAssign: resultIsFar = FALSE
   0B57 E0                 2468 	movx	a,@dptr
   0B58 FE                 2469 	mov	r6,a
   0B59 A3                 2470 	inc	dptr
   0B5A E0                 2471 	movx	a,@dptr
   0B5B FF                 2472 	mov	r7,a
   0B5C A3                 2473 	inc	dptr
   0B5D E0                 2474 	movx	a,@dptr
   0B5E F8                 2475 	mov	r0,a
   0B5F A3                 2476 	inc	dptr
   0B60 E0                 2477 	movx	a,@dptr
   0B61 F9                 2478 	mov	r1,a
   0B62 EE                 2479 	mov	a,r6
   0B63 24 FE              2480 	add	a,#0xFE
   0B65 FE                 2481 	mov	r6,a
   0B66 EF                 2482 	mov	a,r7
   0B67 34 FF              2483 	addc	a,#0xFF
   0B69 FF                 2484 	mov	r7,a
   0B6A E8                 2485 	mov	a,r0
   0B6B 34 FF              2486 	addc	a,#0xFF
   0B6D F8                 2487 	mov	r0,a
                           2488 ;	genAssign: resultIsFar = TRUE
   0B6E 90s00r00rA8        2489 	mov	dptr,#__print_format_PARM_4
   0B72 EE                 2490 	mov	a,r6
   0B73 F0                 2491 	movx	@dptr,a
   0B74 A3                 2492 	inc	dptr
   0B75 EF                 2493 	mov	a,r7
   0B76 F0                 2494 	movx	@dptr,a
   0B77 A3                 2495 	inc	dptr
   0B78 E8                 2496 	mov	a,r0
   0B79 F0                 2497 	movx	@dptr,a
   0B7A A3                 2498 	inc	dptr
   0B7B E9                 2499 	mov	a,r1
   0B7C F0                 2500 	movx	@dptr,a
   0B7D 8E 82              2501 	mov	dpl,r6
   0B7F 8F 83              2502 	mov	dph,r7
   0B81 88 93              2503 	mov	dpx,r0
   0B83 89 F0              2504 	mov	b,r1
   0B85 12s00r00r00        2505 	lcall	__gptrgetWord
   0B89 FE                 2506 	mov	r6,a
   0B8A AF 9C              2507 	mov	r7,_ap
   0B8C 8E 02              2508 	mov	ar2,r6
   0B8E                    2509 00130$:
                           2510 ;	printf_large.c:530: OUTPUT_CHAR( c, p );
   0B8E C0 05              2511 	push	ar5
   0B90 8A 82              2512 	mov	dpl,r2
   0B92 12s00r00r00        2513 	lcall	__output_char
   0B96 D0 05              2514 	pop	ar5
                           2515 ;	printf_large.c:531: break;
   0B98 02s00r0Er84        2516 	ljmp	00170$
                           2517 ;	printf_large.c:533: case 'S':
   0B9C                    2518 00131$:
                           2519 ;	printf_large.c:534: PTR = va_arg(ap,ptr_t);
   0B9C 90s00r00rA8        2520 	mov	dptr,#__print_format_PARM_4
                           2521 ;	genAssign: resultIsFar = FALSE
   0BA0 E0                 2522 	movx	a,@dptr
   0BA1 FE                 2523 	mov	r6,a
   0BA2 A3                 2524 	inc	dptr
   0BA3 E0                 2525 	movx	a,@dptr
   0BA4 FF                 2526 	mov	r7,a
   0BA5 A3                 2527 	inc	dptr
   0BA6 E0                 2528 	movx	a,@dptr
   0BA7 F8                 2529 	mov	r0,a
   0BA8 A3                 2530 	inc	dptr
   0BA9 E0                 2531 	movx	a,@dptr
   0BAA F9                 2532 	mov	r1,a
   0BAB EE                 2533 	mov	a,r6
   0BAC 24 FC              2534 	add	a,#0xFC
   0BAE FE                 2535 	mov	r6,a
   0BAF EF                 2536 	mov	a,r7
   0BB0 34 FF              2537 	addc	a,#0xFF
   0BB2 FF                 2538 	mov	r7,a
   0BB3 E8                 2539 	mov	a,r0
   0BB4 34 FF              2540 	addc	a,#0xFF
   0BB6 F8                 2541 	mov	r0,a
                           2542 ;	genAssign: resultIsFar = TRUE
   0BB7 90s00r00rA8        2543 	mov	dptr,#__print_format_PARM_4
   0BBB EE                 2544 	mov	a,r6
   0BBC F0                 2545 	movx	@dptr,a
   0BBD A3                 2546 	inc	dptr
   0BBE EF                 2547 	mov	a,r7
   0BBF F0                 2548 	movx	@dptr,a
   0BC0 A3                 2549 	inc	dptr
   0BC1 E8                 2550 	mov	a,r0
   0BC2 F0                 2551 	movx	@dptr,a
   0BC3 A3                 2552 	inc	dptr
   0BC4 E9                 2553 	mov	a,r1
   0BC5 F0                 2554 	movx	@dptr,a
   0BC6 8E 82              2555 	mov	dpl,r6
   0BC8 8F 83              2556 	mov	dph,r7
   0BCA 88 93              2557 	mov	dpx,r0
   0BCC 89 F0              2558 	mov	b,r1
   0BCE 12s00r00r00        2559 	lcall	__gptrgetWord
   0BD2 FE                 2560 	mov	r6,a
   0BD3 AF 9C              2561 	mov	r7,_ap
   0BD5 A3                 2562 	inc	dptr
   0BD6 12s00r00r00        2563 	lcall	__gptrgetWord
   0BDA F8                 2564 	mov	r0,a
   0BDB A9 9C              2565 	mov	r1,_ap
   0BDD 90s00r00r07        2566 	mov	dptr,#_value
   0BE1 EE                 2567 	mov	a,r6
   0BE2 F0                 2568 	movx	@dptr,a
   0BE3 A3                 2569 	inc	dptr
   0BE4 EF                 2570 	mov	a,r7
   0BE5 F0                 2571 	movx	@dptr,a
   0BE6 A3                 2572 	inc	dptr
   0BE7 E8                 2573 	mov	a,r0
   0BE8 F0                 2574 	movx	@dptr,a
   0BE9 A3                 2575 	inc	dptr
   0BEA E9                 2576 	mov	a,r1
   0BEB F0                 2577 	movx	@dptr,a
                           2578 ;	printf_large.c:537: if (PTR==0) {
   0BEC EE                 2579 	mov	a,r6
   0BED 4F                 2580 	orl	a,r7
   0BEE 48                 2581 	orl	a,r0
   0BEF 70 1C              2582 	jnz  00133$
   0BF1                    2583 00362$:
                           2584 ;	printf_large.c:538: PTR=NULL_STRING;
   0BF1 90s00r00r07        2585 	mov	dptr,#_value
   0BF5 74r00              2586 	mov	a,#__str_0
   0BF7 F0                 2587 	movx	@dptr,a
   0BF8 A3                 2588 	inc	dptr
   0BF9 74s00              2589 	mov	a,#(__str_0 >> 8)
   0BFB F0                 2590 	movx	@dptr,a
   0BFC A3                 2591 	inc	dptr
   0BFD 74s00              2592 	mov	a,#(__str_0 >> 16)
   0BFF F0                 2593 	movx	@dptr,a
   0C00 A3                 2594 	inc	dptr
   0C01 74 80              2595 	mov	a,#0x80
   0C03 F0                 2596 	movx	@dptr,a
                           2597 ;	printf_large.c:539: length=NULL_STRING_LENGTH;
                           2598 ;	genAssign: resultIsFar = TRUE
   0C04 90s00r00rAE        2599 	mov	dptr,#__print_format_length_1_1
   0C08 74 06              2600 	mov	a,#0x06
   0C0A F0                 2601 	movx	@dptr,a
   0C0B 80 29              2602 	sjmp 00134$
   0C0D                    2603 00133$:
                           2604 ;	printf_large.c:541: length = strlen(PTR);
   0C0D 90s00r00r07        2605 	mov	dptr,#_value
   0C11 E0                 2606 	movx	a,@dptr
   0C12 A3                 2607 	inc	dptr
   0C13 FF                 2608 	mov	r7,a
   0C14 E0                 2609 	movx	a,@dptr
   0C15 A3                 2610 	inc	dptr
   0C16 F8                 2611 	mov	r0,a
   0C17 E0                 2612 	movx	a,@dptr
   0C18 A3                 2613 	inc	dptr
   0C19 F9                 2614 	mov	r1,a
   0C1A E0                 2615 	movx	a,@dptr
   0C1B FB                 2616 	mov	r3,a
   0C1C C0 05              2617 	push	ar5
   0C1E 8F 82              2618 	mov	dpl,r7
   0C20 88 83              2619 	mov	dph,r0
   0C22 89 93              2620 	mov	dpx,r1
   0C24 8B F0              2621 	mov	b,r3
   0C26 12s00r00r00        2622 	lcall	_strlen
   0C2A AB 82              2623 	mov	r3,dpl
   0C2C AF 83              2624 	mov	r7,dph
   0C2E D0 05              2625 	pop	ar5
   0C30 90s00r00rAE        2626 	mov	dptr,#__print_format_length_1_1
   0C34 EB                 2627 	mov	a,r3
   0C35 F0                 2628 	movx	@dptr,a
                           2629 ;	printf_large.c:828: return charsOutputted;
                           2630 ;	printf_large.c:541: length = strlen(PTR);
   0C36                    2631 00134$:
                           2632 ;	printf_large.c:546: if ( decimals == -1 )
   0C36 ED                 2633 	mov	a,r5
   0C37 B4 FF 06           2634 	cjne a,#0xFF,00136$
   0C3A                    2635 00364$:
                           2636 ;	printf_large.c:548: decimals = length;
   0C3A 90s00r00rAE        2637 	mov	dptr,#__print_format_length_1_1
                           2638 ;	genAssign: resultIsFar = TRUE
   0C3E E0                 2639 	movx	a,@dptr
   0C3F FD                 2640 	mov	r5,a
   0C40                    2641 00136$:
                           2642 ;	printf_large.c:550: if ( ( !left_justify ) && (length < width) )
   0C40 20*06 61           2643 	jb   __print_format_left_justify_1_1,00282$
   0C43                    2644 00365$:
   0C43 90s00r00rAD        2645 	mov	dptr,#__print_format_width_1_1
   0C47 75 86 01           2646 	mov	dps, #1
   0C4A 90s00r00rAE        2647 	mov	dptr, #__print_format_length_1_1
   0C4E 15 86              2648 	dec	dps
   0C50 C3                 2649 	clr	c
   0C51 75 86 01           2650 	mov	dps,#1
   0C54 E0                 2651 	movx	a,@dptr
   0C55 75 86 00           2652 	mov	dps,#0
   0C58 C5 F0              2653 	xch	a, b
   0C5A E0                 2654 	movx	a,@dptr
   0C5B C5 F0              2655 	xch	a, b
   0C5D 95 F0              2656 	subb	a,b
   0C5F 50 43              2657 	jnc  00282$
   0C61                    2658 00366$:
                           2659 ;	printf_large.c:552: width -= length;
   0C61 90s00r00rAE        2660 	mov	dptr,#__print_format_length_1_1
   0C65 75 86 01           2661 	mov	dps, #1
   0C68 90s00r00rAD        2662 	mov	dptr, #__print_format_width_1_1
   0C6C 15 86              2663 	dec	dps
   0C6E C3                 2664 	clr	c
   0C6F E0                 2665 	movx	a,@dptr
   0C70 F5 F0              2666 	mov	b,a
   0C72 05 86              2667 	inc	dps
   0C74 E0                 2668 	movx	a,@dptr
   0C75 95 F0              2669 	subb	a,b
   0C77 F0                 2670 	movx	@dptr,a
   0C78 75 86 00           2671 	mov	dps,#0
                           2672 ;	printf_large.c:553: while( width-- != 0 )
   0C7B 90s00r00rAD        2673 	mov	dptr,#__print_format_width_1_1
                           2674 ;	genAssign: resultIsFar = FALSE
   0C7F E0                 2675 	movx	a,@dptr
   0C80 FF                 2676 	mov	r7,a
   0C81                    2677 00137$:
                           2678 ;	genAssign: resultIsFar = FALSE
   0C81 8F 00              2679 	mov	ar0,r7
   0C83 1F                 2680 	dec	r7
                           2681 ;	genAssign: resultIsFar = TRUE
   0C84 90s00r00rAD        2682 	mov	dptr,#__print_format_width_1_1
   0C88 EF                 2683 	mov	a,r7
   0C89 F0                 2684 	movx	@dptr,a
   0C8A E8                 2685 	mov	a,r0
   0C8B 60 11              2686 	jz  00318$
   0C8D                    2687 00367$:
                           2688 ;	printf_large.c:555: OUTPUT_CHAR( ' ', p );
   0C8D C0 05              2689 	push	ar5
   0C8F C0 07              2690 	push	ar7
   0C91 75 82 20           2691 	mov	dpl,#0x20
   0C94 12s00r00r00        2692 	lcall	__output_char
   0C98 D0 07              2693 	pop	ar7
   0C9A D0 05              2694 	pop	ar5
                           2695 ;	printf_large.c:559: while ( (c = *PTR)  && (decimals-- > 0))
   0C9C 80 E3              2696 	sjmp 00137$
   0C9E                    2697 00318$:
                           2698 ;	genAssign: resultIsFar = TRUE
   0C9E 90s00r00rAD        2699 	mov	dptr,#__print_format_width_1_1
   0CA2 EF                 2700 	mov	a,r7
   0CA3 F0                 2701 	movx	@dptr,a
   0CA4                    2702 00282$:
                           2703 ;	genAssign: resultIsFar = FALSE
   0CA4 8D 07              2704 	mov	ar7,r5
   0CA6                    2705 00144$:
   0CA6 90s00r00r07        2706 	mov	dptr,#_value
   0CAA E0                 2707 	movx	a,@dptr
   0CAB A3                 2708 	inc	dptr
   0CAC F8                 2709 	mov	r0,a
   0CAD E0                 2710 	movx	a,@dptr
   0CAE A3                 2711 	inc	dptr
   0CAF F9                 2712 	mov	r1,a
   0CB0 E0                 2713 	movx	a,@dptr
   0CB1 A3                 2714 	inc	dptr
   0CB2 FB                 2715 	mov	r3,a
   0CB3 E0                 2716 	movx	a,@dptr
   0CB4 FE                 2717 	mov	r6,a
   0CB5 88 82              2718 	mov	dpl,r0
   0CB7 89 83              2719 	mov	dph,r1
   0CB9 8B 93              2720 	mov	dpx,r3
   0CBB 8E F0              2721 	mov	b,r6
   0CBD 12s00r00r00        2722 	lcall	__gptrget
                           2723 ;	genAssign: resultIsFar = TRUE
   0CC1 F8                 2724 	mov  r0,a
   0CC2 88 02              2725 	mov  ar2,r0 
   0CC4 60 44              2726 	jz  00319$
   0CC6                    2727 00368$:
                           2728 ;	genAssign: resultIsFar = FALSE
   0CC6 8F 06              2729 	mov	ar6,r7
   0CC8 1F                 2730 	dec	r7
                           2731 ;	genAssign: resultIsFar = TRUE
   0CC9 8F 05              2732 	mov	ar5,r7
   0CCB C3                 2733 	clr	c
   0CCC 74 80              2734 	mov  a,#(0x00 ^ 0x80)
   0CCE 8E F0              2735 	mov	b,r6
   0CD0 63 F0 80           2736 	xrl	b,#0x80
   0CD3 95 F0              2737 	subb	a,b
   0CD5 50 33              2738 	jnc  00319$
   0CD7                    2739 00369$:
                           2740 ;	printf_large.c:561: OUTPUT_CHAR( c, p );
   0CD7 C0 07              2741 	push	ar7
   0CD9 8A 82              2742 	mov	dpl,r2
   0CDB 12s00r00r00        2743 	lcall	__output_char
   0CDF D0 07              2744 	pop	ar7
                           2745 ;	printf_large.c:562: PTR++;
   0CE1 90s00r00r07        2746 	mov	dptr,#_value
   0CE5 E0                 2747 	movx	a,@dptr
   0CE6 A3                 2748 	inc	dptr
   0CE7 FE                 2749 	mov	r6,a
   0CE8 E0                 2750 	movx	a,@dptr
   0CE9 A3                 2751 	inc	dptr
   0CEA F8                 2752 	mov	r0,a
   0CEB E0                 2753 	movx	a,@dptr
   0CEC A3                 2754 	inc	dptr
   0CED F9                 2755 	mov	r1,a
   0CEE E0                 2756 	movx	a,@dptr
   0CEF FB                 2757 	mov	r3,a
   0CF0 0E                 2758 	inc	r6
   0CF1 BE 00 05           2759 	cjne	r6,#0,00370$
   0CF4 08                 2760 	inc	r0
   0CF5 B8 00 01           2761 	cjne	r0,#0,00370$
   0CF8 09                 2762 	inc	r1
   0CF9                    2763 00370$:
   0CF9 90s00r00r07        2764 	mov	dptr,#_value
   0CFD EE                 2765 	mov	a,r6
   0CFE F0                 2766 	movx	@dptr,a
   0CFF A3                 2767 	inc	dptr
   0D00 E8                 2768 	mov	a,r0
   0D01 F0                 2769 	movx	@dptr,a
   0D02 A3                 2770 	inc	dptr
   0D03 E9                 2771 	mov	a,r1
   0D04 F0                 2772 	movx	@dptr,a
   0D05 A3                 2773 	inc	dptr
   0D06 EB                 2774 	mov	a,r3
   0D07 F0                 2775 	movx	@dptr,a
   0D08 80 9C              2776 	sjmp 00144$
   0D0A                    2777 00319$:
                           2778 ;	genAssign: resultIsFar = TRUE
   0D0A 8F 05              2779 	mov	ar5,r7
                           2780 ;	printf_large.c:565: if ( left_justify && (length < width))
   0D0C 20*06 04           2781 	jb	__print_format_left_justify_1_1,00371$
   0D0F 02s00r0Er84        2782 	ljmp	00170$
   0D13                    2783 00371$:
   0D13 90s00r00rAD        2784 	mov	dptr,#__print_format_width_1_1
   0D17 75 86 01           2785 	mov	dps, #1
   0D1A 90s00r00rAE        2786 	mov	dptr, #__print_format_length_1_1
   0D1E 15 86              2787 	dec	dps
   0D20 C3                 2788 	clr	c
   0D21 75 86 01           2789 	mov	dps,#1
   0D24 E0                 2790 	movx	a,@dptr
   0D25 75 86 00           2791 	mov	dps,#0
   0D28 C5 F0              2792 	xch	a, b
   0D2A E0                 2793 	movx	a,@dptr
   0D2B C5 F0              2794 	xch	a, b
   0D2D 95 F0              2795 	subb	a,b
   0D2F 40 04              2796 	jc	00372$
   0D31 02s00r0Er84        2797 	ljmp	00170$
   0D35                    2798 00372$:
                           2799 ;	printf_large.c:567: width -= length;
   0D35 90s00r00rAE        2800 	mov	dptr,#__print_format_length_1_1
   0D39 75 86 01           2801 	mov	dps, #1
   0D3C 90s00r00rAD        2802 	mov	dptr, #__print_format_width_1_1
   0D40 15 86              2803 	dec	dps
   0D42 C3                 2804 	clr	c
   0D43 E0                 2805 	movx	a,@dptr
   0D44 F5 F0              2806 	mov	b,a
   0D46 05 86              2807 	inc	dps
   0D48 E0                 2808 	movx	a,@dptr
   0D49 95 F0              2809 	subb	a,b
   0D4B F0                 2810 	movx	@dptr,a
   0D4C 75 86 00           2811 	mov	dps,#0
                           2812 ;	printf_large.c:568: while( width-- != 0 )
   0D4F 90s00r00rAD        2813 	mov	dptr,#__print_format_width_1_1
                           2814 ;	genAssign: resultIsFar = FALSE
   0D53 E0                 2815 	movx	a,@dptr
   0D54 FE                 2816 	mov	r6,a
   0D55                    2817 00147$:
                           2818 ;	genAssign: resultIsFar = FALSE
   0D55 8E 07              2819 	mov	ar7,r6
   0D57 1E                 2820 	dec	r6
                           2821 ;	genAssign: resultIsFar = TRUE
   0D58 90s00r00rAD        2822 	mov	dptr,#__print_format_width_1_1
   0D5C EE                 2823 	mov	a,r6
   0D5D F0                 2824 	movx	@dptr,a
   0D5E EF                 2825 	mov	a,r7
   0D5F 70 04              2826 	jnz	00373$
   0D61 02s00r0Er7E        2827 	ljmp	00320$
   0D65                    2828 00373$:
                           2829 ;	printf_large.c:570: OUTPUT_CHAR( ' ', p );
   0D65 C0 05              2830 	push	ar5
   0D67 C0 06              2831 	push	ar6
   0D69 75 82 20           2832 	mov	dpl,#0x20
   0D6C 12s00r00r00        2833 	lcall	__output_char
   0D70 D0 06              2834 	pop	ar6
   0D72 D0 05              2835 	pop	ar5
                           2836 ;	printf_large.c:575: case 'P':
   0D74 80 DF              2837 	sjmp 00147$
   0D76                    2838 00153$:
                           2839 ;	printf_large.c:576: PTR = va_arg(ap,ptr_t);
   0D76 90s00r00rA8        2840 	mov	dptr,#__print_format_PARM_4
                           2841 ;	genAssign: resultIsFar = FALSE
   0D7A E0                 2842 	movx	a,@dptr
   0D7B FF                 2843 	mov	r7,a
   0D7C A3                 2844 	inc	dptr
   0D7D E0                 2845 	movx	a,@dptr
   0D7E F8                 2846 	mov	r0,a
   0D7F A3                 2847 	inc	dptr
   0D80 E0                 2848 	movx	a,@dptr
   0D81 F9                 2849 	mov	r1,a
   0D82 A3                 2850 	inc	dptr
   0D83 E0                 2851 	movx	a,@dptr
   0D84 FB                 2852 	mov	r3,a
   0D85 EF                 2853 	mov	a,r7
   0D86 24 FC              2854 	add	a,#0xFC
   0D88 FF                 2855 	mov	r7,a
   0D89 E8                 2856 	mov	a,r0
   0D8A 34 FF              2857 	addc	a,#0xFF
   0D8C F8                 2858 	mov	r0,a
   0D8D E9                 2859 	mov	a,r1
   0D8E 34 FF              2860 	addc	a,#0xFF
   0D90 F9                 2861 	mov	r1,a
                           2862 ;	genAssign: resultIsFar = TRUE
   0D91 90s00r00rA8        2863 	mov	dptr,#__print_format_PARM_4
   0D95 EF                 2864 	mov	a,r7
   0D96 F0                 2865 	movx	@dptr,a
   0D97 A3                 2866 	inc	dptr
   0D98 E8                 2867 	mov	a,r0
   0D99 F0                 2868 	movx	@dptr,a
   0D9A A3                 2869 	inc	dptr
   0D9B E9                 2870 	mov	a,r1
   0D9C F0                 2871 	movx	@dptr,a
   0D9D A3                 2872 	inc	dptr
   0D9E EB                 2873 	mov	a,r3
   0D9F F0                 2874 	movx	@dptr,a
   0DA0 8F 82              2875 	mov	dpl,r7
   0DA2 88 83              2876 	mov	dph,r0
   0DA4 89 93              2877 	mov	dpx,r1
   0DA6 8B F0              2878 	mov	b,r3
   0DA8 12s00r00r00        2879 	lcall	__gptrgetWord
   0DAC FF                 2880 	mov	r7,a
   0DAD A8 9C              2881 	mov	r0,_ap
   0DAF A3                 2882 	inc	dptr
   0DB0 12s00r00r00        2883 	lcall	__gptrgetWord
   0DB4 F9                 2884 	mov	r1,a
   0DB5 AB 9C              2885 	mov	r3,_ap
   0DB7 90s00r00r07        2886 	mov	dptr,#_value
   0DBB EF                 2887 	mov	a,r7
   0DBC F0                 2888 	movx	@dptr,a
   0DBD A3                 2889 	inc	dptr
   0DBE E8                 2890 	mov	a,r0
   0DBF F0                 2891 	movx	@dptr,a
   0DC0 A3                 2892 	inc	dptr
   0DC1 E9                 2893 	mov	a,r1
   0DC2 F0                 2894 	movx	@dptr,a
   0DC3 A3                 2895 	inc	dptr
   0DC4 EB                 2896 	mov	a,r3
   0DC5 F0                 2897 	movx	@dptr,a
                           2898 ;	printf_large.c:580: unsigned char memtype = value.byte[3];
   0DC6 90s00r00r0A        2899 	mov	dptr,#(_value + 0x000003)
   0DCA E0                 2900 	movx	a,@dptr
   0DCB FB                 2901 	mov	r3,a
                           2902 ;	genAssign: resultIsFar = FALSE
   0DCC 8B 02              2903 	mov	ar2,r3
                           2904 ;	printf_large.c:581: if (memtype >= 0x80)
   0DCE BA 80 00           2905 	cjne	r2,#0x80,00374$
   0DD1                    2906 00374$:
   0DD1 40 04              2907 	jc   00161$
   0DD3                    2908 00375$:
                           2909 ;	printf_large.c:582: c = 'C';
                           2910 ;	genAssign: resultIsFar = TRUE
   0DD3 7A 43              2911 	mov	r2,#0x43
   0DD5 80 14              2912 	sjmp 00162$
   0DD7                    2913 00161$:
                           2914 ;	printf_large.c:583: else if (memtype >= 0x60)
   0DD7 BA 60 00           2915 	cjne	r2,#0x60,00376$
   0DDA                    2916 00376$:
   0DDA 40 04              2917 	jc   00158$
   0DDC                    2918 00377$:
                           2919 ;	printf_large.c:584: c = 'P';
                           2920 ;	genAssign: resultIsFar = TRUE
   0DDC 7A 50              2921 	mov	r2,#0x50
   0DDE 80 0B              2922 	sjmp 00162$
   0DE0                    2923 00158$:
                           2924 ;	printf_large.c:585: else if (memtype >= 0x40)
   0DE0 BA 40 00           2925 	cjne	r2,#0x40,00378$
   0DE3                    2926 00378$:
   0DE3 40 04              2927 	jc   00155$
   0DE5                    2928 00379$:
                           2929 ;	printf_large.c:586: c = 'I';
                           2930 ;	genAssign: resultIsFar = TRUE
   0DE5 7A 49              2931 	mov	r2,#0x49
   0DE7 80 02              2932 	sjmp 00162$
   0DE9                    2933 00155$:
                           2934 ;	printf_large.c:588: c = 'X';
                           2935 ;	genAssign: resultIsFar = TRUE
   0DE9 7A 58              2936 	mov	r2,#0x58
   0DEB                    2937 00162$:
                           2938 ;	printf_large.c:590: OUTPUT_CHAR(c, p);
   0DEB C0 05              2939 	push	ar5
   0DED 8A 82              2940 	mov	dpl,r2
   0DEF 12s00r00r00        2941 	lcall	__output_char
   0DF3 D0 05              2942 	pop	ar5
                           2943 ;	printf_large.c:591: OUTPUT_CHAR(':', p);
   0DF5 C0 05              2944 	push	ar5
   0DF7 75 82 3A           2945 	mov	dpl,#0x3A
   0DFA 12s00r00r00        2946 	lcall	__output_char
   0DFE D0 05              2947 	pop	ar5
                           2948 ;	printf_large.c:592: OUTPUT_CHAR('0', p);
   0E00 C0 05              2949 	push	ar5
   0E02 75 82 30           2950 	mov	dpl,#0x30
   0E05 12s00r00r00        2951 	lcall	__output_char
   0E09 D0 05              2952 	pop	ar5
                           2953 ;	printf_large.c:593: OUTPUT_CHAR('x', p);
   0E0B C0 05              2954 	push	ar5
   0E0D 75 82 78           2955 	mov	dpl,#0x78
   0E10 12s00r00r00        2956 	lcall	__output_char
   0E14 D0 05              2957 	pop	ar5
                           2958 ;	printf_large.c:594: OUTPUT_2DIGITS( value.byte[2] );
   0E16 90s00r00r09        2959 	mov	dptr,#(_value + 0x000002)
   0E1A E0                 2960 	movx	a,@dptr
   0E1B FF                 2961 	mov	r7,a
   0E1C C0 05              2962 	push	ar5
   0E1E 8F 82              2963 	mov	dpl,r7
   0E20 12s00r00r66        2964 	lcall	_output_2digits
   0E24 D0 05              2965 	pop	ar5
                           2966 ;	printf_large.c:595: OUTPUT_2DIGITS( value.byte[1] );
   0E26 90s00r00r08        2967 	mov	dptr,#(_value + 0x000001)
   0E2A E0                 2968 	movx	a,@dptr
   0E2B FF                 2969 	mov	r7,a
   0E2C C0 05              2970 	push	ar5
   0E2E 8F 82              2971 	mov	dpl,r7
   0E30 12s00r00r66        2972 	lcall	_output_2digits
   0E34 D0 05              2973 	pop	ar5
                           2974 ;	printf_large.c:596: OUTPUT_2DIGITS( value.byte[0] );
   0E36 90s00r00r07        2975 	mov	dptr,#_value
   0E3A E0                 2976 	movx	a,@dptr
   0E3B FF                 2977 	mov	r7,a
   0E3C C0 05              2978 	push	ar5
   0E3E 8F 82              2979 	mov	dpl,r7
   0E40 12s00r00r66        2980 	lcall	_output_2digits
   0E44 D0 05              2981 	pop	ar5
                           2982 ;	printf_large.c:625: break;
                           2983 ;	printf_large.c:628: case 'I':
   0E46 80 3C              2984 	sjmp 00170$
   0E48                    2985 00164$:
                           2986 ;	printf_large.c:629: signed_argument = 1;
                           2987 ;	genAssign: resultIsFar = FALSE
   0E48 D2*0A              2988 	setb	__print_format_signed_argument_1_1
                           2989 ;	printf_large.c:630: radix = 10;
                           2990 ;	genAssign: resultIsFar = TRUE
   0E4A 90s00r00rAC        2991 	mov	dptr,#__print_format_radix_1_1
   0E4E 74 0A              2992 	mov	a,#0x0A
   0E50 F0                 2993 	movx	@dptr,a
                           2994 ;	printf_large.c:631: break;
                           2995 ;	printf_large.c:633: case 'O':
   0E51 80 31              2996 	sjmp 00170$
   0E53                    2997 00165$:
                           2998 ;	printf_large.c:634: radix = 8;
                           2999 ;	genAssign: resultIsFar = TRUE
   0E53 90s00r00rAC        3000 	mov	dptr,#__print_format_radix_1_1
   0E57 74 08              3001 	mov	a,#0x08
   0E59 F0                 3002 	movx	@dptr,a
                           3003 ;	printf_large.c:635: break;
                           3004 ;	printf_large.c:637: case 'U':
   0E5A 80 28              3005 	sjmp 00170$
   0E5C                    3006 00166$:
                           3007 ;	printf_large.c:638: radix = 10;
                           3008 ;	genAssign: resultIsFar = TRUE
   0E5C 90s00r00rAC        3009 	mov	dptr,#__print_format_radix_1_1
   0E60 74 0A              3010 	mov	a,#0x0A
   0E62 F0                 3011 	movx	@dptr,a
                           3012 ;	printf_large.c:639: break;
                           3013 ;	printf_large.c:641: case 'X':
   0E63 80 1F              3014 	sjmp 00170$
   0E65                    3015 00167$:
                           3016 ;	printf_large.c:642: radix = 16;
                           3017 ;	genAssign: resultIsFar = TRUE
   0E65 90s00r00rAC        3018 	mov	dptr,#__print_format_radix_1_1
   0E69 74 10              3019 	mov	a,#0x10
   0E6B F0                 3020 	movx	@dptr,a
                           3021 ;	printf_large.c:643: break;
                           3022 ;	printf_large.c:645: case 'F':
   0E6C 80 16              3023 	sjmp 00170$
   0E6E                    3024 00168$:
                           3025 ;	printf_large.c:646: float_argument=1;
                           3026 ;	genAssign: resultIsFar = FALSE
   0E6E D2*0D              3027 	setb	__print_format_float_argument_1_1
                           3028 ;	printf_large.c:647: break;
                           3029 ;	printf_large.c:649: default:
   0E70 80 12              3030 	sjmp 00170$
   0E72                    3031 00169$:
                           3032 ;	printf_large.c:651: OUTPUT_CHAR( c, p );
   0E72 C0 05              3033 	push	ar5
   0E74 8A 82              3034 	mov	dpl,r2
   0E76 12s00r00r00        3035 	lcall	__output_char
   0E7A D0 05              3036 	pop	ar5
                           3037 ;	printf_large.c:828: return charsOutputted;
                           3038 ;	printf_large.c:653: }
   0E7C 80 06              3039 	sjmp 00170$
   0E7E                    3040 00320$:
                           3041 ;	genAssign: resultIsFar = TRUE
   0E7E 90s00r00rAD        3042 	mov	dptr,#__print_format_width_1_1
   0E82 EE                 3043 	mov	a,r6
   0E83 F0                 3044 	movx	@dptr,a
   0E84                    3045 00170$:
                           3046 ;	printf_large.c:655: if (float_argument) {
   0E84 20*0D 04           3047 	jb	__print_format_float_argument_1_1,00380$
   0E87 02s00r0Fr16        3048 	ljmp	00233$
   0E8B                    3049 00380$:
                           3050 ;	printf_large.c:656: value.f=va_arg(ap,float);
   0E8B 90s00r00rA8        3051 	mov	dptr,#__print_format_PARM_4
                           3052 ;	genAssign: resultIsFar = FALSE
   0E8F E0                 3053 	movx	a,@dptr
   0E90 FE                 3054 	mov	r6,a
   0E91 A3                 3055 	inc	dptr
   0E92 E0                 3056 	movx	a,@dptr
   0E93 FF                 3057 	mov	r7,a
   0E94 A3                 3058 	inc	dptr
   0E95 E0                 3059 	movx	a,@dptr
   0E96 F8                 3060 	mov	r0,a
   0E97 A3                 3061 	inc	dptr
   0E98 E0                 3062 	movx	a,@dptr
   0E99 F9                 3063 	mov	r1,a
   0E9A EE                 3064 	mov	a,r6
   0E9B 24 FC              3065 	add	a,#0xFC
   0E9D FE                 3066 	mov	r6,a
   0E9E EF                 3067 	mov	a,r7
   0E9F 34 FF              3068 	addc	a,#0xFF
   0EA1 FF                 3069 	mov	r7,a
   0EA2 E8                 3070 	mov	a,r0
   0EA3 34 FF              3071 	addc	a,#0xFF
   0EA5 F8                 3072 	mov	r0,a
                           3073 ;	genAssign: resultIsFar = TRUE
   0EA6 90s00r00rA8        3074 	mov	dptr,#__print_format_PARM_4
   0EAA EE                 3075 	mov	a,r6
   0EAB F0                 3076 	movx	@dptr,a
   0EAC A3                 3077 	inc	dptr
   0EAD EF                 3078 	mov	a,r7
   0EAE F0                 3079 	movx	@dptr,a
   0EAF A3                 3080 	inc	dptr
   0EB0 E8                 3081 	mov	a,r0
   0EB1 F0                 3082 	movx	@dptr,a
   0EB2 A3                 3083 	inc	dptr
   0EB3 E9                 3084 	mov	a,r1
   0EB4 F0                 3085 	movx	@dptr,a
   0EB5 8E 82              3086 	mov	dpl,r6
   0EB7 8F 83              3087 	mov	dph,r7
   0EB9 88 93              3088 	mov	dpx,r0
   0EBB 89 F0              3089 	mov	b,r1
   0EBD 12s00r00r00        3090 	lcall	__gptrgetWord
   0EC1 FE                 3091 	mov	r6,a
   0EC2 AF 9C              3092 	mov	r7,_ap
   0EC4 A3                 3093 	inc	dptr
   0EC5 12s00r00r00        3094 	lcall	__gptrgetWord
   0EC9 F8                 3095 	mov	r0,a
   0ECA A9 9C              3096 	mov	r1,_ap
   0ECC 90s00r00r07        3097 	mov	dptr,#_value
   0ED0 EE                 3098 	mov	a,r6
   0ED1 F0                 3099 	movx	@dptr,a
   0ED2 A3                 3100 	inc	dptr
   0ED3 EF                 3101 	mov	a,r7
   0ED4 F0                 3102 	movx	@dptr,a
   0ED5 A3                 3103 	inc	dptr
   0ED6 E8                 3104 	mov	a,r0
   0ED7 F0                 3105 	movx	@dptr,a
   0ED8 A3                 3106 	inc	dptr
   0ED9 E9                 3107 	mov	a,r1
   0EDA F0                 3108 	movx	@dptr,a
                           3109 ;	printf_large.c:674: OUTPUT_FLOAT(value.f, width, decimals, left_justify,
   0EDB 90s00r00r07        3110 	mov	dptr,#_value
   0EDF E0                 3111 	movx	a,@dptr
   0EE0 A3                 3112 	inc	dptr
   0EE1 E0                 3113 	movx	a,@dptr
   0EE2 A3                 3114 	inc	dptr
   0EE3 E0                 3115 	movx	a,@dptr
   0EE4 A3                 3116 	inc	dptr
   0EE5 E0                 3117 	movx	a,@dptr
   0EE6 90s00r00rAD        3118 	mov	dptr,#__print_format_width_1_1
                           3119 ;	genAssign: resultIsFar = TRUE
   0EEA E0                 3120 	movx	a,@dptr
   0EEB 90s00r00r0E        3121 	mov	dptr,#_output_float_PARM_2
   0EEF F0                 3122 	movx	@dptr,a
                           3123 ;	genAssign: resultIsFar = TRUE
   0EF0 90s00r00r0F        3124 	mov	dptr,#_output_float_PARM_3
   0EF4 ED                 3125 	mov	a,r5
   0EF5 F0                 3126 	movx	@dptr,a
                           3127 ;	genAssign: resultIsFar = FALSE
   0EF6 A2*06              3128 	mov	c,__print_format_left_justify_1_1
   0EF8 92*01              3129 	mov	_output_float_PARM_4,c
                           3130 ;	genAssign: resultIsFar = FALSE
   0EFA A2*07              3131 	mov	c,__print_format_zero_padding_1_1
   0EFC 92*02              3132 	mov	_output_float_PARM_5,c
                           3133 ;	genAssign: resultIsFar = FALSE
   0EFE A2*08              3134 	mov	c,__print_format_prefix_sign_1_1
   0F00 92*03              3135 	mov	_output_float_PARM_6,c
                           3136 ;	genAssign: resultIsFar = FALSE
   0F02 A2*09              3137 	mov	c,__print_format_prefix_space_1_1
   0F04 92*04              3138 	mov	_output_float_PARM_7,c
   0F06 8E 82              3139 	mov	dpl,r6
   0F08 8F 83              3140 	mov	dph,r7
   0F0A 88 93              3141 	mov	dpx,r0
   0F0C 89 F0              3142 	mov	b,r1
   0F0E 12s00r00rDE        3143 	lcall	_output_float
   0F12 02s00r09r77        3144 	ljmp	00238$
   0F16                    3145 00233$:
                           3146 ;	printf_large.c:678: } else if (radix != 0)
   0F16 90s00r00rAC        3147 	mov	dptr,#__print_format_radix_1_1
   0F1A E0                 3148 	movx	a,@dptr
   0F1B 70 04              3149 	jnz	00381$
   0F1D 02s00r09r77        3150 	ljmp	00238$
   0F21                    3151 00381$:
                           3152 ;	printf_large.c:683: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
                           3153 ;	genAssign: resultIsFar = TRUE
   0F21 90s00r00rB5        3154 	mov	dptr,#__print_format_pstore_4_23
   0F25 74rB4              3155 	mov	a,#(__print_format_store_4_23 + 0x000005)
   0F27 F0                 3156 	movx	@dptr,a
   0F28 A3                 3157 	inc	dptr
   0F29 74s00              3158 	mov	a,#((__print_format_store_4_23 + 0x000005) >> 8)
   0F2B F0                 3159 	movx	@dptr,a
   0F2C A3                 3160 	inc	dptr
   0F2D 74s00              3161 	mov	a,#((__print_format_store_4_23 + 0x000005) >> 16)
   0F2F F0                 3162 	movx	@dptr,a
                           3163 ;	printf_large.c:686: if (char_argument)
   0F30 30*0B 78           3164 	jnb  __print_format_char_argument_1_1,00179$
   0F33                    3165 00382$:
                           3166 ;	printf_large.c:688: value.l = va_arg(ap,char);
   0F33 90s00r00rA8        3167 	mov	dptr,#__print_format_PARM_4
                           3168 ;	genAssign: resultIsFar = FALSE
   0F37 E0                 3169 	movx	a,@dptr
   0F38 F8                 3170 	mov	r0,a
   0F39 A3                 3171 	inc	dptr
   0F3A E0                 3172 	movx	a,@dptr
   0F3B F9                 3173 	mov	r1,a
   0F3C A3                 3174 	inc	dptr
   0F3D E0                 3175 	movx	a,@dptr
   0F3E FD                 3176 	mov	r5,a
   0F3F A3                 3177 	inc	dptr
   0F40 E0                 3178 	movx	a,@dptr
   0F41 FE                 3179 	mov	r6,a
   0F42 18                 3180 	dec	r0
   0F43 B8 FF 05           3181 	cjne	r0,#0xFF,00383$
   0F46 19                 3182 	dec	r1
   0F47 B9 FF 01           3183 	cjne	r1,#0xFF,00383$
   0F4A 1D                 3184 	dec	r5
   0F4B                    3185 00383$:
                           3186 ;	genAssign: resultIsFar = TRUE
   0F4B 90s00r00rA8        3187 	mov	dptr,#__print_format_PARM_4
   0F4F E8                 3188 	mov	a,r0
   0F50 F0                 3189 	movx	@dptr,a
   0F51 A3                 3190 	inc	dptr
   0F52 E9                 3191 	mov	a,r1
   0F53 F0                 3192 	movx	@dptr,a
   0F54 A3                 3193 	inc	dptr
   0F55 ED                 3194 	mov	a,r5
   0F56 F0                 3195 	movx	@dptr,a
   0F57 A3                 3196 	inc	dptr
   0F58 EE                 3197 	mov	a,r6
   0F59 F0                 3198 	movx	@dptr,a
   0F5A 88 82              3199 	mov	dpl,r0
   0F5C 89 83              3200 	mov	dph,r1
   0F5E 8D 93              3201 	mov	dpx,r5
   0F60 8E F0              3202 	mov	b,r6
   0F62 12s00r00r00        3203 	lcall	__gptrget
   0F66 F8                 3204 	mov  r0,a
   0F67 33                 3205 	rlc	a
   0F68 95 E0              3206 	subb	a,acc
   0F6A FD                 3207 	mov	r5,a
   0F6B FE                 3208 	mov	r6,a
   0F6C FF                 3209 	mov	r7,a
   0F6D 90s00r00r07        3210 	mov	dptr,#_value
   0F71 E8                 3211 	mov	a,r0
   0F72 F0                 3212 	movx	@dptr,a
   0F73 A3                 3213 	inc	dptr
   0F74 ED                 3214 	mov	a,r5
   0F75 F0                 3215 	movx	@dptr,a
   0F76 A3                 3216 	inc	dptr
   0F77 EE                 3217 	mov	a,r6
   0F78 F0                 3218 	movx	@dptr,a
   0F79 A3                 3219 	inc	dptr
   0F7A EF                 3220 	mov	a,r7
   0F7B F0                 3221 	movx	@dptr,a
                           3222 ;	printf_large.c:689: if (!signed_argument)
   0F7C 30*0A 04           3223 	jnb	__print_format_signed_argument_1_1,00384$
   0F7F 02s00r10r73        3224 	ljmp	00180$
   0F83                    3225 00384$:
                           3226 ;	printf_large.c:691: value.l &= 0xFF;
   0F83 90s00r00r07        3227 	mov	dptr,#_value
   0F87 E0                 3228 	movx	a,@dptr
   0F88 A3                 3229 	inc	dptr
   0F89 F8                 3230 	mov	r0,a
   0F8A E0                 3231 	movx	a,@dptr
   0F8B A3                 3232 	inc	dptr
   0F8C F9                 3233 	mov	r1,a
   0F8D E0                 3234 	movx	a,@dptr
   0F8E A3                 3235 	inc	dptr
   0F8F FD                 3236 	mov	r5,a
   0F90 E0                 3237 	movx	a,@dptr
   0F91 FE                 3238 	mov	r6,a
   0F92 79 00              3239 	mov	r1,#0
   0F94 7D 00              3240 	mov	r5,#0
   0F96 7E 00              3241 	mov	r6,#0
   0F98 90s00r00r07        3242 	mov	dptr,#_value
   0F9C E8                 3243 	mov	a,r0
   0F9D F0                 3244 	movx	@dptr,a
   0F9E A3                 3245 	inc	dptr
   0F9F E9                 3246 	mov	a,r1
   0FA0 F0                 3247 	movx	@dptr,a
   0FA1 A3                 3248 	inc	dptr
   0FA2 ED                 3249 	mov	a,r5
   0FA3 F0                 3250 	movx	@dptr,a
   0FA4 A3                 3251 	inc	dptr
   0FA5 EE                 3252 	mov	a,r6
   0FA6 F0                 3253 	movx	@dptr,a
   0FA7 02s00r10r73        3254 	ljmp	00180$
   0FAB                    3255 00179$:
                           3256 ;	printf_large.c:694: else if (long_argument)
   0FAB 30*0C 52           3257 	jnb  __print_format_long_argument_1_1,00176$
   0FAE                    3258 00385$:
                           3259 ;	printf_large.c:696: value.l = va_arg(ap,long);
   0FAE 90s00r00rA8        3260 	mov	dptr,#__print_format_PARM_4
                           3261 ;	genAssign: resultIsFar = FALSE
   0FB2 E0                 3262 	movx	a,@dptr
   0FB3 F8                 3263 	mov	r0,a
   0FB4 A3                 3264 	inc	dptr
   0FB5 E0                 3265 	movx	a,@dptr
   0FB6 F9                 3266 	mov	r1,a
   0FB7 A3                 3267 	inc	dptr
   0FB8 E0                 3268 	movx	a,@dptr
   0FB9 FD                 3269 	mov	r5,a
   0FBA A3                 3270 	inc	dptr
   0FBB E0                 3271 	movx	a,@dptr
   0FBC FE                 3272 	mov	r6,a
   0FBD E8                 3273 	mov	a,r0
   0FBE 24 FC              3274 	add	a,#0xFC
   0FC0 F8                 3275 	mov	r0,a
   0FC1 E9                 3276 	mov	a,r1
   0FC2 34 FF              3277 	addc	a,#0xFF
   0FC4 F9                 3278 	mov	r1,a
   0FC5 ED                 3279 	mov	a,r5
   0FC6 34 FF              3280 	addc	a,#0xFF
   0FC8 FD                 3281 	mov	r5,a
                           3282 ;	genAssign: resultIsFar = TRUE
   0FC9 90s00r00rA8        3283 	mov	dptr,#__print_format_PARM_4
   0FCD E8                 3284 	mov	a,r0
   0FCE F0                 3285 	movx	@dptr,a
   0FCF A3                 3286 	inc	dptr
   0FD0 E9                 3287 	mov	a,r1
   0FD1 F0                 3288 	movx	@dptr,a
   0FD2 A3                 3289 	inc	dptr
   0FD3 ED                 3290 	mov	a,r5
   0FD4 F0                 3291 	movx	@dptr,a
   0FD5 A3                 3292 	inc	dptr
   0FD6 EE                 3293 	mov	a,r6
   0FD7 F0                 3294 	movx	@dptr,a
   0FD8 88 82              3295 	mov	dpl,r0
   0FDA 89 83              3296 	mov	dph,r1
   0FDC 8D 93              3297 	mov	dpx,r5
   0FDE 8E F0              3298 	mov	b,r6
   0FE0 12s00r00r00        3299 	lcall	__gptrgetWord
   0FE4 F8                 3300 	mov	r0,a
   0FE5 A9 9C              3301 	mov	r1,_ap
   0FE7 A3                 3302 	inc	dptr
   0FE8 12s00r00r00        3303 	lcall	__gptrgetWord
   0FEC FD                 3304 	mov	r5,a
   0FED AE 9C              3305 	mov	r6,_ap
   0FEF 90s00r00r07        3306 	mov	dptr,#_value
   0FF3 E8                 3307 	mov	a,r0
   0FF4 F0                 3308 	movx	@dptr,a
   0FF5 A3                 3309 	inc	dptr
   0FF6 E9                 3310 	mov	a,r1
   0FF7 F0                 3311 	movx	@dptr,a
   0FF8 A3                 3312 	inc	dptr
   0FF9 ED                 3313 	mov	a,r5
   0FFA F0                 3314 	movx	@dptr,a
   0FFB A3                 3315 	inc	dptr
   0FFC EE                 3316 	mov	a,r6
   0FFD F0                 3317 	movx	@dptr,a
   0FFE 80 73              3318 	sjmp 00180$
   1000                    3319 00176$:
                           3320 ;	printf_large.c:700: value.l = va_arg(ap,int);
   1000 90s00r00rA8        3321 	mov	dptr,#__print_format_PARM_4
                           3322 ;	genAssign: resultIsFar = FALSE
   1004 E0                 3323 	movx	a,@dptr
   1005 F8                 3324 	mov	r0,a
   1006 A3                 3325 	inc	dptr
   1007 E0                 3326 	movx	a,@dptr
   1008 F9                 3327 	mov	r1,a
   1009 A3                 3328 	inc	dptr
   100A E0                 3329 	movx	a,@dptr
   100B FD                 3330 	mov	r5,a
   100C A3                 3331 	inc	dptr
   100D E0                 3332 	movx	a,@dptr
   100E FE                 3333 	mov	r6,a
   100F E8                 3334 	mov	a,r0
   1010 24 FE              3335 	add	a,#0xFE
   1012 F8                 3336 	mov	r0,a
   1013 E9                 3337 	mov	a,r1
   1014 34 FF              3338 	addc	a,#0xFF
   1016 F9                 3339 	mov	r1,a
   1017 ED                 3340 	mov	a,r5
   1018 34 FF              3341 	addc	a,#0xFF
   101A FD                 3342 	mov	r5,a
                           3343 ;	genAssign: resultIsFar = TRUE
   101B 90s00r00rA8        3344 	mov	dptr,#__print_format_PARM_4
   101F E8                 3345 	mov	a,r0
   1020 F0                 3346 	movx	@dptr,a
   1021 A3                 3347 	inc	dptr
   1022 E9                 3348 	mov	a,r1
   1023 F0                 3349 	movx	@dptr,a
   1024 A3                 3350 	inc	dptr
   1025 ED                 3351 	mov	a,r5
   1026 F0                 3352 	movx	@dptr,a
   1027 A3                 3353 	inc	dptr
   1028 EE                 3354 	mov	a,r6
   1029 F0                 3355 	movx	@dptr,a
   102A 88 82              3356 	mov	dpl,r0
   102C 89 83              3357 	mov	dph,r1
   102E 8D 93              3358 	mov	dpx,r5
   1030 8E F0              3359 	mov	b,r6
   1032 12s00r00r00        3360 	lcall	__gptrgetWord
   1036 F8                 3361 	mov	r0,a
   1037 A9 9C              3362 	mov	r1,_ap
   1039 E9                 3363 	mov	a,r1
   103A 33                 3364 	rlc	a
   103B 95 E0              3365 	subb	a,acc
   103D FD                 3366 	mov	r5,a
   103E FE                 3367 	mov	r6,a
   103F 90s00r00r07        3368 	mov	dptr,#_value
   1043 E8                 3369 	mov	a,r0
   1044 F0                 3370 	movx	@dptr,a
   1045 A3                 3371 	inc	dptr
   1046 E9                 3372 	mov	a,r1
   1047 F0                 3373 	movx	@dptr,a
   1048 A3                 3374 	inc	dptr
   1049 ED                 3375 	mov	a,r5
   104A F0                 3376 	movx	@dptr,a
   104B A3                 3377 	inc	dptr
   104C EE                 3378 	mov	a,r6
   104D F0                 3379 	movx	@dptr,a
                           3380 ;	printf_large.c:701: if (!signed_argument)
   104E 20*0A 22           3381 	jb   __print_format_signed_argument_1_1,00180$
   1051                    3382 00386$:
                           3383 ;	printf_large.c:703: value.l &= 0xFFFF;
   1051 90s00r00r07        3384 	mov	dptr,#_value
   1055 E0                 3385 	movx	a,@dptr
   1056 A3                 3386 	inc	dptr
   1057 F8                 3387 	mov	r0,a
   1058 E0                 3388 	movx	a,@dptr
   1059 A3                 3389 	inc	dptr
   105A F9                 3390 	mov	r1,a
   105B E0                 3391 	movx	a,@dptr
   105C A3                 3392 	inc	dptr
   105D FD                 3393 	mov	r5,a
   105E E0                 3394 	movx	a,@dptr
   105F FE                 3395 	mov	r6,a
   1060 7D 00              3396 	mov	r5,#0
   1062 7E 00              3397 	mov	r6,#0
   1064 90s00r00r07        3398 	mov	dptr,#_value
   1068 E8                 3399 	mov	a,r0
   1069 F0                 3400 	movx	@dptr,a
   106A A3                 3401 	inc	dptr
   106B E9                 3402 	mov	a,r1
   106C F0                 3403 	movx	@dptr,a
   106D A3                 3404 	inc	dptr
   106E ED                 3405 	mov	a,r5
   106F F0                 3406 	movx	@dptr,a
   1070 A3                 3407 	inc	dptr
   1071 EE                 3408 	mov	a,r6
   1072 F0                 3409 	movx	@dptr,a
                           3410 ;	printf_large.c:828: return charsOutputted;
                           3411 ;	printf_large.c:703: value.l &= 0xFFFF;
   1073                    3412 00180$:
                           3413 ;	printf_large.c:707: if ( signed_argument )
   1073 30*0A 32           3414 	jnb  __print_format_signed_argument_1_1,00185$
   1076                    3415 00387$:
                           3416 ;	printf_large.c:709: if (value.l < 0)
   1076 90s00r00r07        3417 	mov	dptr,#_value
   107A E0                 3418 	movx	a,@dptr
   107B A3                 3419 	inc	dptr
   107C F8                 3420 	mov	r0,a
   107D E0                 3421 	movx	a,@dptr
   107E A3                 3422 	inc	dptr
   107F F9                 3423 	mov	r1,a
   1080 E0                 3424 	movx	a,@dptr
   1081 A3                 3425 	inc	dptr
   1082 FD                 3426 	mov	r5,a
   1083 E0                 3427 	movx	a,@dptr
   1084 FE                 3428 	mov  r6,a
   1085 30 E7 1E           3429 	jnb  acc.7,00182$
   1088                    3430 00388$:
                           3431 ;	printf_large.c:710: value.l = -value.l;
   1088 C3                 3432 	clr	c
   1089 E4                 3433 	clr	a
   108A 98                 3434 	subb	a,r0
   108B F8                 3435 	mov	r0,a
   108C E4                 3436 	clr	a
   108D 99                 3437 	subb	a,r1
   108E F9                 3438 	mov	r1,a
   108F E4                 3439 	clr	a
   1090 9D                 3440 	subb	a,r5
   1091 FD                 3441 	mov	r5,a
   1092 E4                 3442 	clr	a
   1093 9E                 3443 	subb	a,r6
   1094 FE                 3444 	mov	r6,a
   1095 90s00r00r07        3445 	mov	dptr,#_value
   1099 E8                 3446 	mov	a,r0
   109A F0                 3447 	movx	@dptr,a
   109B A3                 3448 	inc	dptr
   109C E9                 3449 	mov	a,r1
   109D F0                 3450 	movx	@dptr,a
   109E A3                 3451 	inc	dptr
   109F ED                 3452 	mov	a,r5
   10A0 F0                 3453 	movx	@dptr,a
   10A1 A3                 3454 	inc	dptr
   10A2 EE                 3455 	mov	a,r6
   10A3 F0                 3456 	movx	@dptr,a
   10A4 80 02              3457 	sjmp 00185$
   10A6                    3458 00182$:
                           3459 ;	printf_large.c:712: signed_argument = 0;
                           3460 ;	genAssign: resultIsFar = FALSE
   10A6 C2*0A              3461 	clr	__print_format_signed_argument_1_1
   10A8                    3462 00185$:
                           3463 ;	printf_large.c:716: lsd = 1;
                           3464 ;	genAssign: resultIsFar = FALSE
   10A8 D2*0E              3465 	setb	__print_format_lsd_1_1
                           3466 ;	printf_large.c:718: do {
   10AA 90s00r00rB5        3467 	mov	dptr,#__print_format_pstore_4_23
                           3468 ;	genAssign: resultIsFar = FALSE
   10AE E0                 3469 	movx	a,@dptr
   10AF FD                 3470 	mov	r5,a
   10B0 A3                 3471 	inc	dptr
   10B1 E0                 3472 	movx	a,@dptr
   10B2 FE                 3473 	mov	r6,a
   10B3 A3                 3474 	inc	dptr
   10B4 E0                 3475 	movx	a,@dptr
   10B5 FF                 3476 	mov	r7,a
                           3477 ;	genAssign: resultIsFar = FALSE
   10B6 7A 00              3478 	mov	r2,#0x00
   10B8                    3479 00189$:
                           3480 ;	printf_large.c:719: value.byte[4] = 0;
   10B8 90s00r00r0B        3481 	mov	dptr,#(_value + 0x000004)
   10BC E4                 3482 	clr  a
   10BD F0                 3483 	movx	@dptr,a
                           3484 ;	printf_large.c:723: calculate_digit(radix);
   10BE C0 02              3485 	push	ar2
   10C0 C0 05              3486 	push	ar5
   10C2 C0 06              3487 	push	ar6
   10C4 C0 07              3488 	push	ar7
   10C6 90s00r00rAC        3489 	mov	dptr,#__print_format_radix_1_1
   10CA E0                 3490 	movx	a,@dptr
   10CB F5 82              3491 	mov	dpl,a
   10CD 12s00r00r81        3492 	lcall	_calculate_digit
   10D1 D0 07              3493 	pop	ar7
   10D3 D0 06              3494 	pop	ar6
   10D5 D0 05              3495 	pop	ar5
   10D7 D0 02              3496 	pop	ar2
                           3497 ;	printf_large.c:725: if (!lsd)
   10D9 20*0E 31           3498 	jb   __print_format_lsd_1_1,00187$
   10DC                    3499 00389$:
                           3500 ;	printf_large.c:727: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
   10DC 90s00r00r0B        3501 	mov	dptr,#(_value + 0x000004)
   10E0 E0                 3502 	movx	a,@dptr
   10E1 F9                 3503 	mov  r1,a
   10E2 C4                 3504 	swap	a
   10E3 F9                 3505 	mov	r1,a
   10E4 8D 82              3506 	mov	dpl,r5
   10E6 8E 83              3507 	mov	dph,r6
   10E8 8F 93              3508 	mov	dpx,r7
   10EA E0                 3509 	movx	a,@dptr
   10EB FB                 3510 	mov  r3,a
   10EC 42 01              3511 	orl	ar1,a
   10EE 8D 82              3512 	mov	dpl,r5
   10F0 8E 83              3513 	mov	dph,r6
   10F2 8F 93              3514 	mov	dpx,r7
   10F4 E9                 3515 	mov	a,r1
   10F5 F0                 3516 	movx	@dptr,a
                           3517 ;	printf_large.c:728: pstore--;
   10F6 1D                 3518 	dec	r5
   10F7 BD FF 05           3519 	cjne	r5,#0xFF,00390$
   10FA 1E                 3520 	dec	r6
   10FB BE FF 01           3521 	cjne	r6,#0xFF,00390$
   10FE 1F                 3522 	dec	r7
   10FF                    3523 00390$:
                           3524 ;	genAssign: resultIsFar = TRUE
   10FF 90s00r00rB5        3525 	mov	dptr,#__print_format_pstore_4_23
   1103 ED                 3526 	mov	a,r5
   1104 F0                 3527 	movx	@dptr,a
   1105 A3                 3528 	inc	dptr
   1106 EE                 3529 	mov	a,r6
   1107 F0                 3530 	movx	@dptr,a
   1108 A3                 3531 	inc	dptr
   1109 EF                 3532 	mov	a,r7
   110A F0                 3533 	movx	@dptr,a
   110B 80 0D              3534 	sjmp 00188$
   110D                    3535 00187$:
                           3536 ;	printf_large.c:732: *pstore = value.byte[4];
   110D 90s00r00r0B        3537 	mov	dptr,#(_value + 0x000004)
   1111 E0                 3538 	movx	a,@dptr
   1112 F9                 3539 	mov  r1,a
   1113 8D 82              3540 	mov  dpl,r5
   1115 8E 83              3541 	mov  dph,r6
   1117 8F 93              3542 	mov  dpx,r7
   1119 F0                 3543 	movx	@dptr,a
   111A                    3544 00188$:
                           3545 ;	printf_large.c:734: length++;
   111A 0A                 3546 	inc	r2
                           3547 ;	genAssign: resultIsFar = TRUE
   111B 90s00r00rAE        3548 	mov	dptr,#__print_format_length_1_1
   111F EA                 3549 	mov	a,r2
   1120 F0                 3550 	movx	@dptr,a
                           3551 ;	printf_large.c:735: lsd = !lsd;
   1121 B2*0E              3552 	cpl	__print_format_lsd_1_1
                           3553 ;	printf_large.c:736: } while( value.ul );
   1123 90s00r00r07        3554 	mov	dptr,#_value
   1127 E0                 3555 	movx	a,@dptr
   1128 A3                 3556 	inc	dptr
   1129 F9                 3557 	mov	r1,a
   112A E0                 3558 	movx	a,@dptr
   112B A3                 3559 	inc	dptr
   112C FC                 3560 	mov	r4,a
   112D E0                 3561 	movx	a,@dptr
   112E A3                 3562 	inc	dptr
   112F FB                 3563 	mov	r3,a
   1130 E0                 3564 	movx	a,@dptr
   1131 F8                 3565 	mov	r0,a
   1132 E9                 3566 	mov	a,r1
   1133 4C                 3567 	orl	a,r4
   1134 4B                 3568 	orl	a,r3
   1135 48                 3569 	orl	a,r0
   1136 60 04              3570 	jz	00391$
   1138 02s00r10rB8        3571 	ljmp	00189$
   113C                    3572 00391$:
                           3573 ;	printf_large.c:738: if (width == 0)
                           3574 ;	genAssign: resultIsFar = TRUE
   113C 90s00r00rB5        3575 	mov	dptr,#__print_format_pstore_4_23
   1140 ED                 3576 	mov	a,r5
   1141 F0                 3577 	movx	@dptr,a
   1142 A3                 3578 	inc	dptr
   1143 EE                 3579 	mov	a,r6
   1144 F0                 3580 	movx	@dptr,a
   1145 A3                 3581 	inc	dptr
   1146 EF                 3582 	mov	a,r7
   1147 F0                 3583 	movx	@dptr,a
                           3584 ;	genAssign: resultIsFar = TRUE
   1148 90s00r00rAE        3585 	mov	dptr,#__print_format_length_1_1
   114C EA                 3586 	mov	a,r2
   114D F0                 3587 	movx	@dptr,a
   114E 90s00r00rAD        3588 	mov	dptr,#__print_format_width_1_1
   1152 E0                 3589 	movx	a,@dptr
   1153 70 07              3590 	jnz  00193$
   1155                    3591 00392$:
                           3592 ;	printf_large.c:743: width=1;
                           3593 ;	genAssign: resultIsFar = TRUE
   1155 90s00r00rAD        3594 	mov	dptr,#__print_format_width_1_1
   1159 74 01              3595 	mov	a,#0x01
   115B F0                 3596 	movx	@dptr,a
   115C                    3597 00193$:
                           3598 ;	printf_large.c:747: if (!zero_padding && !left_justify)
   115C 20*07 2E           3599 	jb   __print_format_zero_padding_1_1,00198$
   115F                    3600 00393$:
   115F 20*06 2B           3601 	jb   __print_format_left_justify_1_1,00198$
   1162                    3602 00394$:
                           3603 ;	printf_large.c:749: while ( width > (unsigned char) (length+1) )
   1162 90s00r00rAE        3604 	mov	dptr,#__print_format_length_1_1
   1166 E0                 3605 	movx	a,@dptr
   1167 24 01              3606 	add	a,#0x01
   1169 FB                 3607 	mov	r3,a
   116A 90s00r00rAD        3608 	mov	dptr,#__print_format_width_1_1
                           3609 ;	genAssign: resultIsFar = FALSE
   116E E0                 3610 	movx	a,@dptr
   116F FC                 3611 	mov	r4,a
   1170                    3612 00194$:
   1170 C3                 3613 	clr	c
   1171 EB                 3614 	mov	a,r3
   1172 9C                 3615 	subb	a,r4
   1173 50 12              3616 	jnc  00322$
   1175                    3617 00395$:
                           3618 ;	printf_large.c:751: OUTPUT_CHAR( ' ', p );
   1175 C0 03              3619 	push	ar3
   1177 C0 04              3620 	push	ar4
   1179 75 82 20           3621 	mov	dpl,#0x20
   117C 12s00r00r00        3622 	lcall	__output_char
   1180 D0 04              3623 	pop	ar4
   1182 D0 03              3624 	pop	ar3
                           3625 ;	printf_large.c:752: width--;
   1184 1C                 3626 	dec	r4
   1185 80 E9              3627 	sjmp 00194$
   1187                    3628 00322$:
                           3629 ;	genAssign: resultIsFar = TRUE
   1187 90s00r00rAD        3630 	mov	dptr,#__print_format_width_1_1
   118B EC                 3631 	mov	a,r4
   118C F0                 3632 	movx	@dptr,a
   118D                    3633 00198$:
                           3634 ;	printf_large.c:756: if (signed_argument) // this now means the original value was negative
   118D 30*0A 14           3635 	jnb  __print_format_signed_argument_1_1,00208$
   1190                    3636 00396$:
                           3637 ;	printf_large.c:758: OUTPUT_CHAR( '-', p );
   1190 75 82 2D           3638 	mov	dpl,#0x2D
   1193 12s00r00r00        3639 	lcall	__output_char
                           3640 ;	printf_large.c:760: width--;
   1197 90s00r00rAD        3641 	mov	dptr,#__print_format_width_1_1
   119B E0                 3642 	movx	a,@dptr
   119C 14                 3643 	dec	a
                           3644 ;	genAssign: resultIsFar = TRUE
   119D 90s00r00rAD        3645 	mov	dptr,#__print_format_width_1_1
   11A1 F0                 3646 	movx	@dptr,a
   11A2 80 33              3647 	sjmp 00209$
   11A4                    3648 00208$:
                           3649 ;	printf_large.c:762: else if (length != 0)
   11A4 90s00r00rAE        3650 	mov	dptr,#__print_format_length_1_1
   11A8 E0                 3651 	movx	a,@dptr
   11A9 60 2C              3652 	jz  00209$
   11AB                    3653 00397$:
                           3654 ;	printf_large.c:765: if (prefix_sign)
   11AB 30*08 14           3655 	jnb  __print_format_prefix_sign_1_1,00203$
   11AE                    3656 00398$:
                           3657 ;	printf_large.c:767: OUTPUT_CHAR( '+', p );
   11AE 75 82 2B           3658 	mov	dpl,#0x2B
   11B1 12s00r00r00        3659 	lcall	__output_char
                           3660 ;	printf_large.c:769: width--;
   11B5 90s00r00rAD        3661 	mov	dptr,#__print_format_width_1_1
   11B9 E0                 3662 	movx	a,@dptr
   11BA 14                 3663 	dec	a
                           3664 ;	genAssign: resultIsFar = TRUE
   11BB 90s00r00rAD        3665 	mov	dptr,#__print_format_width_1_1
   11BF F0                 3666 	movx	@dptr,a
   11C0 80 15              3667 	sjmp 00209$
   11C2                    3668 00203$:
                           3669 ;	printf_large.c:771: else if (prefix_space)
   11C2 30*09 12           3670 	jnb  __print_format_prefix_space_1_1,00209$
   11C5                    3671 00399$:
                           3672 ;	printf_large.c:773: OUTPUT_CHAR( ' ', p );
   11C5 75 82 20           3673 	mov	dpl,#0x20
   11C8 12s00r00r00        3674 	lcall	__output_char
                           3675 ;	printf_large.c:775: width--;
   11CC 90s00r00rAD        3676 	mov	dptr,#__print_format_width_1_1
   11D0 E0                 3677 	movx	a,@dptr
   11D1 14                 3678 	dec	a
                           3679 ;	genAssign: resultIsFar = TRUE
   11D2 90s00r00rAD        3680 	mov	dptr,#__print_format_width_1_1
   11D6 F0                 3681 	movx	@dptr,a
   11D7                    3682 00209$:
                           3683 ;	printf_large.c:780: if (!left_justify)
   11D7 20*06 2D           3684 	jb   __print_format_left_justify_1_1,00217$
   11DA                    3685 00400$:
                           3686 ;	printf_large.c:781: while ( width-- > length )
   11DA 90s00r00rAD        3687 	mov	dptr,#__print_format_width_1_1
                           3688 ;	genAssign: resultIsFar = FALSE
   11DE E0                 3689 	movx	a,@dptr
   11DF FB                 3690 	mov	r3,a
   11E0                    3691 00210$:
                           3692 ;	genAssign: resultIsFar = FALSE
   11E0 8B 04              3693 	mov	ar4,r3
   11E2 1B                 3694 	dec	r3
                           3695 ;	genAssign: resultIsFar = TRUE
   11E3 90s00r00rAD        3696 	mov	dptr,#__print_format_width_1_1
   11E7 EB                 3697 	mov	a,r3
   11E8 F0                 3698 	movx	@dptr,a
   11E9 90s00r00rAE        3699 	mov	dptr,#__print_format_length_1_1
   11ED C3                 3700 	clr	c
   11EE E0                 3701 	movx	a,@dptr
   11EF 9C                 3702 	subb	a,r4
   11F0 50 57              3703 	jnc  00323$
   11F2                    3704 00401$:
                           3705 ;	printf_large.c:783: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
   11F2 30*07 04           3706 	jnb  __print_format_zero_padding_1_1,00243$
   11F5                    3707 00402$:
                           3708 ;	genAssign: resultIsFar = FALSE
   11F5 7C 30              3709 	mov	r4,#0x30
   11F7 80 02              3710 	sjmp 00244$
   11F9                    3711 00243$:
                           3712 ;	genAssign: resultIsFar = FALSE
   11F9 7C 20              3713 	mov	r4,#0x20
   11FB                    3714 00244$:
   11FB C0 03              3715 	push	ar3
   11FD 8C 82              3716 	mov	dpl,r4
   11FF 12s00r00r00        3717 	lcall	__output_char
   1203 D0 03              3718 	pop	ar3
   1205 80 D9              3719 	sjmp 00210$
   1207                    3720 00217$:
                           3721 ;	printf_large.c:788: if (width > length)
   1207 90s00r00rAE        3722 	mov	dptr,#__print_format_length_1_1
   120B 75 86 01           3723 	mov	dps, #1
   120E 90s00r00rAD        3724 	mov	dptr, #__print_format_width_1_1
   1212 15 86              3725 	dec	dps
   1214 C3                 3726 	clr	c
   1215 E0                 3727 	movx	a,@dptr
   1216 75 86 01           3728 	mov	dps,#1
   1219 C5 F0              3729 	xch	a, b
   121B E0                 3730 	movx	a,@dptr
   121C 75 86 00           3731 	mov	dps,#0
   121F C5 F0              3732 	xch	a, b
   1221 95 F0              3733 	subb	a,b
   1223 50 1C              3734 	jnc  00214$
   1225                    3735 00403$:
                           3736 ;	printf_large.c:789: width -= length;
   1225 90s00r00rAE        3737 	mov	dptr,#__print_format_length_1_1
   1229 75 86 01           3738 	mov	dps, #1
   122C 90s00r00rAD        3739 	mov	dptr, #__print_format_width_1_1
   1230 15 86              3740 	dec	dps
   1232 C3                 3741 	clr	c
   1233 E0                 3742 	movx	a,@dptr
   1234 F5 F0              3743 	mov	b,a
   1236 05 86              3744 	inc	dps
   1238 E0                 3745 	movx	a,@dptr
   1239 95 F0              3746 	subb	a,b
   123B F0                 3747 	movx	@dptr,a
   123C 75 86 00           3748 	mov	dps,#0
   123F 80 0E              3749 	sjmp 00315$
   1241                    3750 00214$:
                           3751 ;	printf_large.c:791: width = 0;
                           3752 ;	genAssign: resultIsFar = TRUE
   1241 90s00r00rAD        3753 	mov	dptr,#__print_format_width_1_1
   1245 E4                 3754 	clr  a
   1246 F0                 3755 	movx	@dptr,a
                           3756 ;	printf_large.c:828: return charsOutputted;
                           3757 ;	printf_large.c:795: while( length-- )
   1247 80 06              3758 	sjmp 00315$
   1249                    3759 00323$:
                           3760 ;	genAssign: resultIsFar = TRUE
   1249 90s00r00rAD        3761 	mov	dptr,#__print_format_width_1_1
   124D EB                 3762 	mov	a,r3
   124E F0                 3763 	movx	@dptr,a
   124F                    3764 00315$:
   124F 90s00r00rB5        3765 	mov	dptr,#__print_format_pstore_4_23
                           3766 ;	genAssign: resultIsFar = FALSE
   1253 E0                 3767 	movx	a,@dptr
   1254 FB                 3768 	mov	r3,a
   1255 A3                 3769 	inc	dptr
   1256 E0                 3770 	movx	a,@dptr
   1257 FC                 3771 	mov	r4,a
   1258 A3                 3772 	inc	dptr
   1259 E0                 3773 	movx	a,@dptr
   125A FD                 3774 	mov	r5,a
   125B 90s00r00rAE        3775 	mov	dptr,#__print_format_length_1_1
                           3776 ;	genAssign: resultIsFar = FALSE
   125F E0                 3777 	movx	a,@dptr
   1260 FE                 3778 	mov	r6,a
   1261                    3779 00222$:
                           3780 ;	genAssign: resultIsFar = FALSE
   1261 8E 07              3781 	mov	ar7,r6
   1263 1E                 3782 	dec	r6
   1264 EF                 3783 	mov	a,r7
   1265 60 50              3784 	jz  00224$
   1267                    3785 00404$:
                           3786 ;	printf_large.c:797: lsd = !lsd;
   1267 B2*0E              3787 	cpl	__print_format_lsd_1_1
                           3788 ;	printf_large.c:798: if (!lsd)
   1269 20*0E 1C           3789 	jb   __print_format_lsd_1_1,00220$
   126C                    3790 00405$:
                           3791 ;	printf_large.c:800: pstore++;
   126C 0B                 3792 	inc	r3
   126D BB 00 05           3793 	cjne	r3,#0,00406$
   1270 0C                 3794 	inc	r4
   1271 BC 00 01           3795 	cjne	r4,#0,00406$
   1274 0D                 3796 	inc	r5
   1275                    3797 00406$:
                           3798 ;	printf_large.c:801: value.byte[4] = *pstore >> 4;
   1275 8B 82              3799 	mov	dpl,r3
   1277 8C 83              3800 	mov	dph,r4
   1279 8D 93              3801 	mov	dpx,r5
   127B E0                 3802 	movx	a,@dptr
   127C FF                 3803 	mov  r7,a
   127D C4                 3804 	swap	a
   127E 54 0F              3805 	anl	a,#0x0F
   1280 FF                 3806 	mov  r7,a
   1281 90s00r00r0B        3807 	mov  dptr,#(_value + 0x000004)
   1285 F0                 3808 	movx @dptr,a
   1286 80 11              3809 	sjmp 00221$
   1288                    3810 00220$:
                           3811 ;	printf_large.c:805: value.byte[4] = *pstore & 0x0F;
   1288 8B 82              3812 	mov	dpl,r3
   128A 8C 83              3813 	mov	dph,r4
   128C 8D 93              3814 	mov	dpx,r5
   128E E0                 3815 	movx	a,@dptr
   128F FF                 3816 	mov	r7,a
   1290 53 07 0F           3817 	anl	ar7,#0x0F
   1293 90s00r00r0B        3818 	mov	dptr,#(_value + 0x000004)
   1297 EF                 3819 	mov	a,r7
   1298 F0                 3820 	movx	@dptr,a
   1299                    3821 00221$:
                           3822 ;	printf_large.c:811: output_digit( value.byte[4] );
   1299 90s00r00r0B        3823 	mov	dptr,#(_value + 0x000004)
   129D E0                 3824 	movx	a,@dptr
   129E FF                 3825 	mov	r7,a
   129F C0 03              3826 	push	ar3
   12A1 C0 04              3827 	push	ar4
   12A3 C0 05              3828 	push	ar5
   12A5 C0 06              3829 	push	ar6
   12A7 8F 82              3830 	mov	dpl,r7
   12A9 12s00r00r49        3831 	lcall	_output_digit
   12AD D0 06              3832 	pop	ar6
   12AF D0 05              3833 	pop	ar5
   12B1 D0 04              3834 	pop	ar4
   12B3 D0 03              3835 	pop	ar3
   12B5 80 AA              3836 	sjmp 00222$
   12B7                    3837 00224$:
                           3838 ;	printf_large.c:814: if (left_justify)
   12B7 20*06 04           3839 	jb	__print_format_left_justify_1_1,00407$
   12BA 02s00r09r77        3840 	ljmp	00238$
   12BE                    3841 00407$:
                           3842 ;	printf_large.c:815: while (width-- > 0)
   12BE 90s00r00rAD        3843 	mov	dptr,#__print_format_width_1_1
                           3844 ;	genAssign: resultIsFar = FALSE
   12C2 E0                 3845 	movx	a,@dptr
   12C3 FB                 3846 	mov	r3,a
   12C4                    3847 00225$:
                           3848 ;	genAssign: resultIsFar = FALSE
   12C4 8B 04              3849 	mov	ar4,r3
   12C6 1B                 3850 	dec	r3
   12C7 EC                 3851 	mov	a,r4
   12C8 70 04              3852 	jnz	00408$
   12CA 02s00r09r77        3853 	ljmp	00238$
   12CE                    3854 00408$:
                           3855 ;	printf_large.c:817: OUTPUT_CHAR(' ', p);
   12CE C0 03              3856 	push	ar3
   12D0 75 82 20           3857 	mov	dpl,#0x20
   12D3 12s00r00r00        3858 	lcall	__output_char
   12D7 D0 03              3859 	pop	ar3
   12D9 80 E9              3860 	sjmp 00225$
   12DB                    3861 00236$:
                           3862 ;	printf_large.c:824: OUTPUT_CHAR( c, p );
   12DB 8A 82              3863 	mov	dpl,r2
   12DD 12s00r00r00        3864 	lcall	__output_char
   12E1 02s00r09r77        3865 	ljmp	00238$
   12E5                    3866 00240$:
                           3867 ;	printf_large.c:828: return charsOutputted;
   12E5 75 86 01           3868 	mov     dps, #1
   12E8 90s00r00r0C        3869 	mov     dptr, #_charsOutputted
   12EC E0                 3870 	movx	a,@dptr
   12ED F5 82              3871 	mov	dpl,a
   12EF A3                 3872 	inc	dptr
   12F0 E0                 3873 	movx	a,@dptr
   12F1 F5 83              3874 	mov	dph,a
   12F3 75 86 00           3875 	mov	dps,#0
   12F6                    3876 00241$:
   12F6 22                 3877 	ret
                           3878 	.area CSEG    (CODE)
                           3879 	.area CONST   (CODE)
   0000                    3880 __str_0:
   0000 3C 4E 55 4C 4C 3E  3881 	.ascii "<NULL>"
   0006 00                 3882 	.db 0x00
                           3883 	.area XINIT   (CODE)
                           3884 	.area CABS    (ABS,CODE)
