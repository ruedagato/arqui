                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:29 2015
                              5 ;--------------------------------------------------------
                              6 	.module printf_tiny
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _printf_tiny
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in internal ram 
                             34 ;--------------------------------------------------------
                             35 	.area OSEG    (OVR,DATA)
                             36 ;--------------------------------------------------------
                             37 ; indirectly addressable internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area ISEG    (DATA)
                             40 ;--------------------------------------------------------
                             41 ; absolute internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area IABS    (ABS,DATA)
                             44 	.area IABS    (ABS,DATA)
                             45 ;--------------------------------------------------------
                             46 ; bit data
                             47 ;--------------------------------------------------------
                             48 	.area BSEG    (BIT)
                             49 ;--------------------------------------------------------
                             50 ; paged external ram data
                             51 ;--------------------------------------------------------
                             52 	.area PSEG    (PAG,XDATA)
                             53 ;--------------------------------------------------------
                             54 ; external ram data
                             55 ;--------------------------------------------------------
                             56 	.area XSEG    (XDATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XABS    (ABS,XDATA)
                             61 ;--------------------------------------------------------
                             62 ; external initialized ram data
                             63 ;--------------------------------------------------------
                             64 	.area XISEG   (XDATA)
                             65 	.area HOME    (CODE)
                             66 	.area GSINIT0 (CODE)
                             67 	.area GSINIT1 (CODE)
                             68 	.area GSINIT2 (CODE)
                             69 	.area GSINIT3 (CODE)
                             70 	.area GSINIT4 (CODE)
                             71 	.area GSINIT5 (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area CSEG    (CODE)
                             75 ;--------------------------------------------------------
                             76 ; global & static initialisations
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT  (CODE)
                             80 	.area GSFINAL (CODE)
                             81 	.area GSINIT  (CODE)
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area HOME    (CODE)
                             86 	.area HOME    (CODE)
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area CSEG    (CODE)
                             91 ;------------------------------------------------------------
                             92 ;Allocation info for local variables in function 'printf_tiny'
                             93 ;------------------------------------------------------------
                             94 ;fmt                       Allocated to stack - offset -4
                             95 ;------------------------------------------------------------
                             96 ;	printf_tiny.c:85: void printf_tiny(__code const char *fmt, ...) __reentrant
                             97 ;	-----------------------------------------
                             98 ;	 function printf_tiny
                             99 ;	-----------------------------------------
   0000                     100 _printf_tiny:
                    0002    101 	ar2 = 0x02
                    0003    102 	ar3 = 0x03
                    0004    103 	ar4 = 0x04
                    0005    104 	ar5 = 0x05
                    0006    105 	ar6 = 0x06
                    0007    106 	ar7 = 0x07
                    0000    107 	ar0 = 0x00
                    0001    108 	ar1 = 0x01
   0000 C0*00               109 	push	_bp
   0002 85 81*00            110 	mov	_bp,sp
                            111 ;	printf_tiny.c:301: __endasm;
                            112 	
                            113 	
   0005                     114 	printf_begin:
   0005 E5*00               115 	 mov a, _bp
   0007 24 FD               116 	 add a, #253
   0009 F8                  117 	 mov r0, a
   000A 86 83               118 	 mov dph, @r0
   000C 18                  119 	 dec r0
   000D 86 82               120 	 mov dpl, @r0
   000F 18                  121 	 dec r0
                            122 	
                            123 	
   0010                     124 	printf_main_loop:
   0010 E4                  125 	 clr a
   0011 93                  126 	 movc a, @a+dptr
   0012 A3                  127 	 inc dptr
   0013 24 DB               128 	 add a, #256 - 37
   0015 60 0C               129 	 jz printf_format
   0017 24 25               130 	 add a, #37
   0019 60 05               131 	 jz printf_end_h
   001B 12s00rEE            132 	 lcall printf_putchar
   001E 80 F0               133 	 sjmp printf_main_loop
   0020                     134 	printf_end_h:
   0020 02s01r06            135 	 ljmp printf_end
                            136 	
                            137 	
   0023                     138 	printf_format:
   0023 D2 D5               139 	 setb PSW.5
   0025 E4                  140 	 clr a
   0026 93                  141 	 movc a, @a+dptr
   0027 A3                  142 	 inc dptr
   0028 C0 83               143 	 push dph
   002A C0 82               144 	 push dpl
                            145 	
                            146 	
   002C                     147 	printf_format_s:
                            148 	
   002C B4 73 14            149 	 cjne a, #115, printf_format_c
   002F                     150 	printf_string:
                            151 	
                            152 	
   002F 86 F0               153 	 mov b, @r0
   0031 18                  154 	 dec r0
   0032 86 83               155 	 mov dph, @r0
   0034 18                  156 	 dec r0
   0035 86 82               157 	 mov dpl, @r0
   0037 18                  158 	 dec r0
   0038                     159 	printf_str_loop:
   0038 12s00r00            160 	 lcall __gptrget
   003B 60 54               161 	 jz printf_format_done
   003D A3                  162 	 inc dptr
   003E 12s00rEE            163 	 lcall printf_putchar
   0041 80 F5               164 	 sjmp printf_str_loop
                            165 	
                            166 	
   0043                     167 	printf_format_c:
                            168 	
   0043 B4 63 08            169 	 cjne a, #99, printf_format_d
   0046 18                  170 	 dec r0
   0047 E6                  171 	 mov a, @r0
   0048 18                  172 	 dec r0
   0049 12s00rEE            173 	 lcall printf_putchar
   004C 80 43               174 	 sjmp printf_format_done
                            175 	
                            176 	
   004E                     177 	printf_format_d:
                            178 	
   004E B4 64 17            179 	 cjne a, #100, printf_format_x
                            180 	
   0051 E6                  181 	 mov a, @r0
   0052 30 E7 46            182 	 jnb acc.7, printf_uint
   0055 18                  183 	 dec r0
   0056 E6                  184 	 mov a, @r0
   0057 F4                  185 	 cpl a
   0058 24 01               186 	 add a, #1
   005A F6                  187 	 mov @r0, a
   005B 08                  188 	 inc r0
   005C E6                  189 	 mov a, @r0
   005D F4                  190 	 cpl a
   005E 34 00               191 	 addc a, #0
   0060 F6                  192 	 mov @r0, a
                            193 	
   0061 74 2D               194 	 mov a, #45
   0063 12s00rEE            195 	 lcall printf_putchar
                            196 	
   0066 80 33               197 	 sjmp printf_uint
                            198 	
                            199 	
   0068                     200 	printf_format_x:
                            201 	
   0068 B4 78 2D            202 	 cjne a, #120, printf_format_u
   006B 86 83               203 	 mov dph, @r0
   006D 18                  204 	 dec r0
   006E 86 82               205 	 mov dpl, @r0
   0070 18                  206 	 dec r0
   0071 E4                  207 	 clr a
   0072                     208 	printf_hex:
   0072 12s00rDF            209 	 lcall printf_phex_lsn
   0075 E5 83               210 	 mov a, dph
   0077 12s00rDE            211 	 lcall printf_phex_msn
   007A E5 83               212 	 mov a, dph
   007C 12s00rDF            213 	 lcall printf_phex_lsn
   007F E5 82               214 	 mov a, dpl
   0081 12s00rDE            215 	 lcall printf_phex_msn
   0084 E5 82               216 	 mov a, dpl
   0086 12s00rDF            217 	 lcall printf_phex_lsn
   0089 30 D5 05            218 	 jnb PSW.5, printf_format_done
                            219 	
   008C 74 30               220 	 mov a, #48
   008E 12s00rEE            221 	 lcall printf_putchar
   0091                     222 	printf_format_done:
   0091 D0 82               223 	 pop dpl
   0093 D0 83               224 	 pop dph
   0095 02s00r10            225 	 ljmp printf_main_loop
                            226 	
                            227 	
   0098                     228 	printf_format_u:
                            229 	
   0098 B4 75 F6            230 	 cjne a, #117, printf_format_done
   009B                     231 	printf_uint:
   009B E6                  232 	 mov a, @r0
   009C FA                  233 	 mov r2, a
   009D 18                  234 	 dec r0
   009E E6                  235 	 mov a, @r0
   009F F9                  236 	 mov r1, a
   00A0 18                  237 	 dec r0
   00A1                     238 	printf_int2bcd:
   00A1 7C 10               239 	 mov r4, #16
   00A3 7D 27               240 	 mov r5, #39
   00A5 12s00rC9            241 	 lcall div_by_sub
   00A8 FF                  242 	 mov r7, a
   00A9 7C E8               243 	 mov r4, #232
   00AB 7D 03               244 	 mov r5, #3
   00AD 12s00rC9            245 	 lcall div_by_sub
   00B0 C4                  246 	 swap a
   00B1 F5 83               247 	 mov dph, a
   00B3 7C 64               248 	 mov r4, #100
   00B5 7D 00               249 	 mov r5, #0
   00B7 12s00rC9            250 	 lcall div_by_sub
   00BA 42 83               251 	 orl dph, a
   00BC E9                  252 	 mov a, r1
   00BD 75 F0 0A            253 	 mov b, #10
   00C0 84                  254 	 div ab
   00C1 C4                  255 	 swap a
   00C2 45 F0               256 	 orl a, b
   00C4 F5 82               257 	 mov dpl, a
   00C6 EF                  258 	 mov a, r7
   00C7 80 A9               259 	 sjmp printf_hex
                            260 	
                            261 	
                            262 	
                            263 	
   00C9                     264 	div_by_sub:
   00C9 7B 00               265 	 mov r3, #0
   00CB                     266 	div_by_sub_loop:
   00CB 0B                  267 	 inc r3
   00CC C3                  268 	        clr c
   00CD E9                  269 	        mov a, r1
   00CE 9C                  270 	        subb a, r4
   00CF F9                  271 	        mov r1, a
   00D0 EA                  272 	        mov a, r2
   00D1 9D                  273 	        subb a, r5
   00D2 FA                  274 	        mov r2, a
   00D3 50 F6               275 	        jnc div_by_sub_loop
   00D5 1B                  276 	        dec r3
   00D6 E9                  277 	        mov a, r1
   00D7 2C                  278 	        add a, r4
   00D8 F9                  279 	        mov r1, a
   00D9 EA                  280 	        mov a, r2
   00DA 3D                  281 	        addc a, r5
   00DB FA                  282 	        mov r2, a
   00DC EB                  283 	        mov a, r3
   00DD 22                  284 	        ret
                            285 	
                            286 	
                            287 	
   00DE                     288 	printf_phex_msn:
   00DE C4                  289 	 swap a
   00DF                     290 	printf_phex_lsn:
   00DF 54 0F               291 	 anl a, #15
   00E1 70 03               292 	 jnz printf_phex_ok
   00E3 20 D5 1F            293 	 jb PSW.5, printf_ret
   00E6                     294 	printf_phex_ok:
   00E6 C2 D5               295 	 clr PSW.5
   00E8 24 90               296 	 add a, #0x90
   00EA D4                  297 	 da a
   00EB 34 40               298 	 addc a, #0x40
   00ED D4                  299 	 da a
   00EE                     300 	printf_putchar:
                            301 	
                            302 	
                            303 	
                            304 	
                            305 	
   00EE C0 83               306 	 push dph
   00F0 C0 82               307 	 push dpl
   00F2 C0 F0               308 	 push b
   00F4 F5 82               309 	 mov dpl, a
   00F6 E8                  310 	 mov a, r0
   00F7 C0 E0               311 	 push acc
   00F9 12s00r00            312 	 lcall _putchar
   00FC D0 E0               313 	 pop acc
   00FE F8                  314 	 mov r0, a
   00FF D0 F0               315 	 pop b
   0101 D0 82               316 	 pop dpl
   0103 D0 83               317 	 pop dph
                            318 	
   0105                     319 	printf_ret:
   0105 22                  320 	 ret
                            321 	
                            322 	
   0106                     323 	printf_end:
                            324 	 
   0106 D0*00               325 	pop	_bp
   0108 22                  326 	ret
                            327 	.area CSEG    (CODE)
                            328 	.area CONST   (CODE)
                            329 	.area XINIT   (CODE)
                            330 	.area CABS    (ABS,CODE)
