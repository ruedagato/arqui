                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:23 2015
                              5 ;--------------------------------------------------------
                              6 	.module _strstr
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _strstr_PARM_2
                             13 	.globl _strstr
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (ABS,DATA)
   0000                      18 	.org 0x0000
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (ABS,DATA)
   0000                      23 	.org 0x0000
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
                             33 ;--------------------------------------------------------
                             34 ; overlayable items in internal ram 
                             35 ;--------------------------------------------------------
                             36 	.area	OSEG    (OVR,DATA)
   0000                      37 _strstr_PARM_2::
   0000                      38 	.ds 3
   0003                      39 _strstr_cp_1_1::
   0003                      40 	.ds 3
   0006                      41 _strstr_s1_1_1::
   0006                      42 	.ds 3
   0009                      43 _strstr_s2_1_1::
   0009                      44 	.ds 3
   000C                      45 _strstr_sloc0_1_0::
   000C                      46 	.ds 3
                             47 ;--------------------------------------------------------
                             48 ; indirectly addressable internal ram data
                             49 ;--------------------------------------------------------
                             50 	.area ISEG    (DATA)
                             51 ;--------------------------------------------------------
                             52 ; absolute internal ram data
                             53 ;--------------------------------------------------------
                             54 	.area IABS    (ABS,DATA)
                             55 	.area IABS    (ABS,DATA)
                             56 ;--------------------------------------------------------
                             57 ; bit data
                             58 ;--------------------------------------------------------
                             59 	.area BSEG    (BIT)
                             60 ;--------------------------------------------------------
                             61 ; paged external ram data
                             62 ;--------------------------------------------------------
                             63 	.area PSEG    (PAG,XDATA)
                             64 ;--------------------------------------------------------
                             65 ; external ram data
                             66 ;--------------------------------------------------------
                             67 	.area XSEG    (XDATA)
                             68 ;--------------------------------------------------------
                             69 ; absolute external ram data
                             70 ;--------------------------------------------------------
                             71 	.area XABS    (ABS,XDATA)
                             72 ;--------------------------------------------------------
                             73 ; external initialized ram data
                             74 ;--------------------------------------------------------
                             75 	.area XISEG   (XDATA)
                             76 	.area HOME    (CODE)
                             77 	.area GSINIT0 (CODE)
                             78 	.area GSINIT1 (CODE)
                             79 	.area GSINIT2 (CODE)
                             80 	.area GSINIT3 (CODE)
                             81 	.area GSINIT4 (CODE)
                             82 	.area GSINIT5 (CODE)
                             83 	.area GSINIT  (CODE)
                             84 	.area GSFINAL (CODE)
                             85 	.area CSEG    (CODE)
                             86 ;--------------------------------------------------------
                             87 ; global & static initialisations
                             88 ;--------------------------------------------------------
                             89 	.area HOME    (CODE)
                             90 	.area GSINIT  (CODE)
                             91 	.area GSFINAL (CODE)
                             92 	.area GSINIT  (CODE)
                             93 ;--------------------------------------------------------
                             94 ; Home
                             95 ;--------------------------------------------------------
                             96 	.area HOME    (CODE)
                             97 	.area HOME    (CODE)
                             98 ;--------------------------------------------------------
                             99 ; code
                            100 ;--------------------------------------------------------
                            101 	.area CSEG    (CODE)
                            102 ;------------------------------------------------------------
                            103 ;Allocation info for local variables in function 'strstr'
                            104 ;------------------------------------------------------------
                            105 ;str2                      Allocated with name '_strstr_PARM_2'
                            106 ;str1                      Allocated to registers r2 r3 r4 
                            107 ;cp                        Allocated with name '_strstr_cp_1_1'
                            108 ;s1                        Allocated with name '_strstr_s1_1_1'
                            109 ;s2                        Allocated with name '_strstr_s2_1_1'
                            110 ;sloc0                     Allocated with name '_strstr_sloc0_1_0'
                            111 ;------------------------------------------------------------
                            112 ;	_strstr.c:31: char * strstr (
                            113 ;	-----------------------------------------
                            114 ;	 function strstr
                            115 ;	-----------------------------------------
   0000                     116 _strstr:
                    0002    117 	ar2 = 0x02
                    0003    118 	ar3 = 0x03
                    0004    119 	ar4 = 0x04
                    0005    120 	ar5 = 0x05
                    0006    121 	ar6 = 0x06
                    0007    122 	ar7 = 0x07
                    0000    123 	ar0 = 0x00
                    0001    124 	ar1 = 0x01
   0000 AA 82               125 	mov	r2,dpl
   0002 AB 83               126 	mov	r3,dph
   0004 AC F0               127 	mov	r4,b
                            128 ;	_strstr.c:36: const char * cp = str1;
   0006 8A*03               129 	mov	_strstr_cp_1_1,r2
   0008 8B*04               130 	mov	(_strstr_cp_1_1 + 1),r3
   000A 8C*05               131 	mov	(_strstr_cp_1_1 + 2),r4
                            132 ;	_strstr.c:40: if ( !*str2 )
   000C 85*00*09            133 	mov	_strstr_s2_1_1,_strstr_PARM_2
   000F 85*01*0A            134 	mov	(_strstr_s2_1_1 + 1),(_strstr_PARM_2 + 1)
   0012 85*02*0B            135 	mov	(_strstr_s2_1_1 + 2),(_strstr_PARM_2 + 2)
   0015 85*09 82            136 	mov	dpl,_strstr_s2_1_1
   0018 85*0A 83            137 	mov	dph,(_strstr_s2_1_1 + 1)
   001B 85*0B F0            138 	mov	b,(_strstr_s2_1_1 + 2)
   001E 12s00r00            139 	lcall	__gptrget
   0021 70 07               140 	jnz	00122$
                            141 ;	_strstr.c:41: return str1;
   0023 8A 82               142 	mov	dpl,r2
   0025 8B 83               143 	mov	dph,r3
   0027 8C F0               144 	mov	b,r4
   0029 22                  145 	ret
                            146 ;	_strstr.c:43: while (*cp)
   002A                     147 00122$:
   002A 8A*06               148 	mov	_strstr_s1_1_1,r2
   002C 8B*07               149 	mov	(_strstr_s1_1_1 + 1),r3
   002E 8C*08               150 	mov	(_strstr_s1_1_1 + 2),r4
   0030                     151 00110$:
   0030 85*06 82            152 	mov	dpl,_strstr_s1_1_1
   0033 85*07 83            153 	mov	dph,(_strstr_s1_1_1 + 1)
   0036 85*08 F0            154 	mov	b,(_strstr_s1_1_1 + 2)
   0039 12s00r00            155 	lcall	__gptrget
   003C 60 76               156 	jz	00112$
                            157 ;	_strstr.c:46: s2 = str2;
   003E AE*09               158 	mov	r6,_strstr_s2_1_1
   0040 AF*0A               159 	mov	r7,(_strstr_s2_1_1 + 1)
   0042 AD*0B               160 	mov	r5,(_strstr_s2_1_1 + 2)
                            161 ;	_strstr.c:48: while ( *s1 && *s2 && !(*s1-*s2) )
   0044 85*06*0C            162 	mov	_strstr_sloc0_1_0,_strstr_s1_1_1
   0047 85*07*0D            163 	mov	(_strstr_sloc0_1_0 + 1),(_strstr_s1_1_1 + 1)
   004A 85*08*0E            164 	mov	(_strstr_sloc0_1_0 + 2),(_strstr_s1_1_1 + 2)
   004D                     165 00105$:
   004D 85*0C 82            166 	mov	dpl,_strstr_sloc0_1_0
   0050 85*0D 83            167 	mov	dph,(_strstr_sloc0_1_0 + 1)
   0053 85*0E F0            168 	mov	b,(_strstr_sloc0_1_0 + 2)
   0056 12s00r00            169 	lcall	__gptrget
   0059 F8                  170 	mov	r0,a
   005A 60 2F               171 	jz	00107$
   005C 8E 82               172 	mov	dpl,r6
   005E 8F 83               173 	mov	dph,r7
   0060 8D F0               174 	mov	b,r5
   0062 12s00r00            175 	lcall	__gptrget
   0065 F9                  176 	mov	r1,a
   0066 60 23               177 	jz	00107$
   0068 E8                  178 	mov	a,r0
   0069 33                  179 	rlc	a
   006A 95 E0               180 	subb	a,acc
   006C FA                  181 	mov	r2,a
   006D E9                  182 	mov	a,r1
   006E 33                  183 	rlc	a
   006F 95 E0               184 	subb	a,acc
   0071 FB                  185 	mov	r3,a
   0072 E8                  186 	mov	a,r0
   0073 C3                  187 	clr	c
   0074 99                  188 	subb	a,r1
   0075 F8                  189 	mov	r0,a
   0076 EA                  190 	mov	a,r2
   0077 9B                  191 	subb	a,r3
   0078 FA                  192 	mov	r2,a
   0079 48                  193 	orl	a,r0
   007A 70 0F               194 	jnz	00107$
                            195 ;	_strstr.c:49: s1++, s2++;
   007C 05*0C               196 	inc	_strstr_sloc0_1_0
   007E E4                  197 	clr	a
   007F B5*0C 02            198 	cjne	a,_strstr_sloc0_1_0,00129$
   0082 05*0D               199 	inc	(_strstr_sloc0_1_0 + 1)
   0084                     200 00129$:
   0084 0E                  201 	inc	r6
   0085 BE 00 C5            202 	cjne	r6,#0x00,00105$
   0088 0F                  203 	inc	r7
   0089 80 C2               204 	sjmp	00105$
   008B                     205 00107$:
                            206 ;	_strstr.c:51: if (!*s2)
   008B 8E 82               207 	mov	dpl,r6
   008D 8F 83               208 	mov	dph,r7
   008F 8D F0               209 	mov	b,r5
   0091 12s00r00            210 	lcall	__gptrget
   0094 70 0A               211 	jnz	00109$
                            212 ;	_strstr.c:52: return( (char*)cp );
   0096 85*03 82            213 	mov	dpl,_strstr_cp_1_1
   0099 85*04 83            214 	mov	dph,(_strstr_cp_1_1 + 1)
   009C 85*05 F0            215 	mov	b,(_strstr_cp_1_1 + 2)
   009F 22                  216 	ret
   00A0                     217 00109$:
                            218 ;	_strstr.c:54: cp++;
   00A0 05*06               219 	inc	_strstr_s1_1_1
   00A2 E4                  220 	clr	a
   00A3 B5*06 02            221 	cjne	a,_strstr_s1_1_1,00131$
   00A6 05*07               222 	inc	(_strstr_s1_1_1 + 1)
   00A8                     223 00131$:
   00A8 85*06*03            224 	mov	_strstr_cp_1_1,_strstr_s1_1_1
   00AB 85*07*04            225 	mov	(_strstr_cp_1_1 + 1),(_strstr_s1_1_1 + 1)
   00AE 85*08*05            226 	mov	(_strstr_cp_1_1 + 2),(_strstr_s1_1_1 + 2)
   00B1 02s00r30            227 	ljmp	00110$
   00B4                     228 00112$:
                            229 ;	_strstr.c:57: return (NULL) ;
   00B4 90 00 00            230 	mov	dptr,#0x0000
   00B7 75 F0 00            231 	mov	b,#0x00
   00BA 22                  232 	ret
                            233 	.area CSEG    (CODE)
                            234 	.area CONST   (CODE)
                            235 	.area XINIT   (CODE)
                            236 	.area CABS    (ABS,CODE)
