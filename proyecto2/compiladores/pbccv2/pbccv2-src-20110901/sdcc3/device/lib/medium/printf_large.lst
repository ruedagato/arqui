                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:26 2015
                              5 ;--------------------------------------------------------
                              6 	.module printf_large
                              7 	.optsdcc -mmcs51 --model-medium
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __print_format_PARM_4
                             13 	.globl __print_format_PARM_3
                             14 	.globl __print_format_PARM_2
                             15 	.globl __print_format
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 	.area RSEG    (ABS,DATA)
   0000                      20 	.org 0x0000
                             21 ;--------------------------------------------------------
                             22 ; special function bits
                             23 ;--------------------------------------------------------
                             24 	.area RSEG    (ABS,DATA)
   0000                      25 	.org 0x0000
                             26 ;--------------------------------------------------------
                             27 ; overlayable register banks
                             28 ;--------------------------------------------------------
                             29 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      30 	.ds 8
                             31 ;--------------------------------------------------------
                             32 ; internal ram data
                             33 ;--------------------------------------------------------
                             34 	.area DSEG    (DATA)
   0000                      35 __print_format_sloc0_1_0:
   0000                      36 	.ds 4
                             37 ;--------------------------------------------------------
                             38 ; overlayable items in internal ram 
                             39 ;--------------------------------------------------------
                             40 	.area	OSEG    (OVR,DATA)
   0000                      41 _calculate_digit_ul_1_1::
   0000                      42 	.ds 4
                             43 ;--------------------------------------------------------
                             44 ; indirectly addressable internal ram data
                             45 ;--------------------------------------------------------
                             46 	.area ISEG    (DATA)
                             47 ;--------------------------------------------------------
                             48 ; absolute internal ram data
                             49 ;--------------------------------------------------------
                             50 	.area IABS    (ABS,DATA)
                             51 	.area IABS    (ABS,DATA)
                             52 ;--------------------------------------------------------
                             53 ; bit data
                             54 ;--------------------------------------------------------
                             55 	.area BSEG    (BIT)
   0000                      56 _lower_case:
   0000                      57 	.ds 1
   0001                      58 __print_format_left_justify_1_1:
   0001                      59 	.ds 1
   0002                      60 __print_format_zero_padding_1_1:
   0002                      61 	.ds 1
   0003                      62 __print_format_prefix_sign_1_1:
   0003                      63 	.ds 1
   0004                      64 __print_format_prefix_space_1_1:
   0004                      65 	.ds 1
   0005                      66 __print_format_signed_argument_1_1:
   0005                      67 	.ds 1
   0006                      68 __print_format_char_argument_1_1:
   0006                      69 	.ds 1
   0007                      70 __print_format_long_argument_1_1:
   0007                      71 	.ds 1
   0008                      72 __print_format_float_argument_1_1:
   0008                      73 	.ds 1
   0009                      74 __print_format_lsd_1_1:
   0009                      75 	.ds 1
                             76 ;--------------------------------------------------------
                             77 ; paged external ram data
                             78 ;--------------------------------------------------------
                             79 	.area PSEG    (PAG,XDATA)
   0000                      80 _output_char:
   0000                      81 	.ds 2
   0002                      82 _p:
   0002                      83 	.ds 3
   0005                      84 _value:
   0005                      85 	.ds 5
   000A                      86 _charsOutputted:
   000A                      87 	.ds 2
   000C                      88 __print_format_PARM_2:
   000C                      89 	.ds 3
   000F                      90 __print_format_PARM_3:
   000F                      91 	.ds 3
   0012                      92 __print_format_PARM_4:
   0012                      93 	.ds 1
   0013                      94 __print_format_radix_1_1:
   0013                      95 	.ds 1
   0014                      96 __print_format_width_1_1:
   0014                      97 	.ds 1
   0015                      98 __print_format_length_1_1:
   0015                      99 	.ds 1
   0016                     100 __print_format_store_4_22:
   0016                     101 	.ds 6
                            102 ;--------------------------------------------------------
                            103 ; external ram data
                            104 ;--------------------------------------------------------
                            105 	.area XSEG    (XDATA)
                            106 ;--------------------------------------------------------
                            107 ; absolute external ram data
                            108 ;--------------------------------------------------------
                            109 	.area XABS    (ABS,XDATA)
                            110 ;--------------------------------------------------------
                            111 ; external initialized ram data
                            112 ;--------------------------------------------------------
                            113 	.area XISEG   (XDATA)
                            114 	.area HOME    (CODE)
                            115 	.area GSINIT0 (CODE)
                            116 	.area GSINIT1 (CODE)
                            117 	.area GSINIT2 (CODE)
                            118 	.area GSINIT3 (CODE)
                            119 	.area GSINIT4 (CODE)
                            120 	.area GSINIT5 (CODE)
                            121 	.area GSINIT  (CODE)
                            122 	.area GSFINAL (CODE)
                            123 	.area CSEG    (CODE)
                            124 ;--------------------------------------------------------
                            125 ; global & static initialisations
                            126 ;--------------------------------------------------------
                            127 	.area HOME    (CODE)
                            128 	.area GSINIT  (CODE)
                            129 	.area GSFINAL (CODE)
                            130 	.area GSINIT  (CODE)
                            131 ;--------------------------------------------------------
                            132 ; Home
                            133 ;--------------------------------------------------------
                            134 	.area HOME    (CODE)
                            135 	.area HOME    (CODE)
                            136 ;--------------------------------------------------------
                            137 ; code
                            138 ;--------------------------------------------------------
                            139 	.area CSEG    (CODE)
                            140 ;------------------------------------------------------------
                            141 ;Allocation info for local variables in function '_output_char'
                            142 ;------------------------------------------------------------
                            143 ;------------------------------------------------------------
                            144 ;	printf_large.c:105: _output_char (unsigned char c)
                            145 ;	-----------------------------------------
                            146 ;	 function _output_char
                            147 ;	-----------------------------------------
   0000                     148 __output_char:
                    0002    149 	ar2 = 0x02
                    0003    150 	ar3 = 0x03
                    0004    151 	ar4 = 0x04
                    0005    152 	ar5 = 0x05
                    0006    153 	ar6 = 0x06
                    0007    154 	ar7 = 0x07
                    0000    155 	ar0 = 0x00
                    0001    156 	ar1 = 0x01
   0000 AA 82               157 	mov	r2,dpl
                            158 ;	printf_large.c:107: output_char( c, p );
   0002 78r02               159 	mov	r0,#_p
   0004 E2                  160 	movx	a,@r0
   0005 C0 E0               161 	push	acc
   0007 08                  162 	inc	r0
   0008 E2                  163 	movx	a,@r0
   0009 C0 E0               164 	push	acc
   000B 08                  165 	inc	r0
   000C E2                  166 	movx	a,@r0
   000D C0 E0               167 	push	acc
   000F 74r23               168 	mov	a,#00103$
   0011 C0 E0               169 	push	acc
   0013 74s00               170 	mov	a,#(00103$ >> 8)
   0015 C0 E0               171 	push	acc
   0017 78r00               172 	mov	r0,#_output_char
   0019 E2                  173 	movx	a,@r0
   001A C0 E0               174 	push	acc
   001C 08                  175 	inc	r0
   001D E2                  176 	movx	a,@r0
   001E C0 E0               177 	push	acc
   0020 8A 82               178 	mov	dpl,r2
   0022 22                  179 	ret
   0023                     180 00103$:
   0023 15 81               181 	dec	sp
   0025 15 81               182 	dec	sp
   0027 15 81               183 	dec	sp
                            184 ;	printf_large.c:108: charsOutputted++;
   0029 78r0A               185 	mov	r0,#_charsOutputted
   002B E2                  186 	movx	a,@r0
   002C 24 01               187 	add	a,#0x01
   002E F2                  188 	movx	@r0,a
   002F 08                  189 	inc	r0
   0030 E2                  190 	movx	a,@r0
   0031 34 00               191 	addc	a,#0x00
   0033 F2                  192 	movx	@r0,a
   0034 22                  193 	ret
                            194 ;------------------------------------------------------------
                            195 ;Allocation info for local variables in function 'output_digit'
                            196 ;------------------------------------------------------------
                            197 ;c                         Allocated to registers r2 
                            198 ;------------------------------------------------------------
                            199 ;	printf_large.c:130: output_digit (unsigned char n)
                            200 ;	-----------------------------------------
                            201 ;	 function output_digit
                            202 ;	-----------------------------------------
   0035                     203 _output_digit:
   0035 AA 82               204 	mov	r2,dpl
                            205 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
   0037 74 30               206 	mov	a,#0x30
   0039 2A                  207 	add	a,r2
   003A FA                  208 	mov	r2,a
                            209 ;	printf_large.c:134: if (c > (unsigned char)'9')
   003B 74 39               210 	mov	a,#0x39
   003D B5 02 00            211 	cjne	a,ar2,00109$
   0040                     212 00109$:
   0040 50 0A               213 	jnc	00104$
                            214 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
   0042 74 07               215 	mov	a,#0x07
   0044 2A                  216 	add	a,r2
   0045 FA                  217 	mov	r2,a
                            218 ;	printf_large.c:137: if (lower_case)
   0046 30*00 03            219 	jnb	_lower_case,00104$
                            220 ;	printf_large.c:138: c = tolower(c);
   0049 43 02 20            221 	orl	ar2,#0x20
   004C                     222 00104$:
                            223 ;	printf_large.c:140: _output_char( c );
   004C 8A 82               224 	mov	dpl,r2
   004E 02s00r00            225 	ljmp	__output_char
                            226 ;------------------------------------------------------------
                            227 ;Allocation info for local variables in function 'output_2digits'
                            228 ;------------------------------------------------------------
                            229 ;------------------------------------------------------------
                            230 ;	printf_large.c:157: output_2digits (unsigned char b)
                            231 ;	-----------------------------------------
                            232 ;	 function output_2digits
                            233 ;	-----------------------------------------
   0051                     234 _output_2digits:
                            235 ;	printf_large.c:159: output_digit( b>>4   );
   0051 E5 82               236 	mov	a,dpl
   0053 FA                  237 	mov	r2,a
   0054 C4                  238 	swap	a
   0055 54 0F               239 	anl	a,#0x0f
   0057 F5 82               240 	mov	dpl,a
   0059 C0 02               241 	push	ar2
   005B 12s00r35            242 	lcall	_output_digit
   005E D0 02               243 	pop	ar2
                            244 ;	printf_large.c:160: output_digit( b&0x0F );
   0060 74 0F               245 	mov	a,#0x0F
   0062 5A                  246 	anl	a,r2
   0063 F5 82               247 	mov	dpl,a
   0065 02s00r35            248 	ljmp	_output_digit
                            249 ;------------------------------------------------------------
                            250 ;Allocation info for local variables in function 'calculate_digit'
                            251 ;------------------------------------------------------------
                            252 ;ul                        Allocated with name '_calculate_digit_ul_1_1'
                            253 ;b4                        Allocated to registers r7 
                            254 ;i                         Allocated to registers r3 
                            255 ;------------------------------------------------------------
                            256 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                            257 ;	-----------------------------------------
                            258 ;	 function calculate_digit
                            259 ;	-----------------------------------------
   0068                     260 _calculate_digit:
   0068 AA 82               261 	mov	r2,dpl
                            262 ;	printf_large.c:191: register unsigned long ul = value.ul;
   006A 78r05               263 	mov	r0,#_value
   006C E2                  264 	movx	a,@r0
   006D F5*00               265 	mov	_calculate_digit_ul_1_1,a
   006F 08                  266 	inc	r0
   0070 E2                  267 	movx	a,@r0
   0071 F5*01               268 	mov	(_calculate_digit_ul_1_1 + 1),a
   0073 08                  269 	inc	r0
   0074 E2                  270 	movx	a,@r0
   0075 F5*02               271 	mov	(_calculate_digit_ul_1_1 + 2),a
   0077 08                  272 	inc	r0
   0078 E2                  273 	movx	a,@r0
   0079 F5*03               274 	mov	(_calculate_digit_ul_1_1 + 3),a
                            275 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
   007B 78r09               276 	mov	r0,#(_value + 0x0004)
   007D E2                  277 	movx	a,@r0
   007E FF                  278 	mov	r7,a
                            279 ;	printf_large.c:195: do
   007F 7B 20               280 	mov	r3,#0x20
   0081                     281 00103$:
                            282 ;	printf_large.c:197: b4 = (b4 << 1);
   0081 EF                  283 	mov	a,r7
   0082 2F                  284 	add	a,r7
   0083 FF                  285 	mov	r7,a
                            286 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
   0084 E5*03               287 	mov	a,(_calculate_digit_ul_1_1 + 3)
   0086 23                  288 	rl	a
   0087 54 01               289 	anl	a,#0x01
   0089 FC                  290 	mov	r4,a
   008A 42 07               291 	orl	ar7,a
                            292 ;	printf_large.c:199: ul <<= 1;
   008C E5*00               293 	mov	a,_calculate_digit_ul_1_1
   008E 25*00               294 	add	a,_calculate_digit_ul_1_1
   0090 F5*00               295 	mov	_calculate_digit_ul_1_1,a
   0092 E5*01               296 	mov	a,(_calculate_digit_ul_1_1 + 1)
   0094 33                  297 	rlc	a
   0095 F5*01               298 	mov	(_calculate_digit_ul_1_1 + 1),a
   0097 E5*02               299 	mov	a,(_calculate_digit_ul_1_1 + 2)
   0099 33                  300 	rlc	a
   009A F5*02               301 	mov	(_calculate_digit_ul_1_1 + 2),a
   009C E5*03               302 	mov	a,(_calculate_digit_ul_1_1 + 3)
   009E 33                  303 	rlc	a
   009F F5*03               304 	mov	(_calculate_digit_ul_1_1 + 3),a
                            305 ;	printf_large.c:201: if (radix <= b4 )
   00A1 EF                  306 	mov	a,r7
   00A2 B5 02 00            307 	cjne	a,ar2,00112$
   00A5                     308 00112$:
   00A5 40 07               309 	jc	00104$
                            310 ;	printf_large.c:203: b4 -= radix;
   00A7 EF                  311 	mov	a,r7
   00A8 C3                  312 	clr	c
   00A9 9A                  313 	subb	a,r2
   00AA FF                  314 	mov	r7,a
                            315 ;	printf_large.c:204: ul |= 1;
   00AB 43*00 01            316 	orl	_calculate_digit_ul_1_1,#0x01
   00AE                     317 00104$:
                            318 ;	printf_large.c:206: } while (--i);
   00AE DB D1               319 	djnz	r3,00103$
                            320 ;	printf_large.c:207: value.ul = ul;
   00B0 78r05               321 	mov	r0,#_value
   00B2 E5*00               322 	mov	a,_calculate_digit_ul_1_1
   00B4 F2                  323 	movx	@r0,a
   00B5 08                  324 	inc	r0
   00B6 E5*01               325 	mov	a,(_calculate_digit_ul_1_1 + 1)
   00B8 F2                  326 	movx	@r0,a
   00B9 08                  327 	inc	r0
   00BA E5*02               328 	mov	a,(_calculate_digit_ul_1_1 + 2)
   00BC F2                  329 	movx	@r0,a
   00BD 08                  330 	inc	r0
   00BE E5*03               331 	mov	a,(_calculate_digit_ul_1_1 + 3)
   00C0 F2                  332 	movx	@r0,a
                            333 ;	printf_large.c:208: value.byte[4] = b4;
   00C1 78r09               334 	mov	r0,#(_value + 0x0004)
   00C3 EF                  335 	mov	a,r7
   00C4 F2                  336 	movx	@r0,a
   00C5 22                  337 	ret
                            338 ;------------------------------------------------------------
                            339 ;Allocation info for local variables in function '_print_format'
                            340 ;------------------------------------------------------------
                            341 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                            342 ;------------------------------------------------------------
                            343 ;	printf_large.c:414: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                            344 ;	-----------------------------------------
                            345 ;	 function _print_format
                            346 ;	-----------------------------------------
   00C6                     347 __print_format:
   00C6 AA 82               348 	mov	r2,dpl
   00C8 AB 83               349 	mov	r3,dph
                            350 ;	printf_large.c:441: output_char = pfn;
   00CA 78r00               351 	mov	r0,#_output_char
   00CC EA                  352 	mov	a,r2
   00CD F2                  353 	movx	@r0,a
   00CE 08                  354 	inc	r0
   00CF EB                  355 	mov	a,r3
   00D0 F2                  356 	movx	@r0,a
                            357 ;	printf_large.c:442: p = pvoid;
   00D1 78r0C               358 	mov	r0,#__print_format_PARM_2
   00D3 E2                  359 	movx	a,@r0
   00D4 FA                  360 	mov	r2,a
   00D5 08                  361 	inc	r0
   00D6 E2                  362 	movx	a,@r0
   00D7 FB                  363 	mov	r3,a
   00D8 08                  364 	inc	r0
   00D9 E2                  365 	movx	a,@r0
   00DA FC                  366 	mov	r4,a
   00DB 78r02               367 	mov	r0,#_p
   00DD EA                  368 	mov	a,r2
   00DE F2                  369 	movx	@r0,a
   00DF 08                  370 	inc	r0
   00E0 EB                  371 	mov	a,r3
   00E1 F2                  372 	movx	@r0,a
   00E2 08                  373 	inc	r0
   00E3 EC                  374 	mov	a,r4
   00E4 F2                  375 	movx	@r0,a
                            376 ;	printf_large.c:446: charsOutputted = 0;
   00E5 78r0A               377 	mov	r0,#_charsOutputted
   00E7 E4                  378 	clr	a
   00E8 F2                  379 	movx	@r0,a
   00E9 08                  380 	inc	r0
   00EA F2                  381 	movx	@r0,a
                            382 ;	printf_large.c:454: while( c=*format++ )
   00EB                     383 00239$:
   00EB 78r0F               384 	mov	r0,#__print_format_PARM_3
   00ED E2                  385 	movx	a,@r0
   00EE FA                  386 	mov	r2,a
   00EF 08                  387 	inc	r0
   00F0 E2                  388 	movx	a,@r0
   00F1 FB                  389 	mov	r3,a
   00F2 08                  390 	inc	r0
   00F3 E2                  391 	movx	a,@r0
   00F4 FC                  392 	mov	r4,a
   00F5 8A 82               393 	mov	dpl,r2
   00F7 8B 83               394 	mov	dph,r3
   00F9 8C F0               395 	mov	b,r4
   00FB 12s00r00            396 	lcall	__gptrget
   00FE FD                  397 	mov	r5,a
   00FF 78r0F               398 	mov	r0,#__print_format_PARM_3
   0101 74 01               399 	mov	a,#0x01
   0103 2A                  400 	add	a,r2
   0104 F2                  401 	movx	@r0,a
   0105 E4                  402 	clr	a
   0106 3B                  403 	addc	a,r3
   0107 08                  404 	inc	r0
   0108 F2                  405 	movx	@r0,a
   0109 08                  406 	inc	r0
   010A EC                  407 	mov	a,r4
   010B F2                  408 	movx	@r0,a
   010C ED                  409 	mov	a,r5
   010D FA                  410 	mov	r2,a
   010E 70 03               411 	jnz	00328$
   0110 02s06rE4            412 	ljmp	00241$
   0113                     413 00328$:
                            414 ;	printf_large.c:456: if ( c=='%' )
   0113 BA 25 02            415 	cjne	r2,#0x25,00329$
   0116 80 03               416 	sjmp	00330$
   0118                     417 00329$:
   0118 02s06rDC            418 	ljmp	00237$
   011B                     419 00330$:
                            420 ;	printf_large.c:458: left_justify    = 0;
   011B C2*01               421 	clr	__print_format_left_justify_1_1
                            422 ;	printf_large.c:459: zero_padding    = 0;
   011D C2*02               423 	clr	__print_format_zero_padding_1_1
                            424 ;	printf_large.c:460: prefix_sign     = 0;
   011F C2*03               425 	clr	__print_format_prefix_sign_1_1
                            426 ;	printf_large.c:461: prefix_space    = 0;
   0121 C2*04               427 	clr	__print_format_prefix_space_1_1
                            428 ;	printf_large.c:462: signed_argument = 0;
   0123 C2*05               429 	clr	__print_format_signed_argument_1_1
                            430 ;	printf_large.c:463: char_argument   = 0;
   0125 C2*06               431 	clr	__print_format_char_argument_1_1
                            432 ;	printf_large.c:464: long_argument   = 0;
   0127 C2*07               433 	clr	__print_format_long_argument_1_1
                            434 ;	printf_large.c:465: float_argument  = 0;
   0129 C2*08               435 	clr	__print_format_float_argument_1_1
                            436 ;	printf_large.c:466: radix           = 0;
   012B 78r13               437 	mov	r0,#__print_format_radix_1_1
   012D E4                  438 	clr	a
   012E F2                  439 	movx	@r0,a
                            440 ;	printf_large.c:467: width           = 0;
   012F 78r14               441 	mov	r0,#__print_format_width_1_1
   0131 E4                  442 	clr	a
   0132 F2                  443 	movx	@r0,a
                            444 ;	printf_large.c:468: decimals        = -1;
   0133 7D FF               445 	mov	r5,#0xFF
                            446 ;	printf_large.c:470: get_conversion_spec:
   0135 78r0F               447 	mov	r0,#__print_format_PARM_3
   0137 E2                  448 	movx	a,@r0
   0138 FE                  449 	mov	r6,a
   0139 08                  450 	inc	r0
   013A E2                  451 	movx	a,@r0
   013B FF                  452 	mov	r7,a
   013C 08                  453 	inc	r0
   013D E2                  454 	movx	a,@r0
   013E FB                  455 	mov	r3,a
   013F                     456 00101$:
                            457 ;	printf_large.c:472: c = *format++;
   013F 8E 82               458 	mov	dpl,r6
   0141 8F 83               459 	mov	dph,r7
   0143 8B F0               460 	mov	b,r3
   0145 12s00r00            461 	lcall	__gptrget
   0148 FA                  462 	mov	r2,a
   0149 A3                  463 	inc	dptr
   014A AE 82               464 	mov	r6,dpl
   014C AF 83               465 	mov	r7,dph
   014E 78r0F               466 	mov	r0,#__print_format_PARM_3
   0150 EE                  467 	mov	a,r6
   0151 F2                  468 	movx	@r0,a
   0152 08                  469 	inc	r0
   0153 EF                  470 	mov	a,r7
   0154 F2                  471 	movx	@r0,a
   0155 08                  472 	inc	r0
   0156 EB                  473 	mov	a,r3
   0157 F2                  474 	movx	@r0,a
                            475 ;	printf_large.c:474: if (c=='%') {
   0158 BA 25 07            476 	cjne	r2,#0x25,00103$
                            477 ;	printf_large.c:475: OUTPUT_CHAR(c, p);
   015B 8A 82               478 	mov	dpl,r2
   015D 12s00r00            479 	lcall	__output_char
                            480 ;	printf_large.c:476: continue;
   0160 80 89               481 	sjmp	00239$
   0162                     482 00103$:
                            483 ;	printf_large.c:479: if (isdigit(c)) {
   0162 8A 04               484 	mov	ar4,r2
   0164 BC 30 00            485 	cjne	r4,#0x30,00333$
   0167                     486 00333$:
   0167 40 3A               487 	jc	00110$
   0169 8A 04               488 	mov	ar4,r2
   016B 74 39               489 	mov	a,#0x39
   016D B5 04 00            490 	cjne	a,ar4,00335$
   0170                     491 00335$:
   0170 40 31               492 	jc	00110$
                            493 ;	printf_large.c:480: if (decimals==-1) {
   0172 BD FF 22            494 	cjne	r5,#0xFF,00107$
                            495 ;	printf_large.c:481: width = 10*width + c - '0';
   0175 C0 06               496 	push	ar6
   0177 C0 07               497 	push	ar7
   0179 C0 03               498 	push	ar3
   017B 78r14               499 	mov	r0,#__print_format_width_1_1
   017D E2                  500 	movx	a,@r0
   017E 75 F0 0A            501 	mov	b,#0x0A
   0181 A4                  502 	mul	ab
   0182 2A                  503 	add	a,r2
   0183 78r14               504 	mov	r0,#__print_format_width_1_1
   0185 24 D0               505 	add	a,#0xd0
   0187 F2                  506 	movx	@r0,a
                            507 ;	printf_large.c:482: if (width == 0) {
   0188 D0 03               508 	pop	ar3
   018A D0 07               509 	pop	ar7
   018C D0 06               510 	pop	ar6
   018E 78r14               511 	mov	r0,#__print_format_width_1_1
   0190 E2                  512 	movx	a,@r0
   0191 70 AC               513 	jnz	00101$
                            514 ;	printf_large.c:484: zero_padding = 1;
   0193 D2*02               515 	setb	__print_format_zero_padding_1_1
   0195 80 A8               516 	sjmp	00101$
   0197                     517 00107$:
                            518 ;	printf_large.c:487: decimals = 10*decimals + c - '0';
   0197 ED                  519 	mov	a,r5
   0198 75 F0 0A            520 	mov	b,#0x0A
   019B A4                  521 	mul	ab
   019C FC                  522 	mov	r4,a
   019D 2A                  523 	add	a,r2
   019E 24 D0               524 	add	a,#0xd0
   01A0 FD                  525 	mov	r5,a
                            526 ;	printf_large.c:489: goto get_conversion_spec;
   01A1 80 9C               527 	sjmp	00101$
   01A3                     528 00110$:
                            529 ;	printf_large.c:492: if (c=='.') {
   01A3 BA 2E 07            530 	cjne	r2,#0x2E,00115$
                            531 ;	printf_large.c:493: if (decimals==-1) decimals=0;
   01A6 BD FF 96            532 	cjne	r5,#0xFF,00101$
   01A9 7D 00               533 	mov	r5,#0x00
                            534 ;	printf_large.c:496: goto get_conversion_spec;
   01AB 80 92               535 	sjmp	00101$
   01AD                     536 00115$:
                            537 ;	printf_large.c:499: if (islower(c))
   01AD 8A 04               538 	mov	ar4,r2
   01AF BC 61 00            539 	cjne	r4,#0x61,00344$
   01B2                     540 00344$:
   01B2 40 10               541 	jc	00117$
   01B4 8A 04               542 	mov	ar4,r2
   01B6 74 7A               543 	mov	a,#0x7A
   01B8 B5 04 00            544 	cjne	a,ar4,00346$
   01BB                     545 00346$:
   01BB 40 07               546 	jc	00117$
                            547 ;	printf_large.c:501: c = toupper(c);
   01BD 53 02 DF            548 	anl	ar2,#0xDF
                            549 ;	printf_large.c:502: lower_case = 1;
   01C0 D2*00               550 	setb	_lower_case
   01C2 80 02               551 	sjmp	00118$
   01C4                     552 00117$:
                            553 ;	printf_large.c:505: lower_case = 0;
   01C4 C2*00               554 	clr	_lower_case
   01C6                     555 00118$:
                            556 ;	printf_large.c:507: switch( c )
   01C6 BA 20 02            557 	cjne	r2,#0x20,00348$
   01C9 80 55               558 	sjmp	00122$
   01CB                     559 00348$:
   01CB BA 2B 02            560 	cjne	r2,#0x2B,00349$
   01CE 80 4B               561 	sjmp	00121$
   01D0                     562 00349$:
   01D0 BA 2D 02            563 	cjne	r2,#0x2D,00350$
   01D3 80 41               564 	sjmp	00120$
   01D5                     565 00350$:
   01D5 BA 42 02            566 	cjne	r2,#0x42,00351$
   01D8 80 4B               567 	sjmp	00123$
   01DA                     568 00351$:
   01DA BA 43 02            569 	cjne	r2,#0x43,00352$
   01DD 80 50               570 	sjmp	00125$
   01DF                     571 00352$:
   01DF BA 44 03            572 	cjne	r2,#0x44,00353$
   01E2 02s03rC8            573 	ljmp	00162$
   01E5                     574 00353$:
   01E5 BA 46 03            575 	cjne	r2,#0x46,00354$
   01E8 02s03rE6            576 	ljmp	00166$
   01EB                     577 00354$:
   01EB BA 49 03            578 	cjne	r2,#0x49,00355$
   01EE 02s03rC8            579 	ljmp	00162$
   01F1                     580 00355$:
   01F1 BA 4C 02            581 	cjne	r2,#0x4C,00356$
   01F4 80 34               582 	sjmp	00124$
   01F6                     583 00356$:
   01F6 BA 4F 03            584 	cjne	r2,#0x4F,00357$
   01F9 02s03rD1            585 	ljmp	00163$
   01FC                     586 00357$:
   01FC BA 50 03            587 	cjne	r2,#0x50,00358$
   01FF 02s03r53            588 	ljmp	00148$
   0202                     589 00358$:
   0202 BA 53 02            590 	cjne	r2,#0x53,00359$
   0205 80 50               591 	sjmp	00129$
   0207                     592 00359$:
   0207 BA 55 03            593 	cjne	r2,#0x55,00360$
   020A 02s03rD8            594 	ljmp	00164$
   020D                     595 00360$:
   020D BA 58 03            596 	cjne	r2,#0x58,00361$
   0210 02s03rDF            597 	ljmp	00165$
   0213                     598 00361$:
   0213 02s03rEA            599 	ljmp	00167$
                            600 ;	printf_large.c:509: case '-':
   0216                     601 00120$:
                            602 ;	printf_large.c:510: left_justify = 1;
   0216 D2*01               603 	setb	__print_format_left_justify_1_1
                            604 ;	printf_large.c:511: goto get_conversion_spec;
   0218 02s01r3F            605 	ljmp	00101$
                            606 ;	printf_large.c:512: case '+':
   021B                     607 00121$:
                            608 ;	printf_large.c:513: prefix_sign = 1;
   021B D2*03               609 	setb	__print_format_prefix_sign_1_1
                            610 ;	printf_large.c:514: goto get_conversion_spec;
   021D 02s01r3F            611 	ljmp	00101$
                            612 ;	printf_large.c:515: case ' ':
   0220                     613 00122$:
                            614 ;	printf_large.c:516: prefix_space = 1;
   0220 D2*04               615 	setb	__print_format_prefix_space_1_1
                            616 ;	printf_large.c:517: goto get_conversion_spec;
   0222 02s01r3F            617 	ljmp	00101$
                            618 ;	printf_large.c:518: case 'B':
   0225                     619 00123$:
                            620 ;	printf_large.c:519: char_argument = 1;
   0225 D2*06               621 	setb	__print_format_char_argument_1_1
                            622 ;	printf_large.c:520: goto get_conversion_spec;
   0227 02s01r3F            623 	ljmp	00101$
                            624 ;	printf_large.c:521: case 'L':
   022A                     625 00124$:
                            626 ;	printf_large.c:522: long_argument = 1;
   022A D2*07               627 	setb	__print_format_long_argument_1_1
                            628 ;	printf_large.c:523: goto get_conversion_spec;
   022C 02s01r3F            629 	ljmp	00101$
                            630 ;	printf_large.c:525: case 'C':
   022F                     631 00125$:
                            632 ;	printf_large.c:526: if( char_argument )
   022F 30*06 0C            633 	jnb	__print_format_char_argument_1_1,00127$
                            634 ;	printf_large.c:527: c = va_arg(ap,char);
   0232 79r12               635 	mov	r1,#__print_format_PARM_4
   0234 E3                  636 	movx	a,@r1
   0235 14                  637 	dec	a
   0236 F8                  638 	mov	r0,a
   0237 79r12               639 	mov	r1,#__print_format_PARM_4
   0239 F3                  640 	movx	@r1,a
   023A 86 02               641 	mov	ar2,@r0
   023C 80 11               642 	sjmp	00128$
   023E                     643 00127$:
                            644 ;	printf_large.c:529: c = va_arg(ap,int);
   023E 79r12               645 	mov	r1,#__print_format_PARM_4
   0240 E3                  646 	movx	a,@r1
   0241 24 FE               647 	add	a,#0xfe
   0243 F8                  648 	mov	r0,a
   0244 79r12               649 	mov	r1,#__print_format_PARM_4
   0246 F3                  650 	movx	@r1,a
   0247 86 03               651 	mov	ar3,@r0
   0249 08                  652 	inc	r0
   024A 86 06               653 	mov	ar6,@r0
   024C 18                  654 	dec	r0
   024D 8B 02               655 	mov	ar2,r3
   024F                     656 00128$:
                            657 ;	printf_large.c:530: OUTPUT_CHAR( c, p );
   024F 8A 82               658 	mov	dpl,r2
   0251 12s00r00            659 	lcall	__output_char
                            660 ;	printf_large.c:531: break;
   0254 02s03rF5            661 	ljmp	00168$
                            662 ;	printf_large.c:533: case 'S':
   0257                     663 00129$:
                            664 ;	printf_large.c:534: PTR = va_arg(ap,ptr_t);
   0257 79r12               665 	mov	r1,#__print_format_PARM_4
   0259 E3                  666 	movx	a,@r1
   025A 24 FD               667 	add	a,#0xfd
   025C F8                  668 	mov	r0,a
   025D 79r12               669 	mov	r1,#__print_format_PARM_4
   025F F3                  670 	movx	@r1,a
   0260 86 03               671 	mov	ar3,@r0
   0262 08                  672 	inc	r0
   0263 86 06               673 	mov	ar6,@r0
   0265 08                  674 	inc	r0
   0266 86 07               675 	mov	ar7,@r0
   0268 18                  676 	dec	r0
   0269 18                  677 	dec	r0
   026A 78r05               678 	mov	r0,#_value
   026C EB                  679 	mov	a,r3
   026D F2                  680 	movx	@r0,a
   026E 08                  681 	inc	r0
   026F EE                  682 	mov	a,r6
   0270 F2                  683 	movx	@r0,a
   0271 08                  684 	inc	r0
   0272 EF                  685 	mov	a,r7
   0273 F2                  686 	movx	@r0,a
                            687 ;	printf_large.c:544: length = strlen(PTR);
   0274 8B 82               688 	mov	dpl,r3
   0276 8E 83               689 	mov	dph,r6
   0278 8F F0               690 	mov	b,r7
   027A C0 05               691 	push	ar5
   027C 12s00r00            692 	lcall	_strlen
   027F AB 82               693 	mov	r3,dpl
   0281 AE 83               694 	mov	r6,dph
   0283 D0 05               695 	pop	ar5
                            696 ;	printf_large.c:546: if ( decimals == -1 )
   0285 BD FF 02            697 	cjne	r5,#0xFF,00131$
                            698 ;	printf_large.c:548: decimals = length;
   0288 8B 05               699 	mov	ar5,r3
   028A                     700 00131$:
                            701 ;	printf_large.c:550: if ( ( !left_justify ) && (length < width) )
   028A 20*01 37            702 	jb	__print_format_left_justify_1_1,00281$
   028D 78r14               703 	mov	r0,#__print_format_width_1_1
   028F C3                  704 	clr	c
   0290 E2                  705 	movx	a,@r0
   0291 F5 F0               706 	mov	b,a
   0293 EB                  707 	mov	a,r3
   0294 95 F0               708 	subb	a,b
   0296 50 2C               709 	jnc	00281$
                            710 ;	printf_large.c:552: width -= length;
   0298 78r14               711 	mov	r0,#__print_format_width_1_1
   029A E2                  712 	movx	a,@r0
   029B C3                  713 	clr	c
   029C 9B                  714 	subb	a,r3
   029D F2                  715 	movx	@r0,a
                            716 ;	printf_large.c:553: while( width-- != 0 )
   029E 78r14               717 	mov	r0,#__print_format_width_1_1
   02A0 E2                  718 	movx	a,@r0
   02A1 FE                  719 	mov	r6,a
   02A2                     720 00132$:
   02A2 8E 07               721 	mov	ar7,r6
   02A4 1E                  722 	dec	r6
   02A5 78r14               723 	mov	r0,#__print_format_width_1_1
   02A7 EE                  724 	mov	a,r6
   02A8 F2                  725 	movx	@r0,a
   02A9 EF                  726 	mov	a,r7
   02AA 60 14               727 	jz	00321$
                            728 ;	printf_large.c:555: OUTPUT_CHAR( ' ', p );
   02AC 75 82 20            729 	mov	dpl,#0x20
   02AF C0 03               730 	push	ar3
   02B1 C0 05               731 	push	ar5
   02B3 C0 06               732 	push	ar6
   02B5 12s00r00            733 	lcall	__output_char
   02B8 D0 06               734 	pop	ar6
   02BA D0 05               735 	pop	ar5
   02BC D0 03               736 	pop	ar3
                            737 ;	printf_large.c:559: while ( (c = *PTR)  && (decimals-- > 0))
   02BE 80 E2               738 	sjmp	00132$
   02C0                     739 00321$:
   02C0 78r14               740 	mov	r0,#__print_format_width_1_1
   02C2 EE                  741 	mov	a,r6
   02C3 F2                  742 	movx	@r0,a
   02C4                     743 00281$:
   02C4                     744 00139$:
   02C4 C0 03               745 	push	ar3
   02C6 78r05               746 	mov	r0,#_value
   02C8 E2                  747 	movx	a,@r0
   02C9 FE                  748 	mov	r6,a
   02CA 08                  749 	inc	r0
   02CB E2                  750 	movx	a,@r0
   02CC FF                  751 	mov	r7,a
   02CD 08                  752 	inc	r0
   02CE E2                  753 	movx	a,@r0
   02CF FB                  754 	mov	r3,a
   02D0 8E 82               755 	mov	dpl,r6
   02D2 8F 83               756 	mov	dph,r7
   02D4 8B F0               757 	mov	b,r3
   02D6 12s00r00            758 	lcall	__gptrget
   02D9 FE                  759 	mov	r6,a
   02DA FA                  760 	mov	r2,a
   02DB D0 03               761 	pop	ar3
   02DD EE                  762 	mov	a,r6
   02DE 60 3C               763 	jz	00141$
   02E0 8D 06               764 	mov	ar6,r5
   02E2 1D                  765 	dec	r5
   02E3 C3                  766 	clr	c
   02E4 E4                  767 	clr	a
   02E5 64 80               768 	xrl	a,#0x80
   02E7 8E F0               769 	mov	b,r6
   02E9 63 F0 80            770 	xrl	b,#0x80
   02EC 95 F0               771 	subb	a,b
   02EE 50 2C               772 	jnc	00141$
                            773 ;	printf_large.c:561: OUTPUT_CHAR( c, p );
   02F0 C0 03               774 	push	ar3
   02F2 8A 82               775 	mov	dpl,r2
   02F4 C0 03               776 	push	ar3
   02F6 C0 05               777 	push	ar5
   02F8 12s00r00            778 	lcall	__output_char
   02FB D0 05               779 	pop	ar5
   02FD D0 03               780 	pop	ar3
                            781 ;	printf_large.c:562: PTR++;
   02FF 78r05               782 	mov	r0,#_value
   0301 E2                  783 	movx	a,@r0
   0302 FE                  784 	mov	r6,a
   0303 08                  785 	inc	r0
   0304 E2                  786 	movx	a,@r0
   0305 FF                  787 	mov	r7,a
   0306 08                  788 	inc	r0
   0307 E2                  789 	movx	a,@r0
   0308 FB                  790 	mov	r3,a
   0309 0E                  791 	inc	r6
   030A BE 00 01            792 	cjne	r6,#0x00,00370$
   030D 0F                  793 	inc	r7
   030E                     794 00370$:
   030E 78r05               795 	mov	r0,#_value
   0310 EE                  796 	mov	a,r6
   0311 F2                  797 	movx	@r0,a
   0312 08                  798 	inc	r0
   0313 EF                  799 	mov	a,r7
   0314 F2                  800 	movx	@r0,a
   0315 08                  801 	inc	r0
   0316 EB                  802 	mov	a,r3
   0317 F2                  803 	movx	@r0,a
   0318 D0 03               804 	pop	ar3
   031A 80 A8               805 	sjmp	00139$
   031C                     806 00141$:
                            807 ;	printf_large.c:565: if ( left_justify && (length < width))
   031C 20*01 03            808 	jb	__print_format_left_justify_1_1,00371$
   031F 02s03rF5            809 	ljmp	00168$
   0322                     810 00371$:
   0322 78r14               811 	mov	r0,#__print_format_width_1_1
   0324 C3                  812 	clr	c
   0325 E2                  813 	movx	a,@r0
   0326 F5 F0               814 	mov	b,a
   0328 EB                  815 	mov	a,r3
   0329 95 F0               816 	subb	a,b
   032B 40 03               817 	jc	00372$
   032D 02s03rF5            818 	ljmp	00168$
   0330                     819 00372$:
                            820 ;	printf_large.c:567: width -= length;
   0330 78r14               821 	mov	r0,#__print_format_width_1_1
   0332 E2                  822 	movx	a,@r0
   0333 C3                  823 	clr	c
   0334 9B                  824 	subb	a,r3
   0335 F2                  825 	movx	@r0,a
                            826 ;	printf_large.c:568: while( width-- != 0 )
   0336 78r14               827 	mov	r0,#__print_format_width_1_1
   0338 E2                  828 	movx	a,@r0
   0339 FD                  829 	mov	r5,a
   033A                     830 00142$:
   033A 8D 06               831 	mov	ar6,r5
   033C 1D                  832 	dec	r5
   033D 78r14               833 	mov	r0,#__print_format_width_1_1
   033F ED                  834 	mov	a,r5
   0340 F2                  835 	movx	@r0,a
   0341 EE                  836 	mov	a,r6
   0342 70 03               837 	jnz	00373$
   0344 02s03rF1            838 	ljmp	00323$
   0347                     839 00373$:
                            840 ;	printf_large.c:570: OUTPUT_CHAR( ' ', p );
   0347 75 82 20            841 	mov	dpl,#0x20
   034A C0 05               842 	push	ar5
   034C 12s00r00            843 	lcall	__output_char
   034F D0 05               844 	pop	ar5
                            845 ;	printf_large.c:575: case 'P':
   0351 80 E7               846 	sjmp	00142$
   0353                     847 00148$:
                            848 ;	printf_large.c:576: PTR = va_arg(ap,ptr_t);
   0353 79r12               849 	mov	r1,#__print_format_PARM_4
   0355 E3                  850 	movx	a,@r1
   0356 24 FD               851 	add	a,#0xfd
   0358 F8                  852 	mov	r0,a
   0359 79r12               853 	mov	r1,#__print_format_PARM_4
   035B F3                  854 	movx	@r1,a
   035C 86 06               855 	mov	ar6,@r0
   035E 08                  856 	inc	r0
   035F 86 07               857 	mov	ar7,@r0
   0361 08                  858 	inc	r0
   0362 86 04               859 	mov	ar4,@r0
   0364 18                  860 	dec	r0
   0365 18                  861 	dec	r0
   0366 78r05               862 	mov	r0,#_value
   0368 EE                  863 	mov	a,r6
   0369 F2                  864 	movx	@r0,a
   036A 08                  865 	inc	r0
   036B EF                  866 	mov	a,r7
   036C F2                  867 	movx	@r0,a
   036D 08                  868 	inc	r0
   036E EC                  869 	mov	a,r4
   036F F2                  870 	movx	@r0,a
                            871 ;	printf_large.c:599: unsigned char memtype = value.byte[2];
   0370 78r07               872 	mov	r0,#(_value + 0x0002)
   0372 E2                  873 	movx	a,@r0
   0373 FA                  874 	mov	r2,a
                            875 ;	printf_large.c:600: if (memtype >= 0x80)
   0374 BA 80 00            876 	cjne	r2,#0x80,00374$
   0377                     877 00374$:
   0377 40 04               878 	jc	00156$
                            879 ;	printf_large.c:601: c = 'C';
   0379 7A 43               880 	mov	r2,#0x43
   037B 80 14               881 	sjmp	00157$
   037D                     882 00156$:
                            883 ;	printf_large.c:602: else if (memtype >= 0x60)
   037D BA 60 00            884 	cjne	r2,#0x60,00376$
   0380                     885 00376$:
   0380 40 04               886 	jc	00153$
                            887 ;	printf_large.c:603: c = 'P';
   0382 7A 50               888 	mov	r2,#0x50
   0384 80 0B               889 	sjmp	00157$
   0386                     890 00153$:
                            891 ;	printf_large.c:604: else if (memtype >= 0x40)
   0386 BA 40 00            892 	cjne	r2,#0x40,00378$
   0389                     893 00378$:
   0389 40 04               894 	jc	00150$
                            895 ;	printf_large.c:605: c = 'I';
   038B 7A 49               896 	mov	r2,#0x49
   038D 80 02               897 	sjmp	00157$
   038F                     898 00150$:
                            899 ;	printf_large.c:607: c = 'X';
   038F 7A 58               900 	mov	r2,#0x58
   0391                     901 00157$:
                            902 ;	printf_large.c:609: OUTPUT_CHAR(c, p);
   0391 8A 82               903 	mov	dpl,r2
   0393 C0 02               904 	push	ar2
   0395 12s00r00            905 	lcall	__output_char
                            906 ;	printf_large.c:610: OUTPUT_CHAR(':', p);
   0398 75 82 3A            907 	mov	dpl,#0x3A
   039B 12s00r00            908 	lcall	__output_char
                            909 ;	printf_large.c:611: OUTPUT_CHAR('0', p);
   039E 75 82 30            910 	mov	dpl,#0x30
   03A1 12s00r00            911 	lcall	__output_char
                            912 ;	printf_large.c:612: OUTPUT_CHAR('x', p);
   03A4 75 82 78            913 	mov	dpl,#0x78
   03A7 12s00r00            914 	lcall	__output_char
   03AA D0 02               915 	pop	ar2
                            916 ;	printf_large.c:613: if ((c != 'I' /* idata */) &&
   03AC BA 49 02            917 	cjne	r2,#0x49,00380$
   03AF 80 0D               918 	sjmp	00159$
   03B1                     919 00380$:
                            920 ;	printf_large.c:614: (c != 'P' /* pdata */))
   03B1 BA 50 02            921 	cjne	r2,#0x50,00381$
   03B4 80 08               922 	sjmp	00159$
   03B6                     923 00381$:
                            924 ;	printf_large.c:616: OUTPUT_2DIGITS( value.byte[1] );
   03B6 78r06               925 	mov	r0,#(_value + 0x0001)
   03B8 E2                  926 	movx	a,@r0
   03B9 F5 82               927 	mov	dpl,a
   03BB 12s00r51            928 	lcall	_output_2digits
   03BE                     929 00159$:
                            930 ;	printf_large.c:618: OUTPUT_2DIGITS( value.byte[0] );
   03BE 78r05               931 	mov	r0,#_value
   03C0 E2                  932 	movx	a,@r0
   03C1 F5 82               933 	mov	dpl,a
   03C3 12s00r51            934 	lcall	_output_2digits
                            935 ;	printf_large.c:625: break;
                            936 ;	printf_large.c:628: case 'I':
   03C6 80 2D               937 	sjmp	00168$
   03C8                     938 00162$:
                            939 ;	printf_large.c:629: signed_argument = 1;
   03C8 D2*05               940 	setb	__print_format_signed_argument_1_1
                            941 ;	printf_large.c:630: radix = 10;
   03CA 78r13               942 	mov	r0,#__print_format_radix_1_1
   03CC 74 0A               943 	mov	a,#0x0A
   03CE F2                  944 	movx	@r0,a
                            945 ;	printf_large.c:631: break;
                            946 ;	printf_large.c:633: case 'O':
   03CF 80 24               947 	sjmp	00168$
   03D1                     948 00163$:
                            949 ;	printf_large.c:634: radix = 8;
   03D1 78r13               950 	mov	r0,#__print_format_radix_1_1
   03D3 74 08               951 	mov	a,#0x08
   03D5 F2                  952 	movx	@r0,a
                            953 ;	printf_large.c:635: break;
                            954 ;	printf_large.c:637: case 'U':
   03D6 80 1D               955 	sjmp	00168$
   03D8                     956 00164$:
                            957 ;	printf_large.c:638: radix = 10;
   03D8 78r13               958 	mov	r0,#__print_format_radix_1_1
   03DA 74 0A               959 	mov	a,#0x0A
   03DC F2                  960 	movx	@r0,a
                            961 ;	printf_large.c:639: break;
                            962 ;	printf_large.c:641: case 'X':
   03DD 80 16               963 	sjmp	00168$
   03DF                     964 00165$:
                            965 ;	printf_large.c:642: radix = 16;
   03DF 78r13               966 	mov	r0,#__print_format_radix_1_1
   03E1 74 10               967 	mov	a,#0x10
   03E3 F2                  968 	movx	@r0,a
                            969 ;	printf_large.c:643: break;
                            970 ;	printf_large.c:645: case 'F':
   03E4 80 0F               971 	sjmp	00168$
   03E6                     972 00166$:
                            973 ;	printf_large.c:646: float_argument=1;
   03E6 D2*08               974 	setb	__print_format_float_argument_1_1
                            975 ;	printf_large.c:647: break;
                            976 ;	printf_large.c:649: default:
   03E8 80 0B               977 	sjmp	00168$
   03EA                     978 00167$:
                            979 ;	printf_large.c:651: OUTPUT_CHAR( c, p );
   03EA 8A 82               980 	mov	dpl,r2
   03EC 12s00r00            981 	lcall	__output_char
                            982 ;	printf_large.c:828: return charsOutputted;
                            983 ;	printf_large.c:653: }
   03EF 80 04               984 	sjmp	00168$
   03F1                     985 00323$:
   03F1 78r14               986 	mov	r0,#__print_format_width_1_1
   03F3 ED                  987 	mov	a,r5
   03F4 F2                  988 	movx	@r0,a
   03F5                     989 00168$:
                            990 ;	printf_large.c:655: if (float_argument) {
   03F5 30*08 71            991 	jnb	__print_format_float_argument_1_1,00234$
                            992 ;	printf_large.c:656: value.f=va_arg(ap,float);
   03F8 79r12               993 	mov	r1,#__print_format_PARM_4
   03FA E3                  994 	movx	a,@r1
   03FB 24 FC               995 	add	a,#0xfc
   03FD F8                  996 	mov	r0,a
   03FE 79r12               997 	mov	r1,#__print_format_PARM_4
   0400 F3                  998 	movx	@r1,a
   0401 86*00               999 	mov	__print_format_sloc0_1_0,@r0
   0403 08                 1000 	inc	r0
   0404 86*01              1001 	mov	(__print_format_sloc0_1_0 + 1),@r0
   0406 08                 1002 	inc	r0
   0407 86*02              1003 	mov	(__print_format_sloc0_1_0 + 2),@r0
   0409 08                 1004 	inc	r0
   040A 86*03              1005 	mov	(__print_format_sloc0_1_0 + 3),@r0
   040C 18                 1006 	dec	r0
   040D 18                 1007 	dec	r0
   040E 18                 1008 	dec	r0
   040F 78r05              1009 	mov	r0,#_value
   0411 E5*00              1010 	mov	a,__print_format_sloc0_1_0
   0413 F2                 1011 	movx	@r0,a
   0414 08                 1012 	inc	r0
   0415 E5*01              1013 	mov	a,(__print_format_sloc0_1_0 + 1)
   0417 F2                 1014 	movx	@r0,a
   0418 08                 1015 	inc	r0
   0419 E5*02              1016 	mov	a,(__print_format_sloc0_1_0 + 2)
   041B F2                 1017 	movx	@r0,a
   041C 08                 1018 	inc	r0
   041D E5*03              1019 	mov	a,(__print_format_sloc0_1_0 + 3)
   041F F2                 1020 	movx	@r0,a
                           1021 ;	printf_large.c:658: PTR="<NO FLOAT>";
   0420 78r05              1022 	mov	r0,#_value
   0422 74r00              1023 	mov	a,#__str_0
   0424 F2                 1024 	movx	@r0,a
   0425 08                 1025 	inc	r0
   0426 74s00              1026 	mov	a,#(__str_0 >> 8)
   0428 F2                 1027 	movx	@r0,a
   0429 08                 1028 	inc	r0
   042A 74 80              1029 	mov	a,#0x80
   042C F2                 1030 	movx	@r0,a
                           1031 ;	printf_large.c:659: while (c=*PTR++)
   042D                    1032 00169$:
   042D 78r05              1033 	mov	r0,#_value
   042F E2                 1034 	movx	a,@r0
   0430 F5*00              1035 	mov	__print_format_sloc0_1_0,a
   0432 08                 1036 	inc	r0
   0433 E2                 1037 	movx	a,@r0
   0434 F5*01              1038 	mov	(__print_format_sloc0_1_0 + 1),a
   0436 08                 1039 	inc	r0
   0437 E2                 1040 	movx	a,@r0
   0438 F5*02              1041 	mov	(__print_format_sloc0_1_0 + 2),a
   043A 74 01              1042 	mov	a,#0x01
   043C 25*00              1043 	add	a,__print_format_sloc0_1_0
   043E FD                 1044 	mov	r5,a
   043F E4                 1045 	clr	a
   0440 35*01              1046 	addc	a,(__print_format_sloc0_1_0 + 1)
   0442 FE                 1047 	mov	r6,a
   0443 AF*02              1048 	mov	r7,(__print_format_sloc0_1_0 + 2)
   0445 78r05              1049 	mov	r0,#_value
   0447 ED                 1050 	mov	a,r5
   0448 F2                 1051 	movx	@r0,a
   0449 08                 1052 	inc	r0
   044A EE                 1053 	mov	a,r6
   044B F2                 1054 	movx	@r0,a
   044C 08                 1055 	inc	r0
   044D EF                 1056 	mov	a,r7
   044E F2                 1057 	movx	@r0,a
   044F 85*00 82           1058 	mov	dpl,__print_format_sloc0_1_0
   0452 85*01 83           1059 	mov	dph,(__print_format_sloc0_1_0 + 1)
   0455 85*02 F0           1060 	mov	b,(__print_format_sloc0_1_0 + 2)
   0458 12s00r00           1061 	lcall	__gptrget
   045B FD                 1062 	mov	r5,a
   045C FA                 1063 	mov	r2,a
   045D 70 03              1064 	jnz	00383$
   045F 02s00rEB           1065 	ljmp	00239$
   0462                    1066 00383$:
                           1067 ;	printf_large.c:661: OUTPUT_CHAR (c, p);
   0462 8A 82              1068 	mov	dpl,r2
   0464 12s00r00           1069 	lcall	__output_char
   0467 80 C4              1070 	sjmp	00169$
   0469                    1071 00234$:
                           1072 ;	printf_large.c:678: } else if (radix != 0)
   0469 78r13              1073 	mov	r0,#__print_format_radix_1_1
   046B E2                 1074 	movx	a,@r0
   046C 70 03              1075 	jnz	00384$
   046E 02s00rEB           1076 	ljmp	00239$
   0471                    1077 00384$:
                           1078 ;	printf_large.c:683: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
   0471 7Ar1B              1079 	mov	r2,#(__print_format_store_4_22 + 0x0005)
                           1080 ;	printf_large.c:686: if (char_argument)
   0473 30*06 4A           1081 	jnb	__print_format_char_argument_1_1,00180$
                           1082 ;	printf_large.c:688: value.l = va_arg(ap,char);
   0476 C0 02              1083 	push	ar2
   0478 79r12              1084 	mov	r1,#__print_format_PARM_4
   047A E3                 1085 	movx	a,@r1
   047B 14                 1086 	dec	a
   047C F8                 1087 	mov	r0,a
   047D 79r12              1088 	mov	r1,#__print_format_PARM_4
   047F F3                 1089 	movx	@r1,a
   0480 E6                 1090 	mov	a,@r0
   0481 FE                 1091 	mov	r6,a
   0482 33                 1092 	rlc	a
   0483 95 E0              1093 	subb	a,acc
   0485 FF                 1094 	mov	r7,a
   0486 FD                 1095 	mov	r5,a
   0487 FC                 1096 	mov	r4,a
   0488 78r05              1097 	mov	r0,#_value
   048A EE                 1098 	mov	a,r6
   048B F2                 1099 	movx	@r0,a
   048C 08                 1100 	inc	r0
   048D EF                 1101 	mov	a,r7
   048E F2                 1102 	movx	@r0,a
   048F 08                 1103 	inc	r0
   0490 ED                 1104 	mov	a,r5
   0491 F2                 1105 	movx	@r0,a
   0492 08                 1106 	inc	r0
   0493 EC                 1107 	mov	a,r4
   0494 F2                 1108 	movx	@r0,a
                           1109 ;	printf_large.c:689: if (!signed_argument)
   0495 D0 02              1110 	pop	ar2
   0497 30*05 03           1111 	jnb	__print_format_signed_argument_1_1,00386$
   049A 02s05r36           1112 	ljmp	00181$
   049D                    1113 00386$:
                           1114 ;	printf_large.c:691: value.l &= 0xFF;
   049D C0 02              1115 	push	ar2
   049F 78r05              1116 	mov	r0,#_value
   04A1 E2                 1117 	movx	a,@r0
   04A2 FC                 1118 	mov	r4,a
   04A3 08                 1119 	inc	r0
   04A4 E2                 1120 	movx	a,@r0
   04A5 08                 1121 	inc	r0
   04A6 E2                 1122 	movx	a,@r0
   04A7 08                 1123 	inc	r0
   04A8 E2                 1124 	movx	a,@r0
   04A9 7E 00              1125 	mov	r6,#0x00
   04AB 7F 00              1126 	mov	r7,#0x00
   04AD 7D 00              1127 	mov	r5,#0x00
   04AF 78r05              1128 	mov	r0,#_value
   04B1 EC                 1129 	mov	a,r4
   04B2 F2                 1130 	movx	@r0,a
   04B3 08                 1131 	inc	r0
   04B4 EE                 1132 	mov	a,r6
   04B5 F2                 1133 	movx	@r0,a
   04B6 08                 1134 	inc	r0
   04B7 EF                 1135 	mov	a,r7
   04B8 F2                 1136 	movx	@r0,a
   04B9 08                 1137 	inc	r0
   04BA ED                 1138 	mov	a,r5
   04BB F2                 1139 	movx	@r0,a
   04BC D0 02              1140 	pop	ar2
   04BE 80 76              1141 	sjmp	00181$
   04C0                    1142 00180$:
                           1143 ;	printf_large.c:694: else if (long_argument)
   04C0 30*07 2A           1144 	jnb	__print_format_long_argument_1_1,00177$
                           1145 ;	printf_large.c:696: value.l = va_arg(ap,long);
   04C3 C0 02              1146 	push	ar2
   04C5 79r12              1147 	mov	r1,#__print_format_PARM_4
   04C7 E3                 1148 	movx	a,@r1
   04C8 24 FC              1149 	add	a,#0xfc
   04CA F8                 1150 	mov	r0,a
   04CB 79r12              1151 	mov	r1,#__print_format_PARM_4
   04CD F3                 1152 	movx	@r1,a
   04CE 86 04              1153 	mov	ar4,@r0
   04D0 08                 1154 	inc	r0
   04D1 86 06              1155 	mov	ar6,@r0
   04D3 08                 1156 	inc	r0
   04D4 86 07              1157 	mov	ar7,@r0
   04D6 08                 1158 	inc	r0
   04D7 86 05              1159 	mov	ar5,@r0
   04D9 18                 1160 	dec	r0
   04DA 18                 1161 	dec	r0
   04DB 18                 1162 	dec	r0
   04DC 78r05              1163 	mov	r0,#_value
   04DE EC                 1164 	mov	a,r4
   04DF F2                 1165 	movx	@r0,a
   04E0 08                 1166 	inc	r0
   04E1 EE                 1167 	mov	a,r6
   04E2 F2                 1168 	movx	@r0,a
   04E3 08                 1169 	inc	r0
   04E4 EF                 1170 	mov	a,r7
   04E5 F2                 1171 	movx	@r0,a
   04E6 08                 1172 	inc	r0
   04E7 ED                 1173 	mov	a,r5
   04E8 F2                 1174 	movx	@r0,a
   04E9 D0 02              1175 	pop	ar2
   04EB 80 49              1176 	sjmp	00181$
   04ED                    1177 00177$:
                           1178 ;	printf_large.c:700: value.l = va_arg(ap,int);
   04ED C0 02              1179 	push	ar2
   04EF 79r12              1180 	mov	r1,#__print_format_PARM_4
   04F1 E3                 1181 	movx	a,@r1
   04F2 24 FE              1182 	add	a,#0xfe
   04F4 F8                 1183 	mov	r0,a
   04F5 79r12              1184 	mov	r1,#__print_format_PARM_4
   04F7 F3                 1185 	movx	@r1,a
   04F8 86 04              1186 	mov	ar4,@r0
   04FA 08                 1187 	inc	r0
   04FB 86 06              1188 	mov	ar6,@r0
   04FD 18                 1189 	dec	r0
   04FE EE                 1190 	mov	a,r6
   04FF 33                 1191 	rlc	a
   0500 95 E0              1192 	subb	a,acc
   0502 FF                 1193 	mov	r7,a
   0503 FD                 1194 	mov	r5,a
   0504 78r05              1195 	mov	r0,#_value
   0506 EC                 1196 	mov	a,r4
   0507 F2                 1197 	movx	@r0,a
   0508 08                 1198 	inc	r0
   0509 EE                 1199 	mov	a,r6
   050A F2                 1200 	movx	@r0,a
   050B 08                 1201 	inc	r0
   050C EF                 1202 	mov	a,r7
   050D F2                 1203 	movx	@r0,a
   050E 08                 1204 	inc	r0
   050F ED                 1205 	mov	a,r5
   0510 F2                 1206 	movx	@r0,a
                           1207 ;	printf_large.c:701: if (!signed_argument)
   0511 D0 02              1208 	pop	ar2
   0513 20*05 20           1209 	jb	__print_format_signed_argument_1_1,00181$
                           1210 ;	printf_large.c:703: value.l &= 0xFFFF;
   0516 C0 02              1211 	push	ar2
   0518 78r05              1212 	mov	r0,#_value
   051A E2                 1213 	movx	a,@r0
   051B FC                 1214 	mov	r4,a
   051C 08                 1215 	inc	r0
   051D E2                 1216 	movx	a,@r0
   051E FE                 1217 	mov	r6,a
   051F 08                 1218 	inc	r0
   0520 E2                 1219 	movx	a,@r0
   0521 08                 1220 	inc	r0
   0522 E2                 1221 	movx	a,@r0
   0523 7F 00              1222 	mov	r7,#0x00
   0525 7D 00              1223 	mov	r5,#0x00
   0527 78r05              1224 	mov	r0,#_value
   0529 EC                 1225 	mov	a,r4
   052A F2                 1226 	movx	@r0,a
   052B 08                 1227 	inc	r0
   052C EE                 1228 	mov	a,r6
   052D F2                 1229 	movx	@r0,a
   052E 08                 1230 	inc	r0
   052F EF                 1231 	mov	a,r7
   0530 F2                 1232 	movx	@r0,a
   0531 08                 1233 	inc	r0
   0532 ED                 1234 	mov	a,r5
   0533 F2                 1235 	movx	@r0,a
                           1236 ;	printf_large.c:828: return charsOutputted;
   0534 D0 02              1237 	pop	ar2
                           1238 ;	printf_large.c:703: value.l &= 0xFFFF;
   0536                    1239 00181$:
                           1240 ;	printf_large.c:707: if ( signed_argument )
   0536 30*05 2E           1241 	jnb	__print_format_signed_argument_1_1,00186$
                           1242 ;	printf_large.c:709: if (value.l < 0)
   0539 78r05              1243 	mov	r0,#_value
   053B E2                 1244 	movx	a,@r0
   053C FC                 1245 	mov	r4,a
   053D 08                 1246 	inc	r0
   053E E2                 1247 	movx	a,@r0
   053F FE                 1248 	mov	r6,a
   0540 08                 1249 	inc	r0
   0541 E2                 1250 	movx	a,@r0
   0542 FF                 1251 	mov	r7,a
   0543 08                 1252 	inc	r0
   0544 E2                 1253 	movx	a,@r0
   0545 FD                 1254 	mov	r5,a
   0546 30 E7 1C           1255 	jnb	acc.7,00183$
                           1256 ;	printf_large.c:710: value.l = -value.l;
   0549 C3                 1257 	clr	c
   054A E4                 1258 	clr	a
   054B 9C                 1259 	subb	a,r4
   054C FC                 1260 	mov	r4,a
   054D E4                 1261 	clr	a
   054E 9E                 1262 	subb	a,r6
   054F FE                 1263 	mov	r6,a
   0550 E4                 1264 	clr	a
   0551 9F                 1265 	subb	a,r7
   0552 FF                 1266 	mov	r7,a
   0553 E4                 1267 	clr	a
   0554 9D                 1268 	subb	a,r5
   0555 FD                 1269 	mov	r5,a
   0556 78r05              1270 	mov	r0,#_value
   0558 EC                 1271 	mov	a,r4
   0559 F2                 1272 	movx	@r0,a
   055A 08                 1273 	inc	r0
   055B EE                 1274 	mov	a,r6
   055C F2                 1275 	movx	@r0,a
   055D 08                 1276 	inc	r0
   055E EF                 1277 	mov	a,r7
   055F F2                 1278 	movx	@r0,a
   0560 08                 1279 	inc	r0
   0561 ED                 1280 	mov	a,r5
   0562 F2                 1281 	movx	@r0,a
   0563 80 02              1282 	sjmp	00186$
   0565                    1283 00183$:
                           1284 ;	printf_large.c:712: signed_argument = 0;
   0565 C2*05              1285 	clr	__print_format_signed_argument_1_1
   0567                    1286 00186$:
                           1287 ;	printf_large.c:716: lsd = 1;
   0567 D2*09              1288 	setb	__print_format_lsd_1_1
                           1289 ;	printf_large.c:718: do {
   0569 8A 00              1290 	mov	ar0,r2
   056B 79r15              1291 	mov	r1,#__print_format_length_1_1
   056D E4                 1292 	clr	a
   056E F3                 1293 	movx	@r1,a
   056F                    1294 00190$:
                           1295 ;	printf_large.c:719: value.byte[4] = 0;
   056F 79r09              1296 	mov	r1,#(_value + 0x0004)
   0571 E4                 1297 	clr	a
   0572 F3                 1298 	movx	@r1,a
                           1299 ;	printf_large.c:723: calculate_digit(radix);
   0573 79r13              1300 	mov	r1,#__print_format_radix_1_1
   0575 E3                 1301 	movx	a,@r1
   0576 F5 82              1302 	mov	dpl,a
   0578 C0 00              1303 	push	ar0
   057A 12s00r68           1304 	lcall	_calculate_digit
   057D D0 00              1305 	pop	ar0
                           1306 ;	printf_large.c:725: if (!lsd)
   057F 20*09 0E           1307 	jb	__print_format_lsd_1_1,00188$
                           1308 ;	printf_large.c:727: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
   0582 79r09              1309 	mov	r1,#(_value + 0x0004)
   0584 E3                 1310 	movx	a,@r1
   0585 C4                 1311 	swap	a
   0586 FD                 1312 	mov	r5,a
   0587 E2                 1313 	movx	a,@r0
   0588 FE                 1314 	mov	r6,a
   0589 4D                 1315 	orl	a,r5
   058A F2                 1316 	movx	@r0,a
                           1317 ;	printf_large.c:728: pstore--;
   058B 18                 1318 	dec	r0
   058C 88 02              1319 	mov	ar2,r0
   058E 80 05              1320 	sjmp	00189$
   0590                    1321 00188$:
                           1322 ;	printf_large.c:732: *pstore = value.byte[4];
   0590 79r09              1323 	mov	r1,#(_value + 0x0004)
   0592 E3                 1324 	movx	a,@r1
   0593 FD                 1325 	mov	r5,a
   0594 F2                 1326 	movx	@r0,a
   0595                    1327 00189$:
                           1328 ;	printf_large.c:734: length++;
   0595 79r15              1329 	mov	r1,#__print_format_length_1_1
   0597 E3                 1330 	movx	a,@r1
   0598 24 01              1331 	add	a,#0x01
   059A F3                 1332 	movx	@r1,a
   059B 79r15              1333 	mov	r1,#__print_format_length_1_1
   059D E3                 1334 	movx	a,@r1
   059E FB                 1335 	mov	r3,a
                           1336 ;	printf_large.c:735: lsd = !lsd;
   059F B2*09              1337 	cpl	__print_format_lsd_1_1
                           1338 ;	printf_large.c:736: } while( value.ul );
   05A1 79r05              1339 	mov	r1,#_value
   05A3 E3                 1340 	movx	a,@r1
   05A4 FD                 1341 	mov	r5,a
   05A5 09                 1342 	inc	r1
   05A6 E3                 1343 	movx	a,@r1
   05A7 FE                 1344 	mov	r6,a
   05A8 09                 1345 	inc	r1
   05A9 E3                 1346 	movx	a,@r1
   05AA FF                 1347 	mov	r7,a
   05AB 09                 1348 	inc	r1
   05AC E3                 1349 	movx	a,@r1
   05AD FC                 1350 	mov	r4,a
   05AE ED                 1351 	mov	a,r5
   05AF 4E                 1352 	orl	a,r6
   05B0 4F                 1353 	orl	a,r7
   05B1 4C                 1354 	orl	a,r4
   05B2 70 BB              1355 	jnz	00190$
                           1356 ;	printf_large.c:738: if (width == 0)
   05B4 88 02              1357 	mov	ar2,r0
   05B6 78r15              1358 	mov	r0,#__print_format_length_1_1
   05B8 E2                 1359 	movx	a,@r0
   05B9 FB                 1360 	mov	r3,a
   05BA 78r14              1361 	mov	r0,#__print_format_width_1_1
   05BC E2                 1362 	movx	a,@r0
   05BD 70 05              1363 	jnz	00194$
                           1364 ;	printf_large.c:743: width=1;
   05BF 78r14              1365 	mov	r0,#__print_format_width_1_1
   05C1 74 01              1366 	mov	a,#0x01
   05C3 F2                 1367 	movx	@r0,a
   05C4                    1368 00194$:
                           1369 ;	printf_large.c:747: if (!zero_padding && !left_justify)
   05C4 20*02 2D           1370 	jb	__print_format_zero_padding_1_1,00199$
   05C7 20*01 2A           1371 	jb	__print_format_left_justify_1_1,00199$
                           1372 ;	printf_large.c:749: while ( width > (unsigned char) (length+1) )
   05CA EB                 1373 	mov	a,r3
   05CB 04                 1374 	inc	a
   05CC FC                 1375 	mov	r4,a
   05CD 78r14              1376 	mov	r0,#__print_format_width_1_1
   05CF E2                 1377 	movx	a,@r0
   05D0 FD                 1378 	mov	r5,a
   05D1                    1379 00195$:
   05D1 EC                 1380 	mov	a,r4
   05D2 B5 05 00           1381 	cjne	a,ar5,00396$
   05D5                    1382 00396$:
   05D5 50 19              1383 	jnc	00325$
                           1384 ;	printf_large.c:751: OUTPUT_CHAR( ' ', p );
   05D7 75 82 20           1385 	mov	dpl,#0x20
   05DA C0 02              1386 	push	ar2
   05DC C0 03              1387 	push	ar3
   05DE C0 04              1388 	push	ar4
   05E0 C0 05              1389 	push	ar5
   05E2 12s00r00           1390 	lcall	__output_char
   05E5 D0 05              1391 	pop	ar5
   05E7 D0 04              1392 	pop	ar4
   05E9 D0 03              1393 	pop	ar3
   05EB D0 02              1394 	pop	ar2
                           1395 ;	printf_large.c:752: width--;
   05ED 1D                 1396 	dec	r5
   05EE 80 E1              1397 	sjmp	00195$
   05F0                    1398 00325$:
   05F0 78r14              1399 	mov	r0,#__print_format_width_1_1
   05F2 ED                 1400 	mov	a,r5
   05F3 F2                 1401 	movx	@r0,a
   05F4                    1402 00199$:
                           1403 ;	printf_large.c:756: if (signed_argument) // this now means the original value was negative
   05F4 30*05 15           1404 	jnb	__print_format_signed_argument_1_1,00209$
                           1405 ;	printf_large.c:758: OUTPUT_CHAR( '-', p );
   05F7 75 82 2D           1406 	mov	dpl,#0x2D
   05FA C0 02              1407 	push	ar2
   05FC C0 03              1408 	push	ar3
   05FE 12s00r00           1409 	lcall	__output_char
   0601 D0 03              1410 	pop	ar3
   0603 D0 02              1411 	pop	ar2
                           1412 ;	printf_large.c:760: width--;
   0605 78r14              1413 	mov	r0,#__print_format_width_1_1
   0607 E2                 1414 	movx	a,@r0
   0608 14                 1415 	dec	a
   0609 F2                 1416 	movx	@r0,a
   060A 80 31              1417 	sjmp	00210$
   060C                    1418 00209$:
                           1419 ;	printf_large.c:762: else if (length != 0)
   060C EB                 1420 	mov	a,r3
   060D 60 2E              1421 	jz	00210$
                           1422 ;	printf_large.c:765: if (prefix_sign)
   060F 30*03 15           1423 	jnb	__print_format_prefix_sign_1_1,00204$
                           1424 ;	printf_large.c:767: OUTPUT_CHAR( '+', p );
   0612 75 82 2B           1425 	mov	dpl,#0x2B
   0615 C0 02              1426 	push	ar2
   0617 C0 03              1427 	push	ar3
   0619 12s00r00           1428 	lcall	__output_char
   061C D0 03              1429 	pop	ar3
   061E D0 02              1430 	pop	ar2
                           1431 ;	printf_large.c:769: width--;
   0620 78r14              1432 	mov	r0,#__print_format_width_1_1
   0622 E2                 1433 	movx	a,@r0
   0623 14                 1434 	dec	a
   0624 F2                 1435 	movx	@r0,a
   0625 80 16              1436 	sjmp	00210$
   0627                    1437 00204$:
                           1438 ;	printf_large.c:771: else if (prefix_space)
   0627 30*04 13           1439 	jnb	__print_format_prefix_space_1_1,00210$
                           1440 ;	printf_large.c:773: OUTPUT_CHAR( ' ', p );
   062A 75 82 20           1441 	mov	dpl,#0x20
   062D C0 02              1442 	push	ar2
   062F C0 03              1443 	push	ar3
   0631 12s00r00           1444 	lcall	__output_char
   0634 D0 03              1445 	pop	ar3
   0636 D0 02              1446 	pop	ar2
                           1447 ;	printf_large.c:775: width--;
   0638 78r14              1448 	mov	r0,#__print_format_width_1_1
   063A E2                 1449 	movx	a,@r0
   063B 14                 1450 	dec	a
   063C F2                 1451 	movx	@r0,a
   063D                    1452 00210$:
                           1453 ;	printf_large.c:780: if (!left_justify)
   063D 20*01 2D           1454 	jb	__print_format_left_justify_1_1,00218$
                           1455 ;	printf_large.c:781: while ( width-- > length )
   0640 78r14              1456 	mov	r0,#__print_format_width_1_1
   0642 E2                 1457 	movx	a,@r0
   0643 FC                 1458 	mov	r4,a
   0644                    1459 00211$:
   0644 8C 05              1460 	mov	ar5,r4
   0646 1C                 1461 	dec	r4
   0647 78r14              1462 	mov	r0,#__print_format_width_1_1
   0649 EC                 1463 	mov	a,r4
   064A F2                 1464 	movx	@r0,a
   064B EB                 1465 	mov	a,r3
   064C B5 05 00           1466 	cjne	a,ar5,00403$
   064F                    1467 00403$:
   064F 50 35              1468 	jnc	00326$
                           1469 ;	printf_large.c:783: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
   0651 30*02 04           1470 	jnb	__print_format_zero_padding_1_1,00244$
   0654 7D 30              1471 	mov	r5,#0x30
   0656 80 02              1472 	sjmp	00245$
   0658                    1473 00244$:
   0658 7D 20              1474 	mov	r5,#0x20
   065A                    1475 00245$:
   065A 8D 82              1476 	mov	dpl,r5
   065C C0 02              1477 	push	ar2
   065E C0 03              1478 	push	ar3
   0660 C0 04              1479 	push	ar4
   0662 12s00r00           1480 	lcall	__output_char
   0665 D0 04              1481 	pop	ar4
   0667 D0 03              1482 	pop	ar3
   0669 D0 02              1483 	pop	ar2
   066B 80 D7              1484 	sjmp	00211$
   066D                    1485 00218$:
                           1486 ;	printf_large.c:788: if (width > length)
   066D 78r14              1487 	mov	r0,#__print_format_width_1_1
   066F C3                 1488 	clr	c
   0670 E2                 1489 	movx	a,@r0
   0671 F5 F0              1490 	mov	b,a
   0673 EB                 1491 	mov	a,r3
   0674 95 F0              1492 	subb	a,b
   0676 50 08              1493 	jnc	00215$
                           1494 ;	printf_large.c:789: width -= length;
   0678 78r14              1495 	mov	r0,#__print_format_width_1_1
   067A E2                 1496 	movx	a,@r0
   067B C3                 1497 	clr	c
   067C 9B                 1498 	subb	a,r3
   067D F2                 1499 	movx	@r0,a
   067E 80 0A              1500 	sjmp	00318$
   0680                    1501 00215$:
                           1502 ;	printf_large.c:791: width = 0;
   0680 78r14              1503 	mov	r0,#__print_format_width_1_1
   0682 E4                 1504 	clr	a
   0683 F2                 1505 	movx	@r0,a
                           1506 ;	printf_large.c:828: return charsOutputted;
                           1507 ;	printf_large.c:795: while( length-- )
   0684 80 04              1508 	sjmp	00318$
   0686                    1509 00326$:
   0686 78r14              1510 	mov	r0,#__print_format_width_1_1
   0688 EC                 1511 	mov	a,r4
   0689 F2                 1512 	movx	@r0,a
   068A                    1513 00318$:
   068A 8A 00              1514 	mov	ar0,r2
   068C                    1515 00223$:
   068C 8B 04              1516 	mov	ar4,r3
   068E 1B                 1517 	dec	r3
   068F EC                 1518 	mov	a,r4
   0690 60 2B              1519 	jz	00225$
                           1520 ;	printf_large.c:797: lsd = !lsd;
   0692 B2*09              1521 	cpl	__print_format_lsd_1_1
                           1522 ;	printf_large.c:798: if (!lsd)
   0694 20*09 0B           1523 	jb	__print_format_lsd_1_1,00221$
                           1524 ;	printf_large.c:800: pstore++;
   0697 08                 1525 	inc	r0
                           1526 ;	printf_large.c:801: value.byte[4] = *pstore >> 4;
   0698 E2                 1527 	movx	a,@r0
   0699 C4                 1528 	swap	a
   069A 54 0F              1529 	anl	a,#0x0f
   069C FC                 1530 	mov	r4,a
   069D 79r09              1531 	mov	r1,#(_value + 0x0004)
   069F F3                 1532 	movx	@r1,a
   06A0 80 09              1533 	sjmp	00222$
   06A2                    1534 00221$:
                           1535 ;	printf_large.c:805: value.byte[4] = *pstore & 0x0F;
   06A2 E2                 1536 	movx	a,@r0
   06A3 FC                 1537 	mov	r4,a
   06A4 53 04 0F           1538 	anl	ar4,#0x0F
   06A7 79r09              1539 	mov	r1,#(_value + 0x0004)
   06A9 EC                 1540 	mov	a,r4
   06AA F3                 1541 	movx	@r1,a
   06AB                    1542 00222$:
                           1543 ;	printf_large.c:811: output_digit( value.byte[4] );
   06AB 79r09              1544 	mov	r1,#(_value + 0x0004)
   06AD E3                 1545 	movx	a,@r1
   06AE F5 82              1546 	mov	dpl,a
   06B0 C0 03              1547 	push	ar3
   06B2 C0 00              1548 	push	ar0
   06B4 12s00r35           1549 	lcall	_output_digit
   06B7 D0 00              1550 	pop	ar0
   06B9 D0 03              1551 	pop	ar3
   06BB 80 CF              1552 	sjmp	00223$
   06BD                    1553 00225$:
                           1554 ;	printf_large.c:814: if (left_justify)
   06BD 20*01 03           1555 	jb	__print_format_left_justify_1_1,00409$
   06C0 02s00rEB           1556 	ljmp	00239$
   06C3                    1557 00409$:
                           1558 ;	printf_large.c:815: while (width-- > 0)
   06C3 78r14              1559 	mov	r0,#__print_format_width_1_1
   06C5 E2                 1560 	movx	a,@r0
   06C6 FB                 1561 	mov	r3,a
   06C7                    1562 00226$:
   06C7 8B 04              1563 	mov	ar4,r3
   06C9 1B                 1564 	dec	r3
   06CA EC                 1565 	mov	a,r4
   06CB 70 03              1566 	jnz	00410$
   06CD 02s00rEB           1567 	ljmp	00239$
   06D0                    1568 00410$:
                           1569 ;	printf_large.c:817: OUTPUT_CHAR(' ', p);
   06D0 75 82 20           1570 	mov	dpl,#0x20
   06D3 C0 03              1571 	push	ar3
   06D5 12s00r00           1572 	lcall	__output_char
   06D8 D0 03              1573 	pop	ar3
   06DA 80 EB              1574 	sjmp	00226$
   06DC                    1575 00237$:
                           1576 ;	printf_large.c:824: OUTPUT_CHAR( c, p );
   06DC 8A 82              1577 	mov	dpl,r2
   06DE 12s00r00           1578 	lcall	__output_char
   06E1 02s00rEB           1579 	ljmp	00239$
   06E4                    1580 00241$:
                           1581 ;	printf_large.c:828: return charsOutputted;
   06E4 78r0A              1582 	mov	r0,#_charsOutputted
   06E6 E2                 1583 	movx	a,@r0
   06E7 F5 82              1584 	mov	dpl,a
   06E9 08                 1585 	inc	r0
   06EA E2                 1586 	movx	a,@r0
   06EB F5 83              1587 	mov	dph,a
   06ED 22                 1588 	ret
                           1589 	.area CSEG    (CODE)
                           1590 	.area CONST   (CODE)
   0000                    1591 __str_0:
   0000 3C 4E 4F 20 46 4C  1592 	.ascii "<NO FLOAT>"
        4F 41 54 3E
   000A 00                 1593 	.db 0x00
                           1594 	.area XINIT   (CODE)
                           1595 	.area CABS    (ABS,CODE)
