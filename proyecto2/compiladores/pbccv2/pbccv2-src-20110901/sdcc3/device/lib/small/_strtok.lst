                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:23 2015
                              5 ;--------------------------------------------------------
                              6 	.module _strtok
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _strtok_PARM_2
                             13 	.globl _strtok
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (ABS,DATA)
   0000                      18 	.org 0x0000
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (ABS,DATA)
   0000                      23 	.org 0x0000
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
   0000                      33 _strtok_s_1_1:
   0000                      34 	.ds 3
   0003                      35 _strtok_PARM_2:
   0003                      36 	.ds 3
                             37 ;--------------------------------------------------------
                             38 ; overlayable items in internal ram 
                             39 ;--------------------------------------------------------
                             40 	.area OSEG    (OVR,DATA)
                             41 ;--------------------------------------------------------
                             42 ; indirectly addressable internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area ISEG    (DATA)
                             45 ;--------------------------------------------------------
                             46 ; absolute internal ram data
                             47 ;--------------------------------------------------------
                             48 	.area IABS    (ABS,DATA)
                             49 	.area IABS    (ABS,DATA)
                             50 ;--------------------------------------------------------
                             51 ; bit data
                             52 ;--------------------------------------------------------
                             53 	.area BSEG    (BIT)
                             54 ;--------------------------------------------------------
                             55 ; paged external ram data
                             56 ;--------------------------------------------------------
                             57 	.area PSEG    (PAG,XDATA)
                             58 ;--------------------------------------------------------
                             59 ; external ram data
                             60 ;--------------------------------------------------------
                             61 	.area XSEG    (XDATA)
                             62 ;--------------------------------------------------------
                             63 ; absolute external ram data
                             64 ;--------------------------------------------------------
                             65 	.area XABS    (ABS,XDATA)
                             66 ;--------------------------------------------------------
                             67 ; external initialized ram data
                             68 ;--------------------------------------------------------
                             69 	.area XISEG   (XDATA)
                             70 	.area HOME    (CODE)
                             71 	.area GSINIT0 (CODE)
                             72 	.area GSINIT1 (CODE)
                             73 	.area GSINIT2 (CODE)
                             74 	.area GSINIT3 (CODE)
                             75 	.area GSINIT4 (CODE)
                             76 	.area GSINIT5 (CODE)
                             77 	.area GSINIT  (CODE)
                             78 	.area GSFINAL (CODE)
                             79 	.area CSEG    (CODE)
                             80 ;--------------------------------------------------------
                             81 ; global & static initialisations
                             82 ;--------------------------------------------------------
                             83 	.area HOME    (CODE)
                             84 	.area GSINIT  (CODE)
                             85 	.area GSFINAL (CODE)
                             86 	.area GSINIT  (CODE)
                             87 ;--------------------------------------------------------
                             88 ; Home
                             89 ;--------------------------------------------------------
                             90 	.area HOME    (CODE)
                             91 	.area HOME    (CODE)
                             92 ;--------------------------------------------------------
                             93 ; code
                             94 ;--------------------------------------------------------
                             95 	.area CSEG    (CODE)
                             96 ;------------------------------------------------------------
                             97 ;Allocation info for local variables in function 'strtok'
                             98 ;------------------------------------------------------------
                             99 ;s                         Allocated with name '_strtok_s_1_1'
                            100 ;control                   Allocated with name '_strtok_PARM_2'
                            101 ;str                       Allocated to registers r2 r3 r4 
                            102 ;s1                        Allocated to registers r2 r3 r4 
                            103 ;------------------------------------------------------------
                            104 ;	_strtok.c:36: char * strtok (
                            105 ;	-----------------------------------------
                            106 ;	 function strtok
                            107 ;	-----------------------------------------
   0000                     108 _strtok:
                    0002    109 	ar2 = 0x02
                    0003    110 	ar3 = 0x03
                    0004    111 	ar4 = 0x04
                    0005    112 	ar5 = 0x05
                    0006    113 	ar6 = 0x06
                    0007    114 	ar7 = 0x07
                    0000    115 	ar0 = 0x00
                    0001    116 	ar1 = 0x01
   0000 AA 82               117 	mov	r2,dpl
   0002 AB 83               118 	mov	r3,dph
   0004 AC F0               119 	mov	r4,b
                            120 ;	_strtok.c:43: if ( str )
   0006 EA                  121 	mov	a,r2
   0007 4B                  122 	orl	a,r3
   0008 4C                  123 	orl	a,r4
   0009 60 06               124 	jz	00102$
                            125 ;	_strtok.c:44: s = str ;
   000B 8A*00               126 	mov	_strtok_s_1_1,r2
   000D 8B*01               127 	mov	(_strtok_s_1_1 + 1),r3
   000F 8C*02               128 	mov	(_strtok_s_1_1 + 2),r4
   0011                     129 00102$:
                            130 ;	_strtok.c:45: if ( !s )
   0011 E5*00               131 	mov	a,_strtok_s_1_1
   0013 45*01               132 	orl	a,(_strtok_s_1_1 + 1)
   0015 45*02               133 	orl	a,(_strtok_s_1_1 + 2)
                            134 ;	_strtok.c:46: return NULL;
   0017 70 06               135 	jnz	00108$
   0019 90 00 00            136 	mov	dptr,#0x0000
   001C F5 F0               137 	mov	b,a
   001E 22                  138 	ret
                            139 ;	_strtok.c:48: while (*s) {
   001F                     140 00108$:
   001F AA*00               141 	mov	r2,_strtok_s_1_1
   0021 AB*01               142 	mov	r3,(_strtok_s_1_1 + 1)
   0023 AC*02               143 	mov	r4,(_strtok_s_1_1 + 2)
   0025 8A 82               144 	mov	dpl,r2
   0027 8B 83               145 	mov	dph,r3
   0029 8C F0               146 	mov	b,r4
   002B 12s00r00            147 	lcall	__gptrget
   002E 60 32               148 	jz	00110$
                            149 ;	_strtok.c:49: if (strchr(control,*s))
   0030 AA*00               150 	mov	r2,_strtok_s_1_1
   0032 AB*01               151 	mov	r3,(_strtok_s_1_1 + 1)
   0034 AC*02               152 	mov	r4,(_strtok_s_1_1 + 2)
   0036 8A 82               153 	mov	dpl,r2
   0038 8B 83               154 	mov	dph,r3
   003A 8C F0               155 	mov	b,r4
   003C 12s00r00            156 	lcall	__gptrget
   003F F5*00               157 	mov	_strchr_PARM_2,a
   0041 85*03 82            158 	mov	dpl,_strtok_PARM_2
   0044 85*04 83            159 	mov	dph,(_strtok_PARM_2 + 1)
   0047 85*05 F0            160 	mov	b,(_strtok_PARM_2 + 2)
   004A 12s00r00            161 	lcall	_strchr
   004D AA 82               162 	mov	r2,dpl
   004F AB 83               163 	mov	r3,dph
   0051 AC F0               164 	mov	r4,b
   0053 EA                  165 	mov	a,r2
   0054 4B                  166 	orl	a,r3
   0055 4C                  167 	orl	a,r4
   0056 60 0A               168 	jz	00110$
                            169 ;	_strtok.c:50: s++;
   0058 05*00               170 	inc	_strtok_s_1_1
   005A E4                  171 	clr	a
   005B B5*00 C1            172 	cjne	a,_strtok_s_1_1,00108$
   005E 05*01               173 	inc	(_strtok_s_1_1 + 1)
                            174 ;	_strtok.c:52: break;
   0060 80 BD               175 	sjmp	00108$
   0062                     176 00110$:
                            177 ;	_strtok.c:55: s1 = s ;
   0062 AA*00               178 	mov	r2,_strtok_s_1_1
   0064 AB*01               179 	mov	r3,(_strtok_s_1_1 + 1)
   0066 AC*02               180 	mov	r4,(_strtok_s_1_1 + 2)
                            181 ;	_strtok.c:57: while (*s) {
   0068                     182 00113$:
   0068 AD*00               183 	mov	r5,_strtok_s_1_1
   006A AE*01               184 	mov	r6,(_strtok_s_1_1 + 1)
   006C AF*02               185 	mov	r7,(_strtok_s_1_1 + 2)
   006E 8D 82               186 	mov	dpl,r5
   0070 8E 83               187 	mov	dph,r6
   0072 8F F0               188 	mov	b,r7
   0074 12s00r00            189 	lcall	__gptrget
   0077 60 5D               190 	jz	00115$
                            191 ;	_strtok.c:58: if (strchr(control,*s)) {
   0079 AD*00               192 	mov	r5,_strtok_s_1_1
   007B AE*01               193 	mov	r6,(_strtok_s_1_1 + 1)
   007D AF*02               194 	mov	r7,(_strtok_s_1_1 + 2)
   007F 8D 82               195 	mov	dpl,r5
   0081 8E 83               196 	mov	dph,r6
   0083 8F F0               197 	mov	b,r7
   0085 12s00r00            198 	lcall	__gptrget
   0088 F5*00               199 	mov	_strchr_PARM_2,a
   008A 85*03 82            200 	mov	dpl,_strtok_PARM_2
   008D 85*04 83            201 	mov	dph,(_strtok_PARM_2 + 1)
   0090 85*05 F0            202 	mov	b,(_strtok_PARM_2 + 2)
   0093 C0 02               203 	push	ar2
   0095 C0 03               204 	push	ar3
   0097 C0 04               205 	push	ar4
   0099 12s00r00            206 	lcall	_strchr
   009C AD 82               207 	mov	r5,dpl
   009E AE 83               208 	mov	r6,dph
   00A0 AF F0               209 	mov	r7,b
   00A2 D0 04               210 	pop	ar4
   00A4 D0 03               211 	pop	ar3
   00A6 D0 02               212 	pop	ar2
   00A8 ED                  213 	mov	a,r5
   00A9 4E                  214 	orl	a,r6
   00AA 4F                  215 	orl	a,r7
   00AB 60 1F               216 	jz	00112$
                            217 ;	_strtok.c:59: *s++ = '\0';
   00AD AD*00               218 	mov	r5,_strtok_s_1_1
   00AF AE*01               219 	mov	r6,(_strtok_s_1_1 + 1)
   00B1 AF*02               220 	mov	r7,(_strtok_s_1_1 + 2)
   00B3 8D 82               221 	mov	dpl,r5
   00B5 8E 83               222 	mov	dph,r6
   00B7 8F F0               223 	mov	b,r7
   00B9 E4                  224 	clr	a
   00BA 12s00r00            225 	lcall	__gptrput
   00BD 05*00               226 	inc	_strtok_s_1_1
   00BF E4                  227 	clr	a
   00C0 B5*00 02            228 	cjne	a,_strtok_s_1_1,00136$
   00C3 05*01               229 	inc	(_strtok_s_1_1 + 1)
   00C5                     230 00136$:
                            231 ;	_strtok.c:60: return s1 ;
   00C5 8A 82               232 	mov	dpl,r2
   00C7 8B 83               233 	mov	dph,r3
   00C9 8C F0               234 	mov	b,r4
   00CB 22                  235 	ret
   00CC                     236 00112$:
                            237 ;	_strtok.c:62: s++ ;
   00CC 05*00               238 	inc	_strtok_s_1_1
   00CE E4                  239 	clr	a
   00CF B5*00 96            240 	cjne	a,_strtok_s_1_1,00113$
   00D2 05*01               241 	inc	(_strtok_s_1_1 + 1)
   00D4 80 92               242 	sjmp	00113$
   00D6                     243 00115$:
                            244 ;	_strtok.c:65: s = NULL;
   00D6 E4                  245 	clr	a
   00D7 F5*00               246 	mov	_strtok_s_1_1,a
   00D9 F5*01               247 	mov	(_strtok_s_1_1 + 1),a
   00DB F5*02               248 	mov	(_strtok_s_1_1 + 2),a
                            249 ;	_strtok.c:67: if (*s1)
   00DD 8A 82               250 	mov	dpl,r2
   00DF 8B 83               251 	mov	dph,r3
   00E1 8C F0               252 	mov	b,r4
   00E3 12s00r00            253 	lcall	__gptrget
   00E6 60 07               254 	jz	00117$
                            255 ;	_strtok.c:68: return s1;
   00E8 8A 82               256 	mov	dpl,r2
   00EA 8B 83               257 	mov	dph,r3
   00EC 8C F0               258 	mov	b,r4
   00EE 22                  259 	ret
   00EF                     260 00117$:
                            261 ;	_strtok.c:70: return NULL;
   00EF 90 00 00            262 	mov	dptr,#0x0000
   00F2 75 F0 00            263 	mov	b,#0x00
   00F5 22                  264 	ret
                            265 	.area CSEG    (CODE)
                            266 	.area CONST   (CODE)
                            267 	.area XINIT   (CODE)
                            268 	.area CABS    (ABS,CODE)
