                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:31 2015
                              5 ;--------------------------------------------------------
                              6 	.module _strpbrk
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _strpbrk
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in internal ram 
                             34 ;--------------------------------------------------------
                             35 	.area OSEG    (OVR,DATA)
                             36 ;--------------------------------------------------------
                             37 ; indirectly addressable internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area ISEG    (DATA)
                             40 ;--------------------------------------------------------
                             41 ; absolute internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area IABS    (ABS,DATA)
                             44 	.area IABS    (ABS,DATA)
                             45 ;--------------------------------------------------------
                             46 ; bit data
                             47 ;--------------------------------------------------------
                             48 	.area BSEG    (BIT)
                             49 ;--------------------------------------------------------
                             50 ; paged external ram data
                             51 ;--------------------------------------------------------
                             52 	.area PSEG    (PAG,XDATA)
                             53 ;--------------------------------------------------------
                             54 ; external ram data
                             55 ;--------------------------------------------------------
                             56 	.area XSEG    (XDATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XABS    (ABS,XDATA)
                             61 ;--------------------------------------------------------
                             62 ; external initialized ram data
                             63 ;--------------------------------------------------------
                             64 	.area XISEG   (XDATA)
                             65 	.area HOME    (CODE)
                             66 	.area GSINIT0 (CODE)
                             67 	.area GSINIT1 (CODE)
                             68 	.area GSINIT2 (CODE)
                             69 	.area GSINIT3 (CODE)
                             70 	.area GSINIT4 (CODE)
                             71 	.area GSINIT5 (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area CSEG    (CODE)
                             75 ;--------------------------------------------------------
                             76 ; global & static initialisations
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT  (CODE)
                             80 	.area GSFINAL (CODE)
                             81 	.area GSINIT  (CODE)
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area HOME    (CODE)
                             86 	.area HOME    (CODE)
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area CSEG    (CODE)
                             91 ;------------------------------------------------------------
                             92 ;Allocation info for local variables in function 'strpbrk'
                             93 ;------------------------------------------------------------
                             94 ;control                   Allocated to stack - offset -5
                             95 ;string                    Allocated to stack - offset 1
                             96 ;ret                       Allocated to stack - offset 4
                             97 ;ch                        Allocated to registers 
                             98 ;p                         Allocated to registers r5 r6 r7 
                             99 ;------------------------------------------------------------
                            100 ;	_strpbrk.c:31: char * strpbrk (
                            101 ;	-----------------------------------------
                            102 ;	 function strpbrk
                            103 ;	-----------------------------------------
   0000                     104 _strpbrk:
                    0002    105 	ar2 = 0x02
                    0003    106 	ar3 = 0x03
                    0004    107 	ar4 = 0x04
                    0005    108 	ar5 = 0x05
                    0006    109 	ar6 = 0x06
                    0007    110 	ar7 = 0x07
                    0000    111 	ar0 = 0x00
                    0001    112 	ar1 = 0x01
   0000 C0*00               113 	push	_bp
   0002 85 81*00            114 	mov	_bp,sp
   0005 C0 82               115 	push	dpl
   0007 C0 83               116 	push	dph
   0009 C0 F0               117 	push	b
   000B 05 81               118 	inc	sp
   000D 05 81               119 	inc	sp
   000F 05 81               120 	inc	sp
                            121 ;	_strpbrk.c:36: char *ret = NULL;
   0011 E5*00               122 	mov	a,_bp
   0013 24 04               123 	add	a,#0x04
   0015 F8                  124 	mov	r0,a
   0016 E4                  125 	clr	a
   0017 F6                  126 	mov	@r0,a
   0018 08                  127 	inc	r0
   0019 F6                  128 	mov	@r0,a
   001A 08                  129 	inc	r0
   001B 76 00               130 	mov	@r0,#0x00
                            131 ;	_strpbrk.c:39: while (ch = *control) {
   001D E5*00               132 	mov	a,_bp
   001F 24 FB               133 	add	a,#0xfb
   0021 F8                  134 	mov	r0,a
   0022 86 02               135 	mov	ar2,@r0
   0024 08                  136 	inc	r0
   0025 86 03               137 	mov	ar3,@r0
   0027 08                  138 	inc	r0
   0028 86 04               139 	mov	ar4,@r0
   002A                     140 00105$:
   002A 8A 82               141 	mov	dpl,r2
   002C 8B 83               142 	mov	dph,r3
   002E 8C F0               143 	mov	b,r4
   0030 12s00r00            144 	lcall	__gptrget
   0033 FD                  145 	mov	r5,a
   0034 60 65               146 	jz	00107$
                            147 ;	_strpbrk.c:40: char * p = strchr(string, ch);
   0036 C0 02               148 	push	ar2
   0038 C0 03               149 	push	ar3
   003A C0 04               150 	push	ar4
   003C C0 05               151 	push	ar5
   003E A8*00               152 	mov	r0,_bp
   0040 08                  153 	inc	r0
   0041 86 82               154 	mov	dpl,@r0
   0043 08                  155 	inc	r0
   0044 86 83               156 	mov	dph,@r0
   0046 08                  157 	inc	r0
   0047 86 F0               158 	mov	b,@r0
   0049 12s00r00            159 	lcall	_strchr
   004C AD 82               160 	mov	r5,dpl
   004E AE 83               161 	mov	r6,dph
   0050 AF F0               162 	mov	r7,b
   0052 15 81               163 	dec	sp
   0054 D0 04               164 	pop	ar4
   0056 D0 03               165 	pop	ar3
   0058 D0 02               166 	pop	ar2
                            167 ;	_strpbrk.c:41: if (p != NULL && (ret == NULL || p < ret)) {
   005A BD 00 08            168 	cjne	r5,#0x00,00116$
   005D BE 00 05            169 	cjne	r6,#0x00,00116$
   0060 BF 00 02            170 	cjne	r7,#0x00,00116$
   0063 80 2F               171 	sjmp	00102$
   0065                     172 00116$:
   0065 E5*00               173 	mov	a,_bp
   0067 24 04               174 	add	a,#0x04
   0069 F8                  175 	mov	r0,a
   006A B6 00 0A            176 	cjne	@r0,#0x00,00117$
   006D 08                  177 	inc	r0
   006E B6 00 06            178 	cjne	@r0,#0x00,00117$
   0071 08                  179 	inc	r0
   0072 B6 00 02            180 	cjne	@r0,#0x00,00117$
   0075 80 10               181 	sjmp	00101$
   0077                     182 00117$:
   0077 E5*00               183 	mov	a,_bp
   0079 24 04               184 	add	a,#0x04
   007B F8                  185 	mov	r0,a
   007C C3                  186 	clr	c
   007D ED                  187 	mov	a,r5
   007E 96                  188 	subb	a,@r0
   007F EE                  189 	mov	a,r6
   0080 08                  190 	inc	r0
   0081 96                  191 	subb	a,@r0
   0082 EF                  192 	mov	a,r7
   0083 08                  193 	inc	r0
   0084 96                  194 	subb	a,@r0
   0085 50 0D               195 	jnc	00102$
   0087                     196 00101$:
                            197 ;	_strpbrk.c:42: ret = p;
   0087 E5*00               198 	mov	a,_bp
   0089 24 04               199 	add	a,#0x04
   008B F8                  200 	mov	r0,a
   008C A6 05               201 	mov	@r0,ar5
   008E 08                  202 	inc	r0
   008F A6 06               203 	mov	@r0,ar6
   0091 08                  204 	inc	r0
   0092 A6 07               205 	mov	@r0,ar7
   0094                     206 00102$:
                            207 ;	_strpbrk.c:44: control++;
   0094 0A                  208 	inc	r2
   0095 BA 00 92            209 	cjne	r2,#0x00,00105$
   0098 0B                  210 	inc	r3
   0099 80 8F               211 	sjmp	00105$
   009B                     212 00107$:
                            213 ;	_strpbrk.c:47: return (ret);
   009B E5*00               214 	mov	a,_bp
   009D 24 04               215 	add	a,#0x04
   009F F8                  216 	mov	r0,a
   00A0 86 82               217 	mov	dpl,@r0
   00A2 08                  218 	inc	r0
   00A3 86 83               219 	mov	dph,@r0
   00A5 08                  220 	inc	r0
   00A6 86 F0               221 	mov	b,@r0
   00A8 85*00 81            222 	mov	sp,_bp
   00AB D0*00               223 	pop	_bp
   00AD 22                  224 	ret
                            225 	.area CSEG    (CODE)
                            226 	.area CONST   (CODE)
                            227 	.area XINIT   (CODE)
                            228 	.area CABS    (ABS,CODE)
