                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:18 2015
                              5 ;--------------------------------------------------------
                              6 	.module rtc390
                              7 	.optsdcc -mds390 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _rtcMagic
                             31 	.globl _RtcRead
                             32 	.globl _RtcWrite
                             33 ;--------------------------------------------------------
                             34 ; special function registers
                             35 ;--------------------------------------------------------
                    0080     36 _P4	=	0x0080
                    0081     37 _SP	=	0x0081
                    0082     38 _DPL	=	0x0082
                    0083     39 _DPH	=	0x0083
                    0084     40 _DPL1	=	0x0084
                    0085     41 _DPH1	=	0x0085
                    0086     42 _DPS	=	0x0086
                    0087     43 _PCON	=	0x0087
                    0088     44 _TCON	=	0x0088
                    0089     45 _TMOD	=	0x0089
                    008A     46 _TL0	=	0x008a
                    008B     47 _TL1	=	0x008b
                    008C     48 _TH0	=	0x008c
                    008D     49 _TH1	=	0x008d
                    008E     50 _CKCON	=	0x008e
                    0090     51 _P1	=	0x0090
                    0091     52 _EXIF	=	0x0091
                    0092     53 _P4CNT	=	0x0092
                    0093     54 _DPX	=	0x0093
                    0095     55 _DPX1	=	0x0095
                    0098     56 _SCON0	=	0x0098
                    0099     57 _SBUF0	=	0x0099
                    009B     58 _ESP	=	0x009b
                    009C     59 _AP	=	0x009c
                    009D     60 _ACON	=	0x009d
                    00A0     61 _P2	=	0x00a0
                    00A1     62 _P5	=	0x00a1
                    00A2     63 _P5CNT	=	0x00a2
                    00A8     64 _IE	=	0x00a8
                    00B0     65 _P3	=	0x00b0
                    00B8     66 _IP	=	0x00b8
                    00C0     67 _SCON1	=	0x00c0
                    00C1     68 _SBUF1	=	0x00c1
                    00C4     69 _PMR	=	0x00c4
                    00C6     70 _MCON	=	0x00c6
                    00C7     71 _TA	=	0x00c7
                    00C8     72 _T2CON	=	0x00c8
                    00C9     73 _T2MOD	=	0x00c9
                    00CA     74 _RCAP2L	=	0x00ca
                    00CA     75 _RTL2	=	0x00ca
                    00CB     76 _RCAP2H	=	0x00cb
                    00CB     77 _RTH2	=	0x00cb
                    00CC     78 _TL2	=	0x00cc
                    00CD     79 _TH2	=	0x00cd
                    00D0     80 _PSW	=	0x00d0
                    00D1     81 _MCNT0	=	0x00d1
                    00D2     82 _MCNT1	=	0x00d2
                    00D3     83 _MA	=	0x00d3
                    00D4     84 _MB	=	0x00d4
                    00D5     85 _MC	=	0x00d5
                    00D8     86 _WDCON	=	0x00d8
                    00E0     87 _ACC	=	0x00e0
                    00E8     88 _EIE	=	0x00e8
                    00EA     89 _MXAX	=	0x00ea
                    00F0     90 _B	=	0x00f0
                    00F8     91 _EIP	=	0x00f8
                    8C8A     92 _TMR0	=	0x8c8a
                    8D8B     93 _TMR1	=	0x8d8b
                    CDCC     94 _TMR2	=	0xcdcc
                    CBCA     95 _RCAP2	=	0xcbca
                             96 ;--------------------------------------------------------
                             97 ; special function bits
                             98 ;--------------------------------------------------------
                    0088     99 _IT0	=	0x0088
                    0089    100 _IE0	=	0x0089
                    008A    101 _IT1	=	0x008a
                    008B    102 _IE1	=	0x008b
                    008C    103 _TR0	=	0x008c
                    008D    104 _TF0	=	0x008d
                    008E    105 _TR1	=	0x008e
                    008F    106 _TF1	=	0x008f
                    0090    107 _T2	=	0x0090
                    0091    108 _T2EX	=	0x0091
                    0092    109 _RXD1	=	0x0092
                    0093    110 _TXD1	=	0x0093
                    0094    111 _INT2	=	0x0094
                    0095    112 _INT3	=	0x0095
                    0096    113 _INT4	=	0x0096
                    0097    114 _INT5	=	0x0097
                    0098    115 _RI_0	=	0x0098
                    0099    116 _TI_0	=	0x0099
                    009A    117 _RB8_0	=	0x009a
                    009B    118 _TB8_0	=	0x009b
                    009C    119 _REN_0	=	0x009c
                    009D    120 _SM2_0	=	0x009d
                    009E    121 _SM1_0	=	0x009e
                    009F    122 _SM0_0	=	0x009f
                    009F    123 _FE_0	=	0x009f
                    00A8    124 _EX0	=	0x00a8
                    00A9    125 _ET0	=	0x00a9
                    00AA    126 _EX1	=	0x00aa
                    00AB    127 _ET1	=	0x00ab
                    00AC    128 _ES0	=	0x00ac
                    00AD    129 _ET2	=	0x00ad
                    00AE    130 _ES1	=	0x00ae
                    00AF    131 _EA	=	0x00af
                    00B0    132 _RXD0	=	0x00b0
                    00B1    133 _TXD0	=	0x00b1
                    00B2    134 _INT0	=	0x00b2
                    00B3    135 _INT1	=	0x00b3
                    00B4    136 _T0	=	0x00b4
                    00B5    137 _T1	=	0x00b5
                    00B6    138 _WR	=	0x00b6
                    00B7    139 _RD	=	0x00b7
                    00B8    140 _PX0	=	0x00b8
                    00B9    141 _PT0	=	0x00b9
                    00BA    142 _PX1	=	0x00ba
                    00BB    143 _PT1	=	0x00bb
                    00BC    144 _PS0	=	0x00bc
                    00BD    145 _PT2	=	0x00bd
                    00BE    146 _PS1	=	0x00be
                    00C0    147 _RI_1	=	0x00c0
                    00C1    148 _TI_1	=	0x00c1
                    00C2    149 _RB8_1	=	0x00c2
                    00C3    150 _TB8_1	=	0x00c3
                    00C4    151 _REN_1	=	0x00c4
                    00C5    152 _SM2_1	=	0x00c5
                    00C6    153 _SM1_1	=	0x00c6
                    00C7    154 _SM0_1	=	0x00c7
                    00C7    155 _FE_1	=	0x00c7
                    00C8    156 _CP_RL	=	0x00c8
                    00C9    157 _C_T	=	0x00c9
                    00CA    158 _TR2	=	0x00ca
                    00CB    159 _EXEN2	=	0x00cb
                    00CC    160 _TCLK	=	0x00cc
                    00CD    161 _RCLK	=	0x00cd
                    00CE    162 _EXF2	=	0x00ce
                    00CF    163 _TF2	=	0x00cf
                    00D0    164 _P	=	0x00d0
                    00D1    165 _F1	=	0x00d1
                    00D2    166 _OV	=	0x00d2
                    00D3    167 _RS0	=	0x00d3
                    00D4    168 _RS1	=	0x00d4
                    00D5    169 _F0	=	0x00d5
                    00D6    170 _AC	=	0x00d6
                    00D7    171 _CY	=	0x00d7
                    00D8    172 _RWT	=	0x00d8
                    00D9    173 _EWT	=	0x00d9
                    00DA    174 _WDRF	=	0x00da
                    00DB    175 _WDIF	=	0x00db
                    00DC    176 _PFI	=	0x00dc
                    00DD    177 _EPFI	=	0x00dd
                    00DE    178 _POR	=	0x00de
                    00DF    179 _SMOD_1	=	0x00df
                    00E8    180 _EX2	=	0x00e8
                    00E9    181 _EX3	=	0x00e9
                    00EA    182 _EX4	=	0x00ea
                    00EB    183 _EX5	=	0x00eb
                    00EC    184 _EWDI	=	0x00ec
                    00ED    185 _C1IE	=	0x00ed
                    00EE    186 _C0IE	=	0x00ee
                    00EF    187 _CANBIE	=	0x00ef
                    00F8    188 _PX2	=	0x00f8
                    00F9    189 _PX3	=	0x00f9
                    00FA    190 _PX4	=	0x00fa
                    00FB    191 _PX5	=	0x00fb
                    00FC    192 _PWDI	=	0x00fc
                    00FD    193 _C1IP	=	0x00fd
                    00FE    194 _C0IP	=	0x00fe
                    00FF    195 _CANBIP	=	0x00ff
                            196 ;--------------------------------------------------------
                            197 ; overlayable register banks
                            198 ;--------------------------------------------------------
                            199 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     200 	.ds 8
                            201 ;--------------------------------------------------------
                            202 ; internal ram data
                            203 ;--------------------------------------------------------
                            204 	.area DSEG    (DATA)
                            205 ;--------------------------------------------------------
                            206 ; overlayable items in internal ram 
                            207 ;--------------------------------------------------------
                            208 	.area OSEG    (OVR,DATA)
                            209 ;--------------------------------------------------------
                            210 ; indirectly addressable internal ram data
                            211 ;--------------------------------------------------------
                            212 	.area ISEG    (DATA)
                            213 ;--------------------------------------------------------
                            214 ; absolute internal ram data
                            215 ;--------------------------------------------------------
                            216 	.area IABS    (ABS,DATA)
                            217 	.area IABS    (ABS,DATA)
                            218 ;--------------------------------------------------------
                            219 ; bit data
                            220 ;--------------------------------------------------------
                            221 	.area BSEG    (BIT)
                            222 ;--------------------------------------------------------
                            223 ; paged external ram data
                            224 ;--------------------------------------------------------
                            225 	.area PSEG    (PAG,XDATA)
                            226 ;--------------------------------------------------------
                            227 ; external ram data
                            228 ;--------------------------------------------------------
                            229 	.area XSEG    (XDATA)
                    310000    230 _rtc	=	0x310000
   0000                     231 _RtcRead_rtcDate_1_1:
   0000                     232 	.ds 4
   0004                     233 _RtcRead_rtcBytes_1_1:
   0004                     234 	.ds 8
   000C                     235 _RtcWrite_rtcBytes_1_1:
   000C                     236 	.ds 8
                            237 ;--------------------------------------------------------
                            238 ; absolute external ram data
                            239 ;--------------------------------------------------------
                            240 	.area XABS    (ABS,XDATA)
                            241 ;--------------------------------------------------------
                            242 ; external initialized ram data
                            243 ;--------------------------------------------------------
                            244 	.area XISEG   (XDATA)
                            245 ;--------------------------------------------------------
                            246 ; global & static initialisations
                            247 ;--------------------------------------------------------
                            248 	.area HOME    (CODE)
                            249 	.area GSINIT  (CODE)
                            250 	.area GSFINAL (CODE)
                            251 	.area GSINIT  (CODE)
                            252 ;--------------------------------------------------------
                            253 ; Home
                            254 ;--------------------------------------------------------
                            255 	.area HOME    (CODE)
                            256 	.area HOME    (CODE)
                            257 ;--------------------------------------------------------
                            258 ; code
                            259 ;--------------------------------------------------------
                            260 	.area CSEG    (CODE)
                            261 ;------------------------------------------------------------
                            262 ;Allocation info for local variables in function 'RtcSync'
                            263 ;------------------------------------------------------------
                            264 ;dummy                     Allocated to registers 
                            265 ;byte                      Allocated to registers 
                            266 ;bitMask                   Allocated to registers r3 
                            267 ;------------------------------------------------------------
                            268 ;	rtc390.c:47: static void RtcSync(void) {
                            269 ;	-----------------------------------------
                            270 ;	 function RtcSync
                            271 ;	-----------------------------------------
   0000                     272 _RtcSync:
                    0002    273 	ar2 = 0x02
                    0003    274 	ar3 = 0x03
                    0004    275 	ar4 = 0x04
                    0005    276 	ar5 = 0x05
                    0006    277 	ar6 = 0x06
                    0007    278 	ar7 = 0x07
                    0000    279 	ar0 = 0x00
                    0001    280 	ar1 = 0x01
                            281 ;	rtc390.c:51: dummy=rtc;
   0000 90 31 00 00         282 	mov	dptr,#_rtc
   0004 E0                  283 	movx	a,@dptr
                            284 ;	rtc390.c:54: for (byte=0; byte<8; byte++) {
                            285 ;	genAssign: resultIsFar = FALSE
   0005 7A 00               286 	mov	r2,#0x00
   0007                     287 00105$:
   0007 BA 08 00            288 	cjne	r2,#0x08,00119$
   000A                     289 00119$:
   000A 50 27               290 	jnc  00109$
   000C                     291 00120$:
                            292 ;	rtc390.c:55: for (bitMask=0x01; bitMask; bitMask<<=1) {
                            293 ;	genAssign: resultIsFar = TRUE
   000C 7B 01               294 	mov	r3,#0x01
   000E EA                  295 	mov	a,r2
   000F 90s00r00r00         296 	mov	dptr,#_rtcMagic
   0013 93                  297 	movc	a,@a+dptr
   0014 FC                  298 	mov	r4,a
   0015                     299 00101$:
   0015 EB                  300 	mov	a,r3
   0016 60 18               301 	jz  00107$
   0018                     302 00121$:
                            303 ;	rtc390.c:56: rtc = (rtcMagic[byte]&bitMask) ? 0xff : 0x00;
   0018 EB                  304 	mov	a,r3
   0019 5C                  305 	anl	a,r4
   001A 60 04               306 	jz  00111$
   001C                     307 00122$:
                            308 ;	genAssign: resultIsFar = FALSE
   001C 7D FF               309 	mov	r5,#0xFF
   001E 80 02               310 	sjmp 00112$
   0020                     311 00111$:
                            312 ;	genAssign: resultIsFar = FALSE
   0020 7D 00               313 	mov	r5,#0x00
   0022                     314 00112$:
                            315 ;	genAssign: resultIsFar = TRUE
   0022 90 31 00 00         316 	mov	dptr,#_rtc
   0026 ED                  317 	mov	a,r5
   0027 F0                  318 	movx	@dptr,a
                            319 ;	rtc390.c:55: for (bitMask=0x01; bitMask; bitMask<<=1) {
   0028 EB                  320 	mov	a,r3
   0029 25 E0               321 	add	a,acc
   002B FD                  322 	mov	r5,a
                            323 ;	genAssign: resultIsFar = TRUE
   002C 8D 03               324 	mov	ar3,r5
   002E 80 E5               325 	sjmp 00101$
   0030                     326 00107$:
                            327 ;	rtc390.c:54: for (byte=0; byte<8; byte++) {
   0030 0A                  328 	inc	r2
   0031 80 D4               329 	sjmp 00105$
   0033                     330 00109$:
   0033 22                  331 	ret
                            332 ;------------------------------------------------------------
                            333 ;Allocation info for local variables in function 'RtcRead'
                            334 ;------------------------------------------------------------
                            335 ;rtcDate                   Allocated with name '_RtcRead_rtcDate_1_1'
                            336 ;rtcBytes                  Allocated with name '_RtcRead_rtcBytes_1_1'
                            337 ;byte                      Allocated to registers 
                            338 ;bitMask                   Allocated to registers r3 
                            339 ;------------------------------------------------------------
                            340 ;	rtc390.c:61: unsigned char RtcRead(struct tm *rtcDate) {
                            341 ;	-----------------------------------------
                            342 ;	 function RtcRead
                            343 ;	-----------------------------------------
   0034                     344 _RtcRead:
   0034 75 86 01            345 	mov     dps, #1
   0037 90s00r00r00         346 	mov     dptr, #_RtcRead_rtcDate_1_1
   003B E5 82               347 	mov	a,dpl
   003D F0                  348 	movx	@dptr,a
   003E A3                  349 	inc	dptr
   003F E5 83               350 	mov	a,dph
   0041 F0                  351 	movx	@dptr,a
   0042 A3                  352 	inc	dptr
   0043 E5 93               353 	mov	a,dpx
   0045 F0                  354 	movx	@dptr,a
   0046 A3                  355 	inc	dptr
   0047 E5 F0               356 	mov	a,b
   0049 F0                  357 	movx	@dptr,a
   004A 75 86 00            358 	mov	dps,#0
                            359 ;	rtc390.c:65: RtcSync();
   004D 12s00r00r00         360 	lcall	_RtcSync
                            361 ;	rtc390.c:67: for (byte=0; byte<8; byte++) {
                            362 ;	genAssign: resultIsFar = FALSE
   0051 7E 00               363 	mov	r6,#0x00
   0053                     364 00110$:
   0053 BE 08 00            365 	cjne	r6,#0x08,00123$
   0056                     366 00123$:
   0056 50 49               367 	jnc  00113$
   0058                     368 00124$:
                            369 ;	rtc390.c:68: rtcBytes[byte]=0;
   0058 EE                  370 	mov	a,r6
   0059 24r04               371 	add	a,#_RtcRead_rtcBytes_1_1
   005B F5 82               372 	mov	dpl,a
   005D E4                  373 	clr	a
   005E 34s00               374 	addc	a,#(_RtcRead_rtcBytes_1_1 >> 8)
   0060 F5 83               375 	mov	dph,a
   0062 E4                  376 	clr	a
   0063 34s00               377 	addc	a,#(_RtcRead_rtcBytes_1_1 >> 16)
   0065 F5 93               378 	mov	dpx,a
   0067 E4                  379 	clr  a
   0068 F0                  380 	movx	@dptr,a
                            381 ;	rtc390.c:69: for (bitMask=0x01; bitMask; bitMask<<=1) {
                            382 ;	genAssign: resultIsFar = FALSE
   0069 7B 01               383 	mov	r3,#0x01
   006B                     384 00106$:
   006B EB                  385 	mov	a,r3
   006C 60 30               386 	jz  00112$
   006E                     387 00125$:
                            388 ;	rtc390.c:70: if (rtc&1) {
   006E 90 31 00 00         389 	mov	dptr,#_rtc
   0072 E0                  390 	movx	a,@dptr
   0073 30 E0 20            391 	jnb  acc.0,00108$
   0076                     392 00126$:
                            393 ;	rtc390.c:71: rtcBytes[byte]|=bitMask;
   0076 EE                  394 	mov	a,r6
   0077 24r04               395 	add	a,#_RtcRead_rtcBytes_1_1
   0079 F5 84               396 	mov	dpl1,a
   007B E4                  397 	clr	a
   007C 34s00               398 	addc	a,#(_RtcRead_rtcBytes_1_1 >> 8)
   007E F5 85               399 	mov	dph1,a
   0080 E4                  400 	clr	a
   0081 34s00               401 	addc	a,#(_RtcRead_rtcBytes_1_1 >> 16)
   0083 F5 95               402 	mov	dpx1,a
   0085 05 86               403 	inc	dps
   0087 E0                  404 	movx	a,@dptr
   0088 FA                  405 	mov	r2,a
   0089 75 86 00            406 	mov	dps,#0
   008C EB                  407 	mov	a,r3
   008D 42 02               408 	orl	ar2,a
   008F EA                  409 	mov	a,r2
   0090 05 86               410 	inc	dps
   0092 F0                  411 	movx	@dptr,a
   0093 75 86 00            412 	mov	dps,#0
                            413 ;	rtc390.c:87: return 1;
                            414 ;	rtc390.c:71: rtcBytes[byte]|=bitMask;
   0096                     415 00108$:
                            416 ;	rtc390.c:69: for (bitMask=0x01; bitMask; bitMask<<=1) {
   0096 EB                  417 	mov	a,r3
   0097 25 E0               418 	add	a,acc
   0099 FF                  419 	mov	r7,a
                            420 ;	genAssign: resultIsFar = FALSE
   009A 8F 03               421 	mov	ar3,r7
   009C 80 CD               422 	sjmp 00106$
   009E                     423 00112$:
                            424 ;	rtc390.c:67: for (byte=0; byte<8; byte++) {
   009E 0E                  425 	inc	r6
   009F 80 B2               426 	sjmp 00110$
   00A1                     427 00113$:
                            428 ;	rtc390.c:75: rtcDate->tm_year=BCDtoINT(rtcBytes[7])+100; // year since 1900
   00A1 90s00r00r00         429 	mov	dptr,#_RtcRead_rtcDate_1_1
   00A5 E0                  430 	movx	a,@dptr
   00A6 24 05               431 	add	a,#0x05
   00A8 FE                  432 	mov	r6,a
   00A9 A3                  433 	inc	dptr
   00AA E0                  434 	movx	a,@dptr
   00AB 34 00               435 	addc	a,#0x00
   00AD FF                  436 	mov	r7,a
   00AE A3                  437 	inc	dptr
   00AF E0                  438 	movx	a,@dptr
   00B0 34 00               439 	addc	a,#0x00
   00B2 F8                  440 	mov	r0,a
   00B3 A3                  441 	inc	dptr
   00B4 E0                  442 	movx	a,@dptr
   00B5 F9                  443 	mov	r1,a
   00B6 90s00r00r0B         444 	mov	dptr,#(_RtcRead_rtcBytes_1_1 + 0x000007)
   00BA E0                  445 	movx	a,@dptr
   00BB FA                  446 	mov	r2,a
   00BC 74 0F               447 	mov	a,#0x0F
   00BE 5A                  448 	anl	a,r2
   00BF FB                  449 	mov	r3,a
   00C0 7C 00               450 	mov	r4,#0
   00C2 EA                  451 	mov	a,r2
   00C3 C4                  452 	swap	a
   00C4 54 0F               453 	anl	a,#0x0F
   00C6 FA                  454 	mov	r2,a
   00C7 75 F0 0A            455 	mov	b,#0x0A
   00CA EA                  456 	mov	a,r2
   00CB A4                  457 	mul	ab
   00CC FA                  458 	mov	r2,a
   00CD AD F0               459 	mov	r5,b
   00CF 2B                  460 	add	a,r3
   00D0 FB                  461 	mov	r3,a
   00D1 ED                  462 	mov	a,r5
   00D2 3C                  463 	addc	a,r4
   00D3 FC                  464 	mov	r4,a
   00D4 74 64               465 	mov	a,#0x64
   00D6 2B                  466 	add	a,r3
   00D7 FB                  467 	mov	r3,a
   00D8 E4                  468 	clr  a
   00D9 3C                  469 	addc	a,r4
   00DA FC                  470 	mov	r4,a
   00DB 8E 82               471 	mov	dpl,r6
   00DD 8F 83               472 	mov	dph,r7
   00DF 88 93               473 	mov	dpx,r0
   00E1 89 F0               474 	mov	b,r1
   00E3 8B 9C               475 	mov	_ap, r3
   00E5 EC                  476 	mov	a,r4
   00E6 12s00r00r00         477 	lcall	__gptrputWord
                            478 ;	rtc390.c:76: rtcDate->tm_mon=BCDtoINT(rtcBytes[6])-1; // jan=0
   00EA 90s00r00r00         479 	mov	dptr,#_RtcRead_rtcDate_1_1
   00EE E0                  480 	movx	a,@dptr
   00EF 24 04               481 	add	a,#0x04
   00F1 FA                  482 	mov	r2,a
   00F2 A3                  483 	inc	dptr
   00F3 E0                  484 	movx	a,@dptr
   00F4 34 00               485 	addc	a,#0x00
   00F6 FB                  486 	mov	r3,a
   00F7 A3                  487 	inc	dptr
   00F8 E0                  488 	movx	a,@dptr
   00F9 34 00               489 	addc	a,#0x00
   00FB FC                  490 	mov	r4,a
   00FC A3                  491 	inc	dptr
   00FD E0                  492 	movx	a,@dptr
   00FE FD                  493 	mov	r5,a
   00FF 90s00r00r0A         494 	mov	dptr,#(_RtcRead_rtcBytes_1_1 + 0x000006)
   0103 E0                  495 	movx	a,@dptr
   0104 FE                  496 	mov	r6,a
   0105 74 0F               497 	mov	a,#0x0F
   0107 5E                  498 	anl	a,r6
   0108 FF                  499 	mov	r7,a
   0109 EE                  500 	mov	a,r6
   010A C4                  501 	swap	a
   010B 54 0F               502 	anl	a,#0x0F
   010D FE                  503 	mov	r6,a
   010E 75 F0 0A            504 	mov	b,#0x0A
   0111 EE                  505 	mov	a,r6
   0112 A4                  506 	mul	ab
   0113 FE                  507 	mov  r6,a
   0114 2F                  508 	add	a,r7
   0115 FF                  509 	mov	r7,a
   0116 1F                  510 	dec	r7
   0117 8A 82               511 	mov	dpl,r2
   0119 8B 83               512 	mov	dph,r3
   011B 8C 93               513 	mov	dpx,r4
   011D 8D F0               514 	mov	b,r5
   011F EF                  515 	mov	a,r7
   0120 12s00r00r00         516 	lcall	__gptrput
                            517 ;	rtc390.c:77: rtcDate->tm_mday=BCDtoINT(rtcBytes[5]);
   0124 90s00r00r00         518 	mov	dptr,#_RtcRead_rtcDate_1_1
   0128 E0                  519 	movx	a,@dptr
   0129 24 03               520 	add	a,#0x03
   012B FA                  521 	mov	r2,a
   012C A3                  522 	inc	dptr
   012D E0                  523 	movx	a,@dptr
   012E 34 00               524 	addc	a,#0x00
   0130 FB                  525 	mov	r3,a
   0131 A3                  526 	inc	dptr
   0132 E0                  527 	movx	a,@dptr
   0133 34 00               528 	addc	a,#0x00
   0135 FC                  529 	mov	r4,a
   0136 A3                  530 	inc	dptr
   0137 E0                  531 	movx	a,@dptr
   0138 FD                  532 	mov	r5,a
   0139 90s00r00r09         533 	mov	dptr,#(_RtcRead_rtcBytes_1_1 + 0x000005)
   013D E0                  534 	movx	a,@dptr
   013E FE                  535 	mov	r6,a
   013F 74 0F               536 	mov	a,#0x0F
   0141 5E                  537 	anl	a,r6
   0142 FF                  538 	mov	r7,a
   0143 EE                  539 	mov	a,r6
   0144 C4                  540 	swap	a
   0145 54 0F               541 	anl	a,#0x0F
   0147 FE                  542 	mov	r6,a
   0148 75 F0 0A            543 	mov	b,#0x0A
   014B EE                  544 	mov	a,r6
   014C A4                  545 	mul	ab
   014D FE                  546 	mov  r6,a
   014E 2F                  547 	add	a,r7
   014F FF                  548 	mov	r7,a
   0150 8A 82               549 	mov	dpl,r2
   0152 8B 83               550 	mov	dph,r3
   0154 8C 93               551 	mov	dpx,r4
   0156 8D F0               552 	mov	b,r5
   0158 EF                  553 	mov	a,r7
   0159 12s00r00r00         554 	lcall	__gptrput
                            555 ;	rtc390.c:78: rtcDate->tm_wday=(rtcBytes[4]&0x07)-1; // monday=0?
   015D 90s00r00r00         556 	mov	dptr,#_RtcRead_rtcDate_1_1
   0161 E0                  557 	movx	a,@dptr
   0162 24 07               558 	add	a,#0x07
   0164 FA                  559 	mov	r2,a
   0165 A3                  560 	inc	dptr
   0166 E0                  561 	movx	a,@dptr
   0167 34 00               562 	addc	a,#0x00
   0169 FB                  563 	mov	r3,a
   016A A3                  564 	inc	dptr
   016B E0                  565 	movx	a,@dptr
   016C 34 00               566 	addc	a,#0x00
   016E FC                  567 	mov	r4,a
   016F A3                  568 	inc	dptr
   0170 E0                  569 	movx	a,@dptr
   0171 FD                  570 	mov	r5,a
   0172 90s00r00r08         571 	mov	dptr,#(_RtcRead_rtcBytes_1_1 + 0x000004)
   0176 E0                  572 	movx	a,@dptr
   0177 FE                  573 	mov	r6,a
   0178 74 07               574 	mov	a,#0x07
   017A 5E                  575 	anl	a,r6
   017B FF                  576 	mov	r7,a
   017C 1F                  577 	dec	r7
   017D 8A 82               578 	mov	dpl,r2
   017F 8B 83               579 	mov	dph,r3
   0181 8C 93               580 	mov	dpx,r4
   0183 8D F0               581 	mov	b,r5
   0185 EF                  582 	mov	a,r7
   0186 12s00r00r00         583 	lcall	__gptrput
                            584 ;	rtc390.c:79: rtcDate->tm_hour=BCDtoINT(rtcBytes[3]);
   018A 90s00r00r00         585 	mov	dptr,#_RtcRead_rtcDate_1_1
   018E E0                  586 	movx	a,@dptr
   018F 24 02               587 	add	a,#0x02
   0191 FA                  588 	mov	r2,a
   0192 A3                  589 	inc	dptr
   0193 E0                  590 	movx	a,@dptr
   0194 34 00               591 	addc	a,#0x00
   0196 FB                  592 	mov	r3,a
   0197 A3                  593 	inc	dptr
   0198 E0                  594 	movx	a,@dptr
   0199 34 00               595 	addc	a,#0x00
   019B FC                  596 	mov	r4,a
   019C A3                  597 	inc	dptr
   019D E0                  598 	movx	a,@dptr
   019E FD                  599 	mov	r5,a
   019F 90s00r00r07         600 	mov	dptr,#(_RtcRead_rtcBytes_1_1 + 0x000003)
   01A3 E0                  601 	movx	a,@dptr
   01A4 FF                  602 	mov	r7,a
   01A5 74 0F               603 	mov	a,#0x0F
   01A7 5F                  604 	anl	a,r7
   01A8 F8                  605 	mov	r0,a
   01A9 EF                  606 	mov	a,r7
   01AA C4                  607 	swap	a
   01AB 54 0F               608 	anl	a,#0x0F
   01AD F9                  609 	mov	r1,a
   01AE 75 F0 0A            610 	mov	b,#0x0A
   01B1 E9                  611 	mov	a,r1
   01B2 A4                  612 	mul	ab
   01B3 F9                  613 	mov  r1,a
   01B4 28                  614 	add	a,r0
   01B5 F8                  615 	mov	r0,a
   01B6 8A 82               616 	mov	dpl,r2
   01B8 8B 83               617 	mov	dph,r3
   01BA 8C 93               618 	mov	dpx,r4
   01BC 8D F0               619 	mov	b,r5
   01BE E8                  620 	mov	a,r0
   01BF 12s00r00r00         621 	lcall	__gptrput
                            622 ;	rtc390.c:80: rtcDate->tm_min=BCDtoINT(rtcBytes[2]);
   01C3 90s00r00r00         623 	mov	dptr,#_RtcRead_rtcDate_1_1
   01C7 E0                  624 	movx	a,@dptr
   01C8 24 01               625 	add	a,#0x01
   01CA FA                  626 	mov	r2,a
   01CB A3                  627 	inc	dptr
   01CC E0                  628 	movx	a,@dptr
   01CD 34 00               629 	addc	a,#0x00
   01CF FB                  630 	mov	r3,a
   01D0 A3                  631 	inc	dptr
   01D1 E0                  632 	movx	a,@dptr
   01D2 34 00               633 	addc	a,#0x00
   01D4 FC                  634 	mov	r4,a
   01D5 A3                  635 	inc	dptr
   01D6 E0                  636 	movx	a,@dptr
   01D7 FD                  637 	mov	r5,a
   01D8 90s00r00r06         638 	mov	dptr,#(_RtcRead_rtcBytes_1_1 + 0x000002)
   01DC E0                  639 	movx	a,@dptr
   01DD F8                  640 	mov	r0,a
   01DE 74 0F               641 	mov	a,#0x0F
   01E0 58                  642 	anl	a,r0
   01E1 F9                  643 	mov	r1,a
   01E2 E8                  644 	mov	a,r0
   01E3 C4                  645 	swap	a
   01E4 54 0F               646 	anl	a,#0x0F
   01E6 F8                  647 	mov	r0,a
   01E7 75 F0 0A            648 	mov	b,#0x0A
   01EA E8                  649 	mov	a,r0
   01EB A4                  650 	mul	ab
   01EC F8                  651 	mov  r0,a
   01ED 29                  652 	add	a,r1
   01EE F9                  653 	mov	r1,a
   01EF 8A 82               654 	mov	dpl,r2
   01F1 8B 83               655 	mov	dph,r3
   01F3 8C 93               656 	mov	dpx,r4
   01F5 8D F0               657 	mov	b,r5
   01F7 E9                  658 	mov	a,r1
   01F8 12s00r00r00         659 	lcall	__gptrput
                            660 ;	rtc390.c:81: rtcDate->tm_sec=BCDtoINT(rtcBytes[1]);
   01FC 90s00r00r05         661 	mov	dptr,#(_RtcRead_rtcBytes_1_1 + 0x000001)
   0200 E0                  662 	movx	a,@dptr
   0201 FA                  663 	mov	r2,a
   0202 74 0F               664 	mov	a,#0x0F
   0204 5A                  665 	anl	a,r2
   0205 FB                  666 	mov	r3,a
   0206 EA                  667 	mov	a,r2
   0207 C4                  668 	swap	a
   0208 54 0F               669 	anl	a,#0x0F
   020A FA                  670 	mov	r2,a
   020B 75 F0 0A            671 	mov	b,#0x0A
   020E EA                  672 	mov	a,r2
   020F A4                  673 	mul	ab
   0210 FA                  674 	mov  r2,a
   0211 2B                  675 	add	a,r3
   0212 FB                  676 	mov	r3,a
   0213 75 86 01            677 	mov     dps, #1
   0216 90s00r00r00         678 	mov     dptr, #_RtcRead_rtcDate_1_1
   021A E0                  679 	movx	a,@dptr
   021B F5 82               680 	mov	dpl,a
   021D A3                  681 	inc	dptr
   021E E0                  682 	movx	a,@dptr
   021F F5 83               683 	mov	dph,a
   0221 A3                  684 	inc	dptr
   0222 E0                  685 	movx	a,@dptr
   0223 F5 93               686 	mov	dpx,a
   0225 A3                  687 	inc	dptr
   0226 E0                  688 	movx	a,@dptr
   0227 F5 F0               689 	mov	b,a
   0229 75 86 00            690 	mov	dps,#0
   022C EB                  691 	mov	a,r3
   022D 12s00r00r00         692 	lcall	__gptrput
                            693 ;	rtc390.c:82: rtcDate->tm_hundredth=BCDtoINT(rtcBytes[0]);
   0231 90s00r00r00         694 	mov	dptr,#_RtcRead_rtcDate_1_1
   0235 E0                  695 	movx	a,@dptr
   0236 24 0B               696 	add	a,#0x0B
   0238 FA                  697 	mov	r2,a
   0239 A3                  698 	inc	dptr
   023A E0                  699 	movx	a,@dptr
   023B 34 00               700 	addc	a,#0x00
   023D FB                  701 	mov	r3,a
   023E A3                  702 	inc	dptr
   023F E0                  703 	movx	a,@dptr
   0240 34 00               704 	addc	a,#0x00
   0242 FC                  705 	mov	r4,a
   0243 A3                  706 	inc	dptr
   0244 E0                  707 	movx	a,@dptr
   0245 FD                  708 	mov	r5,a
   0246 90s00r00r04         709 	mov	dptr,#_RtcRead_rtcBytes_1_1
   024A E0                  710 	movx	a,@dptr
   024B F8                  711 	mov	r0,a
   024C 74 0F               712 	mov	a,#0x0F
   024E 58                  713 	anl	a,r0
   024F F9                  714 	mov	r1,a
   0250 E8                  715 	mov	a,r0
   0251 C4                  716 	swap	a
   0252 54 0F               717 	anl	a,#0x0F
   0254 F8                  718 	mov	r0,a
   0255 75 F0 0A            719 	mov	b,#0x0A
   0258 E8                  720 	mov	a,r0
   0259 A4                  721 	mul	ab
   025A F8                  722 	mov  r0,a
   025B 29                  723 	add	a,r1
   025C F9                  724 	mov	r1,a
   025D 8A 82               725 	mov	dpl,r2
   025F 8B 83               726 	mov	dph,r3
   0261 8C 93               727 	mov	dpx,r4
   0263 8D F0               728 	mov	b,r5
   0265 E9                  729 	mov	a,r1
   0266 12s00r00r00         730 	lcall	__gptrput
                            731 ;	rtc390.c:83: if ((rtcBytes[4]&0x30) || (rtcBytes[3]&0x80)) {
   026A EE                  732 	mov	a,r6
   026B 54 30               733 	anl	a,#0x30
   026D 60 02               734 	jz   00128$
   026F                     735 00127$:
   026F 80 04               736 	sjmp 00103$
   0271                     737 00128$:
   0271 EF                  738 	mov	a,r7
   0272 30 E7 04            739 	jnb  acc.7,00104$
   0275                     740 00129$:
   0275                     741 00103$:
                            742 ;	rtc390.c:85: return 0;
   0275 75 82 00            743 	mov	dpl,#0x00
                            744 ;	rtc390.c:87: return 1;
   0278 22                  745 	ret
   0279                     746 00104$:
   0279 75 82 01            747 	mov     dpl,#0x01
   027C                     748 00114$:
   027C 22                  749 	ret
                            750 ;------------------------------------------------------------
                            751 ;Allocation info for local variables in function 'RtcWrite'
                            752 ;------------------------------------------------------------
                            753 ;rtcDate                   Allocated to registers r2 r3 r4 r5 
                            754 ;rtcBytes                  Allocated with name '_RtcWrite_rtcBytes_1_1'
                            755 ;byte                      Allocated to registers 
                            756 ;bitMask                   Allocated to registers r3 
                            757 ;------------------------------------------------------------
                            758 ;	rtc390.c:90: void RtcWrite(struct tm *rtcDate) {
                            759 ;	-----------------------------------------
                            760 ;	 function RtcWrite
                            761 ;	-----------------------------------------
   027D                     762 _RtcWrite:
   027D AA 82               763 	mov	r2,dpl
   027F AB 83               764 	mov	r3,dph
   0281 AC 93               765 	mov	r4,dpx
   0283 AD F0               766 	mov	r5,b
                            767 ;	rtc390.c:94: rtcBytes[7]=INTtoBCD(rtcDate->tm_year%100);
   0285 74 05               768 	mov	a,#0x05
   0287 2A                  769 	add	a,r2
   0288 FE                  770 	mov	r6,a
   0289 E4                  771 	clr  a
   028A 3B                  772 	addc	a,r3
   028B FF                  773 	mov	r7,a
   028C E4                  774 	clr  a
   028D 3C                  775 	addc	a,r4
   028E F8                  776 	mov	r0,a
   028F 8D 01               777 	mov	ar1,r5
   0291 8E 82               778 	mov	dpl,r6
   0293 8F 83               779 	mov	dph,r7
   0295 88 93               780 	mov	dpx,r0
   0297 89 F0               781 	mov	b,r1
   0299 12s00r00r00         782 	lcall	__gptrgetWord
   029D FE                  783 	mov	r6,a
   029E AF 9C               784 	mov	r7,_ap
                            785 ;	genAssign: resultIsFar = TRUE
   02A0 90s00r00r00         786 	mov	dptr,#__modsint_PARM_2
   02A4 74 64               787 	mov	a,#0x64
   02A6 F0                  788 	movx	@dptr,a
   02A7 E4                  789 	clr	a
   02A8 A3                  790 	inc	dptr
   02A9 F0                  791 	movx	@dptr,a
   02AA C0 02               792 	push	ar2
   02AC C0 03               793 	push	ar3
   02AE C0 04               794 	push	ar4
   02B0 C0 05               795 	push	ar5
   02B2 8E 82               796 	mov	dpl,r6
   02B4 8F 83               797 	mov	dph,r7
   02B6 12s00r00r00         798 	lcall	__modsint
   02BA AE 82               799 	mov	r6,dpl
   02BC AF 83               800 	mov	r7,dph
   02BE D0 05               801 	pop	ar5
   02C0 D0 04               802 	pop	ar4
   02C2 D0 03               803 	pop	ar3
   02C4 D0 02               804 	pop	ar2
                            805 ;	genAssign: resultIsFar = TRUE
   02C6 90s00r00r00         806 	mov	dptr,#__modsint_PARM_2
   02CA 74 0A               807 	mov	a,#0x0A
   02CC F0                  808 	movx	@dptr,a
   02CD E4                  809 	clr	a
   02CE A3                  810 	inc	dptr
   02CF F0                  811 	movx	@dptr,a
   02D0 C0 02               812 	push	ar2
   02D2 C0 03               813 	push	ar3
   02D4 C0 04               814 	push	ar4
   02D6 C0 05               815 	push	ar5
   02D8 C0 06               816 	push	ar6
   02DA C0 07               817 	push	ar7
   02DC 8E 82               818 	mov	dpl,r6
   02DE 8F 83               819 	mov	dph,r7
   02E0 12s00r00r00         820 	lcall	__modsint
   02E4 D0 07               821 	pop	ar7
   02E6 D0 06               822 	pop	ar6
   02E8 D0 05               823 	pop	ar5
   02EA D0 04               824 	pop	ar4
   02EC D0 03               825 	pop	ar3
   02EE D0 02               826 	pop	ar2
   02F0 A8 82               827 	mov	r0,dpl
                            828 ;	genAssign: resultIsFar = TRUE
   02F2 90s00r00r00         829 	mov	dptr,#__divsint_PARM_2
   02F6 74 0A               830 	mov	a,#0x0A
   02F8 F0                  831 	movx	@dptr,a
   02F9 E4                  832 	clr	a
   02FA A3                  833 	inc	dptr
   02FB F0                  834 	movx	@dptr,a
   02FC C0 02               835 	push	ar2
   02FE C0 03               836 	push	ar3
   0300 C0 04               837 	push	ar4
   0302 C0 05               838 	push	ar5
   0304 C0 00               839 	push	ar0
   0306 8E 82               840 	mov	dpl,r6
   0308 8F 83               841 	mov	dph,r7
   030A 12s00r00r00         842 	lcall	__divsint
   030E D0 00               843 	pop	ar0
   0310 D0 05               844 	pop	ar5
   0312 D0 04               845 	pop	ar4
   0314 D0 03               846 	pop	ar3
   0316 D0 02               847 	pop	ar2
   0318 AE 82               848 	mov	r6,dpl
   031A EE                  849 	mov	a,r6
   031B C4                  850 	swap	a
   031C 54 F0               851 	anl	a,#0xF0
   031E FE                  852 	mov  r6,a
   031F 28                  853 	add	a,r0
   0320 F8                  854 	mov  r0,a
   0321 90s00r00r13         855 	mov  dptr,#(_RtcWrite_rtcBytes_1_1 + 0x000007)
   0325 F0                  856 	movx @dptr,a
                            857 ;	rtc390.c:95: rtcBytes[6]=INTtoBCD(rtcDate->tm_mon)+1;
   0326 74 04               858 	mov	a,#0x04
   0328 2A                  859 	add	a,r2
   0329 FE                  860 	mov	r6,a
   032A E4                  861 	clr  a
   032B 3B                  862 	addc	a,r3
   032C FF                  863 	mov	r7,a
   032D E4                  864 	clr  a
   032E 3C                  865 	addc	a,r4
   032F F8                  866 	mov	r0,a
   0330 8D 01               867 	mov	ar1,r5
   0332 8E 82               868 	mov	dpl,r6
   0334 8F 83               869 	mov	dph,r7
   0336 88 93               870 	mov	dpx,r0
   0338 89 F0               871 	mov	b,r1
   033A 12s00r00r00         872 	lcall	__gptrget
   033E FE                  873 	mov  r6,a
   033F 75 F0 0A            874 	mov	b,#0x0A
   0342 84                  875 	div	ab
   0343 AF F0               876 	mov	r7,b
   0345 EE                  877 	mov	a,r6
   0346 75 F0 0A            878 	mov	b,#0x0A
   0349 84                  879 	div	ab
   034A FE                  880 	mov  r6,a
   034B C4                  881 	swap	a
   034C 54 F0               882 	anl	a,#0xF0
   034E FE                  883 	mov  r6,a
   034F 2F                  884 	add	a,r7
   0350 04                  885 	inc  a
   0351 FF                  886 	mov  r7,a
   0352 90s00r00r12         887 	mov  dptr,#(_RtcWrite_rtcBytes_1_1 + 0x000006)
   0356 F0                  888 	movx @dptr,a
                            889 ;	rtc390.c:96: rtcBytes[5]=INTtoBCD(rtcDate->tm_mday);
   0357 74 03               890 	mov	a,#0x03
   0359 2A                  891 	add	a,r2
   035A FE                  892 	mov	r6,a
   035B E4                  893 	clr  a
   035C 3B                  894 	addc	a,r3
   035D FF                  895 	mov	r7,a
   035E E4                  896 	clr  a
   035F 3C                  897 	addc	a,r4
   0360 F8                  898 	mov	r0,a
   0361 8D 01               899 	mov	ar1,r5
   0363 8E 82               900 	mov	dpl,r6
   0365 8F 83               901 	mov	dph,r7
   0367 88 93               902 	mov	dpx,r0
   0369 89 F0               903 	mov	b,r1
   036B 12s00r00r00         904 	lcall	__gptrget
   036F FE                  905 	mov  r6,a
   0370 75 F0 0A            906 	mov	b,#0x0A
   0373 84                  907 	div	ab
   0374 AF F0               908 	mov	r7,b
   0376 EE                  909 	mov	a,r6
   0377 75 F0 0A            910 	mov	b,#0x0A
   037A 84                  911 	div	ab
   037B FE                  912 	mov  r6,a
   037C C4                  913 	swap	a
   037D 54 F0               914 	anl	a,#0xF0
   037F FE                  915 	mov  r6,a
   0380 2F                  916 	add	a,r7
   0381 FF                  917 	mov  r7,a
   0382 90s00r00r11         918 	mov  dptr,#(_RtcWrite_rtcBytes_1_1 + 0x000005)
   0386 F0                  919 	movx @dptr,a
                            920 ;	rtc390.c:97: rtcBytes[4]=(INTtoBCD(rtcDate->tm_wday)+1)&0x07; //set 24h  mode
   0387 74 07               921 	mov	a,#0x07
   0389 2A                  922 	add	a,r2
   038A FE                  923 	mov	r6,a
   038B E4                  924 	clr  a
   038C 3B                  925 	addc	a,r3
   038D FF                  926 	mov	r7,a
   038E E4                  927 	clr  a
   038F 3C                  928 	addc	a,r4
   0390 F8                  929 	mov	r0,a
   0391 8D 01               930 	mov	ar1,r5
   0393 8E 82               931 	mov	dpl,r6
   0395 8F 83               932 	mov	dph,r7
   0397 88 93               933 	mov	dpx,r0
   0399 89 F0               934 	mov	b,r1
   039B 12s00r00r00         935 	lcall	__gptrget
   039F FE                  936 	mov  r6,a
   03A0 75 F0 0A            937 	mov	b,#0x0A
   03A3 84                  938 	div	ab
   03A4 AF F0               939 	mov	r7,b
   03A6 EE                  940 	mov	a,r6
   03A7 75 F0 0A            941 	mov	b,#0x0A
   03AA 84                  942 	div	ab
   03AB FE                  943 	mov  r6,a
   03AC C4                  944 	swap	a
   03AD 54 F0               945 	anl	a,#0xF0
   03AF FE                  946 	mov  r6,a
   03B0 2F                  947 	add	a,r7
   03B1 04                  948 	inc  a
   03B2 FF                  949 	mov  r7,a
   03B3 53 07 07            950 	anl	ar7,#0x07
   03B6 90s00r00r10         951 	mov	dptr,#(_RtcWrite_rtcBytes_1_1 + 0x000004)
   03BA EF                  952 	mov	a,r7
   03BB F0                  953 	movx	@dptr,a
                            954 ;	rtc390.c:98: rtcBytes[3]=INTtoBCD(rtcDate->tm_hour)&0x3f; // oscilator on, reset on
   03BC 74 02               955 	mov	a,#0x02
   03BE 2A                  956 	add	a,r2
   03BF FE                  957 	mov	r6,a
   03C0 E4                  958 	clr  a
   03C1 3B                  959 	addc	a,r3
   03C2 FF                  960 	mov	r7,a
   03C3 E4                  961 	clr  a
   03C4 3C                  962 	addc	a,r4
   03C5 F8                  963 	mov	r0,a
   03C6 8D 01               964 	mov	ar1,r5
   03C8 8E 82               965 	mov	dpl,r6
   03CA 8F 83               966 	mov	dph,r7
   03CC 88 93               967 	mov	dpx,r0
   03CE 89 F0               968 	mov	b,r1
   03D0 12s00r00r00         969 	lcall	__gptrget
   03D4 FE                  970 	mov  r6,a
   03D5 75 F0 0A            971 	mov	b,#0x0A
   03D8 84                  972 	div	ab
   03D9 AF F0               973 	mov	r7,b
   03DB EE                  974 	mov	a,r6
   03DC 75 F0 0A            975 	mov	b,#0x0A
   03DF 84                  976 	div	ab
   03E0 FE                  977 	mov  r6,a
   03E1 C4                  978 	swap	a
   03E2 54 F0               979 	anl	a,#0xF0
   03E4 FE                  980 	mov  r6,a
   03E5 2F                  981 	add	a,r7
   03E6 FF                  982 	mov	r7,a
   03E7 53 07 3F            983 	anl	ar7,#0x3F
   03EA 90s00r00r0F         984 	mov	dptr,#(_RtcWrite_rtcBytes_1_1 + 0x000003)
   03EE EF                  985 	mov	a,r7
   03EF F0                  986 	movx	@dptr,a
                            987 ;	rtc390.c:99: rtcBytes[2]=INTtoBCD(rtcDate->tm_min);
   03F0 74 01               988 	mov	a,#0x01
   03F2 2A                  989 	add	a,r2
   03F3 FE                  990 	mov	r6,a
   03F4 E4                  991 	clr  a
   03F5 3B                  992 	addc	a,r3
   03F6 FF                  993 	mov	r7,a
   03F7 E4                  994 	clr  a
   03F8 3C                  995 	addc	a,r4
   03F9 F8                  996 	mov	r0,a
   03FA 8D 01               997 	mov	ar1,r5
   03FC 8E 82               998 	mov	dpl,r6
   03FE 8F 83               999 	mov	dph,r7
   0400 88 93              1000 	mov	dpx,r0
   0402 89 F0              1001 	mov	b,r1
   0404 12s00r00r00        1002 	lcall	__gptrget
   0408 FE                 1003 	mov  r6,a
   0409 75 F0 0A           1004 	mov	b,#0x0A
   040C 84                 1005 	div	ab
   040D AF F0              1006 	mov	r7,b
   040F EE                 1007 	mov	a,r6
   0410 75 F0 0A           1008 	mov	b,#0x0A
   0413 84                 1009 	div	ab
   0414 FE                 1010 	mov  r6,a
   0415 C4                 1011 	swap	a
   0416 54 F0              1012 	anl	a,#0xF0
   0418 FE                 1013 	mov  r6,a
   0419 2F                 1014 	add	a,r7
   041A FF                 1015 	mov  r7,a
   041B 90s00r00r0E        1016 	mov  dptr,#(_RtcWrite_rtcBytes_1_1 + 0x000002)
   041F F0                 1017 	movx @dptr,a
                           1018 ;	rtc390.c:100: rtcBytes[1]=INTtoBCD(rtcDate->tm_sec);
   0420 8A 82              1019 	mov	dpl,r2
   0422 8B 83              1020 	mov	dph,r3
   0424 8C 93              1021 	mov	dpx,r4
   0426 8D F0              1022 	mov	b,r5
   0428 12s00r00r00        1023 	lcall	__gptrget
   042C FA                 1024 	mov  r2,a
   042D 75 F0 0A           1025 	mov	b,#0x0A
   0430 84                 1026 	div	ab
   0431 AB F0              1027 	mov	r3,b
   0433 EA                 1028 	mov	a,r2
   0434 75 F0 0A           1029 	mov	b,#0x0A
   0437 84                 1030 	div	ab
   0438 FA                 1031 	mov  r2,a
   0439 C4                 1032 	swap	a
   043A 54 F0              1033 	anl	a,#0xF0
   043C FA                 1034 	mov  r2,a
   043D 2B                 1035 	add	a,r3
   043E FB                 1036 	mov  r3,a
   043F 90s00r00r0D        1037 	mov  dptr,#(_RtcWrite_rtcBytes_1_1 + 0x000001)
   0443 F0                 1038 	movx @dptr,a
                           1039 ;	rtc390.c:102: rtcBytes[0]=0;
   0444 90s00r00r0C        1040 	mov	dptr,#_RtcWrite_rtcBytes_1_1
   0448 E4                 1041 	clr  a
   0449 F0                 1042 	movx	@dptr,a
                           1043 ;	rtc390.c:104: RtcSync();
   044A 12s00r00r00        1044 	lcall	_RtcSync
                           1045 ;	rtc390.c:106: for (byte=0; byte<8; byte++) {
                           1046 ;	genAssign: resultIsFar = FALSE
   044E 7A 00              1047 	mov	r2,#0x00
   0450                    1048 00105$:
   0450 BA 08 00           1049 	cjne	r2,#0x08,00119$
   0453                    1050 00119$:
   0453 50 36              1051 	jnc  00109$
   0455                    1052 00120$:
                           1053 ;	rtc390.c:107: for (bitMask=0x01; bitMask; bitMask<<=1) {
                           1054 ;	genAssign: resultIsFar = TRUE
   0455 7B 01              1055 	mov	r3,#0x01
   0457 EA                 1056 	mov	a,r2
   0458 24r0C              1057 	add	a,#_RtcWrite_rtcBytes_1_1
   045A F5 84              1058 	mov	dpl1,a
   045C E4                 1059 	clr	a
   045D 34s00              1060 	addc	a,#(_RtcWrite_rtcBytes_1_1 >> 8)
   045F F5 85              1061 	mov	dph1,a
   0461 E4                 1062 	clr	a
   0462 34s00              1063 	addc	a,#(_RtcWrite_rtcBytes_1_1 >> 16)
   0464 F5 95              1064 	mov	dpx1,a
   0466                    1065 00101$:
   0466 EB                 1066 	mov	a,r3
   0467 60 1F              1067 	jz  00107$
   0469                    1068 00121$:
                           1069 ;	rtc390.c:108: rtc = (rtcBytes[byte]&bitMask) ? 0xff : 0x00;
   0469 05 86              1070 	inc	dps
   046B E0                 1071 	movx	a,@dptr
   046C FF                 1072 	mov	r7,a
   046D 75 86 00           1073 	mov	dps,#0
   0470 EB                 1074 	mov	a,r3
   0471 5F                 1075 	anl	a,r7
   0472 60 04              1076 	jz  00111$
   0474                    1077 00122$:
                           1078 ;	genAssign: resultIsFar = FALSE
   0474 7F FF              1079 	mov	r7,#0xFF
   0476 80 02              1080 	sjmp 00112$
   0478                    1081 00111$:
                           1082 ;	genAssign: resultIsFar = FALSE
   0478 7F 00              1083 	mov	r7,#0x00
   047A                    1084 00112$:
                           1085 ;	genAssign: resultIsFar = TRUE
   047A 90 31 00 00        1086 	mov	dptr,#_rtc
   047E EF                 1087 	mov	a,r7
   047F F0                 1088 	movx	@dptr,a
                           1089 ;	rtc390.c:107: for (bitMask=0x01; bitMask; bitMask<<=1) {
   0480 EB                 1090 	mov	a,r3
   0481 25 E0              1091 	add	a,acc
   0483 FF                 1092 	mov	r7,a
                           1093 ;	genAssign: resultIsFar = TRUE
   0484 8F 03              1094 	mov	ar3,r7
   0486 80 DE              1095 	sjmp 00101$
   0488                    1096 00107$:
                           1097 ;	rtc390.c:106: for (byte=0; byte<8; byte++) {
   0488 0A                 1098 	inc	r2
   0489 80 C5              1099 	sjmp 00105$
   048B                    1100 00109$:
   048B 22                 1101 	ret
                           1102 	.area CSEG    (CODE)
                           1103 	.area CONST   (CODE)
   0000                    1104 _rtcMagic:
   0000 C5                 1105 	.db #0xC5	; 197
   0001 3A                 1106 	.db #0x3A	; 58
   0002 A3                 1107 	.db #0xA3	; 163
   0003 5C                 1108 	.db #0x5C	; 92
   0004 C5                 1109 	.db #0xC5	; 197
   0005 3A                 1110 	.db #0x3A	; 58
   0006 A3                 1111 	.db #0xA3	; 163
   0007 5C                 1112 	.db #0x5C	; 92
                           1113 	.area XINIT   (CODE)
                           1114 	.area CABS    (ABS,CODE)
