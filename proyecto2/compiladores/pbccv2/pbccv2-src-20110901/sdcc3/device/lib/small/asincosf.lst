                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:22 2015
                              5 ;--------------------------------------------------------
                              6 	.module asincosf
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _asincosf
                             13 	.globl _asincosf_PARM_2
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (ABS,DATA)
   0000                      18 	.org 0x0000
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (ABS,DATA)
   0000                      23 	.org 0x0000
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
   0000                      33 _asincosf_a_1_1:
   0000                      34 	.ds 8
   0008                      35 _asincosf_b_1_1:
   0008                      36 	.ds 8
   0010                      37 _asincosf_x_1_1:
   0010                      38 	.ds 4
   0014                      39 _asincosf_y_1_1:
   0014                      40 	.ds 4
   0018                      41 _asincosf_g_1_1:
   0018                      42 	.ds 4
   001C                      43 _asincosf_r_1_1:
   001C                      44 	.ds 4
   0020                      45 _asincosf_sloc0_1_0:
   0020                      46 	.ds 4
                             47 ;--------------------------------------------------------
                             48 ; overlayable items in internal ram 
                             49 ;--------------------------------------------------------
                             50 	.area OSEG    (OVR,DATA)
                             51 ;--------------------------------------------------------
                             52 ; indirectly addressable internal ram data
                             53 ;--------------------------------------------------------
                             54 	.area ISEG    (DATA)
                             55 ;--------------------------------------------------------
                             56 ; absolute internal ram data
                             57 ;--------------------------------------------------------
                             58 	.area IABS    (ABS,DATA)
                             59 	.area IABS    (ABS,DATA)
                             60 ;--------------------------------------------------------
                             61 ; bit data
                             62 ;--------------------------------------------------------
                             63 	.area BSEG    (BIT)
   0000                      64 _asincosf_PARM_2:
   0000                      65 	.ds 1
   0001                      66 _asincosf_quartPI_1_1:
   0001                      67 	.ds 1
                             68 ;--------------------------------------------------------
                             69 ; paged external ram data
                             70 ;--------------------------------------------------------
                             71 	.area PSEG    (PAG,XDATA)
                             72 ;--------------------------------------------------------
                             73 ; external ram data
                             74 ;--------------------------------------------------------
                             75 	.area XSEG    (XDATA)
                             76 ;--------------------------------------------------------
                             77 ; absolute external ram data
                             78 ;--------------------------------------------------------
                             79 	.area XABS    (ABS,XDATA)
                             80 ;--------------------------------------------------------
                             81 ; external initialized ram data
                             82 ;--------------------------------------------------------
                             83 	.area XISEG   (XDATA)
                             84 	.area HOME    (CODE)
                             85 	.area GSINIT0 (CODE)
                             86 	.area GSINIT1 (CODE)
                             87 	.area GSINIT2 (CODE)
                             88 	.area GSINIT3 (CODE)
                             89 	.area GSINIT4 (CODE)
                             90 	.area GSINIT5 (CODE)
                             91 	.area GSINIT  (CODE)
                             92 	.area GSFINAL (CODE)
                             93 	.area CSEG    (CODE)
                             94 ;--------------------------------------------------------
                             95 ; global & static initialisations
                             96 ;--------------------------------------------------------
                             97 	.area HOME    (CODE)
                             98 	.area GSINIT  (CODE)
                             99 	.area GSFINAL (CODE)
                            100 	.area GSINIT  (CODE)
                            101 ;------------------------------------------------------------
                            102 ;Allocation info for local variables in function 'asincosf'
                            103 ;------------------------------------------------------------
                            104 ;a                         Allocated with name '_asincosf_a_1_1'
                            105 ;b                         Allocated with name '_asincosf_b_1_1'
                            106 ;x                         Allocated with name '_asincosf_x_1_1'
                            107 ;y                         Allocated with name '_asincosf_y_1_1'
                            108 ;g                         Allocated with name '_asincosf_g_1_1'
                            109 ;r                         Allocated with name '_asincosf_r_1_1'
                            110 ;i                         Allocated to registers 
                            111 ;sloc0                     Allocated with name '_asincosf_sloc0_1_0'
                            112 ;------------------------------------------------------------
                            113 ;	asincosf.c:53: static const float a[2] = { 0.0, QUART_PI };
   0000 E4                  114 	clr	a
   0001 F5*00               115 	mov	(_asincosf_a_1_1 + 0),a
   0003 F5*01               116 	mov	(_asincosf_a_1_1 + 1),a
   0005 F5*02               117 	mov	(_asincosf_a_1_1 + 2),a
   0007 F5*03               118 	mov	(_asincosf_a_1_1 + 3),a
   0009 75*04 DB            119 	mov	((_asincosf_a_1_1 + 0x0004) + 0),#0xDB
   000C 75*05 0F            120 	mov	((_asincosf_a_1_1 + 0x0004) + 1),#0x0F
   000F 75*06 49            121 	mov	((_asincosf_a_1_1 + 0x0004) + 2),#0x49
   0012 75*07 3F            122 	mov	((_asincosf_a_1_1 + 0x0004) + 3),#0x3F
                            123 ;	asincosf.c:54: static const float b[2] = { HALF_PI, QUART_PI };
   0015 75*08 DB            124 	mov	(_asincosf_b_1_1 + 0),#0xDB
   0018 75*09 0F            125 	mov	(_asincosf_b_1_1 + 1),#0x0F
   001B 75*0A C9            126 	mov	(_asincosf_b_1_1 + 2),#0xC9
   001E 75*0B 3F            127 	mov	(_asincosf_b_1_1 + 3),#0x3F
   0021 75*0C DB            128 	mov	((_asincosf_b_1_1 + 0x0004) + 0),#0xDB
   0024 75*0D 0F            129 	mov	((_asincosf_b_1_1 + 0x0004) + 1),#0x0F
   0027 75*0E 49            130 	mov	((_asincosf_b_1_1 + 0x0004) + 2),#0x49
   002A 75*0F 3F            131 	mov	((_asincosf_b_1_1 + 0x0004) + 3),#0x3F
                            132 ;--------------------------------------------------------
                            133 ; Home
                            134 ;--------------------------------------------------------
                            135 	.area HOME    (CODE)
                            136 	.area HOME    (CODE)
                            137 ;--------------------------------------------------------
                            138 ; code
                            139 ;--------------------------------------------------------
                            140 	.area CSEG    (CODE)
                            141 ;------------------------------------------------------------
                            142 ;Allocation info for local variables in function 'asincosf'
                            143 ;------------------------------------------------------------
                            144 ;a                         Allocated with name '_asincosf_a_1_1'
                            145 ;b                         Allocated with name '_asincosf_b_1_1'
                            146 ;x                         Allocated with name '_asincosf_x_1_1'
                            147 ;y                         Allocated with name '_asincosf_y_1_1'
                            148 ;g                         Allocated with name '_asincosf_g_1_1'
                            149 ;r                         Allocated with name '_asincosf_r_1_1'
                            150 ;i                         Allocated to registers 
                            151 ;sloc0                     Allocated with name '_asincosf_sloc0_1_0'
                            152 ;------------------------------------------------------------
                            153 ;	asincosf.c:47: float asincosf(const float x, const BOOL isacos)
                            154 ;	-----------------------------------------
                            155 ;	 function asincosf
                            156 ;	-----------------------------------------
   0000                     157 _asincosf:
                    0002    158 	ar2 = 0x02
                    0003    159 	ar3 = 0x03
                    0004    160 	ar4 = 0x04
                    0005    161 	ar5 = 0x05
                    0006    162 	ar6 = 0x06
                    0007    163 	ar7 = 0x07
                    0000    164 	ar0 = 0x00
                    0001    165 	ar1 = 0x01
   0000 85 82*10            166 	mov	_asincosf_x_1_1,dpl
   0003 85 83*11            167 	mov	(_asincosf_x_1_1 + 1),dph
   0006 85 F0*12            168 	mov	(_asincosf_x_1_1 + 2),b
   0009 F5*13               169 	mov	(_asincosf_x_1_1 + 3),a
                            170 ;	asincosf.c:51: BOOL quartPI = isacos;
   000B A2*00               171 	mov	c,_asincosf_PARM_2
   000D 92*01               172 	mov	_asincosf_quartPI_1_1,c
                            173 ;	asincosf.c:56: y = fabsf(x);
   000F 85*10 82            174 	mov	dpl,_asincosf_x_1_1
   0012 85*11 83            175 	mov	dph,(_asincosf_x_1_1 + 1)
   0015 85*12 F0            176 	mov	b,(_asincosf_x_1_1 + 2)
   0018 E5*13               177 	mov	a,(_asincosf_x_1_1 + 3)
   001A 12s00r00            178 	lcall	_fabsf
   001D 85 82*14            179 	mov	_asincosf_y_1_1,dpl
   0020 85 83*15            180 	mov	(_asincosf_y_1_1 + 1),dph
   0023 85 F0*16            181 	mov	(_asincosf_y_1_1 + 2),b
   0026 F5*17               182 	mov	(_asincosf_y_1_1 + 3),a
                            183 ;	asincosf.c:57: if (y < EPS)
   0028 E4                  184 	clr	a
   0029 C0 E0               185 	push	acc
   002B C0 E0               186 	push	acc
   002D 74 80               187 	mov	a,#0x80
   002F C0 E0               188 	push	acc
   0031 74 39               189 	mov	a,#0x39
   0033 C0 E0               190 	push	acc
   0035 85*14 82            191 	mov	dpl,_asincosf_y_1_1
   0038 85*15 83            192 	mov	dph,(_asincosf_y_1_1 + 1)
   003B 85*16 F0            193 	mov	b,(_asincosf_y_1_1 + 2)
   003E E5*17               194 	mov	a,(_asincosf_y_1_1 + 3)
   0040 12s00r00            195 	lcall	___fslt
   0043 AC 82               196 	mov	r4,dpl
   0045 E5 81               197 	mov	a,sp
   0047 24 FC               198 	add	a,#0xfc
   0049 F5 81               199 	mov	sp,a
   004B EC                  200 	mov	a,r4
   004C 60 0F               201 	jz	00107$
                            202 ;	asincosf.c:59: r = y;
   004E 85*14*1C            203 	mov	_asincosf_r_1_1,_asincosf_y_1_1
   0051 85*15*1D            204 	mov	(_asincosf_r_1_1 + 1),(_asincosf_y_1_1 + 1)
   0054 85*16*1E            205 	mov	(_asincosf_r_1_1 + 2),(_asincosf_y_1_1 + 2)
   0057 85*17*1F            206 	mov	(_asincosf_r_1_1 + 3),(_asincosf_y_1_1 + 3)
   005A 02s02rB1            207 	ljmp	00108$
   005D                     208 00107$:
                            209 ;	asincosf.c:63: if (y > 0.5)
   005D E4                  210 	clr	a
   005E C0 E0               211 	push	acc
   0060 C0 E0               212 	push	acc
   0062 C0 E0               213 	push	acc
   0064 74 3F               214 	mov	a,#0x3F
   0066 C0 E0               215 	push	acc
   0068 85*14 82            216 	mov	dpl,_asincosf_y_1_1
   006B 85*15 83            217 	mov	dph,(_asincosf_y_1_1 + 1)
   006E 85*16 F0            218 	mov	b,(_asincosf_y_1_1 + 2)
   0071 E5*17               219 	mov	a,(_asincosf_y_1_1 + 3)
   0073 12s00r00            220 	lcall	___fsgt
   0076 AC 82               221 	mov	r4,dpl
   0078 E5 81               222 	mov	a,sp
   007A 24 FC               223 	add	a,#0xfc
   007C F5 81               224 	mov	sp,a
   007E EC                  225 	mov	a,r4
   007F 70 03               226 	jnz	00126$
   0081 02s01r42            227 	ljmp	00104$
   0084                     228 00126$:
                            229 ;	asincosf.c:65: quartPI = !isacos;
   0084 B2*01               230 	cpl	_asincosf_quartPI_1_1
                            231 ;	asincosf.c:66: if (y > 1.0)
   0086 E4                  232 	clr	a
   0087 C0 E0               233 	push	acc
   0089 C0 E0               234 	push	acc
   008B 74 80               235 	mov	a,#0x80
   008D C0 E0               236 	push	acc
   008F 74 3F               237 	mov	a,#0x3F
   0091 C0 E0               238 	push	acc
   0093 85*14 82            239 	mov	dpl,_asincosf_y_1_1
   0096 85*15 83            240 	mov	dph,(_asincosf_y_1_1 + 1)
   0099 85*16 F0            241 	mov	b,(_asincosf_y_1_1 + 2)
   009C E5*17               242 	mov	a,(_asincosf_y_1_1 + 3)
   009E 12s00r00            243 	lcall	___fsgt
   00A1 AC 82               244 	mov	r4,dpl
   00A3 E5 81               245 	mov	a,sp
   00A5 24 FC               246 	add	a,#0xfc
   00A7 F5 81               247 	mov	sp,a
   00A9 EC                  248 	mov	a,r4
   00AA 60 0D               249 	jz	00102$
                            250 ;	asincosf.c:68: errno = EDOM;
   00AC 75*00 21            251 	mov	_errno,#0x21
   00AF 75*01 00            252 	mov	(_errno + 1),#0x00
                            253 ;	asincosf.c:69: return 0.0;
   00B2 90 00 00            254 	mov	dptr,#(0x00&0x00ff)
   00B5 E4                  255 	clr	a
   00B6 F5 F0               256 	mov	b,a
   00B8 22                  257 	ret
   00B9                     258 00102$:
                            259 ;	asincosf.c:71: g = (0.5 - y) + 0.5;
   00B9 C0*14               260 	push	_asincosf_y_1_1
   00BB C0*15               261 	push	(_asincosf_y_1_1 + 1)
   00BD C0*16               262 	push	(_asincosf_y_1_1 + 2)
   00BF C0*17               263 	push	(_asincosf_y_1_1 + 3)
   00C1 90 00 00            264 	mov	dptr,#0x0000
   00C4 75 F0 80            265 	mov	b,#0x80
   00C7 74 3F               266 	mov	a,#0x3F
   00C9 12s00r00            267 	lcall	___fssub
   00CC 85 82*18            268 	mov	_asincosf_g_1_1,dpl
   00CF 85 83*19            269 	mov	(_asincosf_g_1_1 + 1),dph
   00D2 85 F0*1A            270 	mov	(_asincosf_g_1_1 + 2),b
   00D5 F5*1B               271 	mov	(_asincosf_g_1_1 + 3),a
   00D7 E5 81               272 	mov	a,sp
   00D9 24 FC               273 	add	a,#0xfc
   00DB F5 81               274 	mov	sp,a
                            275 ;	asincosf.c:72: g = ldexpf(g, -1);
   00DD 75*00 FF            276 	mov	_ldexpf_PARM_2,#0xFF
   00E0 75*01 FF            277 	mov	(_ldexpf_PARM_2 + 1),#0xFF
   00E3 85*18 82            278 	mov	dpl,_asincosf_g_1_1
   00E6 85*19 83            279 	mov	dph,(_asincosf_g_1_1 + 1)
   00E9 85*1A F0            280 	mov	b,(_asincosf_g_1_1 + 2)
   00EC E5*1B               281 	mov	a,(_asincosf_g_1_1 + 3)
   00EE 12s00r00            282 	lcall	_ldexpf
                            283 ;	asincosf.c:73: y = sqrtf(g);
   00F1 85 82*18            284 	mov	_asincosf_g_1_1,dpl
   00F4 85 83*19            285 	mov	(_asincosf_g_1_1 + 1),dph
   00F7 85 F0*1A            286 	mov	(_asincosf_g_1_1 + 2),b
   00FA F5*1B               287 	mov	(_asincosf_g_1_1 + 3),a
   00FC 12s00r00            288 	lcall	_sqrtf
   00FF 85 82*14            289 	mov	_asincosf_y_1_1,dpl
   0102 85 83*15            290 	mov	(_asincosf_y_1_1 + 1),dph
   0105 85 F0*16            291 	mov	(_asincosf_y_1_1 + 2),b
   0108 F5*17               292 	mov	(_asincosf_y_1_1 + 3),a
                            293 ;	asincosf.c:74: y = -(y + y);
   010A C0*14               294 	push	_asincosf_y_1_1
   010C C0*15               295 	push	(_asincosf_y_1_1 + 1)
   010E C0*16               296 	push	(_asincosf_y_1_1 + 2)
   0110 C0*17               297 	push	(_asincosf_y_1_1 + 3)
   0112 85*14 82            298 	mov	dpl,_asincosf_y_1_1
   0115 85*15 83            299 	mov	dph,(_asincosf_y_1_1 + 1)
   0118 85*16 F0            300 	mov	b,(_asincosf_y_1_1 + 2)
   011B E5*17               301 	mov	a,(_asincosf_y_1_1 + 3)
   011D 12s00r00            302 	lcall	___fsadd
   0120 85 82*20            303 	mov	_asincosf_sloc0_1_0,dpl
   0123 85 83*21            304 	mov	(_asincosf_sloc0_1_0 + 1),dph
   0126 85 F0*22            305 	mov	(_asincosf_sloc0_1_0 + 2),b
   0129 F5*23               306 	mov	(_asincosf_sloc0_1_0 + 3),a
   012B E5 81               307 	mov	a,sp
   012D 24 FC               308 	add	a,#0xfc
   012F F5 81               309 	mov	sp,a
   0131 85*20*14            310 	mov	_asincosf_y_1_1,_asincosf_sloc0_1_0
   0134 85*21*15            311 	mov	(_asincosf_y_1_1 + 1),(_asincosf_sloc0_1_0 + 1)
   0137 85*22*16            312 	mov	(_asincosf_y_1_1 + 2),(_asincosf_sloc0_1_0 + 2)
   013A E5*23               313 	mov	a,(_asincosf_sloc0_1_0 + 3)
   013C B2 E7               314 	cpl	acc.7
   013E F5*17               315 	mov	(_asincosf_y_1_1 + 3),a
   0140 80 27               316 	sjmp	00105$
   0142                     317 00104$:
                            318 ;	asincosf.c:78: g = y * y;
   0142 C0*14               319 	push	_asincosf_y_1_1
   0144 C0*15               320 	push	(_asincosf_y_1_1 + 1)
   0146 C0*16               321 	push	(_asincosf_y_1_1 + 2)
   0148 C0*17               322 	push	(_asincosf_y_1_1 + 3)
   014A 85*14 82            323 	mov	dpl,_asincosf_y_1_1
   014D 85*15 83            324 	mov	dph,(_asincosf_y_1_1 + 1)
   0150 85*16 F0            325 	mov	b,(_asincosf_y_1_1 + 2)
   0153 E5*17               326 	mov	a,(_asincosf_y_1_1 + 3)
   0155 12s00r00            327 	lcall	___fsmul
   0158 85 82*18            328 	mov	_asincosf_g_1_1,dpl
   015B 85 83*19            329 	mov	(_asincosf_g_1_1 + 1),dph
   015E 85 F0*1A            330 	mov	(_asincosf_g_1_1 + 2),b
   0161 F5*1B               331 	mov	(_asincosf_g_1_1 + 3),a
   0163 E5 81               332 	mov	a,sp
   0165 24 FC               333 	add	a,#0xfc
   0167 F5 81               334 	mov	sp,a
   0169                     335 00105$:
                            336 ;	asincosf.c:80: r = y + y * ((P(g) * g) / Q(g));
   0169 C0*18               337 	push	_asincosf_g_1_1
   016B C0*19               338 	push	(_asincosf_g_1_1 + 1)
   016D C0*1A               339 	push	(_asincosf_g_1_1 + 2)
   016F C0*1B               340 	push	(_asincosf_g_1_1 + 3)
   0171 90 20 65            341 	mov	dptr,#0x2065
   0174 75 F0 01            342 	mov	b,#0x01
   0177 74 BF               343 	mov	a,#0xBF
   0179 12s00r00            344 	lcall	___fsmul
   017C AC 82               345 	mov	r4,dpl
   017E AD 83               346 	mov	r5,dph
   0180 AA F0               347 	mov	r2,b
   0182 FB                  348 	mov	r3,a
   0183 E5 81               349 	mov	a,sp
   0185 24 FC               350 	add	a,#0xfc
   0187 F5 81               351 	mov	sp,a
   0189 74 6B               352 	mov	a,#0x6B
   018B C0 E0               353 	push	acc
   018D 74 16               354 	mov	a,#0x16
   018F C0 E0               355 	push	acc
   0191 74 6F               356 	mov	a,#0x6F
   0193 C0 E0               357 	push	acc
   0195 74 3F               358 	mov	a,#0x3F
   0197 C0 E0               359 	push	acc
   0199 8C 82               360 	mov	dpl,r4
   019B 8D 83               361 	mov	dph,r5
   019D 8A F0               362 	mov	b,r2
   019F EB                  363 	mov	a,r3
   01A0 12s00r00            364 	lcall	___fsadd
   01A3 AA 82               365 	mov	r2,dpl
   01A5 AB 83               366 	mov	r3,dph
   01A7 AC F0               367 	mov	r4,b
   01A9 FD                  368 	mov	r5,a
   01AA E5 81               369 	mov	a,sp
   01AC 24 FC               370 	add	a,#0xfc
   01AE F5 81               371 	mov	sp,a
   01B0 C0*18               372 	push	_asincosf_g_1_1
   01B2 C0*19               373 	push	(_asincosf_g_1_1 + 1)
   01B4 C0*1A               374 	push	(_asincosf_g_1_1 + 2)
   01B6 C0*1B               375 	push	(_asincosf_g_1_1 + 3)
   01B8 8A 82               376 	mov	dpl,r2
   01BA 8B 83               377 	mov	dph,r3
   01BC 8C F0               378 	mov	b,r4
   01BE ED                  379 	mov	a,r5
   01BF 12s00r00            380 	lcall	___fsmul
   01C2 85 82*20            381 	mov	_asincosf_sloc0_1_0,dpl
   01C5 85 83*21            382 	mov	(_asincosf_sloc0_1_0 + 1),dph
   01C8 85 F0*22            383 	mov	(_asincosf_sloc0_1_0 + 2),b
   01CB F5*23               384 	mov	(_asincosf_sloc0_1_0 + 3),a
   01CD E5 81               385 	mov	a,sp
   01CF 24 FC               386 	add	a,#0xfc
   01D1 F5 81               387 	mov	sp,a
   01D3 74 0B               388 	mov	a,#0x0B
   01D5 C0 E0               389 	push	acc
   01D7 74 8D               390 	mov	a,#0x8D
   01D9 C0 E0               391 	push	acc
   01DB 74 B1               392 	mov	a,#0xB1
   01DD C0 E0               393 	push	acc
   01DF 74 C0               394 	mov	a,#0xC0
   01E1 C0 E0               395 	push	acc
   01E3 85*18 82            396 	mov	dpl,_asincosf_g_1_1
   01E6 85*19 83            397 	mov	dph,(_asincosf_g_1_1 + 1)
   01E9 85*1A F0            398 	mov	b,(_asincosf_g_1_1 + 2)
   01EC E5*1B               399 	mov	a,(_asincosf_g_1_1 + 3)
   01EE 12s00r00            400 	lcall	___fsadd
   01F1 AE 82               401 	mov	r6,dpl
   01F3 AF 83               402 	mov	r7,dph
   01F5 AA F0               403 	mov	r2,b
   01F7 FB                  404 	mov	r3,a
   01F8 E5 81               405 	mov	a,sp
   01FA 24 FC               406 	add	a,#0xfc
   01FC F5 81               407 	mov	sp,a
   01FE C0*18               408 	push	_asincosf_g_1_1
   0200 C0*19               409 	push	(_asincosf_g_1_1 + 1)
   0202 C0*1A               410 	push	(_asincosf_g_1_1 + 2)
   0204 C0*1B               411 	push	(_asincosf_g_1_1 + 3)
   0206 8E 82               412 	mov	dpl,r6
   0208 8F 83               413 	mov	dph,r7
   020A 8A F0               414 	mov	b,r2
   020C EB                  415 	mov	a,r3
   020D 12s00r00            416 	lcall	___fsmul
   0210 AA 82               417 	mov	r2,dpl
   0212 AB 83               418 	mov	r3,dph
   0214 AC F0               419 	mov	r4,b
   0216 FD                  420 	mov	r5,a
   0217 E5 81               421 	mov	a,sp
   0219 24 FC               422 	add	a,#0xfc
   021B F5 81               423 	mov	sp,a
   021D 74 F0               424 	mov	a,#0xF0
   021F C0 E0               425 	push	acc
   0221 74 50               426 	mov	a,#0x50
   0223 C0 E0               427 	push	acc
   0225 74 B3               428 	mov	a,#0xB3
   0227 C0 E0               429 	push	acc
   0229 74 40               430 	mov	a,#0x40
   022B C0 E0               431 	push	acc
   022D 8A 82               432 	mov	dpl,r2
   022F 8B 83               433 	mov	dph,r3
   0231 8C F0               434 	mov	b,r4
   0233 ED                  435 	mov	a,r5
   0234 12s00r00            436 	lcall	___fsadd
   0237 AA 82               437 	mov	r2,dpl
   0239 AB 83               438 	mov	r3,dph
   023B AC F0               439 	mov	r4,b
   023D FD                  440 	mov	r5,a
   023E E5 81               441 	mov	a,sp
   0240 24 FC               442 	add	a,#0xfc
   0242 F5 81               443 	mov	sp,a
   0244 C0 02               444 	push	ar2
   0246 C0 03               445 	push	ar3
   0248 C0 04               446 	push	ar4
   024A C0 05               447 	push	ar5
   024C 85*20 82            448 	mov	dpl,_asincosf_sloc0_1_0
   024F 85*21 83            449 	mov	dph,(_asincosf_sloc0_1_0 + 1)
   0252 85*22 F0            450 	mov	b,(_asincosf_sloc0_1_0 + 2)
   0255 E5*23               451 	mov	a,(_asincosf_sloc0_1_0 + 3)
   0257 12s00r00            452 	lcall	___fsdiv
   025A AA 82               453 	mov	r2,dpl
   025C AB 83               454 	mov	r3,dph
   025E AC F0               455 	mov	r4,b
   0260 FD                  456 	mov	r5,a
   0261 E5 81               457 	mov	a,sp
   0263 24 FC               458 	add	a,#0xfc
   0265 F5 81               459 	mov	sp,a
   0267 C0 02               460 	push	ar2
   0269 C0 03               461 	push	ar3
   026B C0 04               462 	push	ar4
   026D C0 05               463 	push	ar5
   026F 85*14 82            464 	mov	dpl,_asincosf_y_1_1
   0272 85*15 83            465 	mov	dph,(_asincosf_y_1_1 + 1)
   0275 85*16 F0            466 	mov	b,(_asincosf_y_1_1 + 2)
   0278 E5*17               467 	mov	a,(_asincosf_y_1_1 + 3)
   027A 12s00r00            468 	lcall	___fsmul
   027D AA 82               469 	mov	r2,dpl
   027F AB 83               470 	mov	r3,dph
   0281 AC F0               471 	mov	r4,b
   0283 FD                  472 	mov	r5,a
   0284 E5 81               473 	mov	a,sp
   0286 24 FC               474 	add	a,#0xfc
   0288 F5 81               475 	mov	sp,a
   028A C0 02               476 	push	ar2
   028C C0 03               477 	push	ar3
   028E C0 04               478 	push	ar4
   0290 C0 05               479 	push	ar5
   0292 85*14 82            480 	mov	dpl,_asincosf_y_1_1
   0295 85*15 83            481 	mov	dph,(_asincosf_y_1_1 + 1)
   0298 85*16 F0            482 	mov	b,(_asincosf_y_1_1 + 2)
   029B E5*17               483 	mov	a,(_asincosf_y_1_1 + 3)
   029D 12s00r00            484 	lcall	___fsadd
   02A0 85 82*1C            485 	mov	_asincosf_r_1_1,dpl
   02A3 85 83*1D            486 	mov	(_asincosf_r_1_1 + 1),dph
   02A6 85 F0*1E            487 	mov	(_asincosf_r_1_1 + 2),b
   02A9 F5*1F               488 	mov	(_asincosf_r_1_1 + 3),a
   02AB E5 81               489 	mov	a,sp
   02AD 24 FC               490 	add	a,#0xfc
   02AF F5 81               491 	mov	sp,a
   02B1                     492 00108$:
                            493 ;	asincosf.c:82: i = quartPI;
   02B1 A2*01               494 	mov	c,_asincosf_quartPI_1_1
   02B3 E4                  495 	clr	a
   02B4 33                  496 	rlc	a
   02B5 FA                  497 	mov	r2,a
                            498 ;	asincosf.c:83: if (isacos)
   02B6 20*00 03            499 	jb	_asincosf_PARM_2,00128$
   02B9 02s03r98            500 	ljmp	00115$
   02BC                     501 00128$:
                            502 ;	asincosf.c:85: if (x < 0.0)
   02BC C0 02               503 	push	ar2
   02BE E4                  504 	clr	a
   02BF C0 E0               505 	push	acc
   02C1 C0 E0               506 	push	acc
   02C3 C0 E0               507 	push	acc
   02C5 C0 E0               508 	push	acc
   02C7 85*10 82            509 	mov	dpl,_asincosf_x_1_1
   02CA 85*11 83            510 	mov	dph,(_asincosf_x_1_1 + 1)
   02CD 85*12 F0            511 	mov	b,(_asincosf_x_1_1 + 2)
   02D0 E5*13               512 	mov	a,(_asincosf_x_1_1 + 3)
   02D2 12s00r00            513 	lcall	___fslt
   02D5 AB 82               514 	mov	r3,dpl
   02D7 E5 81               515 	mov	a,sp
   02D9 24 FC               516 	add	a,#0xfc
   02DB F5 81               517 	mov	sp,a
   02DD D0 02               518 	pop	ar2
   02DF EB                  519 	mov	a,r3
   02E0 60 5B               520 	jz	00110$
                            521 ;	asincosf.c:86: r = (b[i] + r) + b[i];
   02E2 EA                  522 	mov	a,r2
   02E3 2A                  523 	add	a,r2
   02E4 25 E0               524 	add	a,acc
   02E6 24r08               525 	add	a,#_asincosf_b_1_1
   02E8 F8                  526 	mov	r0,a
   02E9 86*20               527 	mov	_asincosf_sloc0_1_0,@r0
   02EB 08                  528 	inc	r0
   02EC 86*21               529 	mov	(_asincosf_sloc0_1_0 + 1),@r0
   02EE 08                  530 	inc	r0
   02EF 86*22               531 	mov	(_asincosf_sloc0_1_0 + 2),@r0
   02F1 08                  532 	inc	r0
   02F2 86*23               533 	mov	(_asincosf_sloc0_1_0 + 3),@r0
   02F4 C0*1C               534 	push	_asincosf_r_1_1
   02F6 C0*1D               535 	push	(_asincosf_r_1_1 + 1)
   02F8 C0*1E               536 	push	(_asincosf_r_1_1 + 2)
   02FA C0*1F               537 	push	(_asincosf_r_1_1 + 3)
   02FC 85*20 82            538 	mov	dpl,_asincosf_sloc0_1_0
   02FF 85*21 83            539 	mov	dph,(_asincosf_sloc0_1_0 + 1)
   0302 85*22 F0            540 	mov	b,(_asincosf_sloc0_1_0 + 2)
   0305 E5*23               541 	mov	a,(_asincosf_sloc0_1_0 + 3)
   0307 12s00r00            542 	lcall	___fsadd
   030A AF 82               543 	mov	r7,dpl
   030C AB 83               544 	mov	r3,dph
   030E AC F0               545 	mov	r4,b
   0310 FD                  546 	mov	r5,a
   0311 E5 81               547 	mov	a,sp
   0313 24 FC               548 	add	a,#0xfc
   0315 F5 81               549 	mov	sp,a
   0317 C0*20               550 	push	_asincosf_sloc0_1_0
   0319 C0*21               551 	push	(_asincosf_sloc0_1_0 + 1)
   031B C0*22               552 	push	(_asincosf_sloc0_1_0 + 2)
   031D C0*23               553 	push	(_asincosf_sloc0_1_0 + 3)
   031F 8F 82               554 	mov	dpl,r7
   0321 8B 83               555 	mov	dph,r3
   0323 8C F0               556 	mov	b,r4
   0325 ED                  557 	mov	a,r5
   0326 12s00r00            558 	lcall	___fsadd
   0329 85 82*1C            559 	mov	_asincosf_r_1_1,dpl
   032C 85 83*1D            560 	mov	(_asincosf_r_1_1 + 1),dph
   032F 85 F0*1E            561 	mov	(_asincosf_r_1_1 + 2),b
   0332 F5*1F               562 	mov	(_asincosf_r_1_1 + 3),a
   0334 E5 81               563 	mov	a,sp
   0336 24 FC               564 	add	a,#0xfc
   0338 F5 81               565 	mov	sp,a
   033A 02s04r18            566 	ljmp	00116$
   033D                     567 00110$:
                            568 ;	asincosf.c:88: r = (a[i] - r) + a[i];
   033D EA                  569 	mov	a,r2
   033E 2A                  570 	add	a,r2
   033F 25 E0               571 	add	a,acc
   0341 24r00               572 	add	a,#_asincosf_a_1_1
   0343 F8                  573 	mov	r0,a
   0344 86*20               574 	mov	_asincosf_sloc0_1_0,@r0
   0346 08                  575 	inc	r0
   0347 86*21               576 	mov	(_asincosf_sloc0_1_0 + 1),@r0
   0349 08                  577 	inc	r0
   034A 86*22               578 	mov	(_asincosf_sloc0_1_0 + 2),@r0
   034C 08                  579 	inc	r0
   034D 86*23               580 	mov	(_asincosf_sloc0_1_0 + 3),@r0
   034F C0*1C               581 	push	_asincosf_r_1_1
   0351 C0*1D               582 	push	(_asincosf_r_1_1 + 1)
   0353 C0*1E               583 	push	(_asincosf_r_1_1 + 2)
   0355 C0*1F               584 	push	(_asincosf_r_1_1 + 3)
   0357 85*20 82            585 	mov	dpl,_asincosf_sloc0_1_0
   035A 85*21 83            586 	mov	dph,(_asincosf_sloc0_1_0 + 1)
   035D 85*22 F0            587 	mov	b,(_asincosf_sloc0_1_0 + 2)
   0360 E5*23               588 	mov	a,(_asincosf_sloc0_1_0 + 3)
   0362 12s00r00            589 	lcall	___fssub
   0365 AF 82               590 	mov	r7,dpl
   0367 AB 83               591 	mov	r3,dph
   0369 AC F0               592 	mov	r4,b
   036B FD                  593 	mov	r5,a
   036C E5 81               594 	mov	a,sp
   036E 24 FC               595 	add	a,#0xfc
   0370 F5 81               596 	mov	sp,a
   0372 C0*20               597 	push	_asincosf_sloc0_1_0
   0374 C0*21               598 	push	(_asincosf_sloc0_1_0 + 1)
   0376 C0*22               599 	push	(_asincosf_sloc0_1_0 + 2)
   0378 C0*23               600 	push	(_asincosf_sloc0_1_0 + 3)
   037A 8F 82               601 	mov	dpl,r7
   037C 8B 83               602 	mov	dph,r3
   037E 8C F0               603 	mov	b,r4
   0380 ED                  604 	mov	a,r5
   0381 12s00r00            605 	lcall	___fsadd
   0384 85 82*1C            606 	mov	_asincosf_r_1_1,dpl
   0387 85 83*1D            607 	mov	(_asincosf_r_1_1 + 1),dph
   038A 85 F0*1E            608 	mov	(_asincosf_r_1_1 + 2),b
   038D F5*1F               609 	mov	(_asincosf_r_1_1 + 3),a
   038F E5 81               610 	mov	a,sp
   0391 24 FC               611 	add	a,#0xfc
   0393 F5 81               612 	mov	sp,a
   0395 02s04r18            613 	ljmp	00116$
   0398                     614 00115$:
                            615 ;	asincosf.c:92: r = (a[i] + r) + a[i];
   0398 EA                  616 	mov	a,r2
   0399 2A                  617 	add	a,r2
   039A 25 E0               618 	add	a,acc
   039C 24r00               619 	add	a,#_asincosf_a_1_1
   039E F8                  620 	mov	r0,a
   039F 86*20               621 	mov	_asincosf_sloc0_1_0,@r0
   03A1 08                  622 	inc	r0
   03A2 86*21               623 	mov	(_asincosf_sloc0_1_0 + 1),@r0
   03A4 08                  624 	inc	r0
   03A5 86*22               625 	mov	(_asincosf_sloc0_1_0 + 2),@r0
   03A7 08                  626 	inc	r0
   03A8 86*23               627 	mov	(_asincosf_sloc0_1_0 + 3),@r0
   03AA C0*1C               628 	push	_asincosf_r_1_1
   03AC C0*1D               629 	push	(_asincosf_r_1_1 + 1)
   03AE C0*1E               630 	push	(_asincosf_r_1_1 + 2)
   03B0 C0*1F               631 	push	(_asincosf_r_1_1 + 3)
   03B2 85*20 82            632 	mov	dpl,_asincosf_sloc0_1_0
   03B5 85*21 83            633 	mov	dph,(_asincosf_sloc0_1_0 + 1)
   03B8 85*22 F0            634 	mov	b,(_asincosf_sloc0_1_0 + 2)
   03BB E5*23               635 	mov	a,(_asincosf_sloc0_1_0 + 3)
   03BD 12s00r00            636 	lcall	___fsadd
   03C0 AE 82               637 	mov	r6,dpl
   03C2 AF 83               638 	mov	r7,dph
   03C4 AA F0               639 	mov	r2,b
   03C6 FB                  640 	mov	r3,a
   03C7 E5 81               641 	mov	a,sp
   03C9 24 FC               642 	add	a,#0xfc
   03CB F5 81               643 	mov	sp,a
   03CD C0*20               644 	push	_asincosf_sloc0_1_0
   03CF C0*21               645 	push	(_asincosf_sloc0_1_0 + 1)
   03D1 C0*22               646 	push	(_asincosf_sloc0_1_0 + 2)
   03D3 C0*23               647 	push	(_asincosf_sloc0_1_0 + 3)
   03D5 8E 82               648 	mov	dpl,r6
   03D7 8F 83               649 	mov	dph,r7
   03D9 8A F0               650 	mov	b,r2
   03DB EB                  651 	mov	a,r3
   03DC 12s00r00            652 	lcall	___fsadd
   03DF 85 82*1C            653 	mov	_asincosf_r_1_1,dpl
   03E2 85 83*1D            654 	mov	(_asincosf_r_1_1 + 1),dph
   03E5 85 F0*1E            655 	mov	(_asincosf_r_1_1 + 2),b
   03E8 F5*1F               656 	mov	(_asincosf_r_1_1 + 3),a
   03EA E5 81               657 	mov	a,sp
   03EC 24 FC               658 	add	a,#0xfc
   03EE F5 81               659 	mov	sp,a
                            660 ;	asincosf.c:93: if (x < 0.0)
   03F0 E4                  661 	clr	a
   03F1 C0 E0               662 	push	acc
   03F3 C0 E0               663 	push	acc
   03F5 C0 E0               664 	push	acc
   03F7 C0 E0               665 	push	acc
   03F9 85*10 82            666 	mov	dpl,_asincosf_x_1_1
   03FC 85*11 83            667 	mov	dph,(_asincosf_x_1_1 + 1)
   03FF 85*12 F0            668 	mov	b,(_asincosf_x_1_1 + 2)
   0402 E5*13               669 	mov	a,(_asincosf_x_1_1 + 3)
   0404 12s00r00            670 	lcall	___fslt
   0407 AA 82               671 	mov	r2,dpl
   0409 E5 81               672 	mov	a,sp
   040B 24 FC               673 	add	a,#0xfc
   040D F5 81               674 	mov	sp,a
   040F EA                  675 	mov	a,r2
   0410 60 06               676 	jz	00116$
                            677 ;	asincosf.c:94: r = -r;
   0412 E5*1F               678 	mov	a,(_asincosf_r_1_1 + 3)
   0414 B2 E7               679 	cpl	acc.7
   0416 F5*1F               680 	mov	(_asincosf_r_1_1 + 3),a
   0418                     681 00116$:
                            682 ;	asincosf.c:96: return r;
   0418 85*1C 82            683 	mov	dpl,_asincosf_r_1_1
   041B 85*1D 83            684 	mov	dph,(_asincosf_r_1_1 + 1)
   041E 85*1E F0            685 	mov	b,(_asincosf_r_1_1 + 2)
   0421 E5*1F               686 	mov	a,(_asincosf_r_1_1 + 3)
   0423 22                  687 	ret
                            688 	.area CSEG    (CODE)
                            689 	.area CONST   (CODE)
                            690 	.area XINIT   (CODE)
                            691 	.area CABS    (ABS,CODE)
