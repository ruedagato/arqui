                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:30 2015
                              5 ;--------------------------------------------------------
                              6 	.module tancotf
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _tancotf
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; overlayable bit register bank
                             30 ;--------------------------------------------------------
                             31 	.area BIT_BANK	(REL,OVR,DATA)
   0000                      32 bits:
   0000                      33 	.ds 1
                    8000     34 	b0 = bits[0]
                    8100     35 	b1 = bits[1]
                    8200     36 	b2 = bits[2]
                    8300     37 	b3 = bits[3]
                    8400     38 	b4 = bits[4]
                    8500     39 	b5 = bits[5]
                    8600     40 	b6 = bits[6]
                    8700     41 	b7 = bits[7]
                             42 ;--------------------------------------------------------
                             43 ; internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area DSEG    (DATA)
                             46 ;--------------------------------------------------------
                             47 ; overlayable items in internal ram 
                             48 ;--------------------------------------------------------
                             49 	.area OSEG    (OVR,DATA)
                             50 ;--------------------------------------------------------
                             51 ; indirectly addressable internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area ISEG    (DATA)
                             54 ;--------------------------------------------------------
                             55 ; absolute internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area IABS    (ABS,DATA)
                             58 	.area IABS    (ABS,DATA)
                             59 ;--------------------------------------------------------
                             60 ; bit data
                             61 ;--------------------------------------------------------
                             62 	.area BSEG    (BIT)
                             63 ;--------------------------------------------------------
                             64 ; paged external ram data
                             65 ;--------------------------------------------------------
                             66 	.area PSEG    (PAG,XDATA)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                             71 ;--------------------------------------------------------
                             72 ; absolute external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XABS    (ABS,XDATA)
                             75 ;--------------------------------------------------------
                             76 ; external initialized ram data
                             77 ;--------------------------------------------------------
                             78 	.area XISEG   (XDATA)
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT0 (CODE)
                             81 	.area GSINIT1 (CODE)
                             82 	.area GSINIT2 (CODE)
                             83 	.area GSINIT3 (CODE)
                             84 	.area GSINIT4 (CODE)
                             85 	.area GSINIT5 (CODE)
                             86 	.area GSINIT  (CODE)
                             87 	.area GSFINAL (CODE)
                             88 	.area CSEG    (CODE)
                             89 ;--------------------------------------------------------
                             90 ; global & static initialisations
                             91 ;--------------------------------------------------------
                             92 	.area HOME    (CODE)
                             93 	.area GSINIT  (CODE)
                             94 	.area GSFINAL (CODE)
                             95 	.area GSINIT  (CODE)
                             96 ;--------------------------------------------------------
                             97 ; Home
                             98 ;--------------------------------------------------------
                             99 	.area HOME    (CODE)
                            100 	.area HOME    (CODE)
                            101 ;--------------------------------------------------------
                            102 ; code
                            103 ;--------------------------------------------------------
                            104 	.area CSEG    (CODE)
                            105 ;------------------------------------------------------------
                            106 ;Allocation info for local variables in function 'tancotf'
                            107 ;------------------------------------------------------------
                            108 ;iscotan                   Allocated to registers b0 
                            109 ;x                         Allocated to stack - offset 1
                            110 ;f                         Allocated to stack - offset 5
                            111 ;g                         Allocated to stack - offset 9
                            112 ;xn                        Allocated to stack - offset 13
                            113 ;xnum                      Allocated to stack - offset 17
                            114 ;xden                      Allocated to stack - offset 21
                            115 ;n                         Allocated to stack - offset 25
                            116 ;sloc0                     Allocated to stack - offset 27
                            117 ;------------------------------------------------------------
                            118 ;	tancotf.c:53: float tancotf(const float x, const BOOL iscotan)
                            119 ;	-----------------------------------------
                            120 ;	 function tancotf
                            121 ;	-----------------------------------------
   0000                     122 _tancotf:
                    0002    123 	ar2 = 0x02
                    0003    124 	ar3 = 0x03
                    0004    125 	ar4 = 0x04
                    0005    126 	ar5 = 0x05
                    0006    127 	ar6 = 0x06
                    0007    128 	ar7 = 0x07
                    0000    129 	ar0 = 0x00
                    0001    130 	ar1 = 0x01
   0000 C0*00               131 	push	_bp
   0002 85 81*00            132 	mov	_bp,sp
   0005 C0 82               133 	push	dpl
   0007 C0 83               134 	push	dph
   0009 C0 F0               135 	push	b
   000B C0 E0               136 	push	acc
   000D E5 81               137 	mov	a,sp
   000F 24 1E               138 	add	a,#0x1e
   0011 F5 81               139 	mov	sp,a
                            140 ;	tancotf.c:58: if (fabsf(x) > YMAX)
   0013 A8*00               141 	mov	r0,_bp
   0015 08                  142 	inc	r0
   0016 86 82               143 	mov	dpl,@r0
   0018 08                  144 	inc	r0
   0019 86 83               145 	mov	dph,@r0
   001B 08                  146 	inc	r0
   001C 86 F0               147 	mov	b,@r0
   001E 08                  148 	inc	r0
   001F E6                  149 	mov	a,@r0
   0020 C0*00               150 	push	bits
   0022 12s00r00            151 	lcall	_fabsf
   0025 AE 82               152 	mov	r6,dpl
   0027 AF 83               153 	mov	r7,dph
   0029 AA F0               154 	mov	r2,b
   002B FB                  155 	mov	r3,a
   002C D0*00               156 	pop	bits
   002E C0*00               157 	push	bits
   0030 E4                  158 	clr	a
   0031 C0 E0               159 	push	acc
   0033 74 08               160 	mov	a,#0x08
   0035 C0 E0               161 	push	acc
   0037 74 C9               162 	mov	a,#0xC9
   0039 C0 E0               163 	push	acc
   003B 74 45               164 	mov	a,#0x45
   003D C0 E0               165 	push	acc
   003F 8E 82               166 	mov	dpl,r6
   0041 8F 83               167 	mov	dph,r7
   0043 8A F0               168 	mov	b,r2
   0045 EB                  169 	mov	a,r3
   0046 12s00r00            170 	lcall	___fsgt
   0049 AA 82               171 	mov	r2,dpl
   004B E5 81               172 	mov	a,sp
   004D 24 FC               173 	add	a,#0xfc
   004F F5 81               174 	mov	sp,a
   0051 D0*00               175 	pop	bits
   0053 EA                  176 	mov	a,r2
   0054 60 0F               177 	jz	00102$
                            178 ;	tancotf.c:60: errno = ERANGE;
   0056 75*00 22            179 	mov	_errno,#0x22
   0059 75*01 00            180 	mov	(_errno + 1),#0x00
                            181 ;	tancotf.c:61: return 0.0;
   005C 90 00 00            182 	mov	dptr,#(0x00&0x00ff)
   005F E4                  183 	clr	a
   0060 F5 F0               184 	mov	b,a
   0062 02s06r02            185 	ljmp	00115$
   0065                     186 00102$:
                            187 ;	tancotf.c:65: n=(x*TWO_O_PI+(x>0.0?0.5:-0.5)); /*works for +-x*/
   0065 C0*00               188 	push	bits
   0067 A8*00               189 	mov	r0,_bp
   0069 08                  190 	inc	r0
   006A E6                  191 	mov	a,@r0
   006B C0 E0               192 	push	acc
   006D 08                  193 	inc	r0
   006E E6                  194 	mov	a,@r0
   006F C0 E0               195 	push	acc
   0071 08                  196 	inc	r0
   0072 E6                  197 	mov	a,@r0
   0073 C0 E0               198 	push	acc
   0075 08                  199 	inc	r0
   0076 E6                  200 	mov	a,@r0
   0077 C0 E0               201 	push	acc
   0079 90 F9 83            202 	mov	dptr,#0xF983
   007C 75 F0 22            203 	mov	b,#0x22
   007F 74 3F               204 	mov	a,#0x3F
   0081 12s00r00            205 	lcall	___fsmul
   0084 AA 82               206 	mov	r2,dpl
   0086 AB 83               207 	mov	r3,dph
   0088 AC F0               208 	mov	r4,b
   008A FD                  209 	mov	r5,a
   008B E5 81               210 	mov	a,sp
   008D 24 FC               211 	add	a,#0xfc
   008F F5 81               212 	mov	sp,a
   0091 D0*00               213 	pop	bits
   0093 C0 02               214 	push	ar2
   0095 C0 03               215 	push	ar3
   0097 C0 04               216 	push	ar4
   0099 C0 05               217 	push	ar5
   009B C0*00               218 	push	bits
   009D E4                  219 	clr	a
   009E C0 E0               220 	push	acc
   00A0 C0 E0               221 	push	acc
   00A2 C0 E0               222 	push	acc
   00A4 C0 E0               223 	push	acc
   00A6 A8*00               224 	mov	r0,_bp
   00A8 08                  225 	inc	r0
   00A9 86 82               226 	mov	dpl,@r0
   00AB 08                  227 	inc	r0
   00AC 86 83               228 	mov	dph,@r0
   00AE 08                  229 	inc	r0
   00AF 86 F0               230 	mov	b,@r0
   00B1 08                  231 	inc	r0
   00B2 E6                  232 	mov	a,@r0
   00B3 12s00r00            233 	lcall	___fsgt
   00B6 AE 82               234 	mov	r6,dpl
   00B8 E5 81               235 	mov	a,sp
   00BA 24 FC               236 	add	a,#0xfc
   00BC F5 81               237 	mov	sp,a
   00BE D0*00               238 	pop	bits
   00C0 D0 05               239 	pop	ar5
   00C2 D0 04               240 	pop	ar4
   00C4 D0 03               241 	pop	ar3
   00C6 D0 02               242 	pop	ar2
   00C8 EE                  243 	mov	a,r6
   00C9 60 10               244 	jz	00117$
   00CB E5*00               245 	mov	a,_bp
   00CD 24 1B               246 	add	a,#0x1b
   00CF F8                  247 	mov	r0,a
   00D0 E4                  248 	clr	a
   00D1 F6                  249 	mov	@r0,a
   00D2 08                  250 	inc	r0
   00D3 F6                  251 	mov	@r0,a
   00D4 08                  252 	inc	r0
   00D5 F6                  253 	mov	@r0,a
   00D6 08                  254 	inc	r0
   00D7 76 3F               255 	mov	@r0,#0x3F
   00D9 80 0E               256 	sjmp	00118$
   00DB                     257 00117$:
   00DB E5*00               258 	mov	a,_bp
   00DD 24 1B               259 	add	a,#0x1b
   00DF F8                  260 	mov	r0,a
   00E0 E4                  261 	clr	a
   00E1 F6                  262 	mov	@r0,a
   00E2 08                  263 	inc	r0
   00E3 F6                  264 	mov	@r0,a
   00E4 08                  265 	inc	r0
   00E5 F6                  266 	mov	@r0,a
   00E6 08                  267 	inc	r0
   00E7 76 BF               268 	mov	@r0,#0xBF
   00E9                     269 00118$:
   00E9 C0*00               270 	push	bits
   00EB E5*00               271 	mov	a,_bp
   00ED 24 1B               272 	add	a,#0x1b
   00EF F8                  273 	mov	r0,a
   00F0 E6                  274 	mov	a,@r0
   00F1 C0 E0               275 	push	acc
   00F3 08                  276 	inc	r0
   00F4 E6                  277 	mov	a,@r0
   00F5 C0 E0               278 	push	acc
   00F7 08                  279 	inc	r0
   00F8 E6                  280 	mov	a,@r0
   00F9 C0 E0               281 	push	acc
   00FB 08                  282 	inc	r0
   00FC E6                  283 	mov	a,@r0
   00FD C0 E0               284 	push	acc
   00FF 8A 82               285 	mov	dpl,r2
   0101 8B 83               286 	mov	dph,r3
   0103 8C F0               287 	mov	b,r4
   0105 ED                  288 	mov	a,r5
   0106 12s00r00            289 	lcall	___fsadd
   0109 AA 82               290 	mov	r2,dpl
   010B AB 83               291 	mov	r3,dph
   010D AC F0               292 	mov	r4,b
   010F FD                  293 	mov	r5,a
   0110 E5 81               294 	mov	a,sp
   0112 24 FC               295 	add	a,#0xfc
   0114 F5 81               296 	mov	sp,a
   0116 D0*00               297 	pop	bits
   0118 8A 82               298 	mov	dpl,r2
   011A 8B 83               299 	mov	dph,r3
   011C 8C F0               300 	mov	b,r4
   011E ED                  301 	mov	a,r5
   011F C0*00               302 	push	bits
   0121 12s00r00            303 	lcall	___fs2sint
   0124 AA 82               304 	mov	r2,dpl
   0126 AB 83               305 	mov	r3,dph
   0128 D0*00               306 	pop	bits
   012A E5*00               307 	mov	a,_bp
   012C 24 19               308 	add	a,#0x19
   012E F8                  309 	mov	r0,a
   012F A6 02               310 	mov	@r0,ar2
   0131 08                  311 	inc	r0
   0132 A6 03               312 	mov	@r0,ar3
                            313 ;	tancotf.c:66: xn=n;
   0134 E5*00               314 	mov	a,_bp
   0136 24 19               315 	add	a,#0x19
   0138 F8                  316 	mov	r0,a
   0139 86 82               317 	mov	dpl,@r0
   013B 08                  318 	inc	r0
   013C 86 83               319 	mov	dph,@r0
   013E C0*00               320 	push	bits
   0140 12s00r00            321 	lcall	___sint2fs
   0143 AC 82               322 	mov	r4,dpl
   0145 AD 83               323 	mov	r5,dph
   0147 AE F0               324 	mov	r6,b
   0149 FF                  325 	mov	r7,a
   014A D0*00               326 	pop	bits
   014C E5*00               327 	mov	a,_bp
   014E 24 0D               328 	add	a,#0x0d
   0150 F8                  329 	mov	r0,a
   0151 A6 04               330 	mov	@r0,ar4
   0153 08                  331 	inc	r0
   0154 A6 05               332 	mov	@r0,ar5
   0156 08                  333 	inc	r0
   0157 A6 06               334 	mov	@r0,ar6
   0159 08                  335 	inc	r0
   015A A6 07               336 	mov	@r0,ar7
                            337 ;	tancotf.c:68: xnum=(int)x;
   015C A8*00               338 	mov	r0,_bp
   015E 08                  339 	inc	r0
   015F 86 82               340 	mov	dpl,@r0
   0161 08                  341 	inc	r0
   0162 86 83               342 	mov	dph,@r0
   0164 08                  343 	inc	r0
   0165 86 F0               344 	mov	b,@r0
   0167 08                  345 	inc	r0
   0168 E6                  346 	mov	a,@r0
   0169 C0*00               347 	push	bits
   016B 12s00r00            348 	lcall	___fs2sint
   016E AA 82               349 	mov	r2,dpl
   0170 AB 83               350 	mov	r3,dph
   0172 D0*00               351 	pop	bits
   0174 8A 82               352 	mov	dpl,r2
   0176 8B 83               353 	mov	dph,r3
   0178 C0*00               354 	push	bits
   017A 12s00r00            355 	lcall	___sint2fs
   017D AA 82               356 	mov	r2,dpl
   017F AB 83               357 	mov	r3,dph
   0181 AC F0               358 	mov	r4,b
   0183 FD                  359 	mov	r5,a
   0184 D0*00               360 	pop	bits
   0186 E5*00               361 	mov	a,_bp
   0188 24 11               362 	add	a,#0x11
   018A F8                  363 	mov	r0,a
   018B A6 02               364 	mov	@r0,ar2
   018D 08                  365 	inc	r0
   018E A6 03               366 	mov	@r0,ar3
   0190 08                  367 	inc	r0
   0191 A6 04               368 	mov	@r0,ar4
   0193 08                  369 	inc	r0
   0194 A6 05               370 	mov	@r0,ar5
                            371 ;	tancotf.c:69: xden=x-xnum;
   0196 C0*00               372 	push	bits
   0198 E5*00               373 	mov	a,_bp
   019A 24 11               374 	add	a,#0x11
   019C F8                  375 	mov	r0,a
   019D E6                  376 	mov	a,@r0
   019E C0 E0               377 	push	acc
   01A0 08                  378 	inc	r0
   01A1 E6                  379 	mov	a,@r0
   01A2 C0 E0               380 	push	acc
   01A4 08                  381 	inc	r0
   01A5 E6                  382 	mov	a,@r0
   01A6 C0 E0               383 	push	acc
   01A8 08                  384 	inc	r0
   01A9 E6                  385 	mov	a,@r0
   01AA C0 E0               386 	push	acc
   01AC A8*00               387 	mov	r0,_bp
   01AE 08                  388 	inc	r0
   01AF 86 82               389 	mov	dpl,@r0
   01B1 08                  390 	inc	r0
   01B2 86 83               391 	mov	dph,@r0
   01B4 08                  392 	inc	r0
   01B5 86 F0               393 	mov	b,@r0
   01B7 08                  394 	inc	r0
   01B8 E6                  395 	mov	a,@r0
   01B9 12s00r00            396 	lcall	___fssub
   01BC AA 82               397 	mov	r2,dpl
   01BE AB 83               398 	mov	r3,dph
   01C0 AC F0               399 	mov	r4,b
   01C2 FD                  400 	mov	r5,a
   01C3 E5 81               401 	mov	a,sp
   01C5 24 FC               402 	add	a,#0xfc
   01C7 F5 81               403 	mov	sp,a
   01C9 D0*00               404 	pop	bits
   01CB E5*00               405 	mov	a,_bp
   01CD 24 15               406 	add	a,#0x15
   01CF F8                  407 	mov	r0,a
   01D0 A6 02               408 	mov	@r0,ar2
   01D2 08                  409 	inc	r0
   01D3 A6 03               410 	mov	@r0,ar3
   01D5 08                  411 	inc	r0
   01D6 A6 04               412 	mov	@r0,ar4
   01D8 08                  413 	inc	r0
   01D9 A6 05               414 	mov	@r0,ar5
                            415 ;	tancotf.c:70: f=((xnum-xn*C1)+xden)-xn*C2;
   01DB C0*00               416 	push	bits
   01DD E5*00               417 	mov	a,_bp
   01DF 24 0D               418 	add	a,#0x0d
   01E1 F8                  419 	mov	r0,a
   01E2 E6                  420 	mov	a,@r0
   01E3 C0 E0               421 	push	acc
   01E5 08                  422 	inc	r0
   01E6 E6                  423 	mov	a,@r0
   01E7 C0 E0               424 	push	acc
   01E9 08                  425 	inc	r0
   01EA E6                  426 	mov	a,@r0
   01EB C0 E0               427 	push	acc
   01ED 08                  428 	inc	r0
   01EE E6                  429 	mov	a,@r0
   01EF C0 E0               430 	push	acc
   01F1 90 00 00            431 	mov	dptr,#0x0000
   01F4 75 F0 C9            432 	mov	b,#0xC9
   01F7 74 3F               433 	mov	a,#0x3F
   01F9 12s00r00            434 	lcall	___fsmul
   01FC AC 82               435 	mov	r4,dpl
   01FE AD 83               436 	mov	r5,dph
   0200 AA F0               437 	mov	r2,b
   0202 FB                  438 	mov	r3,a
   0203 E5 81               439 	mov	a,sp
   0205 24 FC               440 	add	a,#0xfc
   0207 F5 81               441 	mov	sp,a
   0209 D0*00               442 	pop	bits
   020B C0*00               443 	push	bits
   020D C0 04               444 	push	ar4
   020F C0 05               445 	push	ar5
   0211 C0 02               446 	push	ar2
   0213 C0 03               447 	push	ar3
   0215 E5*00               448 	mov	a,_bp
   0217 24 11               449 	add	a,#0x11
   0219 F8                  450 	mov	r0,a
   021A 86 82               451 	mov	dpl,@r0
   021C 08                  452 	inc	r0
   021D 86 83               453 	mov	dph,@r0
   021F 08                  454 	inc	r0
   0220 86 F0               455 	mov	b,@r0
   0222 08                  456 	inc	r0
   0223 E6                  457 	mov	a,@r0
   0224 12s00r00            458 	lcall	___fssub
   0227 AA 82               459 	mov	r2,dpl
   0229 AB 83               460 	mov	r3,dph
   022B AC F0               461 	mov	r4,b
   022D FD                  462 	mov	r5,a
   022E E5 81               463 	mov	a,sp
   0230 24 FC               464 	add	a,#0xfc
   0232 F5 81               465 	mov	sp,a
   0234 D0*00               466 	pop	bits
   0236 C0*00               467 	push	bits
   0238 E5*00               468 	mov	a,_bp
   023A 24 15               469 	add	a,#0x15
   023C F8                  470 	mov	r0,a
   023D E6                  471 	mov	a,@r0
   023E C0 E0               472 	push	acc
   0240 08                  473 	inc	r0
   0241 E6                  474 	mov	a,@r0
   0242 C0 E0               475 	push	acc
   0244 08                  476 	inc	r0
   0245 E6                  477 	mov	a,@r0
   0246 C0 E0               478 	push	acc
   0248 08                  479 	inc	r0
   0249 E6                  480 	mov	a,@r0
   024A C0 E0               481 	push	acc
   024C 8A 82               482 	mov	dpl,r2
   024E 8B 83               483 	mov	dph,r3
   0250 8C F0               484 	mov	b,r4
   0252 ED                  485 	mov	a,r5
   0253 12s00r00            486 	lcall	___fsadd
   0256 C8                  487 	xch	a,r0
   0257 E5*00               488 	mov	a,_bp
   0259 24 1B               489 	add	a,#0x1b
   025B C8                  490 	xch	a,r0
   025C A6 82               491 	mov	@r0,dpl
   025E 08                  492 	inc	r0
   025F A6 83               493 	mov	@r0,dph
   0261 08                  494 	inc	r0
   0262 A6 F0               495 	mov	@r0,b
   0264 08                  496 	inc	r0
   0265 F6                  497 	mov	@r0,a
   0266 E5 81               498 	mov	a,sp
   0268 24 FC               499 	add	a,#0xfc
   026A F5 81               500 	mov	sp,a
   026C D0*00               501 	pop	bits
   026E C0*00               502 	push	bits
   0270 E5*00               503 	mov	a,_bp
   0272 24 0D               504 	add	a,#0x0d
   0274 F8                  505 	mov	r0,a
   0275 E6                  506 	mov	a,@r0
   0276 C0 E0               507 	push	acc
   0278 08                  508 	inc	r0
   0279 E6                  509 	mov	a,@r0
   027A C0 E0               510 	push	acc
   027C 08                  511 	inc	r0
   027D E6                  512 	mov	a,@r0
   027E C0 E0               513 	push	acc
   0280 08                  514 	inc	r0
   0281 E6                  515 	mov	a,@r0
   0282 C0 E0               516 	push	acc
   0284 90 AA 22            517 	mov	dptr,#0xAA22
   0287 75 F0 FD            518 	mov	b,#0xFD
   028A 74 39               519 	mov	a,#0x39
   028C 12s00r00            520 	lcall	___fsmul
   028F AE 82               521 	mov	r6,dpl
   0291 AF 83               522 	mov	r7,dph
   0293 AA F0               523 	mov	r2,b
   0295 FB                  524 	mov	r3,a
   0296 E5 81               525 	mov	a,sp
   0298 24 FC               526 	add	a,#0xfc
   029A F5 81               527 	mov	sp,a
   029C D0*00               528 	pop	bits
   029E C0*00               529 	push	bits
   02A0 C0 06               530 	push	ar6
   02A2 C0 07               531 	push	ar7
   02A4 C0 02               532 	push	ar2
   02A6 C0 03               533 	push	ar3
   02A8 E5*00               534 	mov	a,_bp
   02AA 24 1B               535 	add	a,#0x1b
   02AC F8                  536 	mov	r0,a
   02AD 86 82               537 	mov	dpl,@r0
   02AF 08                  538 	inc	r0
   02B0 86 83               539 	mov	dph,@r0
   02B2 08                  540 	inc	r0
   02B3 86 F0               541 	mov	b,@r0
   02B5 08                  542 	inc	r0
   02B6 E6                  543 	mov	a,@r0
   02B7 12s00r00            544 	lcall	___fssub
   02BA AA 82               545 	mov	r2,dpl
   02BC AB 83               546 	mov	r3,dph
   02BE AC F0               547 	mov	r4,b
   02C0 FD                  548 	mov	r5,a
   02C1 E5 81               549 	mov	a,sp
   02C3 24 FC               550 	add	a,#0xfc
   02C5 F5 81               551 	mov	sp,a
   02C7 D0*00               552 	pop	bits
   02C9 E5*00               553 	mov	a,_bp
   02CB 24 05               554 	add	a,#0x05
   02CD F8                  555 	mov	r0,a
   02CE A6 02               556 	mov	@r0,ar2
   02D0 08                  557 	inc	r0
   02D1 A6 03               558 	mov	@r0,ar3
   02D3 08                  559 	inc	r0
   02D4 A6 04               560 	mov	@r0,ar4
   02D6 08                  561 	inc	r0
   02D7 A6 05               562 	mov	@r0,ar5
                            563 ;	tancotf.c:72: if (fabsf(f) < EPS)
   02D9 E5*00               564 	mov	a,_bp
   02DB 24 05               565 	add	a,#0x05
   02DD F8                  566 	mov	r0,a
   02DE 86 82               567 	mov	dpl,@r0
   02E0 08                  568 	inc	r0
   02E1 86 83               569 	mov	dph,@r0
   02E3 08                  570 	inc	r0
   02E4 86 F0               571 	mov	b,@r0
   02E6 08                  572 	inc	r0
   02E7 E6                  573 	mov	a,@r0
   02E8 C0*00               574 	push	bits
   02EA 12s00r00            575 	lcall	_fabsf
   02ED AE 82               576 	mov	r6,dpl
   02EF AF 83               577 	mov	r7,dph
   02F1 AA F0               578 	mov	r2,b
   02F3 FB                  579 	mov	r3,a
   02F4 D0*00               580 	pop	bits
   02F6 C0*00               581 	push	bits
   02F8 E4                  582 	clr	a
   02F9 C0 E0               583 	push	acc
   02FB C0 E0               584 	push	acc
   02FD 74 80               585 	mov	a,#0x80
   02FF C0 E0               586 	push	acc
   0301 74 39               587 	mov	a,#0x39
   0303 C0 E0               588 	push	acc
   0305 8E 82               589 	mov	dpl,r6
   0307 8F 83               590 	mov	dph,r7
   0309 8A F0               591 	mov	b,r2
   030B EB                  592 	mov	a,r3
   030C 12s00r00            593 	lcall	___fslt
   030F AA 82               594 	mov	r2,dpl
   0311 E5 81               595 	mov	a,sp
   0313 24 FC               596 	add	a,#0xfc
   0315 F5 81               597 	mov	sp,a
   0317 D0*00               598 	pop	bits
   0319 EA                  599 	mov	a,r2
   031A 60 2A               600 	jz	00104$
                            601 ;	tancotf.c:74: xnum = f;
   031C E5*00               602 	mov	a,_bp
   031E 24 05               603 	add	a,#0x05
   0320 F8                  604 	mov	r0,a
   0321 E5*00               605 	mov	a,_bp
   0323 24 11               606 	add	a,#0x11
   0325 F9                  607 	mov	r1,a
   0326 E6                  608 	mov	a,@r0
   0327 F7                  609 	mov	@r1,a
   0328 08                  610 	inc	r0
   0329 09                  611 	inc	r1
   032A E6                  612 	mov	a,@r0
   032B F7                  613 	mov	@r1,a
   032C 08                  614 	inc	r0
   032D 09                  615 	inc	r1
   032E E6                  616 	mov	a,@r0
   032F F7                  617 	mov	@r1,a
   0330 08                  618 	inc	r0
   0331 09                  619 	inc	r1
   0332 E6                  620 	mov	a,@r0
   0333 F7                  621 	mov	@r1,a
                            622 ;	tancotf.c:75: xden = 1.0;
   0334 E5*00               623 	mov	a,_bp
   0336 24 15               624 	add	a,#0x15
   0338 F8                  625 	mov	r0,a
   0339 E4                  626 	clr	a
   033A F6                  627 	mov	@r0,a
   033B 08                  628 	inc	r0
   033C F6                  629 	mov	@r0,a
   033D 08                  630 	inc	r0
   033E 76 80               631 	mov	@r0,#0x80
   0340 08                  632 	inc	r0
   0341 76 3F               633 	mov	@r0,#0x3F
   0343 02s04rED            634 	ljmp	00105$
   0346                     635 00104$:
                            636 ;	tancotf.c:79: g = f*f;
   0346 C0*00               637 	push	bits
   0348 E5*00               638 	mov	a,_bp
   034A 24 05               639 	add	a,#0x05
   034C F8                  640 	mov	r0,a
   034D E6                  641 	mov	a,@r0
   034E C0 E0               642 	push	acc
   0350 08                  643 	inc	r0
   0351 E6                  644 	mov	a,@r0
   0352 C0 E0               645 	push	acc
   0354 08                  646 	inc	r0
   0355 E6                  647 	mov	a,@r0
   0356 C0 E0               648 	push	acc
   0358 08                  649 	inc	r0
   0359 E6                  650 	mov	a,@r0
   035A C0 E0               651 	push	acc
   035C E5*00               652 	mov	a,_bp
   035E 24 05               653 	add	a,#0x05
   0360 F8                  654 	mov	r0,a
   0361 86 82               655 	mov	dpl,@r0
   0363 08                  656 	inc	r0
   0364 86 83               657 	mov	dph,@r0
   0366 08                  658 	inc	r0
   0367 86 F0               659 	mov	b,@r0
   0369 08                  660 	inc	r0
   036A E6                  661 	mov	a,@r0
   036B 12s00r00            662 	lcall	___fsmul
   036E AA 82               663 	mov	r2,dpl
   0370 AB 83               664 	mov	r3,dph
   0372 AC F0               665 	mov	r4,b
   0374 FD                  666 	mov	r5,a
   0375 E5 81               667 	mov	a,sp
   0377 24 FC               668 	add	a,#0xfc
   0379 F5 81               669 	mov	sp,a
   037B D0*00               670 	pop	bits
   037D E5*00               671 	mov	a,_bp
   037F 24 09               672 	add	a,#0x09
   0381 F8                  673 	mov	r0,a
   0382 A6 02               674 	mov	@r0,ar2
   0384 08                  675 	inc	r0
   0385 A6 03               676 	mov	@r0,ar3
   0387 08                  677 	inc	r0
   0388 A6 04               678 	mov	@r0,ar4
   038A 08                  679 	inc	r0
   038B A6 05               680 	mov	@r0,ar5
                            681 ;	tancotf.c:80: xnum = P(f,g);
   038D C0*00               682 	push	bits
   038F E5*00               683 	mov	a,_bp
   0391 24 09               684 	add	a,#0x09
   0393 F8                  685 	mov	r0,a
   0394 E6                  686 	mov	a,@r0
   0395 C0 E0               687 	push	acc
   0397 08                  688 	inc	r0
   0398 E6                  689 	mov	a,@r0
   0399 C0 E0               690 	push	acc
   039B 08                  691 	inc	r0
   039C E6                  692 	mov	a,@r0
   039D C0 E0               693 	push	acc
   039F 08                  694 	inc	r0
   03A0 E6                  695 	mov	a,@r0
   03A1 C0 E0               696 	push	acc
   03A3 90 33 B8            697 	mov	dptr,#0x33B8
   03A6 75 F0 C4            698 	mov	b,#0xC4
   03A9 74 BD               699 	mov	a,#0xBD
   03AB 12s00r00            700 	lcall	___fsmul
   03AE AE 82               701 	mov	r6,dpl
   03B0 AF 83               702 	mov	r7,dph
   03B2 AA F0               703 	mov	r2,b
   03B4 FB                  704 	mov	r3,a
   03B5 E5 81               705 	mov	a,sp
   03B7 24 FC               706 	add	a,#0xfc
   03B9 F5 81               707 	mov	sp,a
   03BB D0*00               708 	pop	bits
   03BD C0*00               709 	push	bits
   03BF E5*00               710 	mov	a,_bp
   03C1 24 05               711 	add	a,#0x05
   03C3 F8                  712 	mov	r0,a
   03C4 E6                  713 	mov	a,@r0
   03C5 C0 E0               714 	push	acc
   03C7 08                  715 	inc	r0
   03C8 E6                  716 	mov	a,@r0
   03C9 C0 E0               717 	push	acc
   03CB 08                  718 	inc	r0
   03CC E6                  719 	mov	a,@r0
   03CD C0 E0               720 	push	acc
   03CF 08                  721 	inc	r0
   03D0 E6                  722 	mov	a,@r0
   03D1 C0 E0               723 	push	acc
   03D3 8E 82               724 	mov	dpl,r6
   03D5 8F 83               725 	mov	dph,r7
   03D7 8A F0               726 	mov	b,r2
   03D9 EB                  727 	mov	a,r3
   03DA 12s00r00            728 	lcall	___fsmul
   03DD AA 82               729 	mov	r2,dpl
   03DF AB 83               730 	mov	r3,dph
   03E1 AC F0               731 	mov	r4,b
   03E3 FD                  732 	mov	r5,a
   03E4 E5 81               733 	mov	a,sp
   03E6 24 FC               734 	add	a,#0xfc
   03E8 F5 81               735 	mov	sp,a
   03EA D0*00               736 	pop	bits
   03EC C0*00               737 	push	bits
   03EE E5*00               738 	mov	a,_bp
   03F0 24 05               739 	add	a,#0x05
   03F2 F8                  740 	mov	r0,a
   03F3 E6                  741 	mov	a,@r0
   03F4 C0 E0               742 	push	acc
   03F6 08                  743 	inc	r0
   03F7 E6                  744 	mov	a,@r0
   03F8 C0 E0               745 	push	acc
   03FA 08                  746 	inc	r0
   03FB E6                  747 	mov	a,@r0
   03FC C0 E0               748 	push	acc
   03FE 08                  749 	inc	r0
   03FF E6                  750 	mov	a,@r0
   0400 C0 E0               751 	push	acc
   0402 8A 82               752 	mov	dpl,r2
   0404 8B 83               753 	mov	dph,r3
   0406 8C F0               754 	mov	b,r4
   0408 ED                  755 	mov	a,r5
   0409 12s00r00            756 	lcall	___fsadd
   040C AA 82               757 	mov	r2,dpl
   040E AB 83               758 	mov	r3,dph
   0410 AC F0               759 	mov	r4,b
   0412 FD                  760 	mov	r5,a
   0413 E5 81               761 	mov	a,sp
   0415 24 FC               762 	add	a,#0xfc
   0417 F5 81               763 	mov	sp,a
   0419 D0*00               764 	pop	bits
   041B E5*00               765 	mov	a,_bp
   041D 24 11               766 	add	a,#0x11
   041F F8                  767 	mov	r0,a
   0420 A6 02               768 	mov	@r0,ar2
   0422 08                  769 	inc	r0
   0423 A6 03               770 	mov	@r0,ar3
   0425 08                  771 	inc	r0
   0426 A6 04               772 	mov	@r0,ar4
   0428 08                  773 	inc	r0
   0429 A6 05               774 	mov	@r0,ar5
                            775 ;	tancotf.c:81: xden = Q(g);
   042B C0*00               776 	push	bits
   042D E5*00               777 	mov	a,_bp
   042F 24 09               778 	add	a,#0x09
   0431 F8                  779 	mov	r0,a
   0432 E6                  780 	mov	a,@r0
   0433 C0 E0               781 	push	acc
   0435 08                  782 	inc	r0
   0436 E6                  783 	mov	a,@r0
   0437 C0 E0               784 	push	acc
   0439 08                  785 	inc	r0
   043A E6                  786 	mov	a,@r0
   043B C0 E0               787 	push	acc
   043D 08                  788 	inc	r0
   043E E6                  789 	mov	a,@r0
   043F C0 E0               790 	push	acc
   0441 90 33 75            791 	mov	dptr,#0x3375
   0444 75 F0 1F            792 	mov	b,#0x1F
   0447 74 3C               793 	mov	a,#0x3C
   0449 12s00r00            794 	lcall	___fsmul
   044C AA 82               795 	mov	r2,dpl
   044E AB 83               796 	mov	r3,dph
   0450 AC F0               797 	mov	r4,b
   0452 FD                  798 	mov	r5,a
   0453 E5 81               799 	mov	a,sp
   0455 24 FC               800 	add	a,#0xfc
   0457 F5 81               801 	mov	sp,a
   0459 D0*00               802 	pop	bits
   045B C0*00               803 	push	bits
   045D 74 AF               804 	mov	a,#0xAF
   045F C0 E0               805 	push	acc
   0461 74 B7               806 	mov	a,#0xB7
   0463 C0 E0               807 	push	acc
   0465 74 DB               808 	mov	a,#0xDB
   0467 C0 E0               809 	push	acc
   0469 74 BE               810 	mov	a,#0xBE
   046B C0 E0               811 	push	acc
   046D 8A 82               812 	mov	dpl,r2
   046F 8B 83               813 	mov	dph,r3
   0471 8C F0               814 	mov	b,r4
   0473 ED                  815 	mov	a,r5
   0474 12s00r00            816 	lcall	___fsadd
   0477 AA 82               817 	mov	r2,dpl
   0479 AB 83               818 	mov	r3,dph
   047B AC F0               819 	mov	r4,b
   047D FD                  820 	mov	r5,a
   047E E5 81               821 	mov	a,sp
   0480 24 FC               822 	add	a,#0xfc
   0482 F5 81               823 	mov	sp,a
   0484 D0*00               824 	pop	bits
   0486 C0*00               825 	push	bits
   0488 E5*00               826 	mov	a,_bp
   048A 24 09               827 	add	a,#0x09
   048C F8                  828 	mov	r0,a
   048D E6                  829 	mov	a,@r0
   048E C0 E0               830 	push	acc
   0490 08                  831 	inc	r0
   0491 E6                  832 	mov	a,@r0
   0492 C0 E0               833 	push	acc
   0494 08                  834 	inc	r0
   0495 E6                  835 	mov	a,@r0
   0496 C0 E0               836 	push	acc
   0498 08                  837 	inc	r0
   0499 E6                  838 	mov	a,@r0
   049A C0 E0               839 	push	acc
   049C 8A 82               840 	mov	dpl,r2
   049E 8B 83               841 	mov	dph,r3
   04A0 8C F0               842 	mov	b,r4
   04A2 ED                  843 	mov	a,r5
   04A3 12s00r00            844 	lcall	___fsmul
   04A6 AA 82               845 	mov	r2,dpl
   04A8 AB 83               846 	mov	r3,dph
   04AA AC F0               847 	mov	r4,b
   04AC FD                  848 	mov	r5,a
   04AD E5 81               849 	mov	a,sp
   04AF 24 FC               850 	add	a,#0xfc
   04B1 F5 81               851 	mov	sp,a
   04B3 D0*00               852 	pop	bits
   04B5 C0*00               853 	push	bits
   04B7 E4                  854 	clr	a
   04B8 C0 E0               855 	push	acc
   04BA C0 E0               856 	push	acc
   04BC 74 80               857 	mov	a,#0x80
   04BE C0 E0               858 	push	acc
   04C0 74 3F               859 	mov	a,#0x3F
   04C2 C0 E0               860 	push	acc
   04C4 8A 82               861 	mov	dpl,r2
   04C6 8B 83               862 	mov	dph,r3
   04C8 8C F0               863 	mov	b,r4
   04CA ED                  864 	mov	a,r5
   04CB 12s00r00            865 	lcall	___fsadd
   04CE AA 82               866 	mov	r2,dpl
   04D0 AB 83               867 	mov	r3,dph
   04D2 AC F0               868 	mov	r4,b
   04D4 FD                  869 	mov	r5,a
   04D5 E5 81               870 	mov	a,sp
   04D7 24 FC               871 	add	a,#0xfc
   04D9 F5 81               872 	mov	sp,a
   04DB D0*00               873 	pop	bits
   04DD E5*00               874 	mov	a,_bp
   04DF 24 15               875 	add	a,#0x15
   04E1 F8                  876 	mov	r0,a
   04E2 A6 02               877 	mov	@r0,ar2
   04E4 08                  878 	inc	r0
   04E5 A6 03               879 	mov	@r0,ar3
   04E7 08                  880 	inc	r0
   04E8 A6 04               881 	mov	@r0,ar4
   04EA 08                  882 	inc	r0
   04EB A6 05               883 	mov	@r0,ar5
   04ED                     884 00105$:
                            885 ;	tancotf.c:84: if(n&1)
   04ED E5*00               886 	mov	a,_bp
   04EF 24 19               887 	add	a,#0x19
   04F1 F8                  888 	mov	r0,a
   04F2 E6                  889 	mov	a,@r0
   04F3 20 E0 03            890 	jb	acc.0,00128$
   04F6 02s05r89            891 	ljmp	00113$
   04F9                     892 00128$:
                            893 ;	tancotf.c:87: if(iscotan) return (-xnum/xden);
   04F9 30*00 47            894 	jnb	b0,00107$
   04FC E5*00               895 	mov	a,_bp
   04FE 24 11               896 	add	a,#0x11
   0500 F8                  897 	mov	r0,a
   0501 86 02               898 	mov	ar2,@r0
   0503 08                  899 	inc	r0
   0504 86 03               900 	mov	ar3,@r0
   0506 08                  901 	inc	r0
   0507 86 04               902 	mov	ar4,@r0
   0509 08                  903 	inc	r0
   050A E6                  904 	mov	a,@r0
   050B B2 E7               905 	cpl	acc.7
   050D FD                  906 	mov	r5,a
   050E E5*00               907 	mov	a,_bp
   0510 24 15               908 	add	a,#0x15
   0512 F8                  909 	mov	r0,a
   0513 E6                  910 	mov	a,@r0
   0514 C0 E0               911 	push	acc
   0516 08                  912 	inc	r0
   0517 E6                  913 	mov	a,@r0
   0518 C0 E0               914 	push	acc
   051A 08                  915 	inc	r0
   051B E6                  916 	mov	a,@r0
   051C C0 E0               917 	push	acc
   051E 08                  918 	inc	r0
   051F E6                  919 	mov	a,@r0
   0520 C0 E0               920 	push	acc
   0522 8A 82               921 	mov	dpl,r2
   0524 8B 83               922 	mov	dph,r3
   0526 8C F0               923 	mov	b,r4
   0528 ED                  924 	mov	a,r5
   0529 12s00r00            925 	lcall	___fsdiv
   052C AA 82               926 	mov	r2,dpl
   052E AB 83               927 	mov	r3,dph
   0530 AC F0               928 	mov	r4,b
   0532 FD                  929 	mov	r5,a
   0533 E5 81               930 	mov	a,sp
   0535 24 FC               931 	add	a,#0xfc
   0537 F5 81               932 	mov	sp,a
   0539 8A 82               933 	mov	dpl,r2
   053B 8B 83               934 	mov	dph,r3
   053D 8C F0               935 	mov	b,r4
   053F ED                  936 	mov	a,r5
   0540 02s06r02            937 	ljmp	00115$
   0543                     938 00107$:
                            939 ;	tancotf.c:88: else return (-xden/xnum);
   0543 E5*00               940 	mov	a,_bp
   0545 24 15               941 	add	a,#0x15
   0547 F8                  942 	mov	r0,a
   0548 86 02               943 	mov	ar2,@r0
   054A 08                  944 	inc	r0
   054B 86 03               945 	mov	ar3,@r0
   054D 08                  946 	inc	r0
   054E 86 04               947 	mov	ar4,@r0
   0550 08                  948 	inc	r0
   0551 E6                  949 	mov	a,@r0
   0552 B2 E7               950 	cpl	acc.7
   0554 FD                  951 	mov	r5,a
   0555 E5*00               952 	mov	a,_bp
   0557 24 11               953 	add	a,#0x11
   0559 F8                  954 	mov	r0,a
   055A E6                  955 	mov	a,@r0
   055B C0 E0               956 	push	acc
   055D 08                  957 	inc	r0
   055E E6                  958 	mov	a,@r0
   055F C0 E0               959 	push	acc
   0561 08                  960 	inc	r0
   0562 E6                  961 	mov	a,@r0
   0563 C0 E0               962 	push	acc
   0565 08                  963 	inc	r0
   0566 E6                  964 	mov	a,@r0
   0567 C0 E0               965 	push	acc
   0569 8A 82               966 	mov	dpl,r2
   056B 8B 83               967 	mov	dph,r3
   056D 8C F0               968 	mov	b,r4
   056F ED                  969 	mov	a,r5
   0570 12s00r00            970 	lcall	___fsdiv
   0573 AA 82               971 	mov	r2,dpl
   0575 AB 83               972 	mov	r3,dph
   0577 AC F0               973 	mov	r4,b
   0579 FD                  974 	mov	r5,a
   057A E5 81               975 	mov	a,sp
   057C 24 FC               976 	add	a,#0xfc
   057E F5 81               977 	mov	sp,a
   0580 8A 82               978 	mov	dpl,r2
   0582 8B 83               979 	mov	dph,r3
   0584 8C F0               980 	mov	b,r4
   0586 ED                  981 	mov	a,r5
   0587 80 79               982 	sjmp	00115$
   0589                     983 00113$:
                            984 ;	tancotf.c:92: if(iscotan) return (xden/xnum);
   0589 30*00 3C            985 	jnb	b0,00110$
   058C E5*00               986 	mov	a,_bp
   058E 24 11               987 	add	a,#0x11
   0590 F8                  988 	mov	r0,a
   0591 E6                  989 	mov	a,@r0
   0592 C0 E0               990 	push	acc
   0594 08                  991 	inc	r0
   0595 E6                  992 	mov	a,@r0
   0596 C0 E0               993 	push	acc
   0598 08                  994 	inc	r0
   0599 E6                  995 	mov	a,@r0
   059A C0 E0               996 	push	acc
   059C 08                  997 	inc	r0
   059D E6                  998 	mov	a,@r0
   059E C0 E0               999 	push	acc
   05A0 E5*00              1000 	mov	a,_bp
   05A2 24 15              1001 	add	a,#0x15
   05A4 F8                 1002 	mov	r0,a
   05A5 86 82              1003 	mov	dpl,@r0
   05A7 08                 1004 	inc	r0
   05A8 86 83              1005 	mov	dph,@r0
   05AA 08                 1006 	inc	r0
   05AB 86 F0              1007 	mov	b,@r0
   05AD 08                 1008 	inc	r0
   05AE E6                 1009 	mov	a,@r0
   05AF 12s00r00           1010 	lcall	___fsdiv
   05B2 AA 82              1011 	mov	r2,dpl
   05B4 AB 83              1012 	mov	r3,dph
   05B6 AC F0              1013 	mov	r4,b
   05B8 FD                 1014 	mov	r5,a
   05B9 E5 81              1015 	mov	a,sp
   05BB 24 FC              1016 	add	a,#0xfc
   05BD F5 81              1017 	mov	sp,a
   05BF 8A 82              1018 	mov	dpl,r2
   05C1 8B 83              1019 	mov	dph,r3
   05C3 8C F0              1020 	mov	b,r4
   05C5 ED                 1021 	mov	a,r5
   05C6 80 3A              1022 	sjmp	00115$
   05C8                    1023 00110$:
                           1024 ;	tancotf.c:93: else return (xnum/xden);
   05C8 E5*00              1025 	mov	a,_bp
   05CA 24 15              1026 	add	a,#0x15
   05CC F8                 1027 	mov	r0,a
   05CD E6                 1028 	mov	a,@r0
   05CE C0 E0              1029 	push	acc
   05D0 08                 1030 	inc	r0
   05D1 E6                 1031 	mov	a,@r0
   05D2 C0 E0              1032 	push	acc
   05D4 08                 1033 	inc	r0
   05D5 E6                 1034 	mov	a,@r0
   05D6 C0 E0              1035 	push	acc
   05D8 08                 1036 	inc	r0
   05D9 E6                 1037 	mov	a,@r0
   05DA C0 E0              1038 	push	acc
   05DC E5*00              1039 	mov	a,_bp
   05DE 24 11              1040 	add	a,#0x11
   05E0 F8                 1041 	mov	r0,a
   05E1 86 82              1042 	mov	dpl,@r0
   05E3 08                 1043 	inc	r0
   05E4 86 83              1044 	mov	dph,@r0
   05E6 08                 1045 	inc	r0
   05E7 86 F0              1046 	mov	b,@r0
   05E9 08                 1047 	inc	r0
   05EA E6                 1048 	mov	a,@r0
   05EB 12s00r00           1049 	lcall	___fsdiv
   05EE AA 82              1050 	mov	r2,dpl
   05F0 AB 83              1051 	mov	r3,dph
   05F2 AC F0              1052 	mov	r4,b
   05F4 FD                 1053 	mov	r5,a
   05F5 E5 81              1054 	mov	a,sp
   05F7 24 FC              1055 	add	a,#0xfc
   05F9 F5 81              1056 	mov	sp,a
   05FB 8A 82              1057 	mov	dpl,r2
   05FD 8B 83              1058 	mov	dph,r3
   05FF 8C F0              1059 	mov	b,r4
   0601 ED                 1060 	mov	a,r5
   0602                    1061 00115$:
   0602 85*00 81           1062 	mov	sp,_bp
   0605 D0*00              1063 	pop	_bp
   0607 22                 1064 	ret
                           1065 	.area CSEG    (CODE)
                           1066 	.area CONST   (CODE)
                           1067 	.area XINIT   (CODE)
                           1068 	.area CABS    (ABS,CODE)
