                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:19 2015
                              5 ;--------------------------------------------------------
                              6 	.module _strrchr
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _strrchr_PARM_2
                             31 	.globl _strrchr
                             32 ;--------------------------------------------------------
                             33 ; special function registers
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; special function bits
                             37 ;--------------------------------------------------------
                             38 ;--------------------------------------------------------
                             39 ; overlayable register banks
                             40 ;--------------------------------------------------------
                             41 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      42 	.ds 8
                             43 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                      44 	.ds 8
                             45 ;--------------------------------------------------------
                             46 ; internal ram data
                             47 ;--------------------------------------------------------
                             48 	.area DSEG    (DATA)
                             49 ;--------------------------------------------------------
                             50 ; overlayable items in internal ram 
                             51 ;--------------------------------------------------------
                             52 	.area OSEG    (OVR,DATA)
                             53 ;--------------------------------------------------------
                             54 ; indirectly addressable internal ram data
                             55 ;--------------------------------------------------------
                             56 	.area ISEG    (DATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute internal ram data
                             59 ;--------------------------------------------------------
                             60 	.area IABS    (ABS,DATA)
                             61 	.area IABS    (ABS,DATA)
                             62 ;--------------------------------------------------------
                             63 ; bit data
                             64 ;--------------------------------------------------------
                             65 	.area BSEG    (BIT)
                             66 ;--------------------------------------------------------
                             67 ; paged external ram data
                             68 ;--------------------------------------------------------
                             69 	.area PSEG    (PAG,XDATA)
                             70 ;--------------------------------------------------------
                             71 ; external ram data
                             72 ;--------------------------------------------------------
                             73 	.area XSEG    (XDATA)
   0000                      74 _strrchr_PARM_2:
   0000                      75 	.ds 1
   0001                      76 _strrchr_start_1_1:
   0001                      77 	.ds 4
                             78 ;--------------------------------------------------------
                             79 ; absolute external ram data
                             80 ;--------------------------------------------------------
                             81 	.area XABS    (ABS,XDATA)
                             82 ;--------------------------------------------------------
                             83 ; external initialized ram data
                             84 ;--------------------------------------------------------
                             85 	.area XISEG   (XDATA)
                             86 ;--------------------------------------------------------
                             87 ; global & static initialisations
                             88 ;--------------------------------------------------------
                             89 	.area HOME    (CODE)
                             90 	.area GSINIT  (CODE)
                             91 	.area GSFINAL (CODE)
                             92 	.area GSINIT  (CODE)
                             93 ;--------------------------------------------------------
                             94 ; Home
                             95 ;--------------------------------------------------------
                             96 	.area HOME    (CODE)
                             97 	.area HOME    (CODE)
                             98 ;--------------------------------------------------------
                             99 ; code
                            100 ;--------------------------------------------------------
                            101 	.area CSEG    (CODE)
                            102 ;------------------------------------------------------------
                            103 ;Allocation info for local variables in function 'strrchr'
                            104 ;------------------------------------------------------------
                            105 ;ch                        Allocated with name '_strrchr_PARM_2'
                            106 ;string                    Allocated to registers r2 r3 r4 r5 
                            107 ;start                     Allocated with name '_strrchr_start_1_1'
                            108 ;------------------------------------------------------------
                            109 ;	_strrchr.c:31: char * strrchr (
                            110 ;	-----------------------------------------
                            111 ;	 function strrchr
                            112 ;	-----------------------------------------
   0000                     113 _strrchr:
                    0002    114 	ar2 = 0x02
                    0003    115 	ar3 = 0x03
                    0004    116 	ar4 = 0x04
                    0005    117 	ar5 = 0x05
                    0006    118 	ar6 = 0x06
                    0007    119 	ar7 = 0x07
                    0000    120 	ar0 = 0x00
                    0001    121 	ar1 = 0x01
   0000 AA 82               122 	mov	r2,dpl
   0002 AB 83               123 	mov	r3,dph
   0004 AC 93               124 	mov	r4,dpx
   0006 AD F0               125 	mov	r5,b
                            126 ;	_strrchr.c:36: const char * start = string;
                            127 ;	genAssign: resultIsFar = TRUE
   0008 90s00r00r01         128 	mov	dptr,#_strrchr_start_1_1
   000C EA                  129 	mov	a,r2
   000D F0                  130 	movx	@dptr,a
   000E A3                  131 	inc	dptr
   000F EB                  132 	mov	a,r3
   0010 F0                  133 	movx	@dptr,a
   0011 A3                  134 	inc	dptr
   0012 EC                  135 	mov	a,r4
   0013 F0                  136 	movx	@dptr,a
   0014 A3                  137 	inc	dptr
   0015 ED                  138 	mov	a,r5
   0016 F0                  139 	movx	@dptr,a
                            140 ;	_strrchr.c:38: while (*string++)                       /* find end of string */
                            141 ;	genAssign: resultIsFar = FALSE
   0017                     142 00101$:
   0017 8A 82               143 	mov	dpl,r2
   0019 8B 83               144 	mov	dph,r3
   001B 8C 93               145 	mov	dpx,r4
   001D 8D F0               146 	mov	b,r5
   001F 12s00r00r00         147 	lcall	__gptrget
   0023 FE                  148 	mov	r6,a
   0024 A3                  149 	inc	dptr
   0025 AA 82               150 	mov	r2,dpl
   0027 AB 83               151 	mov	r3,dph
   0029 AC 93               152 	mov	r4,dpx
   002B AD F0               153 	mov	r5,b
   002D EE                  154 	mov	a,r6
   002E 70 E7               155 	jnz  00101$
   0030                     156 00118$:
                            157 ;	_strrchr.c:41: while (--string != start && *string != ch)
                            158 ;	genAssign: resultIsFar = FALSE
   0030                     159 00105$:
   0030 1A                  160 	dec	r2
   0031 BA FF 05            161 	cjne	r2,#0xFF,00119$
   0034 1B                  162 	dec	r3
   0035 BB FF 01            163 	cjne	r3,#0xFF,00119$
   0038 1C                  164 	dec	r4
   0039                     165 00119$:
   0039 90s00r00r01         166 	mov	dptr,#_strrchr_start_1_1
   003D 8A F0               167 	mov	b,r2
   003F E0                  168 	movx	a,@dptr
   0040 B5 F0 10            169 	cjne	a,b,00120$
   0043 8B F0               170 	mov	b,r3
   0045 A3                  171 	inc	dptr
   0046 E0                  172 	movx	a,@dptr
   0047 B5 F0 09            173 	cjne	a,b,00120$
   004A 8C F0               174 	mov	b,r4
   004C A3                  175 	inc	dptr
   004D E0                  176 	movx	a,@dptr
   004E B5 F0 02            177 	cjne	a,b,00120$
   0051 80 17               178 	sjmp 00107$
   0053                     179 00120$:
   0053 8A 82               180 	mov	dpl,r2
   0055 8B 83               181 	mov	dph,r3
   0057 8C 93               182 	mov	dpx,r4
   0059 8D F0               183 	mov	b,r5
   005B 12s00r00r00         184 	lcall	__gptrget
   005F FE                  185 	mov	r6,a
   0060 90s00r00r00         186 	mov	dptr,#_strrchr_PARM_2
   0064 8E F0               187 	mov	b,r6
   0066 E0                  188 	movx	a,@dptr
   0067 B5 F0 C6            189 	cjne a,b,00105$
   006A                     190 00122$:
   006A                     191 00107$:
                            192 ;	_strrchr.c:44: if (*string == ch)                /* char found ? */
   006A 8A 82               193 	mov	dpl,r2
   006C 8B 83               194 	mov	dph,r3
   006E 8C 93               195 	mov	dpx,r4
   0070 8D F0               196 	mov	b,r5
   0072 12s00r00r00         197 	lcall	__gptrget
   0076 FE                  198 	mov	r6,a
   0077 90s00r00r00         199 	mov	dptr,#_strrchr_PARM_2
   007B 8E F0               200 	mov	b,r6
   007D E0                  201 	movx	a,@dptr
   007E B5 F0 0A            202 	cjne a,b,00109$
   0081                     203 00124$:
                            204 ;	_strrchr.c:45: return( (char *)string );
   0081 8A 82               205 	mov	dpl,r2
   0083 8B 83               206 	mov	dph,r3
   0085 8C 93               207 	mov	dpx,r4
   0087 8D F0               208 	mov	b,r5
   0089 80 07               209 	sjmp 00110$
   008B                     210 00109$:
                            211 ;	_strrchr.c:47: return (NULL) ;
   008B 90 00 00 00         212 	mov  dptr,#0x0000
   008F 75 F0 00            213 	mov	b,#0x00
   0092                     214 00110$:
   0092 22                  215 	ret
                            216 	.area CSEG    (CODE)
                            217 	.area CONST   (CODE)
                            218 	.area XINIT   (CODE)
                            219 	.area CABS    (ABS,CODE)
