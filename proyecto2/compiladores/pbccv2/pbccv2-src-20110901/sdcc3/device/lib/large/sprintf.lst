                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:29 2015
                              5 ;--------------------------------------------------------
                              6 	.module sprintf
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _vsprintf_PARM_3
                             13 	.globl _vsprintf_PARM_2
                             14 	.globl _vsprintf
                             15 	.globl _sprintf
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 	.area RSEG    (ABS,DATA)
   0000                      20 	.org 0x0000
                             21 ;--------------------------------------------------------
                             22 ; special function bits
                             23 ;--------------------------------------------------------
                             24 	.area RSEG    (ABS,DATA)
   0000                      25 	.org 0x0000
                             26 ;--------------------------------------------------------
                             27 ; overlayable register banks
                             28 ;--------------------------------------------------------
                             29 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      30 	.ds 8
                             31 ;--------------------------------------------------------
                             32 ; internal ram data
                             33 ;--------------------------------------------------------
                             34 	.area DSEG    (DATA)
                             35 ;--------------------------------------------------------
                             36 ; overlayable items in internal ram 
                             37 ;--------------------------------------------------------
                             38 	.area OSEG    (OVR,DATA)
                             39 ;--------------------------------------------------------
                             40 ; indirectly addressable internal ram data
                             41 ;--------------------------------------------------------
                             42 	.area ISEG    (DATA)
                             43 ;--------------------------------------------------------
                             44 ; absolute internal ram data
                             45 ;--------------------------------------------------------
                             46 	.area IABS    (ABS,DATA)
                             47 	.area IABS    (ABS,DATA)
                             48 ;--------------------------------------------------------
                             49 ; bit data
                             50 ;--------------------------------------------------------
                             51 	.area BSEG    (BIT)
                             52 ;--------------------------------------------------------
                             53 ; paged external ram data
                             54 ;--------------------------------------------------------
                             55 	.area PSEG    (PAG,XDATA)
                             56 ;--------------------------------------------------------
                             57 ; external ram data
                             58 ;--------------------------------------------------------
                             59 	.area XSEG    (XDATA)
   0000                      60 _vsprintf_PARM_2:
   0000                      61 	.ds 3
   0003                      62 _vsprintf_PARM_3:
   0003                      63 	.ds 1
   0004                      64 _vsprintf_buf_1_1:
   0004                      65 	.ds 3
                             66 ;--------------------------------------------------------
                             67 ; absolute external ram data
                             68 ;--------------------------------------------------------
                             69 	.area XABS    (ABS,XDATA)
                             70 ;--------------------------------------------------------
                             71 ; external initialized ram data
                             72 ;--------------------------------------------------------
                             73 	.area XISEG   (XDATA)
                             74 	.area HOME    (CODE)
                             75 	.area GSINIT0 (CODE)
                             76 	.area GSINIT1 (CODE)
                             77 	.area GSINIT2 (CODE)
                             78 	.area GSINIT3 (CODE)
                             79 	.area GSINIT4 (CODE)
                             80 	.area GSINIT5 (CODE)
                             81 	.area GSINIT  (CODE)
                             82 	.area GSFINAL (CODE)
                             83 	.area CSEG    (CODE)
                             84 ;--------------------------------------------------------
                             85 ; global & static initialisations
                             86 ;--------------------------------------------------------
                             87 	.area HOME    (CODE)
                             88 	.area GSINIT  (CODE)
                             89 	.area GSFINAL (CODE)
                             90 	.area GSINIT  (CODE)
                             91 ;--------------------------------------------------------
                             92 ; Home
                             93 ;--------------------------------------------------------
                             94 	.area HOME    (CODE)
                             95 	.area HOME    (CODE)
                             96 ;--------------------------------------------------------
                             97 ; code
                             98 ;--------------------------------------------------------
                             99 	.area CSEG    (CODE)
                            100 ;------------------------------------------------------------
                            101 ;Allocation info for local variables in function 'put_char_to_string'
                            102 ;------------------------------------------------------------
                            103 ;p                         Allocated to stack - offset -5
                            104 ;c                         Allocated to stack - offset 1
                            105 ;buf                       Allocated to registers 
                            106 ;------------------------------------------------------------
                            107 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                            108 ;	-----------------------------------------
                            109 ;	 function put_char_to_string
                            110 ;	-----------------------------------------
   0000                     111 _put_char_to_string:
                    0002    112 	ar2 = 0x02
                    0003    113 	ar3 = 0x03
                    0004    114 	ar4 = 0x04
                    0005    115 	ar5 = 0x05
                    0006    116 	ar6 = 0x06
                    0007    117 	ar7 = 0x07
                    0000    118 	ar0 = 0x00
                    0001    119 	ar1 = 0x01
   0000 C0*00               120 	push	_bp
   0002 85 81*00            121 	mov	_bp,sp
   0005 C0 82               122 	push	dpl
                            123 ;	sprintf.c:36: char **buf = (char **)p;
                            124 ;	sprintf.c:37: *(*buf)++ = c;
   0007 E5*00               125 	mov	a,_bp
   0009 24 FB               126 	add	a,#0xfb
   000B F8                  127 	mov	r0,a
   000C 86 82               128 	mov	dpl,@r0
   000E 08                  129 	inc	r0
   000F 86 83               130 	mov	dph,@r0
   0011 08                  131 	inc	r0
   0012 86 F0               132 	mov	b,@r0
   0014 12s00r00            133 	lcall	__gptrget
   0017 FE                  134 	mov	r6,a
   0018 A3                  135 	inc	dptr
   0019 12s00r00            136 	lcall	__gptrget
   001C FF                  137 	mov	r7,a
   001D A3                  138 	inc	dptr
   001E 12s00r00            139 	lcall	__gptrget
   0021 FA                  140 	mov	r2,a
   0022 74 01               141 	mov	a,#0x01
   0024 2E                  142 	add	a,r6
   0025 FB                  143 	mov	r3,a
   0026 E4                  144 	clr	a
   0027 3F                  145 	addc	a,r7
   0028 FC                  146 	mov	r4,a
   0029 8A 05               147 	mov	ar5,r2
   002B E5*00               148 	mov	a,_bp
   002D 24 FB               149 	add	a,#0xfb
   002F F8                  150 	mov	r0,a
   0030 86 82               151 	mov	dpl,@r0
   0032 08                  152 	inc	r0
   0033 86 83               153 	mov	dph,@r0
   0035 08                  154 	inc	r0
   0036 86 F0               155 	mov	b,@r0
   0038 EB                  156 	mov	a,r3
   0039 12s00r00            157 	lcall	__gptrput
   003C A3                  158 	inc	dptr
   003D EC                  159 	mov	a,r4
   003E 12s00r00            160 	lcall	__gptrput
   0041 A3                  161 	inc	dptr
   0042 ED                  162 	mov	a,r5
   0043 12s00r00            163 	lcall	__gptrput
   0046 8E 82               164 	mov	dpl,r6
   0048 8F 83               165 	mov	dph,r7
   004A 8A F0               166 	mov	b,r2
   004C A8*00               167 	mov	r0,_bp
   004E 08                  168 	inc	r0
   004F E6                  169 	mov	a,@r0
   0050 12s00r00            170 	lcall	__gptrput
   0053 85*00 81            171 	mov	sp,_bp
   0056 D0*00               172 	pop	_bp
   0058 22                  173 	ret
                            174 ;------------------------------------------------------------
                            175 ;Allocation info for local variables in function 'vsprintf'
                            176 ;------------------------------------------------------------
                            177 ;format                    Allocated with name '_vsprintf_PARM_2'
                            178 ;ap                        Allocated with name '_vsprintf_PARM_3'
                            179 ;buf                       Allocated with name '_vsprintf_buf_1_1'
                            180 ;i                         Allocated with name '_vsprintf_i_1_1'
                            181 ;------------------------------------------------------------
                            182 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                            183 ;	-----------------------------------------
                            184 ;	 function vsprintf
                            185 ;	-----------------------------------------
   0059                     186 _vsprintf:
   0059 AA F0               187 	mov	r2,b
   005B AB 83               188 	mov	r3,dph
   005D E5 82               189 	mov	a,dpl
   005F 90s00r04            190 	mov	dptr,#_vsprintf_buf_1_1
   0062 F0                  191 	movx	@dptr,a
   0063 A3                  192 	inc	dptr
   0064 EB                  193 	mov	a,r3
   0065 F0                  194 	movx	@dptr,a
   0066 A3                  195 	inc	dptr
   0067 EA                  196 	mov	a,r2
   0068 F0                  197 	movx	@dptr,a
                            198 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
   0069 90s00r00            199 	mov	dptr,#_vsprintf_PARM_2
   006C E0                  200 	movx	a,@dptr
   006D FA                  201 	mov	r2,a
   006E A3                  202 	inc	dptr
   006F E0                  203 	movx	a,@dptr
   0070 FB                  204 	mov	r3,a
   0071 A3                  205 	inc	dptr
   0072 E0                  206 	movx	a,@dptr
   0073 FC                  207 	mov	r4,a
   0074 90s00r03            208 	mov	dptr,#_vsprintf_PARM_3
   0077 E0                  209 	movx	a,@dptr
   0078 FD                  210 	mov	r5,a
   0079 90s00r00            211 	mov	dptr,#__print_format_PARM_2
   007C 74r04               212 	mov	a,#_vsprintf_buf_1_1
   007E F0                  213 	movx	@dptr,a
   007F A3                  214 	inc	dptr
   0080 74s00               215 	mov	a,#(_vsprintf_buf_1_1 >> 8)
   0082 F0                  216 	movx	@dptr,a
   0083 A3                  217 	inc	dptr
   0084 E4                  218 	clr	a
   0085 F0                  219 	movx	@dptr,a
   0086 90s00r00            220 	mov	dptr,#__print_format_PARM_3
   0089 EA                  221 	mov	a,r2
   008A F0                  222 	movx	@dptr,a
   008B A3                  223 	inc	dptr
   008C EB                  224 	mov	a,r3
   008D F0                  225 	movx	@dptr,a
   008E A3                  226 	inc	dptr
   008F EC                  227 	mov	a,r4
   0090 F0                  228 	movx	@dptr,a
   0091 90s00r00            229 	mov	dptr,#__print_format_PARM_4
   0094 ED                  230 	mov	a,r5
   0095 F0                  231 	movx	@dptr,a
   0096 90s00r00            232 	mov	dptr,#_put_char_to_string
   0099 12s00r00            233 	lcall	__print_format
   009C AA 82               234 	mov	r2,dpl
   009E AB 83               235 	mov	r3,dph
                            236 ;	sprintf.c:45: *buf = 0;
   00A0 90s00r04            237 	mov	dptr,#_vsprintf_buf_1_1
   00A3 E0                  238 	movx	a,@dptr
   00A4 FC                  239 	mov	r4,a
   00A5 A3                  240 	inc	dptr
   00A6 E0                  241 	movx	a,@dptr
   00A7 FD                  242 	mov	r5,a
   00A8 A3                  243 	inc	dptr
   00A9 E0                  244 	movx	a,@dptr
   00AA FE                  245 	mov	r6,a
   00AB 8C 82               246 	mov	dpl,r4
   00AD 8D 83               247 	mov	dph,r5
   00AF 8E F0               248 	mov	b,r6
   00B1 E4                  249 	clr	a
   00B2 12s00r00            250 	lcall	__gptrput
                            251 ;	sprintf.c:46: return i;
   00B5 8A 82               252 	mov	dpl,r2
   00B7 8B 83               253 	mov	dph,r3
   00B9 22                  254 	ret
                            255 ;------------------------------------------------------------
                            256 ;Allocation info for local variables in function 'sprintf'
                            257 ;------------------------------------------------------------
                            258 ;buf                       Allocated to stack - offset -5
                            259 ;format                    Allocated to stack - offset -8
                            260 ;arg                       Allocated to registers r2 
                            261 ;i                         Allocated to registers r2 r3 
                            262 ;------------------------------------------------------------
                            263 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                            264 ;	-----------------------------------------
                            265 ;	 function sprintf
                            266 ;	-----------------------------------------
   00BA                     267 _sprintf:
   00BA C0*00               268 	push	_bp
   00BC 85 81*00            269 	mov	_bp,sp
                            270 ;	sprintf.c:55: va_start (arg, format);
   00BF E5*00               271 	mov	a,_bp
   00C1 24 F8               272 	add	a,#0xf8
   00C3 FA                  273 	mov	r2,a
                            274 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
   00C4 E5*00               275 	mov	a,_bp
   00C6 24 FB               276 	add	a,#0xfb
   00C8 FB                  277 	mov	r3,a
   00C9 7C 00               278 	mov	r4,#0x00
   00CB 7D 40               279 	mov	r5,#0x40
   00CD 90s00r00            280 	mov	dptr,#__print_format_PARM_2
   00D0 EB                  281 	mov	a,r3
   00D1 F0                  282 	movx	@dptr,a
   00D2 A3                  283 	inc	dptr
   00D3 EC                  284 	mov	a,r4
   00D4 F0                  285 	movx	@dptr,a
   00D5 A3                  286 	inc	dptr
   00D6 ED                  287 	mov	a,r5
   00D7 F0                  288 	movx	@dptr,a
   00D8 E5*00               289 	mov	a,_bp
   00DA 24 F8               290 	add	a,#0xf8
   00DC F8                  291 	mov	r0,a
   00DD 90s00r00            292 	mov	dptr,#__print_format_PARM_3
   00E0 E6                  293 	mov	a,@r0
   00E1 F0                  294 	movx	@dptr,a
   00E2 08                  295 	inc	r0
   00E3 A3                  296 	inc	dptr
   00E4 E6                  297 	mov	a,@r0
   00E5 F0                  298 	movx	@dptr,a
   00E6 08                  299 	inc	r0
   00E7 A3                  300 	inc	dptr
   00E8 E6                  301 	mov	a,@r0
   00E9 F0                  302 	movx	@dptr,a
   00EA 90s00r00            303 	mov	dptr,#__print_format_PARM_4
   00ED EA                  304 	mov	a,r2
   00EE F0                  305 	movx	@dptr,a
   00EF 90s00r00            306 	mov	dptr,#_put_char_to_string
   00F2 12s00r00            307 	lcall	__print_format
   00F5 AA 82               308 	mov	r2,dpl
   00F7 AB 83               309 	mov	r3,dph
                            310 ;	sprintf.c:57: *buf = 0;
   00F9 E5*00               311 	mov	a,_bp
   00FB 24 FB               312 	add	a,#0xfb
   00FD F8                  313 	mov	r0,a
   00FE 86 04               314 	mov	ar4,@r0
   0100 08                  315 	inc	r0
   0101 86 05               316 	mov	ar5,@r0
   0103 08                  317 	inc	r0
   0104 86 06               318 	mov	ar6,@r0
   0106 8C 82               319 	mov	dpl,r4
   0108 8D 83               320 	mov	dph,r5
   010A 8E F0               321 	mov	b,r6
   010C E4                  322 	clr	a
   010D 12s00r00            323 	lcall	__gptrput
                            324 ;	sprintf.c:60: return i;
   0110 8A 82               325 	mov	dpl,r2
   0112 8B 83               326 	mov	dph,r3
   0114 D0*00               327 	pop	_bp
   0116 22                  328 	ret
                            329 	.area CSEG    (CODE)
                            330 	.area CONST   (CODE)
                            331 	.area XINIT   (CODE)
                            332 	.area CABS    (ABS,CODE)
