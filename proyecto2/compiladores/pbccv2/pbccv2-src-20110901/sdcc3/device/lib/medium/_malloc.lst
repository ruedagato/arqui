                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:26 2015
                              5 ;--------------------------------------------------------
                              6 	.module _malloc
                              7 	.optsdcc -mmcs51 --model-medium
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __sdcc_first_memheader
                             13 	.globl _malloc
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (ABS,DATA)
   0000                      18 	.org 0x0000
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (ABS,DATA)
   0000                      23 	.org 0x0000
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
                             33 ;--------------------------------------------------------
                             34 ; overlayable items in internal ram 
                             35 ;--------------------------------------------------------
                             36 	.area OSEG    (OVR,DATA)
                             37 ;--------------------------------------------------------
                             38 ; indirectly addressable internal ram data
                             39 ;--------------------------------------------------------
                             40 	.area ISEG    (DATA)
                             41 ;--------------------------------------------------------
                             42 ; absolute internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area IABS    (ABS,DATA)
                             45 	.area IABS    (ABS,DATA)
                             46 ;--------------------------------------------------------
                             47 ; bit data
                             48 ;--------------------------------------------------------
                             49 	.area BSEG    (BIT)
                             50 ;--------------------------------------------------------
                             51 ; paged external ram data
                             52 ;--------------------------------------------------------
                             53 	.area PSEG    (PAG,XDATA)
   0000                      54 __sdcc_first_memheader::
   0000                      55 	.ds 2
   0002                      56 _malloc_size_1_1:
   0002                      57 	.ds 2
   0004                      58 _malloc_current_header_1_1:
   0004                      59 	.ds 2
                             60 ;--------------------------------------------------------
                             61 ; external ram data
                             62 ;--------------------------------------------------------
                             63 	.area XSEG    (XDATA)
                             64 ;--------------------------------------------------------
                             65 ; absolute external ram data
                             66 ;--------------------------------------------------------
                             67 	.area XABS    (ABS,XDATA)
                             68 ;--------------------------------------------------------
                             69 ; external initialized ram data
                             70 ;--------------------------------------------------------
                             71 	.area XISEG   (XDATA)
                             72 	.area HOME    (CODE)
                             73 	.area GSINIT0 (CODE)
                             74 	.area GSINIT1 (CODE)
                             75 	.area GSINIT2 (CODE)
                             76 	.area GSINIT3 (CODE)
                             77 	.area GSINIT4 (CODE)
                             78 	.area GSINIT5 (CODE)
                             79 	.area GSINIT  (CODE)
                             80 	.area GSFINAL (CODE)
                             81 	.area CSEG    (CODE)
                             82 ;--------------------------------------------------------
                             83 ; global & static initialisations
                             84 ;--------------------------------------------------------
                             85 	.area HOME    (CODE)
                             86 	.area GSINIT  (CODE)
                             87 	.area GSFINAL (CODE)
                             88 	.area GSINIT  (CODE)
                             89 ;	_malloc.c:161: MEMHEADER __xdata * _sdcc_first_memheader = NULL;
   0000 78r00                90 	mov	r0,#__sdcc_first_memheader
   0002 E4                   91 	clr	a
   0003 F2                   92 	movx	@r0,a
   0004 08                   93 	inc	r0
   0005 F2                   94 	movx	@r0,a
                             95 ;--------------------------------------------------------
                             96 ; Home
                             97 ;--------------------------------------------------------
                             98 	.area HOME    (CODE)
                             99 	.area HOME    (CODE)
                            100 ;--------------------------------------------------------
                            101 ; code
                            102 ;--------------------------------------------------------
                            103 	.area CSEG    (CODE)
                            104 ;------------------------------------------------------------
                            105 ;Allocation info for local variables in function 'init_dynamic_memory'
                            106 ;------------------------------------------------------------
                            107 ;------------------------------------------------------------
                            108 ;	_malloc.c:166: static void init_dynamic_memory(void)
                            109 ;	-----------------------------------------
                            110 ;	 function init_dynamic_memory
                            111 ;	-----------------------------------------
   0000                     112 _init_dynamic_memory:
                    0002    113 	ar2 = 0x02
                    0003    114 	ar3 = 0x03
                    0004    115 	ar4 = 0x04
                    0005    116 	ar5 = 0x05
                    0006    117 	ar6 = 0x06
                    0007    118 	ar7 = 0x07
                    0000    119 	ar0 = 0x00
                    0001    120 	ar1 = 0x01
                            121 ;	_malloc.c:168: char __xdata * heap = (char __xdata *)_sdcc_heap;
   0000 7Ar00               122 	mov	r2,#__sdcc_heap
   0002 7Bs00               123 	mov	r3,#(__sdcc_heap >> 8)
                            124 ;	_malloc.c:169: unsigned int size = _sdcc_heap_size;
   0004 90s00r00            125 	mov	dptr,#__sdcc_heap_size
   0007 E4                  126 	clr	a
   0008 93                  127 	movc	a,@a+dptr
   0009 FC                  128 	mov	r4,a
   000A 74 01               129 	mov	a,#0x01
   000C 93                  130 	movc	a,@a+dptr
   000D FD                  131 	mov	r5,a
                            132 ;	_malloc.c:171: if ( !heap ) //Reserved memory starts at 0x0000 but that's NULL...
   000E EA                  133 	mov	a,r2
   000F 4B                  134 	orl	a,r3
   0010 70 0A               135 	jnz	00102$
                            136 ;	_malloc.c:173: heap++;
   0012 0A                  137 	inc	r2
   0013 BA 00 01            138 	cjne	r2,#0x00,00107$
   0016 0B                  139 	inc	r3
   0017                     140 00107$:
                            141 ;	_malloc.c:174: size--;
   0017 1C                  142 	dec	r4
   0018 BC FF 01            143 	cjne	r4,#0xff,00108$
   001B 1D                  144 	dec	r5
   001C                     145 00108$:
   001C                     146 00102$:
                            147 ;	_malloc.c:176: _sdcc_first_memheader = (MEMHEADER __xdata * ) heap;
   001C 78r00               148 	mov	r0,#__sdcc_first_memheader
   001E EA                  149 	mov	a,r2
   001F F2                  150 	movx	@r0,a
   0020 08                  151 	inc	r0
   0021 EB                  152 	mov	a,r3
   0022 F2                  153 	movx	@r0,a
                            154 ;	_malloc.c:178: _sdcc_first_memheader->next = (MEMHEADER __xdata * )(heap + size - sizeof(MEMHEADER __xdata *));
   0023 EC                  155 	mov	a,r4
   0024 2A                  156 	add	a,r2
   0025 FC                  157 	mov	r4,a
   0026 ED                  158 	mov	a,r5
   0027 3B                  159 	addc	a,r3
   0028 FD                  160 	mov	r5,a
   0029 EC                  161 	mov	a,r4
   002A 24 FE               162 	add	a,#0xfe
   002C FC                  163 	mov	r4,a
   002D ED                  164 	mov	a,r5
   002E 34 FF               165 	addc	a,#0xff
   0030 FD                  166 	mov	r5,a
   0031 8A 82               167 	mov	dpl,r2
   0033 8B 83               168 	mov	dph,r3
   0035 EC                  169 	mov	a,r4
   0036 F0                  170 	movx	@dptr,a
   0037 A3                  171 	inc	dptr
   0038 ED                  172 	mov	a,r5
   0039 F0                  173 	movx	@dptr,a
                            174 ;	_malloc.c:179: _sdcc_first_memheader->next->next = (MEMHEADER __xdata * ) NULL; //And mark it as last
   003A 8C 82               175 	mov	dpl,r4
   003C 8D 83               176 	mov	dph,r5
   003E E4                  177 	clr	a
   003F F0                  178 	movx	@dptr,a
   0040 A3                  179 	inc	dptr
   0041 F0                  180 	movx	@dptr,a
                            181 ;	_malloc.c:180: _sdcc_first_memheader->len        = 0;    //Empty and ready.
   0042 8A 82               182 	mov	dpl,r2
   0044 8B 83               183 	mov	dph,r3
   0046 A3                  184 	inc	dptr
   0047 A3                  185 	inc	dptr
   0048 E4                  186 	clr	a
   0049 F0                  187 	movx	@dptr,a
   004A A3                  188 	inc	dptr
   004B F0                  189 	movx	@dptr,a
   004C 22                  190 	ret
                            191 ;------------------------------------------------------------
                            192 ;Allocation info for local variables in function 'malloc'
                            193 ;------------------------------------------------------------
                            194 ;------------------------------------------------------------
                            195 ;	_malloc.c:183: void __xdata * malloc (unsigned int size)
                            196 ;	-----------------------------------------
                            197 ;	 function malloc
                            198 ;	-----------------------------------------
   004D                     199 _malloc:
   004D AA 83               200 	mov	r2,dph
   004F E5 82               201 	mov	a,dpl
   0051 78r02               202 	mov	r0,#_malloc_size_1_1
   0053 F2                  203 	movx	@r0,a
   0054 08                  204 	inc	r0
   0055 EA                  205 	mov	a,r2
   0056 F2                  206 	movx	@r0,a
                            207 ;	_malloc.c:189: if (size>(0xFFFF-HEADER_SIZE))
   0057 78r02               208 	mov	r0,#_malloc_size_1_1
   0059 C3                  209 	clr	c
   005A E2                  210 	movx	a,@r0
   005B F5 F0               211 	mov	b,a
   005D 74 FB               212 	mov	a,#0xFB
   005F 95 F0               213 	subb	a,b
   0061 08                  214 	inc	r0
   0062 E2                  215 	movx	a,@r0
   0063 F5 F0               216 	mov	b,a
   0065 74 FF               217 	mov	a,#0xFF
   0067 95 F0               218 	subb	a,b
   0069 50 04               219 	jnc	00102$
                            220 ;	_malloc.c:190: return (void __xdata *) NULL; //To prevent overflow in next line
   006B 90 00 00            221 	mov	dptr,#0x0000
   006E 22                  222 	ret
   006F                     223 00102$:
                            224 ;	_malloc.c:191: size += HEADER_SIZE; //We need a memory for header too
   006F 78r02               225 	mov	r0,#_malloc_size_1_1
   0071 E2                  226 	movx	a,@r0
   0072 24 04               227 	add	a,#0x04
   0074 F2                  228 	movx	@r0,a
   0075 08                  229 	inc	r0
   0076 E2                  230 	movx	a,@r0
   0077 34 00               231 	addc	a,#0x00
   0079 F2                  232 	movx	@r0,a
                            233 ;	_malloc.c:193: if (!_sdcc_first_memheader)
   007A 78r00               234 	mov	r0,#__sdcc_first_memheader
   007C E2                  235 	movx	a,@r0
   007D F5 F0               236 	mov	b,a
   007F 08                  237 	inc	r0
   0080 E2                  238 	movx	a,@r0
   0081 45 F0               239 	orl	a,b
   0083 70 03               240 	jnz	00104$
                            241 ;	_malloc.c:194: init_dynamic_memory();
   0085 12s00r00            242 	lcall	_init_dynamic_memory
   0088                     243 00104$:
                            244 ;	_malloc.c:196: current_header = _sdcc_first_memheader;
   0088 78r00               245 	mov	r0,#__sdcc_first_memheader
   008A 79r04               246 	mov	r1,#_malloc_current_header_1_1
   008C E2                  247 	movx	a,@r0
   008D F3                  248 	movx	@r1,a
   008E 08                  249 	inc	r0
   008F E2                  250 	movx	a,@r0
   0090 09                  251 	inc	r1
   0091 F3                  252 	movx	@r1,a
                            253 ;	_malloc.c:199: while (1)
   0092                     254 00110$:
                            255 ;	_malloc.c:209: if ((((unsigned int)current_header->next) -
   0092 78r04               256 	mov	r0,#_malloc_current_header_1_1
   0094 E2                  257 	movx	a,@r0
   0095 F5 82               258 	mov	dpl,a
   0097 08                  259 	inc	r0
   0098 E2                  260 	movx	a,@r0
   0099 F5 83               261 	mov	dph,a
   009B E0                  262 	movx	a,@dptr
   009C FE                  263 	mov	r6,a
   009D A3                  264 	inc	dptr
   009E E0                  265 	movx	a,@dptr
   009F FF                  266 	mov	r7,a
   00A0 8E 02               267 	mov	ar2,r6
   00A2 8F 03               268 	mov	ar3,r7
                            269 ;	_malloc.c:210: ((unsigned int)current_header) -
   00A4 78r04               270 	mov	r0,#_malloc_current_header_1_1
   00A6 E2                  271 	movx	a,@r0
   00A7 FC                  272 	mov	r4,a
   00A8 08                  273 	inc	r0
   00A9 E2                  274 	movx	a,@r0
   00AA FD                  275 	mov	r5,a
   00AB EA                  276 	mov	a,r2
   00AC C3                  277 	clr	c
   00AD 9C                  278 	subb	a,r4
   00AE FA                  279 	mov	r2,a
   00AF EB                  280 	mov	a,r3
   00B0 9D                  281 	subb	a,r5
   00B1 FB                  282 	mov	r3,a
                            283 ;	_malloc.c:211: current_header->len) >= size)
   00B2 78r04               284 	mov	r0,#_malloc_current_header_1_1
   00B4 E2                  285 	movx	a,@r0
   00B5 24 02               286 	add	a,#0x02
   00B7 F5 82               287 	mov	dpl,a
   00B9 08                  288 	inc	r0
   00BA E2                  289 	movx	a,@r0
   00BB 34 00               290 	addc	a,#0x00
   00BD F5 83               291 	mov	dph,a
   00BF E0                  292 	movx	a,@dptr
   00C0 FC                  293 	mov	r4,a
   00C1 A3                  294 	inc	dptr
   00C2 E0                  295 	movx	a,@dptr
   00C3 FD                  296 	mov	r5,a
   00C4 EA                  297 	mov	a,r2
   00C5 C3                  298 	clr	c
   00C6 9C                  299 	subb	a,r4
   00C7 FA                  300 	mov	r2,a
   00C8 EB                  301 	mov	a,r3
   00C9 9D                  302 	subb	a,r5
   00CA FB                  303 	mov	r3,a
   00CB 78r02               304 	mov	r0,#_malloc_size_1_1
   00CD C3                  305 	clr	c
   00CE E2                  306 	movx	a,@r0
   00CF F5 F0               307 	mov	b,a
   00D1 EA                  308 	mov	a,r2
   00D2 95 F0               309 	subb	a,b
   00D4 08                  310 	inc	r0
   00D5 E2                  311 	movx	a,@r0
   00D6 F5 F0               312 	mov	b,a
   00D8 EB                  313 	mov	a,r3
   00D9 95 F0               314 	subb	a,b
   00DB 40 0D               315 	jc	00106$
                            316 ;	_malloc.c:213: ret = current_header->mem;
   00DD 78r04               317 	mov	r0,#_malloc_current_header_1_1
   00DF E2                  318 	movx	a,@r0
   00E0 24 04               319 	add	a,#0x04
   00E2 FA                  320 	mov	r2,a
   00E3 08                  321 	inc	r0
   00E4 E2                  322 	movx	a,@r0
   00E5 34 00               323 	addc	a,#0x00
   00E7 FB                  324 	mov	r3,a
                            325 ;	_malloc.c:214: break;
   00E8 80 1A               326 	sjmp	00111$
   00EA                     327 00106$:
                            328 ;	_malloc.c:216: current_header = current_header->next;    //else try next
   00EA 78r04               329 	mov	r0,#_malloc_current_header_1_1
   00EC EE                  330 	mov	a,r6
   00ED F2                  331 	movx	@r0,a
   00EE 08                  332 	inc	r0
   00EF EF                  333 	mov	a,r7
   00F0 F2                  334 	movx	@r0,a
                            335 ;	_malloc.c:217: if (!current_header->next)
   00F1 78r04               336 	mov	r0,#_malloc_current_header_1_1
   00F3 E2                  337 	movx	a,@r0
   00F4 F5 82               338 	mov	dpl,a
   00F6 08                  339 	inc	r0
   00F7 E2                  340 	movx	a,@r0
   00F8 F5 83               341 	mov	dph,a
   00FA E0                  342 	movx	a,@dptr
   00FB FC                  343 	mov	r4,a
   00FC A3                  344 	inc	dptr
   00FD E0                  345 	movx	a,@dptr
   00FE FD                  346 	mov	r5,a
   00FF 4C                  347 	orl	a,r4
                            348 ;	_malloc.c:219: ret = (void __xdata *) NULL;
   0100 70 90               349 	jnz	00110$
   0102 FA                  350 	mov	r2,a
   0103 FB                  351 	mov	r3,a
                            352 ;	_malloc.c:220: break;
   0104                     353 00111$:
                            354 ;	_malloc.c:223: if (ret)
   0104 EA                  355 	mov	a,r2
   0105 4B                  356 	orl	a,r3
   0106 60 68               357 	jz	00116$
                            358 ;	_malloc.c:225: if (!current_header->len)
   0108 78r04               359 	mov	r0,#_malloc_current_header_1_1
   010A E2                  360 	movx	a,@r0
   010B 24 02               361 	add	a,#0x02
   010D FC                  362 	mov	r4,a
   010E 08                  363 	inc	r0
   010F E2                  364 	movx	a,@r0
   0110 34 00               365 	addc	a,#0x00
   0112 FD                  366 	mov	r5,a
   0113 8C 82               367 	mov	dpl,r4
   0115 8D 83               368 	mov	dph,r5
   0117 E0                  369 	movx	a,@dptr
   0118 FE                  370 	mov	r6,a
   0119 A3                  371 	inc	dptr
   011A E0                  372 	movx	a,@dptr
   011B FF                  373 	mov	r7,a
   011C 4E                  374 	orl	a,r6
   011D 70 0E               375 	jnz	00113$
                            376 ;	_malloc.c:227: current_header->len = size; //for first allocation
   011F 8C 82               377 	mov	dpl,r4
   0121 8D 83               378 	mov	dph,r5
   0123 78r02               379 	mov	r0,#_malloc_size_1_1
   0125 E2                  380 	movx	a,@r0
   0126 F0                  381 	movx	@dptr,a
   0127 A3                  382 	inc	dptr
   0128 08                  383 	inc	r0
   0129 E2                  384 	movx	a,@r0
   012A F0                  385 	movx	@dptr,a
   012B 80 43               386 	sjmp	00116$
   012D                     387 00113$:
                            388 ;	_malloc.c:231: new_header = (MEMHEADER __xdata * )((char __xdata *)current_header + current_header->len);
   012D 78r04               389 	mov	r0,#_malloc_current_header_1_1
   012F E2                  390 	movx	a,@r0
   0130 2E                  391 	add	a,r6
   0131 FE                  392 	mov	r6,a
   0132 08                  393 	inc	r0
   0133 E2                  394 	movx	a,@r0
   0134 3F                  395 	addc	a,r7
   0135 FF                  396 	mov	r7,a
                            397 ;	_malloc.c:232: new_header->next = current_header->next; //and plug it into the chain
   0136 78r04               398 	mov	r0,#_malloc_current_header_1_1
   0138 E2                  399 	movx	a,@r0
   0139 F5 82               400 	mov	dpl,a
   013B 08                  401 	inc	r0
   013C E2                  402 	movx	a,@r0
   013D F5 83               403 	mov	dph,a
   013F E0                  404 	movx	a,@dptr
   0140 FC                  405 	mov	r4,a
   0141 A3                  406 	inc	dptr
   0142 E0                  407 	movx	a,@dptr
   0143 FD                  408 	mov	r5,a
   0144 8E 82               409 	mov	dpl,r6
   0146 8F 83               410 	mov	dph,r7
   0148 EC                  411 	mov	a,r4
   0149 F0                  412 	movx	@dptr,a
   014A A3                  413 	inc	dptr
   014B ED                  414 	mov	a,r5
   014C F0                  415 	movx	@dptr,a
                            416 ;	_malloc.c:233: current_header->next  = new_header;
   014D 78r04               417 	mov	r0,#_malloc_current_header_1_1
   014F E2                  418 	movx	a,@r0
   0150 F5 82               419 	mov	dpl,a
   0152 08                  420 	inc	r0
   0153 E2                  421 	movx	a,@r0
   0154 F5 83               422 	mov	dph,a
   0156 EE                  423 	mov	a,r6
   0157 F0                  424 	movx	@dptr,a
   0158 A3                  425 	inc	dptr
   0159 EF                  426 	mov	a,r7
   015A F0                  427 	movx	@dptr,a
                            428 ;	_malloc.c:234: new_header->len  = size; //mark as used
   015B 8E 82               429 	mov	dpl,r6
   015D 8F 83               430 	mov	dph,r7
   015F A3                  431 	inc	dptr
   0160 A3                  432 	inc	dptr
   0161 78r02               433 	mov	r0,#_malloc_size_1_1
   0163 E2                  434 	movx	a,@r0
   0164 F0                  435 	movx	@dptr,a
   0165 A3                  436 	inc	dptr
   0166 08                  437 	inc	r0
   0167 E2                  438 	movx	a,@r0
   0168 F0                  439 	movx	@dptr,a
                            440 ;	_malloc.c:235: ret = new_header->mem;
   0169 74 04               441 	mov	a,#0x04
   016B 2E                  442 	add	a,r6
   016C FA                  443 	mov	r2,a
   016D E4                  444 	clr	a
   016E 3F                  445 	addc	a,r7
   016F FB                  446 	mov	r3,a
   0170                     447 00116$:
                            448 ;	_malloc.c:239: return ret;
   0170 8A 82               449 	mov	dpl,r2
   0172 8B 83               450 	mov	dph,r3
   0174 22                  451 	ret
                            452 	.area CSEG    (CODE)
                            453 	.area CONST   (CODE)
                            454 	.area XINIT   (CODE)
                            455 	.area CABS    (ABS,CODE)
