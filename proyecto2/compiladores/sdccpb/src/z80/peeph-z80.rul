/* Generated file, DO NOT Edit!  */
/* To Make changes to rules edit */
/* <port>/peeph.def instead.     */
"\n"
"replace restart {\n"
"	ld	%1,%1\n"
"} by {\n"
"	; peephole -1 removed redundant load.\n"
"} if notVolatile(%1)\n"
"\n"
"\n"
"replace restart {\n"
"	ld	%1,%2\n"
"} by {\n"
"	; peephole 0a removed dead load from %2 into %1.\n"
"} if notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,%2\n"
"	ld	a,%1\n"
"} by {\n"
"	; peephole 0b loaded %2 into a directly instead of going through %1.\n"
"	ld	a,%2\n"
"} if notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,%2 (%3)\n"
"	ld	a,%1\n"
"} by {\n"
"	; peephole 0c loaded %2 (%3) into a directly instead of going through %1.\n"
"	ld	a,%2 (%3)\n"
"} if notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	a,%3 (%1)\n"
"} by {\n"
"	; peephole 0d loaded %2 into a directly instead of going through %1.\n"
"	ld	a,(#%2 + %3)\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	srl	%1\n"
"	ld	a,%1\n"
"} by {\n"
"	ld	a,%1\n"
"	; peephole 0e shifted in a instead of %1.\n"
"	srl	a\n"
"} if notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,(hl)\n"
"	ld	a,%2 (%3)\n"
"	sub	a,%1\n"
"} by {\n"
"	ld	a,%2 (%3)\n"
"	; peephole 0f used (hl) in sub directly instead of going through %1.\n"
"	sub	a,(hl)\n"
"} if notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	inc	de\n"
"	inc	de\n"
"	ld	l,e\n"
"	ld	h,d\n"
"} by {\n"
"	ld	l,e\n"
"	ld	h,d\n"
"	; peephole 0g incremented in hl instead of de.\n"
"	inc	hl\n"
"	inc	hl\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	inc	de\n"
"	ld	l,e\n"
"	ld	h,d\n"
"} by {\n"
"	ld	l,e\n"
"	ld	h,d\n"
"	; peephole 0h incremented in hl instead of de.\n"
"	inc	hl\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	ld	e,%1\n"
"	ld	d,%2\n"
"	ld	l,e\n"
"	ld	h,d\n"
"} by {\n"
"	; peephole 0i loaded %2%1 into hl directly instead of going through de.\n"
"	ld	l,%1\n"
"	ld	h,%2\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	ld	bc,#%2 + %3\n"
"	ld	a,(bc)\n"
"	ld	c,a\n"
"} by {\n"
"	; peephole 0j used hl for #%2 + %3 instead of bc, not going through a.\n"
"	ld	hl,#%2 + %3\n"
"	ld	c,(hl)\n"
"} if notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ex	de,hl\n"
"	push	hl\n"
"} by {\n"
"	; peephole 0k pushed de directly instead of going through hl.\n"
"	push	de\n"
"} if notUsed('de'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ex	de,hl\n"
"	push	de\n"
"} by {\n"
"	; peephole 0k' pushed de directly instead of going through hl.\n"
"	push	hl\n"
"} if notUsed('de'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ex	de,hl\n"
"	push	bc\n"
"	push	de\n"
"} by {\n"
"	; peephole 0l pushed hl directly instead of going through de.\n"
"	push	bc\n"
"	push	hl\n"
"} if notUsed('de'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	l,c\n"
"	ld	h,b\n"
"	push	hl\n"
"} by {\n"
"	; peephole 0m pushed bc directly instead of going through hl.\n"
"	push	bc\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	c,a\n"
"	push	de\n"
"	ld	a,c\n"
"} by {\n"
"	; peephole 0n removed redundant load of a through c.\n"
"	push	de\n"
"} if notUsed('c')\n"
"\n"
"replace restart {\n"
"	ld	c,e\n"
"	ld	b,d\n"
"	ld	a,(bc)\n"
"} by {\n"
"	; peephole 0o used de directly instead of going through bc.\n"
"	ld	a,(de)\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	pop	de\n"
"	ld	l,e\n"
"	ld	h,d\n"
"} by {\n"
"	; peephole 0p popped hl directly instead of going through de.\n"
"	pop	hl\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	%2 (%3),%1\n"
"} by {\n"
"	; peephole 0q loaded a into %2 (%3) directly instead of going through %1.\n"
"	ld	%2 (%3),a\n"
"} if notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1 (ix),%2\n"
"	ld	%3, %1 (ix)\n"
"} by {\n"
"	; peephole 0r loaded %3 from %2 instead of going through %1 (ix).\n"
"	ld	%1 (ix),%2\n"
"	ld	%3, %2\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"	ld	b, %1\n"
"} by {\n"
"	; peephole 0s loaded b from %2 (%3) instead of going through %1.\n"
"	ld	b, %2 (%3)\n"
"} if notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	%2,%3\n"
"	ld	%4,%1\n"
"} by {\n"
"	; peephole 0t loaded %4 from a instead of going through %1.\n"
"	ld	%1,a\n"
"	ld	%2,%3\n"
"	ld	%4,a\n"
"} if notVolatile(%1), operandsNotRelated(%1 %3), operandsNotRelated(%1 %2)\n"
"\n"
"replace restart {\n"
"	ld	%1,(hl)\n"
"	ld	e,%1\n"
"} by {\n"
"	; peephole 0u loaded e from (hl) instead of going through %1.\n"
"	ld	e,(hl)\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,l\n"
"	ld	%2 (%3),%1\n"
"} by {	\n"
"	; peephole 0v loaded %2 (%3) from l instead of going through %1.\n"
"	ld	%2 (%3),l\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	l,%1 (ix)\n"
"	ld	h,%2 (ix)\n"
"	ld	%3,(hl)\n"
"	srl	%3\n"
"	ld	l,%1 (ix)\n"
"	ld	h,%2 (ix)\n"
"	ld	(hl),%3\n"
"} by {	\n"
"	ld	l,%1 (ix)\n"
"	ld	h,%2 (ix)\n"
"	; peephole 0w shifted (hl) in place.\n"
"	srl	(hl)\n"
"	ld	%3,(hl)\n"
"} if notVolatile(%3)\n"
"\n"
"replace restart {\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a,e\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; peephole 0x pushed de instead of pushing a twice.\n"
"	ld	d,a\n"
"	push	de\n"
"} if notUsed('d'), notUsed('a')\n"
"\n"
"replace restart {\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a,c\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; peephole 0y pushed bc instead of pushing a twice.\n"
"	ld	b,a\n"
"	push	bc\n"
"} if notUsed('b'), notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	a,#%1\n"
"	ld	d,a\n"
"} by {\n"
"	; peephole 0z loaded #%1 into d directly instead of going through a.\n"
"	ld	d,#%1\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	a,%1 (ix)\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a,%2 (ix)\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; peephole 0za pushed %1 (ix), %2(ix) through hl instead of af.\n"
"	ld	h,%1 (ix)\n"
"	ld	l,%2 (ix)\n"
"	push	hl\n"
"} if notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	c,l\n"
"	ld	b,h\n"
"	push	bc\n"
"} by {\n"
"	; peephole 0zb pushed hl instead of bc.\n"
"	push	hl\n"
"} if notUsed('bc')\n"
"\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	or	a,%2 (iy)\n"
"} by {\n"
"	; peephole 0zd used hl instead of iy.\n"
"	ld	hl,#%1 + %2\n"
"	or	a,(hl)\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	ld	%2,%3 (%4)\n"
"} by {\n"
"	; peephole 0ze used hl instead of iy.\n"
"	ld	hl,#%1 + %3\n"
"	ld	%2,(hl)\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	ld	%2 (%3), %4\n"
"} by {\n"
"	; peephole 0zf used hl instead of iy.\n"
"	ld	hl,#%1 + %2\n"
"	ld	(hl), %4\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	e,l\n"
"	ld	d,h\n"
"	ld	%1,(de)\n"
"} by {\n"
"	; peephole 0zg loaded %1 from (hl) directly instead of going through (de).\n"
"	ld	%1,(hl)\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	ld	c,l\n"
"	ld	b,h\n"
"	ld	%1,(bc)\n"
"} by {\n"
"	; peephole 0zh loaded %1 from (hl) directly instead of going through (bc).\n"
"	ld	%1,(hl)\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	c,l\n"
"	ld	b,h\n"
"	inc	bc\n"
"} by {\n"
"	; peephole 0zi incremented in hl instead of bc.\n"
"	inc	hl\n"
"	ld	c,l\n"
"	ld	b,h\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	a,%1 (%2)\n"
"	bit	%3,a\n"
"} by {\n"
"	; peephole 0zj tested bit of %1 (%2) directly instead of going through a.\n"
"	bit	%3,%1 (%2)\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	bc, #%1 + %2\n"
"	ld	l,c\n"
"	ld	h,b\n"
"} by {\n"
"	; peephole 0zk stored constant #%1 + %2 into hl directly instead of going through bc.\n"
"	ld	hl, #%1 + %2\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	jp	NC,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	C,%2\n"
"	; peephole 3 removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	C,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	NC,%2\n"
"	; peephole 4 removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	NZ,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	Z,%2\n"
"	; peephole 5 removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	Z,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	NZ,%2\n"
"	; peephole 6 removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	jp	%6\n"
"	; peephole 7 redirected jump-to-jump at %5 by jump to %6\n"
"} if labelIsUncondJump(), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jp	%1,%5\n"
"} by {\n"
"	jp	%1,%6\n"
"	; peephole 8 redirected jump-to-jump at %5 by jump to %6\n"
"} if labelIsUncondJump(), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	xor	a,a\n"
"	ld	a,#0x00\n"
"} by {\n"
"	xor	a,a\n"
"	; peephole 10 removed redundant load of 0 into a.\n"
"}\n"
"\n"
"replace {\n"
"	ld	e,#0x%1\n"
"	ld	d,#0x%2\n"
"} by {\n"
"	ld	de,#0x%2%1\n"
"	; peephole 11 combined constant loads into register pair.\n"
"}\n"
"\n"
"replace {\n"
"	ld	l,#0x%1\n"
"	ld	h,#0x%2\n"
"} by {\n"
"	ld	hl,#0x%2%1\n"
"	; peephole 12 combined constant loads into register pair.\n"
"}\n"
"\n"
"replace {\n"
"	ld	c,#0x%1\n"
"	ld	b,#0x%2\n"
"} by {\n"
"	ld	bc,#0x%2%1\n"
"	; peephole 13 combined constant loads into register pair.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	a,%1\n"
"} by {\n"
"	ld	%1,a\n"
"	; peephole 14 removed redundant load from %1 into a.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	a,%1\n"
"	ld	%1,a\n"
"} by {\n"
"	ld	a,%1\n"
"	; peephole 15 removed redundant load from a into %1.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	a,%2\n"
"	or	a,%1\n"
"} by {\n"
"	ld	%1,a\n"
"	or	a,%2\n"
"	; peephole 17 removed load by reordering or arguments.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	xor	a,a\n"
"	or	a,%1\n"
"} by {\n"
"	ld	%1,a\n"
"	or	a,a\n"
"	; peephole 18 used value still in a instead of loading it from %1.\n"
"}\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	or	a,a\n"
"} by {\n"
"	or	a,%1\n"
"	; peephole 19 removed redundant or after or.\n"
"}\n"
"\n"
"replace restart {\n"
"	or	a,%1 (%2)\n"
"	or	a,a\n"
"} by {\n"
"	or	a,%1 (%2)\n"
"	; peephole 19a removed redundant or after or.\n"
"}\n"
"\n"
"replace restart {\n"
"	and	a,%1\n"
"	or	a,a\n"
"} by {\n"
"	and	a,%1\n"
"	; peephole 20 removed redundant or after and.\n"
"}\n"
"\n"
"replace restart {\n"
"	and	a,%1 (%2)\n"
"	or	a,a\n"
"} by {\n"
"	and	a,%1 (%2)\n"
"	; peephole 20a removed redundant or after and.\n"
"}\n"
"\n"
"replace restart {\n"
"	xor	a,%1\n"
"	or	a,a\n"
"} by {\n"
"	xor	a,%1\n"
"	; peephole 21 removed redundant or after xor.\n"
"}\n"
"\n"
"replace restart {\n"
"	xor	a,%1 (%2)\n"
"	or	a,a\n"
"} by {\n"
"	xor	a,%1 (%2)\n"
"	; peephole 21a removed redundant or after xor.\n"
"}\n"
"\n"
"replace {\n"
"	ld	%1,%2\n"
"	ld	a,%2\n"
"} by {\n"
"	ld	a,%2\n"
"	ld	%1,a\n"
"	; peephole 23 load value in a first and use it next\n"
"} if notVolatile(%1 %2)\n"
"\n"
"replace restart {\n"
"	ld	%1,%2\n"
"	ld	%3,%4\n"
"	ld	%2,%1\n"
"	ld	%4,%3\n"
"} by {\n"
"	ld	%1,%2\n"
"	ld	%3,%4\n"
"	; peephole 24 removed redundant load from %3%1 into %4%2\n"
"} if notVolatile(%1 %2 %3 %4)\n"
"\n"
"replace restart {\n"
"	ld	a,c\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a,#%2\n"
"	push	af\n"
"	inc	sp\n"
"	call	%3\n"
"} by {\n"
"	ld	b,c\n"
"	ld	c,#%2\n"
"	push	bc\n"
"	; peephole 31 moved and pushed arguments c and #%2 through bc instead of pushing them individually.\n"
"	call	%3\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a,e\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a,#%2\n"
"	push	af\n"
"	inc	sp\n"
"	call	%3\n"
"} by {\n"
"	ld	d,e\n"
"	ld	e,#%2\n"
"	push	de\n"
"	; peephole 32 moved and pushed arguments e and #%2 through de instead of pushing them individually.\n"
"	call	%3\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a,%1\n"
"	sub	a,%2\n"
"	jp	%3,%4\n"
"	ld	a,%1\n"
"} by {\n"
"	ld	a,%1\n"
"	cp	a,%2\n"
"	jp	%3,%4\n"
"	; peephole 33 removed load by replacing sub with cp\n"
"	assert	a=%1\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	assert	a=%1\n"
"	sub	a,%2\n"
"	jp	%3,%4\n"
"	ld	a,%1\n"
"} by {\n"
"	cp	a,#%2\n"
"	jp	%3,%4\n"
"	; peephole 34 removed load by replacing sub with cp\n"
"	assert	a=%1\n"
"}\n"
"\n"
"replace restart {\n"
"	assert	a=%1\n"
"} by {\n"
"}\n"
"\n"
"replace restart {\n"
"	sub	a,#0xFF\n"
"	jp	Z,%1\n"
"} by {\n"
"	inc	a\n"
"	; peephole 35 replaced sub a,#0xFF by inc a.\n"
"	jp	Z,%1\n"
"}\n"
"\n"
"replace restart {\n"
"	sub	a,#0xFF\n"
"	jp	NZ,%1\n"
"} by {\n"
"	inc	a\n"
"	; peephole 36 replaced sub a,#0xFF by inc a.\n"
"	jp	NZ,%1\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	bc,#%1 + %2\n"
"	ld	a,c\n"
"	add	a,%3\n"
"	ld	c,a\n"
"	ld	a,b\n"
"	adc	a,%4\n"
"	ld	b,a\n"
"} by {\n"
"	ld	a,#<(%1 + %2)\n"
"	add	a,%3\n"
"	ld	c,a\n"
"	ld	a,#>(%1 + %2)\n"
"	; peephole 37 directly used (%1 + %2) in calculation instead of placing it in bc first.\n"
"	adc	a,%4\n"
"	ld	b,a\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	de,#%1 + %2\n"
"	ld	a,e\n"
"	add	a,%3\n"
"	ld	e,a\n"
"	ld	a,d\n"
"	adc	a,%4\n"
"	ld	d,a\n"
"} by {\n"
"	ld	a,#<(%1 + %2)\n"
"	add	a,%3\n"
"	ld	e,a\n"
"	ld	a,#>(%1 + %2)\n"
"	; peephole 38 directly used (%1 + %2) in calculation instead of placing it in de first.\n"
"	adc	a,%4\n"
"	ld	d,a\n"
"}\n"
"\n"
"replace restart {\n"
"	rlca\n"
"	ld	a,#0x00\n"
"	rla\n"
"} by {\n"
"	rlca\n"
"	and	a,#0x01\n"
"	; peephole 39 replaced zero load, rla by and since rlca writes the same value to carry bit and least significant bit.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,%2\n"
"	push	%1\n"
"	pop	%4\n"
"	ld	%1,%3\n"
"} by {\n"
"	ld	%4,%2\n"
"	; peephole 40 moved %2 directly into de instead of going through %1.\n"
"	ld	%1,%3\n"
"}\n"
"\n"
"replace restart {\n"
"	add	a,#0x00\n"
"	ld	%2,a\n"
"	ld	a,%3\n"
"	adc	a,%4\n"
"} by {\n"
"	; peephole 41 removed lower part of multibyte addition.\n"
"	ld	%2,a\n"
"	ld	a,%3\n"
"	add	a,%4\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	a,%2\n"
"	add	a,%1\n"
"} by {\n"
"	; peephole 42 removed loads by exploiting commutativity of addition.\n"
"	add	a,%2\n"
"} if notVolatile(%1), notUsed(%1), operandsNotRelated(%2 '(bc)' '(de)')\n"
"\n"
"replace restart {\n"
"	ld	%1 (ix),a\n"
"	ld	a,#%2\n"
"	add	a,%1 (ix)\n"
"} by {\n"
"	ld	%1 (ix),a\n"
"	; peephole 42a removed loads by exploiting commutativity of addition.\n"
"	add	a,#%2\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1, a\n"
"	sla	%1\n"
"	ld	a, %2\n"
"	//add	%3, %4\n"
"} by {\n"
"	add	a, a\n"
"	; peephole 42b shifts in accumulator insted of %1\n"
"	ld	%1, a\n"
"	ld	a, %2\n"
"	//add	%3, %4\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	a,%2\n"
"	add	a,%1\n"
"} by {\n"
"	ld	%1, a\n"
"	; peephole 43 removed load by exploiting commutativity of addition.\n"
"	add	a,%2\n"
"} if operandsNotRelated(%2 '(bc)' '(de)')\n"
"\n"
"replace restart {\n"
"	ld	c,l\n"
"	ld	b,h\n"
"	ld	hl,#%1\n"
"	add	hl,bc\n"
"} by {\n"
"	; peephole 43a removed loads by exploiting commutativity of addition.\n"
"	ld	bc,#%1\n"
"	add	hl,bc\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	add	hl,%2\n"
"	ld	bc,#%4\n"
"	add	hl,bc\n"
"} by {\n"
"	; peephole 43b removed loads by exploiting commutativity of addition.\n"
"	ld	hl,#%1 + %4\n"
"	add	hl,%2\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	c,e\n"
"	ld	b,d\n"
"	ld	hl,#%1\n"
"	add	hl,bc\n"
"} by {\n"
"	; peephole 43c removed loads by exploiting commutativity of addition.\n"
"	ld	hl,#%1\n"
"	add	hl,de\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	xor	a,a\n"
"	or	a,%3\n"
"} by {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	; peephole 44 removed redundant zeroing of a (which has just been tested to be #0x00).\n"
"	or	a,%3\n"
"}\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,#0x00\n"
"} by {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,a\n"
"	; peephole 45 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	and	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,#0x00\n"
"} by {\n"
"	and	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,a\n"
"	; peephole 46 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,#0x00\n"
"} by {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,a\n"
"	; peephole 47 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	dec	a\n"
"	jp	NZ,%1\n"
"	ld	%2,#0x00\n"
"} by {\n"
"	dec	a\n"
"	jp	NZ,%1\n"
"	ld	%2,a\n"
"	; peephole 48 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"\n"
"\n"
"replace restart {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	ld	a,%3\n"
"	or	a,a\n"
"} by {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	or	a,%3\n"
"	; peephole 51 shortened or using a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	dec	a\n"
"	jp	NZ,%1\n"
"	ld	a,%2\n"
"	or	a,a\n"
"} by {\n"
"	dec	a\n"
"	jp	NZ,%1\n"
"	or	a,%2\n"
"	; peephole 52 shortened or using a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	push	%3\n"
"	ld	%4,#0x00\n"
"} by {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	push	%3\n"
"	ld	%4,a\n"
"	; peephole 53 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	and	a,%1\n"
"	jp	NZ,%2\n"
"	push	%3\n"
"	ld	%4,#0x00\n"
"} by {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	push	%3\n"
"	ld	%4,a\n"
"	; peephole 54 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	push	%3\n"
"	ld	%4,#0x00\n"
"} by {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	push	%3\n"
"	ld	%4,a\n"
"	; peephole 55 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	dec	a\n"
"	jp	NZ,%1\n"
"	push	%2\n"
"	ld	%3,#0x00\n"
"} by {\n"
"	dec	a\n"
"	jp	NZ,%1\n"
"	push	%2\n"
"	ld	%3,a\n"
"	; peephole 56 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	de,#%1 + %2\n"
"	inc	de\n"
"} by {\n"
"	ld	de,#%1 + %2+1\n"
"	; peephole 59 moved increment of de to constant.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	bc,#%1 + %2\n"
"	inc	bc\n"
"} by {\n"
"	ld	bc,#%1 + %2+1\n"
"	; peephole 62 moved increment of bc to constant.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	bc,#%1\n"
"	ld	a,c\n"
"	add	a,#0x%2\n"
"	ld	c,a\n"
"	ld	a,b\n"
"	adc	a,#0x%3\n"
"	ld	b,a\n"
"} by {\n"
"	ld	bc,#%1 + 0x%3%2\n"
"	; peephole 63 moved addition of constant 0x%3%2 to bc to constant.\n"
"}\n"
"\n"
"replace restart {\n"
"	call	%1\n"
"	ret\n"
"} by {\n"
"	jp	%1\n"
"	; peephole 65 replaced call at end of function by jump.\n"
"}\n"
"\n"
"replace restart {\n"
"	call	%1\n"
"	pop	ix\n"
"	ret\n"
"} by {\n"
"	pop	ix\n"
"	jp	%1\n"
"	; peephole 66 replaced call at end of function by jump moving call beyond pop ix.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	%2,%1\n"
"	ld	%3,%1\n"
"} by {\n"
"	; peephole 67 loaded %2, %3 from a instead of %1.\n"
"	ld	%1,a\n"
"	ld	%2,a\n"
"	ld	%3,a\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	%2,a\n"
"	ld	%3,%1\n"
"} by {\n"
"	ld	%1,a\n"
"	ld	%2,a\n"
"	; peephole 68 loaded %3 from a instead of %1.\n"
"	ld	%3,a\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,l\n"
"	xor	a,a\n"
"	or	a,%1\n"
"} by {	\n"
"	ld	%1,l\n"
"	xor	a,a\n"
"	; peephole 69 used l in or instead of %1.\n"
"	or	a,l\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	%3,%4\n"
"	ld	%1,#%2\n"
"} by {\n"
"	ld	%1,#%2\n"
"	ld	%3,%4\n"
"	; peephole 70 removed load of #%2 into %1 since it's still there.\n"
"} if notVolatile(%1), operandsNotRelated(%3 %1)\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	ld	de,#%1\n"
"} by {\n"
"	; peephole 70a used #%1 from hl for load into de.\n"
"	ld	hl,#%1\n"
"	ld	e,l\n"
"	ld	d,h\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	push	hl\n"
"	ld	l,e\n"
"	ld	h,d\n"
"	jp	(hl)\n"
"%1:\n"
"} by {\n"
"	; peephole 71 used ex to get de into hl.\n"
"	ex	de,hl\n"
"	ld	de,#%1\n"
"	push	de\n"
"	jp	(hl)\n"
"%1:\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1 (ix),l\n"
"	ld	%2 (ix),h\n"
"	ld	%3,%1 (ix)\n"
"	ld	%4,%2 (ix)\n"
"} by {	\n"
"	ld	%1 (ix),l\n"
"	ld	%2 (ix),h\n"
"	; peephole 72 used hl instead of %2 (ix), %1 (ix) to load %4%3.\n"
"	ld	%3,l\n"
"	ld	%4,h\n"
"} if operandsNotRelated('h' %3)\n"
"\n"
"replace restart {\n"
"	ld	d,h\n"
"	ld	e,l\n"
"} by {\n"
"	; peephole 73 used ex to load hl into de.\n"
"	ex	de,hl\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	e,l\n"
"	ld	d,h\n"
"} by {\n"
"	; peephole 74 used ex to load hl into de.\n"
"	ex	de,hl\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	l,e\n"
"	ld	h,d\n"
"} by {\n"
"	; peephole 75 used ex to load de into hl.\n"
"	ex	de,hl\n"
"} if notUsed('de')\n"
"\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	a,%3 (%1)\n"
"	ld	%4,a\n"
"	ld	%1,#%5\n"
"} by {\n"
"	ld	a,(#%2 + %3)\n"
"	; peephole z1 used #%2 directly instead of going through %1 using indirect addressing.\n"
"	ld	%4,a\n"
"	ld	%1,#%5\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	%3 (%1),a\n"
"%4:\n"
"	ld	%1,%5\n"
"} by {\n"
"	ld	(#%2 + %3),a\n"
"	; peephole z2 directly used #%2 instead of going through %1 using indirect addressing.\n"
"%4:\n"
"	ld	%1,%5\n"
"}\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	ld	%1,#%2\n"
"	ld	%3 (%1),%4\n"
"	ld	%1,#%5\n"
"} by {\n"
"	ld	a,%4\n"
"	ld	(#%2 + %3),a\n"
"	; peephole z3 used #%2 directly instead of going through %1 using indirect addressing.\n"
"	pop	af\n"
"	ld	%1,#%5\n"
"} if operandsNotRelated(%3 'a')\n"
"\n"
"replace restart {\n"
"	ld	bc,#%1 + %2\n"
"	ld	a,%3\n"
"	ld	(bc),a\n"
"} by {\n"
"	ld	a,%3\n"
"	ld	(#%1 + %2),a\n"
"	; peephole z4 directly used address #%1 + %2 instead of placing it in bc first.\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	bc,#%1 + %2 + %6\n"
"	ld	a,%3\n"
"	ld	(bc),a\n"
"} by {\n"
"	ld	a,%3\n"
"	ld	(#%1 + %2 + %6),a\n"
"	; peephole z5 directly used address #%1 + %2 + %6 instead of placing it in bc first.\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	c,%1\n"
"	ld	l,c\n"
"	ret\n"
"} by {\n"
"	ld	l,%1\n"
"	; peephole z8 moved %1 directly into l instead of going through c.\n"
"	ret\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	b,h\n"
"	ld	c,l\n"
"	pop	af\n"
"	push	bc\n"
"	call	%1\n"
"} by {\n"
"	ex	(sp),hl\n"
"	; peephole z9 moved hl directly to the stack instead of going through bc.\n"
"	call	%1\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	d,h\n"
"	ld	e,l\n"
"	pop	af\n"
"	push	de\n"
"	call	%1\n"
"} by {\n"
"	ex	(sp),hl\n"
"	; peephole z10 moved hl directly to the stack instead of going through de.\n"
"	call	%1\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	ret\n"
"	; peephole z11 replaced jump by return.\n"
"} if labelIsReturnOnly(), labelRefCountChange(%5 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1,%5\n"
"} by {\n"
"	ret	%1\n"
"	; peephole z11a replaced jump by return.\n"
"} if labelIsReturnOnly(), labelRefCountChange(%5 -1)\n"
"\n"
"replace restart {\n"
"%1:\n"
"} by {\n"
"	; peephole z12 removed unused label %1.\n"
"} if labelRefCount(%1 0)\n"
"\n"
"replace {\n"
"	jp	%5\n"
"	ret\n"
"} by {\n"
"	jp	%5\n"
"	; peephole z13 removed unused ret.\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	NC,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	C,%2\n"
"	; peephole 5' removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	C,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	NC,%2\n"
"	; peephole 5' removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	NZ,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	Z,%2\n"
"	; peephole 5' removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	Z,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	NZ,%2\n"
"	; peephole 6' removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jp	%5\n"
"} by {\n"
"	jr	%5\n"
"	; peephole z14 changed absolute to relative unconditional jump.\n"
"} if labelInRange()\n"
"\n"
"replace {\n"
"	jp	Z,%5\n"
"} by {\n"
"	jr	Z,%5\n"
"	; peephole z15 changed absolute to relative conditional jump.\n"
"} if labelInRange()\n"
"\n"
"replace {\n"
"	jp	NZ,%5\n"
"} by {\n"
"	jr	NZ,%5\n"
"	; peephole z16 changed absolute to relative conditional jump.\n"
"} if labelInRange()\n"
"\n"
"replace {\n"
"	jp	C,%5\n"
"} by {\n"
"	jr	C,%5\n"
"	; peephole z17 changed absolute to relative conditional jump.\n"
"} if labelInRange()\n"
"\n"
"replace {\n"
"	jp	NC,%5\n"
"} by {\n"
"	jr	NC,%5\n"
"	; peephole z18 changed absolute to relative conditional jump.\n"
"} if labelInRange()\n"
