                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:29 2015
                              5 ;--------------------------------------------------------
                              6 	.module _strstr
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _strstr_PARM_2
                             13 	.globl _strstr
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (ABS,DATA)
   0000                      18 	.org 0x0000
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (ABS,DATA)
   0000                      23 	.org 0x0000
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
                             33 ;--------------------------------------------------------
                             34 ; overlayable items in internal ram 
                             35 ;--------------------------------------------------------
                             36 	.area	OSEG    (OVR,DATA)
   0000                      37 _strstr_sloc0_1_0::
   0000                      38 	.ds 3
   0003                      39 _strstr_sloc1_1_0::
   0003                      40 	.ds 3
                             41 ;--------------------------------------------------------
                             42 ; indirectly addressable internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area ISEG    (DATA)
                             45 ;--------------------------------------------------------
                             46 ; absolute internal ram data
                             47 ;--------------------------------------------------------
                             48 	.area IABS    (ABS,DATA)
                             49 	.area IABS    (ABS,DATA)
                             50 ;--------------------------------------------------------
                             51 ; bit data
                             52 ;--------------------------------------------------------
                             53 	.area BSEG    (BIT)
                             54 ;--------------------------------------------------------
                             55 ; paged external ram data
                             56 ;--------------------------------------------------------
                             57 	.area PSEG    (PAG,XDATA)
                             58 ;--------------------------------------------------------
                             59 ; external ram data
                             60 ;--------------------------------------------------------
                             61 	.area XSEG    (XDATA)
   0000                      62 _strstr_PARM_2:
   0000                      63 	.ds 3
   0003                      64 _strstr_str1_1_1:
   0003                      65 	.ds 3
   0006                      66 _strstr_cp_1_1:
   0006                      67 	.ds 3
                             68 ;--------------------------------------------------------
                             69 ; absolute external ram data
                             70 ;--------------------------------------------------------
                             71 	.area XABS    (ABS,XDATA)
                             72 ;--------------------------------------------------------
                             73 ; external initialized ram data
                             74 ;--------------------------------------------------------
                             75 	.area XISEG   (XDATA)
                             76 	.area HOME    (CODE)
                             77 	.area GSINIT0 (CODE)
                             78 	.area GSINIT1 (CODE)
                             79 	.area GSINIT2 (CODE)
                             80 	.area GSINIT3 (CODE)
                             81 	.area GSINIT4 (CODE)
                             82 	.area GSINIT5 (CODE)
                             83 	.area GSINIT  (CODE)
                             84 	.area GSFINAL (CODE)
                             85 	.area CSEG    (CODE)
                             86 ;--------------------------------------------------------
                             87 ; global & static initialisations
                             88 ;--------------------------------------------------------
                             89 	.area HOME    (CODE)
                             90 	.area GSINIT  (CODE)
                             91 	.area GSFINAL (CODE)
                             92 	.area GSINIT  (CODE)
                             93 ;--------------------------------------------------------
                             94 ; Home
                             95 ;--------------------------------------------------------
                             96 	.area HOME    (CODE)
                             97 	.area HOME    (CODE)
                             98 ;--------------------------------------------------------
                             99 ; code
                            100 ;--------------------------------------------------------
                            101 	.area CSEG    (CODE)
                            102 ;------------------------------------------------------------
                            103 ;Allocation info for local variables in function 'strstr'
                            104 ;------------------------------------------------------------
                            105 ;str2                      Allocated with name '_strstr_PARM_2'
                            106 ;str1                      Allocated with name '_strstr_str1_1_1'
                            107 ;cp                        Allocated with name '_strstr_cp_1_1'
                            108 ;s1                        Allocated with name '_strstr_s1_1_1'
                            109 ;s2                        Allocated with name '_strstr_s2_1_1'
                            110 ;sloc0                     Allocated with name '_strstr_sloc0_1_0'
                            111 ;sloc1                     Allocated with name '_strstr_sloc1_1_0'
                            112 ;------------------------------------------------------------
                            113 ;	_strstr.c:31: char * strstr (
                            114 ;	-----------------------------------------
                            115 ;	 function strstr
                            116 ;	-----------------------------------------
   0000                     117 _strstr:
                    0002    118 	ar2 = 0x02
                    0003    119 	ar3 = 0x03
                    0004    120 	ar4 = 0x04
                    0005    121 	ar5 = 0x05
                    0006    122 	ar6 = 0x06
                    0007    123 	ar7 = 0x07
                    0000    124 	ar0 = 0x00
                    0001    125 	ar1 = 0x01
   0000 AA F0               126 	mov	r2,b
   0002 AB 83               127 	mov	r3,dph
   0004 E5 82               128 	mov	a,dpl
   0006 90s00r03            129 	mov	dptr,#_strstr_str1_1_1
   0009 F0                  130 	movx	@dptr,a
   000A A3                  131 	inc	dptr
   000B EB                  132 	mov	a,r3
   000C F0                  133 	movx	@dptr,a
   000D A3                  134 	inc	dptr
   000E EA                  135 	mov	a,r2
   000F F0                  136 	movx	@dptr,a
                            137 ;	_strstr.c:36: const char * cp = str1;
   0010 90s00r03            138 	mov	dptr,#_strstr_str1_1_1
   0013 E0                  139 	movx	a,@dptr
   0014 FA                  140 	mov	r2,a
   0015 A3                  141 	inc	dptr
   0016 E0                  142 	movx	a,@dptr
   0017 FB                  143 	mov	r3,a
   0018 A3                  144 	inc	dptr
   0019 E0                  145 	movx	a,@dptr
   001A FC                  146 	mov	r4,a
   001B 90s00r06            147 	mov	dptr,#_strstr_cp_1_1
   001E EA                  148 	mov	a,r2
   001F F0                  149 	movx	@dptr,a
   0020 A3                  150 	inc	dptr
   0021 EB                  151 	mov	a,r3
   0022 F0                  152 	movx	@dptr,a
   0023 A3                  153 	inc	dptr
   0024 EC                  154 	mov	a,r4
   0025 F0                  155 	movx	@dptr,a
                            156 ;	_strstr.c:40: if ( !*str2 )
   0026 90s00r00            157 	mov	dptr,#_strstr_PARM_2
   0029 E0                  158 	movx	a,@dptr
   002A FD                  159 	mov	r5,a
   002B A3                  160 	inc	dptr
   002C E0                  161 	movx	a,@dptr
   002D FE                  162 	mov	r6,a
   002E A3                  163 	inc	dptr
   002F E0                  164 	movx	a,@dptr
   0030 FF                  165 	mov	r7,a
   0031 8D 82               166 	mov	dpl,r5
   0033 8E 83               167 	mov	dph,r6
   0035 8F F0               168 	mov	b,r7
   0037 12s00r00            169 	lcall	__gptrget
   003A 70 07               170 	jnz	00122$
                            171 ;	_strstr.c:41: return str1;
   003C 8A 82               172 	mov	dpl,r2
   003E 8B 83               173 	mov	dph,r3
   0040 8C F0               174 	mov	b,r4
   0042 22                  175 	ret
                            176 ;	_strstr.c:43: while (*cp)
   0043                     177 00122$:
   0043                     178 00110$:
   0043 8A 82               179 	mov	dpl,r2
   0045 8B 83               180 	mov	dph,r3
   0047 8C F0               181 	mov	b,r4
   0049 12s00r00            182 	lcall	__gptrget
   004C 70 03               183 	jnz	00125$
   004E 02s00rE5            184 	ljmp	00112$
   0051                     185 00125$:
                            186 ;	_strstr.c:48: while ( *s1 && *s2 && !(*s1-*s2) )
   0051 8A*00               187 	mov	_strstr_sloc0_1_0,r2
   0053 8B*01               188 	mov	(_strstr_sloc0_1_0 + 1),r3
   0055 8C*02               189 	mov	(_strstr_sloc0_1_0 + 2),r4
   0057 8D*03               190 	mov	_strstr_sloc1_1_0,r5
   0059 8E*04               191 	mov	(_strstr_sloc1_1_0 + 1),r6
   005B 8F*05               192 	mov	(_strstr_sloc1_1_0 + 2),r7
   005D                     193 00105$:
   005D 85*00 82            194 	mov	dpl,_strstr_sloc0_1_0
   0060 85*01 83            195 	mov	dph,(_strstr_sloc0_1_0 + 1)
   0063 85*02 F0            196 	mov	b,(_strstr_sloc0_1_0 + 2)
   0066 12s00r00            197 	lcall	__gptrget
   0069 F8                  198 	mov	r0,a
   006A 60 40               199 	jz	00107$
   006C 85*03 82            200 	mov	dpl,_strstr_sloc1_1_0
   006F 85*04 83            201 	mov	dph,(_strstr_sloc1_1_0 + 1)
   0072 85*05 F0            202 	mov	b,(_strstr_sloc1_1_0 + 2)
   0075 12s00r00            203 	lcall	__gptrget
   0078 F9                  204 	mov	r1,a
   0079 60 31               205 	jz	00107$
   007B C0 05               206 	push	ar5
   007D C0 06               207 	push	ar6
   007F C0 07               208 	push	ar7
   0081 E8                  209 	mov	a,r0
   0082 33                  210 	rlc	a
   0083 95 E0               211 	subb	a,acc
   0085 FD                  212 	mov	r5,a
   0086 E9                  213 	mov	a,r1
   0087 33                  214 	rlc	a
   0088 95 E0               215 	subb	a,acc
   008A FE                  216 	mov	r6,a
   008B E8                  217 	mov	a,r0
   008C C3                  218 	clr	c
   008D 99                  219 	subb	a,r1
   008E F8                  220 	mov	r0,a
   008F ED                  221 	mov	a,r5
   0090 9E                  222 	subb	a,r6
   0091 48                  223 	orl	a,r0
   0092 D0 07               224 	pop	ar7
   0094 D0 06               225 	pop	ar6
   0096 D0 05               226 	pop	ar5
   0098 70 12               227 	jnz	00107$
                            228 ;	_strstr.c:49: s1++, s2++;
   009A 05*00               229 	inc	_strstr_sloc0_1_0
   009C E4                  230 	clr	a
   009D B5*00 02            231 	cjne	a,_strstr_sloc0_1_0,00129$
   00A0 05*01               232 	inc	(_strstr_sloc0_1_0 + 1)
   00A2                     233 00129$:
   00A2 05*03               234 	inc	_strstr_sloc1_1_0
   00A4 E4                  235 	clr	a
   00A5 B5*03 B5            236 	cjne	a,_strstr_sloc1_1_0,00105$
   00A8 05*04               237 	inc	(_strstr_sloc1_1_0 + 1)
   00AA 80 B1               238 	sjmp	00105$
   00AC                     239 00107$:
                            240 ;	_strstr.c:51: if (!*s2)
   00AC 85*03 82            241 	mov	dpl,_strstr_sloc1_1_0
   00AF 85*04 83            242 	mov	dph,(_strstr_sloc1_1_0 + 1)
   00B2 85*05 F0            243 	mov	b,(_strstr_sloc1_1_0 + 2)
   00B5 12s00r00            244 	lcall	__gptrget
   00B8 70 18               245 	jnz	00109$
                            246 ;	_strstr.c:52: return( (char*)cp );
   00BA 90s00r06            247 	mov	dptr,#_strstr_cp_1_1
   00BD E0                  248 	movx	a,@dptr
   00BE F5*03               249 	mov	_strstr_sloc1_1_0,a
   00C0 A3                  250 	inc	dptr
   00C1 E0                  251 	movx	a,@dptr
   00C2 F5*04               252 	mov	(_strstr_sloc1_1_0 + 1),a
   00C4 A3                  253 	inc	dptr
   00C5 E0                  254 	movx	a,@dptr
   00C6 F5*05               255 	mov	(_strstr_sloc1_1_0 + 2),a
   00C8 85*03 82            256 	mov	dpl,_strstr_sloc1_1_0
   00CB 85*04 83            257 	mov	dph,(_strstr_sloc1_1_0 + 1)
   00CE 85*05 F0            258 	mov	b,(_strstr_sloc1_1_0 + 2)
   00D1 22                  259 	ret
   00D2                     260 00109$:
                            261 ;	_strstr.c:54: cp++;
   00D2 0A                  262 	inc	r2
   00D3 BA 00 01            263 	cjne	r2,#0x00,00132$
   00D6 0B                  264 	inc	r3
   00D7                     265 00132$:
   00D7 90s00r06            266 	mov	dptr,#_strstr_cp_1_1
   00DA EA                  267 	mov	a,r2
   00DB F0                  268 	movx	@dptr,a
   00DC A3                  269 	inc	dptr
   00DD EB                  270 	mov	a,r3
   00DE F0                  271 	movx	@dptr,a
   00DF A3                  272 	inc	dptr
   00E0 EC                  273 	mov	a,r4
   00E1 F0                  274 	movx	@dptr,a
   00E2 02s00r43            275 	ljmp	00110$
   00E5                     276 00112$:
                            277 ;	_strstr.c:57: return (NULL) ;
   00E5 90 00 00            278 	mov	dptr,#0x0000
   00E8 75 F0 00            279 	mov	b,#0x00
   00EB 22                  280 	ret
                            281 	.area CSEG    (CODE)
                            282 	.area CONST   (CODE)
                            283 	.area XINIT   (CODE)
                            284 	.area CABS    (ABS,CODE)
