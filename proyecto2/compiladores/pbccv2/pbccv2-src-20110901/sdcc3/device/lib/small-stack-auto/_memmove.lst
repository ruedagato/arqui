                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:32 2015
                              5 ;--------------------------------------------------------
                              6 	.module _memmove
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _memmove
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in internal ram 
                             34 ;--------------------------------------------------------
                             35 	.area OSEG    (OVR,DATA)
                             36 ;--------------------------------------------------------
                             37 ; indirectly addressable internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area ISEG    (DATA)
                             40 ;--------------------------------------------------------
                             41 ; absolute internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area IABS    (ABS,DATA)
                             44 	.area IABS    (ABS,DATA)
                             45 ;--------------------------------------------------------
                             46 ; bit data
                             47 ;--------------------------------------------------------
                             48 	.area BSEG    (BIT)
                             49 ;--------------------------------------------------------
                             50 ; paged external ram data
                             51 ;--------------------------------------------------------
                             52 	.area PSEG    (PAG,XDATA)
                             53 ;--------------------------------------------------------
                             54 ; external ram data
                             55 ;--------------------------------------------------------
                             56 	.area XSEG    (XDATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XABS    (ABS,XDATA)
                             61 ;--------------------------------------------------------
                             62 ; external initialized ram data
                             63 ;--------------------------------------------------------
                             64 	.area XISEG   (XDATA)
                             65 	.area HOME    (CODE)
                             66 	.area GSINIT0 (CODE)
                             67 	.area GSINIT1 (CODE)
                             68 	.area GSINIT2 (CODE)
                             69 	.area GSINIT3 (CODE)
                             70 	.area GSINIT4 (CODE)
                             71 	.area GSINIT5 (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area CSEG    (CODE)
                             75 ;--------------------------------------------------------
                             76 ; global & static initialisations
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT  (CODE)
                             80 	.area GSFINAL (CODE)
                             81 	.area GSINIT  (CODE)
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area HOME    (CODE)
                             86 	.area HOME    (CODE)
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area CSEG    (CODE)
                             91 ;------------------------------------------------------------
                             92 ;Allocation info for local variables in function 'memmove'
                             93 ;------------------------------------------------------------
                             94 ;src                       Allocated to stack - offset -5
                             95 ;acount                    Allocated to stack - offset -7
                             96 ;dst                       Allocated to registers r2 r3 r4 
                             97 ;ret                       Allocated to stack - offset 1
                             98 ;d                         Allocated to stack - offset 4
                             99 ;s                         Allocated to stack - offset 7
                            100 ;sloc0                     Allocated to stack - offset 10
                            101 ;sloc1                     Allocated to stack - offset 12
                            102 ;sloc2                     Allocated to stack - offset 15
                            103 ;------------------------------------------------------------
                            104 ;	_memmove.c:39: void * memmove (
                            105 ;	-----------------------------------------
                            106 ;	 function memmove
                            107 ;	-----------------------------------------
   0000                     108 _memmove:
                    0002    109 	ar2 = 0x02
                    0003    110 	ar3 = 0x03
                    0004    111 	ar4 = 0x04
                    0005    112 	ar5 = 0x05
                    0006    113 	ar6 = 0x06
                    0007    114 	ar7 = 0x07
                    0000    115 	ar0 = 0x00
                    0001    116 	ar1 = 0x01
   0000 C0*00               117 	push	_bp
   0002 E5 81               118 	mov	a,sp
   0004 F5*00               119 	mov	_bp,a
   0006 24 11               120 	add	a,#0x11
   0008 F5 81               121 	mov	sp,a
   000A AA 82               122 	mov	r2,dpl
   000C AB 83               123 	mov	r3,dph
   000E AC F0               124 	mov	r4,b
                            125 ;	_memmove.c:45: void * ret = dst;
   0010 A8*00               126 	mov	r0,_bp
   0012 08                  127 	inc	r0
   0013 A6 02               128 	mov	@r0,ar2
   0015 08                  129 	inc	r0
   0016 A6 03               130 	mov	@r0,ar3
   0018 08                  131 	inc	r0
   0019 A6 04               132 	mov	@r0,ar4
                            133 ;	_memmove.c:49: if (((int)src < (int)dst) && ((((int)src)+acount) > (int)dst)) {
   001B E5*00               134 	mov	a,_bp
   001D 24 FB               135 	add	a,#0xfb
   001F F8                  136 	mov	r0,a
   0020 86 05               137 	mov	ar5,@r0
   0022 08                  138 	inc	r0
   0023 86 06               139 	mov	ar6,@r0
   0025 E5*00               140 	mov	a,_bp
   0027 24 0A               141 	add	a,#0x0a
   0029 F8                  142 	mov	r0,a
   002A A6 02               143 	mov	@r0,ar2
   002C 08                  144 	inc	r0
   002D A6 03               145 	mov	@r0,ar3
   002F E5*00               146 	mov	a,_bp
   0031 24 0A               147 	add	a,#0x0a
   0033 F8                  148 	mov	r0,a
   0034 C3                  149 	clr	c
   0035 ED                  150 	mov	a,r5
   0036 96                  151 	subb	a,@r0
   0037 EE                  152 	mov	a,r6
   0038 64 80               153 	xrl	a,#0x80
   003A 08                  154 	inc	r0
   003B 86 F0               155 	mov	b,@r0
   003D 63 F0 80            156 	xrl	b,#0x80
   0040 95 F0               157 	subb	a,b
   0042 40 03               158 	jc	00121$
   0044 02s01r17            159 	ljmp	00108$
   0047                     160 00121$:
   0047 C0 02               161 	push	ar2
   0049 C0 03               162 	push	ar3
   004B C0 04               163 	push	ar4
   004D E5*00               164 	mov	a,_bp
   004F 24 F9               165 	add	a,#0xf9
   0051 F8                  166 	mov	r0,a
   0052 E6                  167 	mov	a,@r0
   0053 2D                  168 	add	a,r5
   0054 FD                  169 	mov	r5,a
   0055 08                  170 	inc	r0
   0056 E6                  171 	mov	a,@r0
   0057 3E                  172 	addc	a,r6
   0058 FE                  173 	mov	r6,a
   0059 E5*00               174 	mov	a,_bp
   005B 24 0A               175 	add	a,#0x0a
   005D F8                  176 	mov	r0,a
   005E 86 07               177 	mov	ar7,@r0
   0060 08                  178 	inc	r0
   0061 86 02               179 	mov	ar2,@r0
   0063 C3                  180 	clr	c
   0064 EF                  181 	mov	a,r7
   0065 9D                  182 	subb	a,r5
   0066 EA                  183 	mov	a,r2
   0067 9E                  184 	subb	a,r6
   0068 D0 04               185 	pop	ar4
   006A D0 03               186 	pop	ar3
   006C D0 02               187 	pop	ar2
   006E 40 03               188 	jc	00122$
   0070 02s01r17            189 	ljmp	00108$
   0073                     190 00122$:
                            191 ;	_memmove.c:53: d = ((char *)dst)+acount-1;
   0073 E5*00               192 	mov	a,_bp
   0075 24 F9               193 	add	a,#0xf9
   0077 F8                  194 	mov	r0,a
   0078 E6                  195 	mov	a,@r0
   0079 2A                  196 	add	a,r2
   007A FD                  197 	mov	r5,a
   007B 08                  198 	inc	r0
   007C E6                  199 	mov	a,@r0
   007D 3B                  200 	addc	a,r3
   007E FE                  201 	mov	r6,a
   007F 8C 07               202 	mov	ar7,r4
   0081 ED                  203 	mov	a,r5
   0082 24 FF               204 	add	a,#0xff
   0084 FA                  205 	mov	r2,a
   0085 EE                  206 	mov	a,r6
   0086 34 FF               207 	addc	a,#0xff
   0088 FB                  208 	mov	r3,a
   0089 8F 04               209 	mov	ar4,r7
                            210 ;	_memmove.c:54: s = ((char *)src)+acount-1;
   008B E5*00               211 	mov	a,_bp
   008D 24 FB               212 	add	a,#0xfb
   008F F8                  213 	mov	r0,a
   0090 86 05               214 	mov	ar5,@r0
   0092 08                  215 	inc	r0
   0093 86 06               216 	mov	ar6,@r0
   0095 08                  217 	inc	r0
   0096 86 07               218 	mov	ar7,@r0
   0098 E5*00               219 	mov	a,_bp
   009A 24 F9               220 	add	a,#0xf9
   009C F8                  221 	mov	r0,a
   009D E6                  222 	mov	a,@r0
   009E 2D                  223 	add	a,r5
   009F FD                  224 	mov	r5,a
   00A0 08                  225 	inc	r0
   00A1 E6                  226 	mov	a,@r0
   00A2 3E                  227 	addc	a,r6
   00A3 FE                  228 	mov	r6,a
   00A4 1D                  229 	dec	r5
   00A5 BD FF 01            230 	cjne	r5,#0xff,00123$
   00A8 1E                  231 	dec	r6
   00A9                     232 00123$:
                            233 ;	_memmove.c:55: while (acount--) {
   00A9 E5*00               234 	mov	a,_bp
   00AB 24 0F               235 	add	a,#0x0f
   00AD F8                  236 	mov	r0,a
   00AE A6 05               237 	mov	@r0,ar5
   00B0 08                  238 	inc	r0
   00B1 A6 06               239 	mov	@r0,ar6
   00B3 08                  240 	inc	r0
   00B4 A6 07               241 	mov	@r0,ar7
   00B6 E5*00               242 	mov	a,_bp
   00B8 24 0C               243 	add	a,#0x0c
   00BA F8                  244 	mov	r0,a
   00BB A6 02               245 	mov	@r0,ar2
   00BD 08                  246 	inc	r0
   00BE A6 03               247 	mov	@r0,ar3
   00C0 08                  248 	inc	r0
   00C1 A6 04               249 	mov	@r0,ar4
   00C3 E5*00               250 	mov	a,_bp
   00C5 24 F9               251 	add	a,#0xf9
   00C7 F8                  252 	mov	r0,a
   00C8 86 02               253 	mov	ar2,@r0
   00CA 08                  254 	inc	r0
   00CB 86 03               255 	mov	ar3,@r0
   00CD                     256 00101$:
   00CD 8A 05               257 	mov	ar5,r2
   00CF 8B 06               258 	mov	ar6,r3
   00D1 1A                  259 	dec	r2
   00D2 BA FF 01            260 	cjne	r2,#0xff,00124$
   00D5 1B                  261 	dec	r3
   00D6                     262 00124$:
   00D6 ED                  263 	mov	a,r5
   00D7 4E                  264 	orl	a,r6
   00D8 70 03               265 	jnz	00125$
   00DA 02s01r89            266 	ljmp	00109$
   00DD                     267 00125$:
                            268 ;	_memmove.c:56: *d-- = *s--;
   00DD E5*00               269 	mov	a,_bp
   00DF 24 0F               270 	add	a,#0x0f
   00E1 F8                  271 	mov	r0,a
   00E2 86 82               272 	mov	dpl,@r0
   00E4 08                  273 	inc	r0
   00E5 86 83               274 	mov	dph,@r0
   00E7 08                  275 	inc	r0
   00E8 86 F0               276 	mov	b,@r0
   00EA 12s00r00            277 	lcall	__gptrget
   00ED FD                  278 	mov	r5,a
   00EE E5*00               279 	mov	a,_bp
   00F0 24 0F               280 	add	a,#0x0f
   00F2 F8                  281 	mov	r0,a
   00F3 16                  282 	dec	@r0
   00F4 B6 FF 02            283 	cjne	@r0,#0xff,00126$
   00F7 08                  284 	inc	r0
   00F8 16                  285 	dec	@r0
   00F9                     286 00126$:
   00F9 E5*00               287 	mov	a,_bp
   00FB 24 0C               288 	add	a,#0x0c
   00FD F8                  289 	mov	r0,a
   00FE 86 82               290 	mov	dpl,@r0
   0100 08                  291 	inc	r0
   0101 86 83               292 	mov	dph,@r0
   0103 08                  293 	inc	r0
   0104 86 F0               294 	mov	b,@r0
   0106 ED                  295 	mov	a,r5
   0107 12s00r00            296 	lcall	__gptrput
   010A E5*00               297 	mov	a,_bp
   010C 24 0C               298 	add	a,#0x0c
   010E F8                  299 	mov	r0,a
   010F 16                  300 	dec	@r0
   0110 B6 FF BA            301 	cjne	@r0,#0xff,00101$
   0113 08                  302 	inc	r0
   0114 16                  303 	dec	@r0
   0115 80 B6               304 	sjmp	00101$
   0117                     305 00108$:
                            306 ;	_memmove.c:64: s = src;
   0117 E5*00               307 	mov	a,_bp
   0119 24 FB               308 	add	a,#0xfb
   011B F8                  309 	mov	r0,a
   011C 86 05               310 	mov	ar5,@r0
   011E 08                  311 	inc	r0
   011F 86 06               312 	mov	ar6,@r0
   0121 08                  313 	inc	r0
   0122 86 07               314 	mov	ar7,@r0
                            315 ;	_memmove.c:65: while (acount--) {
   0124 E5*00               316 	mov	a,_bp
   0126 24 07               317 	add	a,#0x07
   0128 F8                  318 	mov	r0,a
   0129 A6 05               319 	mov	@r0,ar5
   012B 08                  320 	inc	r0
   012C A6 06               321 	mov	@r0,ar6
   012E 08                  322 	inc	r0
   012F A6 07               323 	mov	@r0,ar7
   0131 E5*00               324 	mov	a,_bp
   0133 24 04               325 	add	a,#0x04
   0135 F8                  326 	mov	r0,a
   0136 A6 02               327 	mov	@r0,ar2
   0138 08                  328 	inc	r0
   0139 A6 03               329 	mov	@r0,ar3
   013B 08                  330 	inc	r0
   013C A6 04               331 	mov	@r0,ar4
   013E E5*00               332 	mov	a,_bp
   0140 24 F9               333 	add	a,#0xf9
   0142 F8                  334 	mov	r0,a
   0143 86 05               335 	mov	ar5,@r0
   0145 08                  336 	inc	r0
   0146 86 06               337 	mov	ar6,@r0
   0148                     338 00104$:
   0148 8D 07               339 	mov	ar7,r5
   014A 8E 02               340 	mov	ar2,r6
   014C 1D                  341 	dec	r5
   014D BD FF 01            342 	cjne	r5,#0xff,00127$
   0150 1E                  343 	dec	r6
   0151                     344 00127$:
   0151 EF                  345 	mov	a,r7
   0152 4A                  346 	orl	a,r2
   0153 60 34               347 	jz	00109$
                            348 ;	_memmove.c:66: *d++ = *s++;
   0155 E5*00               349 	mov	a,_bp
   0157 24 07               350 	add	a,#0x07
   0159 F8                  351 	mov	r0,a
   015A 86 82               352 	mov	dpl,@r0
   015C 08                  353 	inc	r0
   015D 86 83               354 	mov	dph,@r0
   015F 08                  355 	inc	r0
   0160 86 F0               356 	mov	b,@r0
   0162 12s00r00            357 	lcall	__gptrget
   0165 FA                  358 	mov	r2,a
   0166 A3                  359 	inc	dptr
   0167 18                  360 	dec	r0
   0168 18                  361 	dec	r0
   0169 A6 82               362 	mov	@r0,dpl
   016B 08                  363 	inc	r0
   016C A6 83               364 	mov	@r0,dph
   016E E5*00               365 	mov	a,_bp
   0170 24 04               366 	add	a,#0x04
   0172 F8                  367 	mov	r0,a
   0173 86 82               368 	mov	dpl,@r0
   0175 08                  369 	inc	r0
   0176 86 83               370 	mov	dph,@r0
   0178 08                  371 	inc	r0
   0179 86 F0               372 	mov	b,@r0
   017B EA                  373 	mov	a,r2
   017C 12s00r00            374 	lcall	__gptrput
   017F A3                  375 	inc	dptr
   0180 18                  376 	dec	r0
   0181 18                  377 	dec	r0
   0182 A6 82               378 	mov	@r0,dpl
   0184 08                  379 	inc	r0
   0185 A6 83               380 	mov	@r0,dph
   0187 80 BF               381 	sjmp	00104$
   0189                     382 00109$:
                            383 ;	_memmove.c:70: return(ret);
   0189 A8*00               384 	mov	r0,_bp
   018B 08                  385 	inc	r0
   018C 86 82               386 	mov	dpl,@r0
   018E 08                  387 	inc	r0
   018F 86 83               388 	mov	dph,@r0
   0191 08                  389 	inc	r0
   0192 86 F0               390 	mov	b,@r0
   0194 85*00 81            391 	mov	sp,_bp
   0197 D0*00               392 	pop	_bp
   0199 22                  393 	ret
                            394 	.area CSEG    (CODE)
                            395 	.area CONST   (CODE)
                            396 	.area XINIT   (CODE)
                            397 	.area CABS    (ABS,CODE)
