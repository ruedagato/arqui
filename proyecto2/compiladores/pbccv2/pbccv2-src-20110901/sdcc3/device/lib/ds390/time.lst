                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:17 2015
                              5 ;--------------------------------------------------------
                              6 	.module time
                              7 	.optsdcc -mds390 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl ___day
                             31 	.globl ___month
                             32 	.globl _time
                             33 	.globl _asctime
                             34 	.globl _ctime
                             35 	.globl _localtime
                             36 	.globl _gmtime
                             37 	.globl _mktime
                             38 ;--------------------------------------------------------
                             39 ; special function registers
                             40 ;--------------------------------------------------------
                    0080     41 _P4	=	0x0080
                    0081     42 _SP	=	0x0081
                    0082     43 _DPL	=	0x0082
                    0083     44 _DPH	=	0x0083
                    0084     45 _DPL1	=	0x0084
                    0085     46 _DPH1	=	0x0085
                    0086     47 _DPS	=	0x0086
                    0087     48 _PCON	=	0x0087
                    0088     49 _TCON	=	0x0088
                    0089     50 _TMOD	=	0x0089
                    008A     51 _TL0	=	0x008a
                    008B     52 _TL1	=	0x008b
                    008C     53 _TH0	=	0x008c
                    008D     54 _TH1	=	0x008d
                    008E     55 _CKCON	=	0x008e
                    0090     56 _P1	=	0x0090
                    0091     57 _EXIF	=	0x0091
                    0092     58 _P4CNT	=	0x0092
                    0093     59 _DPX	=	0x0093
                    0095     60 _DPX1	=	0x0095
                    0098     61 _SCON0	=	0x0098
                    0099     62 _SBUF0	=	0x0099
                    009B     63 _ESP	=	0x009b
                    009C     64 _AP	=	0x009c
                    009D     65 _ACON	=	0x009d
                    00A0     66 _P2	=	0x00a0
                    00A1     67 _P5	=	0x00a1
                    00A2     68 _P5CNT	=	0x00a2
                    00A8     69 _IE	=	0x00a8
                    00B0     70 _P3	=	0x00b0
                    00B8     71 _IP	=	0x00b8
                    00C0     72 _SCON1	=	0x00c0
                    00C1     73 _SBUF1	=	0x00c1
                    00C4     74 _PMR	=	0x00c4
                    00C6     75 _MCON	=	0x00c6
                    00C7     76 _TA	=	0x00c7
                    00C8     77 _T2CON	=	0x00c8
                    00C9     78 _T2MOD	=	0x00c9
                    00CA     79 _RCAP2L	=	0x00ca
                    00CA     80 _RTL2	=	0x00ca
                    00CB     81 _RCAP2H	=	0x00cb
                    00CB     82 _RTH2	=	0x00cb
                    00CC     83 _TL2	=	0x00cc
                    00CD     84 _TH2	=	0x00cd
                    00D0     85 _PSW	=	0x00d0
                    00D1     86 _MCNT0	=	0x00d1
                    00D2     87 _MCNT1	=	0x00d2
                    00D3     88 _MA	=	0x00d3
                    00D4     89 _MB	=	0x00d4
                    00D5     90 _MC	=	0x00d5
                    00D8     91 _WDCON	=	0x00d8
                    00E0     92 _ACC	=	0x00e0
                    00E8     93 _EIE	=	0x00e8
                    00EA     94 _MXAX	=	0x00ea
                    00F0     95 _B	=	0x00f0
                    00F8     96 _EIP	=	0x00f8
                    8C8A     97 _TMR0	=	0x8c8a
                    8D8B     98 _TMR1	=	0x8d8b
                    CDCC     99 _TMR2	=	0xcdcc
                    CBCA    100 _RCAP2	=	0xcbca
                            101 ;--------------------------------------------------------
                            102 ; special function bits
                            103 ;--------------------------------------------------------
                    0088    104 _IT0	=	0x0088
                    0089    105 _IE0	=	0x0089
                    008A    106 _IT1	=	0x008a
                    008B    107 _IE1	=	0x008b
                    008C    108 _TR0	=	0x008c
                    008D    109 _TF0	=	0x008d
                    008E    110 _TR1	=	0x008e
                    008F    111 _TF1	=	0x008f
                    0090    112 _T2	=	0x0090
                    0091    113 _T2EX	=	0x0091
                    0092    114 _RXD1	=	0x0092
                    0093    115 _TXD1	=	0x0093
                    0094    116 _INT2	=	0x0094
                    0095    117 _INT3	=	0x0095
                    0096    118 _INT4	=	0x0096
                    0097    119 _INT5	=	0x0097
                    0098    120 _RI_0	=	0x0098
                    0099    121 _TI_0	=	0x0099
                    009A    122 _RB8_0	=	0x009a
                    009B    123 _TB8_0	=	0x009b
                    009C    124 _REN_0	=	0x009c
                    009D    125 _SM2_0	=	0x009d
                    009E    126 _SM1_0	=	0x009e
                    009F    127 _SM0_0	=	0x009f
                    009F    128 _FE_0	=	0x009f
                    00A8    129 _EX0	=	0x00a8
                    00A9    130 _ET0	=	0x00a9
                    00AA    131 _EX1	=	0x00aa
                    00AB    132 _ET1	=	0x00ab
                    00AC    133 _ES0	=	0x00ac
                    00AD    134 _ET2	=	0x00ad
                    00AE    135 _ES1	=	0x00ae
                    00AF    136 _EA	=	0x00af
                    00B0    137 _RXD0	=	0x00b0
                    00B1    138 _TXD0	=	0x00b1
                    00B2    139 _INT0	=	0x00b2
                    00B3    140 _INT1	=	0x00b3
                    00B4    141 _T0	=	0x00b4
                    00B5    142 _T1	=	0x00b5
                    00B6    143 _WR	=	0x00b6
                    00B7    144 _RD	=	0x00b7
                    00B8    145 _PX0	=	0x00b8
                    00B9    146 _PT0	=	0x00b9
                    00BA    147 _PX1	=	0x00ba
                    00BB    148 _PT1	=	0x00bb
                    00BC    149 _PS0	=	0x00bc
                    00BD    150 _PT2	=	0x00bd
                    00BE    151 _PS1	=	0x00be
                    00C0    152 _RI_1	=	0x00c0
                    00C1    153 _TI_1	=	0x00c1
                    00C2    154 _RB8_1	=	0x00c2
                    00C3    155 _TB8_1	=	0x00c3
                    00C4    156 _REN_1	=	0x00c4
                    00C5    157 _SM2_1	=	0x00c5
                    00C6    158 _SM1_1	=	0x00c6
                    00C7    159 _SM0_1	=	0x00c7
                    00C7    160 _FE_1	=	0x00c7
                    00C8    161 _CP_RL	=	0x00c8
                    00C9    162 _C_T	=	0x00c9
                    00CA    163 _TR2	=	0x00ca
                    00CB    164 _EXEN2	=	0x00cb
                    00CC    165 _TCLK	=	0x00cc
                    00CD    166 _RCLK	=	0x00cd
                    00CE    167 _EXF2	=	0x00ce
                    00CF    168 _TF2	=	0x00cf
                    00D0    169 _P	=	0x00d0
                    00D1    170 _F1	=	0x00d1
                    00D2    171 _OV	=	0x00d2
                    00D3    172 _RS0	=	0x00d3
                    00D4    173 _RS1	=	0x00d4
                    00D5    174 _F0	=	0x00d5
                    00D6    175 _AC	=	0x00d6
                    00D7    176 _CY	=	0x00d7
                    00D8    177 _RWT	=	0x00d8
                    00D9    178 _EWT	=	0x00d9
                    00DA    179 _WDRF	=	0x00da
                    00DB    180 _WDIF	=	0x00db
                    00DC    181 _PFI	=	0x00dc
                    00DD    182 _EPFI	=	0x00dd
                    00DE    183 _POR	=	0x00de
                    00DF    184 _SMOD_1	=	0x00df
                    00E8    185 _EX2	=	0x00e8
                    00E9    186 _EX3	=	0x00e9
                    00EA    187 _EX4	=	0x00ea
                    00EB    188 _EX5	=	0x00eb
                    00EC    189 _EWDI	=	0x00ec
                    00ED    190 _C1IE	=	0x00ed
                    00EE    191 _C0IE	=	0x00ee
                    00EF    192 _CANBIE	=	0x00ef
                    00F8    193 _PX2	=	0x00f8
                    00F9    194 _PX3	=	0x00f9
                    00FA    195 _PX4	=	0x00fa
                    00FB    196 _PX5	=	0x00fb
                    00FC    197 _PWDI	=	0x00fc
                    00FD    198 _C1IP	=	0x00fd
                    00FE    199 _C0IP	=	0x00fe
                    00FF    200 _CANBIP	=	0x00ff
                            201 ;--------------------------------------------------------
                            202 ; overlayable register banks
                            203 ;--------------------------------------------------------
                            204 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     205 	.ds 8
                            206 ;--------------------------------------------------------
                            207 ; internal ram data
                            208 ;--------------------------------------------------------
                            209 	.area DSEG    (DATA)
                            210 ;--------------------------------------------------------
                            211 ; overlayable items in internal ram 
                            212 ;--------------------------------------------------------
                            213 	.area OSEG    (OVR,DATA)
                            214 ;--------------------------------------------------------
                            215 ; indirectly addressable internal ram data
                            216 ;--------------------------------------------------------
                            217 	.area ISEG    (DATA)
                            218 ;--------------------------------------------------------
                            219 ; absolute internal ram data
                            220 ;--------------------------------------------------------
                            221 	.area IABS    (ABS,DATA)
                            222 	.area IABS    (ABS,DATA)
                            223 ;--------------------------------------------------------
                            224 ; bit data
                            225 ;--------------------------------------------------------
                            226 	.area BSEG    (BIT)
                            227 ;--------------------------------------------------------
                            228 ; paged external ram data
                            229 ;--------------------------------------------------------
                            230 	.area PSEG    (PAG,XDATA)
                            231 ;--------------------------------------------------------
                            232 ; external ram data
                            233 ;--------------------------------------------------------
                            234 	.area XSEG    (XDATA)
   0000                     235 _time_timeptr_1_1:
   0000                     236 	.ds 4
   0004                     237 _time_now_1_1:
   0004                     238 	.ds 12
   0010                     239 _ascTimeBuffer:
   0010                     240 	.ds 32
   0030                     241 _CheckTime_sloc0_1_0:
   0030                     242 	.ds 1
   0031                     243 _asctime_timeptr_1_1:
   0031                     244 	.ds 4
   0035                     245 _asctime_sloc0_1_0:
   0035                     246 	.ds 2
   0037                     247 _asctime_sloc1_1_0:
   0037                     248 	.ds 2
   0039                     249 _asctime_sloc2_1_0:
   0039                     250 	.ds 2
   003B                     251 _asctime_sloc3_1_0:
   003B                     252 	.ds 2
   003D                     253 _asctime_sloc4_1_0:
   003D                     254 	.ds 2
   003F                     255 _lastTime:
   003F                     256 	.ds 12
   004B                     257 _gmtime_epoch_1_1:
   004B                     258 	.ds 4
   004F                     259 _mktime_timeptr_1_1:
   004F                     260 	.ds 4
   0053                     261 _mktime_year_1_1:
   0053                     262 	.ds 2
   0055                     263 _mktime_month_1_1:
   0055                     264 	.ds 2
   0057                     265 _mktime_seconds_1_1:
   0057                     266 	.ds 4
                            267 ;--------------------------------------------------------
                            268 ; absolute external ram data
                            269 ;--------------------------------------------------------
                            270 	.area XABS    (ABS,XDATA)
                            271 ;--------------------------------------------------------
                            272 ; external initialized ram data
                            273 ;--------------------------------------------------------
                            274 	.area XISEG   (XDATA)
                            275 ;--------------------------------------------------------
                            276 ; global & static initialisations
                            277 ;--------------------------------------------------------
                            278 	.area HOME    (CODE)
                            279 	.area GSINIT  (CODE)
                            280 	.area GSFINAL (CODE)
                            281 	.area GSINIT  (CODE)
                            282 ;--------------------------------------------------------
                            283 ; Home
                            284 ;--------------------------------------------------------
                            285 	.area HOME    (CODE)
                            286 	.area HOME    (CODE)
                            287 ;--------------------------------------------------------
                            288 ; code
                            289 ;--------------------------------------------------------
                            290 	.area CSEG    (CODE)
                            291 ;------------------------------------------------------------
                            292 ;Allocation info for local variables in function 'time'
                            293 ;------------------------------------------------------------
                            294 ;timeptr                   Allocated with name '_time_timeptr_1_1'
                            295 ;now                       Allocated with name '_time_now_1_1'
                            296 ;t                         Allocated to registers r6 r7 r0 r1 
                            297 ;------------------------------------------------------------
                            298 ;	time.c:50: time_t time(time_t *timeptr) {
                            299 ;	-----------------------------------------
                            300 ;	 function time
                            301 ;	-----------------------------------------
   0000                     302 _time:
                    0002    303 	ar2 = 0x02
                    0003    304 	ar3 = 0x03
                    0004    305 	ar4 = 0x04
                    0005    306 	ar5 = 0x05
                    0006    307 	ar6 = 0x06
                    0007    308 	ar7 = 0x07
                    0000    309 	ar0 = 0x00
                    0001    310 	ar1 = 0x01
   0000 75 86 01            311 	mov     dps, #1
   0003 90s00r00r00         312 	mov     dptr, #_time_timeptr_1_1
   0007 E5 82               313 	mov	a,dpl
   0009 F0                  314 	movx	@dptr,a
   000A A3                  315 	inc	dptr
   000B E5 83               316 	mov	a,dph
   000D F0                  317 	movx	@dptr,a
   000E A3                  318 	inc	dptr
   000F E5 93               319 	mov	a,dpx
   0011 F0                  320 	movx	@dptr,a
   0012 A3                  321 	inc	dptr
   0013 E5 F0               322 	mov	a,b
   0015 F0                  323 	movx	@dptr,a
   0016 75 86 00            324 	mov	dps,#0
                            325 ;	time.c:52: time_t t=-1;
                            326 ;	genAssign: resultIsFar = TRUE
   0019 7E FF               327 	mov	r6,#0xFF
   001B 7F FF               328 	mov	r7,#0xFF
   001D 78 FF               329 	mov	r0,#0xFF
   001F 79 FF               330 	mov	r1,#0xFF
                            331 ;	time.c:54: if (RtcRead(&now)) {
   0021 C0 06               332 	push	ar6
   0023 C0 07               333 	push	ar7
   0025 C0 00               334 	push	ar0
   0027 C0 01               335 	push	ar1
   0029 90s00r00r04         336 	mov dptr,#_time_now_1_1
   002D 75 F0 00            337 	mov	b,#0x00
   0030 12s00r00r00         338 	lcall	_RtcRead
   0034 D0 01               339 	pop	ar1
   0036 D0 00               340 	pop	ar0
   0038 D0 07               341 	pop	ar7
   003A D0 06               342 	pop	ar6
   003C E5 82               343 	mov	a,dpl
   003E 60 1B               344 	jz  00102$
   0040                     345 00109$:
                            346 ;	time.c:55: t=mktime(&now);
   0040 90s00r00r04         347 	mov dptr,#_time_now_1_1
   0044 75 F0 00            348 	mov	b,#0x00
   0047 12s00r07r51         349 	lcall	_mktime
   004B AA 82               350 	mov	r2,dpl
   004D AB 83               351 	mov	r3,dph
   004F AC 93               352 	mov	r4,dpx
   0051 AD F0               353 	mov	r5,b
                            354 ;	genAssign: resultIsFar = TRUE
   0053 8A 06               355 	mov	ar6,r2
   0055 8B 07               356 	mov	ar7,r3
   0057 8C 00               357 	mov	ar0,r4
   0059 8D 01               358 	mov	ar1,r5
   005B                     359 00102$:
                            360 ;	time.c:57: if (timeptr) {
   005B 90s00r00r00         361 	mov	dptr,#_time_timeptr_1_1
   005F E0                  362 	movx	a,@dptr
   0060 F5 F0               363 	mov	b,a
   0062 A3                  364 	inc	dptr
   0063 E0                  365 	movx	a,@dptr
   0064 42 F0               366 	orl	b,a
   0066 A3                  367 	inc	dptr
   0067 E0                  368 	movx	a,@dptr
   0068 45 F0               369 	orl	a,b
   006A 60 28               370 	jz  00104$
   006C                     371 00110$:
                            372 ;	time.c:58: *timeptr=t;
   006C 75 86 01            373 	mov     dps, #1
   006F 90s00r00r00         374 	mov     dptr, #_time_timeptr_1_1
   0073 E0                  375 	movx	a,@dptr
   0074 F5 82               376 	mov	dpl,a
   0076 A3                  377 	inc	dptr
   0077 E0                  378 	movx	a,@dptr
   0078 F5 83               379 	mov	dph,a
   007A A3                  380 	inc	dptr
   007B E0                  381 	movx	a,@dptr
   007C F5 93               382 	mov	dpx,a
   007E A3                  383 	inc	dptr
   007F E0                  384 	movx	a,@dptr
   0080 F5 F0               385 	mov	b,a
   0082 75 86 00            386 	mov	dps,#0
   0085 8E 9C               387 	mov	_ap, r6
   0087 EF                  388 	mov	a,r7
   0088 12s00r00r00         389 	lcall	__gptrputWord
   008C A3                  390 	inc	dptr
   008D 88 9C               391 	mov	_ap, r0
   008F E9                  392 	mov	a,r1
   0090 12s00r00r00         393 	lcall	__gptrputWord
   0094                     394 00104$:
                            395 ;	time.c:60: return t;
   0094 8E 82               396 	mov	dpl,r6
   0096 8F 83               397 	mov	dph,r7
   0098 88 93               398 	mov	dpx,r0
   009A 89 F0               399 	mov	b,r1
   009C                     400 00105$:
   009C 22                  401 	ret
                            402 ;------------------------------------------------------------
                            403 ;Allocation info for local variables in function 'CheckTime'
                            404 ;------------------------------------------------------------
                            405 ;timeptr                   Allocated to registers r2 r3 r4 r5 
                            406 ;sloc0                     Allocated with name '_CheckTime_sloc0_1_0'
                            407 ;------------------------------------------------------------
                            408 ;	time.c:73: static void CheckTime(struct tm *timeptr) {
                            409 ;	-----------------------------------------
                            410 ;	 function CheckTime
                            411 ;	-----------------------------------------
   009D                     412 _CheckTime:
                            413 ;	time.c:84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
   009D AA 82               414 	mov     r2,dpl
   009F AB 83               415 	mov     r3,dph
   00A1 AC 93               416 	mov     r4,dpx
   00A3 AD F0               417 	mov     r5,b
   00A5 8D F0               418 	mov	b,r5
   00A7 12s00r00r00         419 	lcall	__gptrget
   00AB FE                  420 	mov	r6,a
   00AC C3                  421 	clr	c
   00AD 74 3B               422 	mov	a,#0x3B
   00AF 9E                  423 	subb	a,r6
   00B0 50 0E               424 	jnc  00102$
   00B2                     425 00128$:
   00B2 8A 82               426 	mov	dpl,r2
   00B4 8B 83               427 	mov	dph,r3
   00B6 8C 93               428 	mov	dpx,r4
   00B8 8D F0               429 	mov	b,r5
   00BA 74 3B               430 	mov	a,#0x3B
   00BC 12s00r00r00         431 	lcall	__gptrput
   00C0                     432 00102$:
                            433 ;	time.c:85: if (timeptr->tm_min>59) timeptr->tm_min=59;
   00C0 74 01               434 	mov	a,#0x01
   00C2 2A                  435 	add	a,r2
   00C3 FE                  436 	mov	r6,a
   00C4 E4                  437 	clr  a
   00C5 3B                  438 	addc	a,r3
   00C6 FF                  439 	mov	r7,a
   00C7 E4                  440 	clr  a
   00C8 3C                  441 	addc	a,r4
   00C9 F8                  442 	mov	r0,a
   00CA 8D 01               443 	mov	ar1,r5
   00CC C0 02               444 	push	ar2
   00CE C0 03               445 	push	ar3
   00D0 C0 04               446 	push	ar4
   00D2 C0 05               447 	push	ar5
   00D4 8E 82               448 	mov	dpl,r6
   00D6 8F 83               449 	mov	dph,r7
   00D8 88 93               450 	mov	dpx,r0
   00DA 89 F0               451 	mov	b,r1
   00DC 12s00r00r00         452 	lcall	__gptrget
   00E0 FA                  453 	mov	r2,a
   00E1 C3                  454 	clr	c
   00E2 74 3B               455 	mov	a,#0x3B
   00E4 9A                  456 	subb	a,r2
   00E5 D0 05               457 	pop	ar5
   00E7 D0 04               458 	pop	ar4
   00E9 D0 03               459 	pop	ar3
   00EB D0 02               460 	pop	ar2
   00ED 50 0E               461 	jnc  00104$
   00EF                     462 00129$:
   00EF 8E 82               463 	mov	dpl,r6
   00F1 8F 83               464 	mov	dph,r7
   00F3 88 93               465 	mov	dpx,r0
   00F5 89 F0               466 	mov	b,r1
   00F7 74 3B               467 	mov	a,#0x3B
   00F9 12s00r00r00         468 	lcall	__gptrput
   00FD                     469 00104$:
                            470 ;	time.c:86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
   00FD 74 02               471 	mov	a,#0x02
   00FF 2A                  472 	add	a,r2
   0100 FE                  473 	mov	r6,a
   0101 E4                  474 	clr  a
   0102 3B                  475 	addc	a,r3
   0103 FF                  476 	mov	r7,a
   0104 E4                  477 	clr  a
   0105 3C                  478 	addc	a,r4
   0106 F8                  479 	mov	r0,a
   0107 8D 01               480 	mov	ar1,r5
   0109 C0 02               481 	push	ar2
   010B C0 03               482 	push	ar3
   010D C0 04               483 	push	ar4
   010F C0 05               484 	push	ar5
   0111 8E 82               485 	mov	dpl,r6
   0113 8F 83               486 	mov	dph,r7
   0115 88 93               487 	mov	dpx,r0
   0117 89 F0               488 	mov	b,r1
   0119 12s00r00r00         489 	lcall	__gptrget
   011D FA                  490 	mov	r2,a
   011E C3                  491 	clr	c
   011F 74 17               492 	mov	a,#0x17
   0121 9A                  493 	subb	a,r2
   0122 D0 05               494 	pop	ar5
   0124 D0 04               495 	pop	ar4
   0126 D0 03               496 	pop	ar3
   0128 D0 02               497 	pop	ar2
   012A 50 0E               498 	jnc  00106$
   012C                     499 00130$:
   012C 8E 82               500 	mov	dpl,r6
   012E 8F 83               501 	mov	dph,r7
   0130 88 93               502 	mov	dpx,r0
   0132 89 F0               503 	mov	b,r1
   0134 74 17               504 	mov	a,#0x17
   0136 12s00r00r00         505 	lcall	__gptrput
   013A                     506 00106$:
                            507 ;	time.c:87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
   013A 74 07               508 	mov	a,#0x07
   013C 2A                  509 	add	a,r2
   013D FE                  510 	mov	r6,a
   013E E4                  511 	clr  a
   013F 3B                  512 	addc	a,r3
   0140 FF                  513 	mov	r7,a
   0141 E4                  514 	clr  a
   0142 3C                  515 	addc	a,r4
   0143 F8                  516 	mov	r0,a
   0144 8D 01               517 	mov	ar1,r5
   0146 C0 02               518 	push	ar2
   0148 C0 03               519 	push	ar3
   014A C0 04               520 	push	ar4
   014C C0 05               521 	push	ar5
   014E 8E 82               522 	mov	dpl,r6
   0150 8F 83               523 	mov	dph,r7
   0152 88 93               524 	mov	dpx,r0
   0154 89 F0               525 	mov	b,r1
   0156 12s00r00r00         526 	lcall	__gptrget
   015A FA                  527 	mov	r2,a
   015B C3                  528 	clr	c
   015C 74 06               529 	mov	a,#0x06
   015E 9A                  530 	subb	a,r2
   015F D0 05               531 	pop	ar5
   0161 D0 04               532 	pop	ar4
   0163 D0 03               533 	pop	ar3
   0165 D0 02               534 	pop	ar2
   0167 50 0E               535 	jnc  00108$
   0169                     536 00131$:
   0169 8E 82               537 	mov	dpl,r6
   016B 8F 83               538 	mov	dph,r7
   016D 88 93               539 	mov	dpx,r0
   016F 89 F0               540 	mov	b,r1
   0171 74 06               541 	mov	a,#0x06
   0173 12s00r00r00         542 	lcall	__gptrput
   0177                     543 00108$:
                            544 ;	time.c:88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
   0177 74 03               545 	mov	a,#0x03
   0179 2A                  546 	add	a,r2
   017A FE                  547 	mov	r6,a
   017B E4                  548 	clr  a
   017C 3B                  549 	addc	a,r3
   017D FF                  550 	mov	r7,a
   017E E4                  551 	clr  a
   017F 3C                  552 	addc	a,r4
   0180 F8                  553 	mov	r0,a
   0181 8D 01               554 	mov	ar1,r5
   0183 8E 82               555 	mov	dpl,r6
   0185 8F 83               556 	mov	dph,r7
   0187 88 93               557 	mov	dpx,r0
   0189 89 F0               558 	mov	b,r1
   018B 75 86 01            559 	mov	dps, #1
   018E 90s00r00r30         560 	mov	dptr, #_CheckTime_sloc0_1_0
   0192 15 86               561 	dec	dps
   0194 12s00r00r00         562 	lcall	__gptrget
   0198 75 86 01            563 	mov	dps,#1
   019B F0                  564 	movx	@dptr,a
   019C 75 86 00            565 	mov	dps,#0
   019F 90s00r00r30         566 	mov	dptr,#_CheckTime_sloc0_1_0
   01A3 E0                  567 	movx	a,@dptr
   01A4 B4 01 00            568 	cjne	a,#0x01,00132$
   01A7                     569 00132$:
   01A7 50 10               570 	jnc  00112$
   01A9                     571 00133$:
   01A9 8E 82               572 	mov	dpl,r6
   01AB 8F 83               573 	mov	dph,r7
   01AD 88 93               574 	mov	dpx,r0
   01AF 89 F0               575 	mov	b,r1
   01B1 74 01               576 	mov	a,#0x01
   01B3 12s00r00r00         577 	lcall	__gptrput
   01B7 80 1E               578 	sjmp 00113$
   01B9                     579 00112$:
                            580 ;	time.c:89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
   01B9 90s00r00r30         581 	mov	dptr,#_CheckTime_sloc0_1_0
   01BD C3                  582 	clr	c
   01BE 74 1F               583 	mov	a,#0x1F
   01C0 C5 F0               584 	xch	a, b
   01C2 E0                  585 	movx	a,@dptr
   01C3 C5 F0               586 	xch	a, b
   01C5 95 F0               587 	subb	a,b
   01C7 50 0E               588 	jnc  00113$
   01C9                     589 00134$:
   01C9 8E 82               590 	mov	dpl,r6
   01CB 8F 83               591 	mov	dph,r7
   01CD 88 93               592 	mov	dpx,r0
   01CF 89 F0               593 	mov	b,r1
   01D1 74 1F               594 	mov	a,#0x1F
   01D3 12s00r00r00         595 	lcall	__gptrput
   01D7                     596 00113$:
                            597 ;	time.c:90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
   01D7 74 04               598 	mov	a,#0x04
   01D9 2A                  599 	add	a,r2
   01DA FE                  600 	mov	r6,a
   01DB E4                  601 	clr  a
   01DC 3B                  602 	addc	a,r3
   01DD FF                  603 	mov	r7,a
   01DE E4                  604 	clr  a
   01DF 3C                  605 	addc	a,r4
   01E0 F8                  606 	mov	r0,a
   01E1 8D 01               607 	mov	ar1,r5
   01E3 C0 02               608 	push	ar2
   01E5 C0 03               609 	push	ar3
   01E7 C0 04               610 	push	ar4
   01E9 C0 05               611 	push	ar5
   01EB 8E 82               612 	mov	dpl,r6
   01ED 8F 83               613 	mov	dph,r7
   01EF 88 93               614 	mov	dpx,r0
   01F1 89 F0               615 	mov	b,r1
   01F3 12s00r00r00         616 	lcall	__gptrget
   01F7 FA                  617 	mov	r2,a
   01F8 C3                  618 	clr	c
   01F9 74 0B               619 	mov	a,#0x0B
   01FB 9A                  620 	subb	a,r2
   01FC D0 05               621 	pop	ar5
   01FE D0 04               622 	pop	ar4
   0200 D0 03               623 	pop	ar3
   0202 D0 02               624 	pop	ar2
   0204 50 0E               625 	jnc  00115$
   0206                     626 00135$:
   0206 8E 82               627 	mov	dpl,r6
   0208 8F 83               628 	mov	dph,r7
   020A 88 93               629 	mov	dpx,r0
   020C 89 F0               630 	mov	b,r1
   020E 74 0B               631 	mov	a,#0x0B
   0210 12s00r00r00         632 	lcall	__gptrput
   0214                     633 00115$:
                            634 ;	time.c:91: if (timeptr->tm_year<0) timeptr->tm_year=0;
   0214 74 05               635 	mov	a,#0x05
   0216 2A                  636 	add	a,r2
   0217 FA                  637 	mov	r2,a
   0218 E4                  638 	clr  a
   0219 3B                  639 	addc	a,r3
   021A FB                  640 	mov	r3,a
   021B E4                  641 	clr  a
   021C 3C                  642 	addc	a,r4
   021D FC                  643 	mov	r4,a
   021E 8A 82               644 	mov	dpl,r2
   0220 8B 83               645 	mov	dph,r3
   0222 8C 93               646 	mov	dpx,r4
   0224 8D F0               647 	mov	b,r5
   0226 12s00r00r00         648 	lcall	__gptrgetWord
   022A FE                  649 	mov	r6,a
   022B AF 9C               650 	mov	r7,_ap
   022D EF                  651 	mov	a,r7
   022E 30 E7 0F            652 	jnb  acc.7,00118$
   0231                     653 00136$:
   0231 8A 82               654 	mov	dpl,r2
   0233 8B 83               655 	mov	dph,r3
   0235 8C 93               656 	mov	dpx,r4
   0237 8D F0               657 	mov	b,r5
   0239 E4                  658 	clr  a
   023A F5 9C               659 	mov  _ap,a
   023C 12s00r00r00         660 	lcall	__gptrputWord
   0240                     661 00118$:
   0240 22                  662 	ret
                            663 ;------------------------------------------------------------
                            664 ;Allocation info for local variables in function 'asctime'
                            665 ;------------------------------------------------------------
                            666 ;timeptr                   Allocated with name '_asctime_timeptr_1_1'
                            667 ;sloc0                     Allocated with name '_asctime_sloc0_1_0'
                            668 ;sloc1                     Allocated with name '_asctime_sloc1_1_0'
                            669 ;sloc2                     Allocated with name '_asctime_sloc2_1_0'
                            670 ;sloc3                     Allocated with name '_asctime_sloc3_1_0'
                            671 ;sloc4                     Allocated with name '_asctime_sloc4_1_0'
                            672 ;------------------------------------------------------------
                            673 ;	time.c:95: char *asctime(struct tm *timeptr) {
                            674 ;	-----------------------------------------
                            675 ;	 function asctime
                            676 ;	-----------------------------------------
   0241                     677 _asctime:
   0241 75 86 01            678 	mov     dps, #1
   0244 90s00r00r31         679 	mov     dptr, #_asctime_timeptr_1_1
   0248 E5 82               680 	mov	a,dpl
   024A F0                  681 	movx	@dptr,a
   024B A3                  682 	inc	dptr
   024C E5 83               683 	mov	a,dph
   024E F0                  684 	movx	@dptr,a
   024F A3                  685 	inc	dptr
   0250 E5 93               686 	mov	a,dpx
   0252 F0                  687 	movx	@dptr,a
   0253 A3                  688 	inc	dptr
   0254 E5 F0               689 	mov	a,b
   0256 F0                  690 	movx	@dptr,a
                            691 ;	time.c:96: CheckTime(timeptr);
   0257 75 86 01            692 	mov	dps, #1
   025A 90s00r00r31         693 	mov	dptr,#_asctime_timeptr_1_1
   025E E0                  694 	movx	a,@dptr
   025F F5 82               695 	mov	dpl,a
   0261 A3                  696 	inc	dptr
   0262 E0                  697 	movx	a,@dptr
   0263 F5 83               698 	mov	dph,a
   0265 A3                  699 	inc	dptr
   0266 E0                  700 	movx	a,@dptr
   0267 F5 93               701 	mov	dpx,a
   0269 A3                  702 	inc	dptr
   026A E0                  703 	movx	a,@dptr
   026B F5 F0               704 	mov	b,a
   026D 75 86 00            705 	mov	dps,#0
   0270 12s00r00r9D         706 	lcall	_CheckTime
                            707 ;	time.c:100: timeptr->tm_year+1900);
   0274 90s00r00r31         708 	mov	dptr,#_asctime_timeptr_1_1
   0278 E0                  709 	movx	a,@dptr
   0279 24 05               710 	add	a,#0x05
   027B FE                  711 	mov	r6,a
   027C A3                  712 	inc	dptr
   027D E0                  713 	movx	a,@dptr
   027E 34 00               714 	addc	a,#0x00
   0280 FF                  715 	mov	r7,a
   0281 A3                  716 	inc	dptr
   0282 E0                  717 	movx	a,@dptr
   0283 34 00               718 	addc	a,#0x00
   0285 F8                  719 	mov	r0,a
   0286 A3                  720 	inc	dptr
   0287 E0                  721 	movx	a,@dptr
   0288 F9                  722 	mov	r1,a
   0289 8E 82               723 	mov	dpl,r6
   028B 8F 83               724 	mov	dph,r7
   028D 88 93               725 	mov	dpx,r0
   028F 89 F0               726 	mov	b,r1
   0291 12s00r00r00         727 	lcall	__gptrgetWord
   0295 FE                  728 	mov	r6,a
   0296 AF 9C               729 	mov	r7,_ap
   0298 90s00r00r3D         730 	mov	dptr,#_asctime_sloc4_1_0
   029C 74 6C               731 	mov	a,#0x6C
   029E 2E                  732 	add	a,r6
   029F F0                  733 	movx	@dptr,a
   02A0 74 07               734 	mov	a,#0x07
   02A2 3F                  735 	addc	a,r7
   02A3 A3                  736 	inc	dptr
   02A4 F0                  737 	movx	@dptr,a
                            738 ;	time.c:99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
   02A5 75 86 01            739 	mov     dps, #1
   02A8 90s00r00r31         740 	mov     dptr, #_asctime_timeptr_1_1
   02AC E0                  741 	movx	a,@dptr
   02AD F5 82               742 	mov	dpl,a
   02AF A3                  743 	inc	dptr
   02B0 E0                  744 	movx	a,@dptr
   02B1 F5 83               745 	mov	dph,a
   02B3 A3                  746 	inc	dptr
   02B4 E0                  747 	movx	a,@dptr
   02B5 F5 93               748 	mov	dpx,a
   02B7 A3                  749 	inc	dptr
   02B8 E0                  750 	movx	a,@dptr
   02B9 F5 F0               751 	mov	b,a
   02BB 75 86 00            752 	mov	dps,#0
   02BE 12s00r00r00         753 	lcall	__gptrget
   02C2 F8                  754 	mov  r0,a
   02C3 90s00r00r3B         755 	mov  dptr,#_asctime_sloc3_1_0
   02C7 F0                  756 	movx @dptr,a
   02C8 A3                  757 	inc	dptr
   02C9 E4                  758 	clr	a
   02CA F0                  759 	movx	@dptr,a
   02CB 90s00r00r31         760 	mov	dptr,#_asctime_timeptr_1_1
   02CF E0                  761 	movx	a,@dptr
   02D0 24 01               762 	add	a,#0x01
   02D2 FA                  763 	mov	r2,a
   02D3 A3                  764 	inc	dptr
   02D4 E0                  765 	movx	a,@dptr
   02D5 34 00               766 	addc	a,#0x00
   02D7 FB                  767 	mov	r3,a
   02D8 A3                  768 	inc	dptr
   02D9 E0                  769 	movx	a,@dptr
   02DA 34 00               770 	addc	a,#0x00
   02DC FC                  771 	mov	r4,a
   02DD A3                  772 	inc	dptr
   02DE E0                  773 	movx	a,@dptr
   02DF FD                  774 	mov	r5,a
   02E0 8A 82               775 	mov	dpl,r2
   02E2 8B 83               776 	mov	dph,r3
   02E4 8C 93               777 	mov	dpx,r4
   02E6 8D F0               778 	mov	b,r5
   02E8 12s00r00r00         779 	lcall	__gptrget
   02EC FA                  780 	mov  r2,a
   02ED 90s00r00r35         781 	mov  dptr,#_asctime_sloc0_1_0
   02F1 F0                  782 	movx @dptr,a
   02F2 A3                  783 	inc	dptr
   02F3 E4                  784 	clr	a
   02F4 F0                  785 	movx	@dptr,a
   02F5 90s00r00r31         786 	mov	dptr,#_asctime_timeptr_1_1
   02F9 E0                  787 	movx	a,@dptr
   02FA 24 02               788 	add	a,#0x02
   02FC FC                  789 	mov	r4,a
   02FD A3                  790 	inc	dptr
   02FE E0                  791 	movx	a,@dptr
   02FF 34 00               792 	addc	a,#0x00
   0301 FD                  793 	mov	r5,a
   0302 A3                  794 	inc	dptr
   0303 E0                  795 	movx	a,@dptr
   0304 34 00               796 	addc	a,#0x00
   0306 FA                  797 	mov	r2,a
   0307 A3                  798 	inc	dptr
   0308 E0                  799 	movx	a,@dptr
   0309 FB                  800 	mov	r3,a
   030A 8C 82               801 	mov	dpl,r4
   030C 8D 83               802 	mov	dph,r5
   030E 8A 93               803 	mov	dpx,r2
   0310 8B F0               804 	mov	b,r3
   0312 12s00r00r00         805 	lcall	__gptrget
   0316 FC                  806 	mov  r4,a
   0317 90s00r00r37         807 	mov  dptr,#_asctime_sloc1_1_0
   031B F0                  808 	movx @dptr,a
   031C A3                  809 	inc	dptr
   031D E4                  810 	clr	a
   031E F0                  811 	movx	@dptr,a
                            812 ;	time.c:98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
   031F 90s00r00r31         813 	mov	dptr,#_asctime_timeptr_1_1
   0323 E0                  814 	movx	a,@dptr
   0324 24 03               815 	add	a,#0x03
   0326 FB                  816 	mov	r3,a
   0327 A3                  817 	inc	dptr
   0328 E0                  818 	movx	a,@dptr
   0329 34 00               819 	addc	a,#0x00
   032B FD                  820 	mov	r5,a
   032C A3                  821 	inc	dptr
   032D E0                  822 	movx	a,@dptr
   032E 34 00               823 	addc	a,#0x00
   0330 FA                  824 	mov	r2,a
   0331 A3                  825 	inc	dptr
   0332 E0                  826 	movx	a,@dptr
   0333 FC                  827 	mov	r4,a
   0334 8B 82               828 	mov	dpl,r3
   0336 8D 83               829 	mov	dph,r5
   0338 8A 93               830 	mov	dpx,r2
   033A 8C F0               831 	mov	b,r4
   033C 12s00r00r00         832 	lcall	__gptrget
   0340 FB                  833 	mov  r3,a
   0341 90s00r00r39         834 	mov  dptr,#_asctime_sloc2_1_0
   0345 F0                  835 	movx @dptr,a
   0346 A3                  836 	inc	dptr
   0347 E4                  837 	clr	a
   0348 F0                  838 	movx	@dptr,a
   0349 90s00r00r31         839 	mov	dptr,#_asctime_timeptr_1_1
   034D E0                  840 	movx	a,@dptr
   034E 24 04               841 	add	a,#0x04
   0350 FC                  842 	mov	r4,a
   0351 A3                  843 	inc	dptr
   0352 E0                  844 	movx	a,@dptr
   0353 34 00               845 	addc	a,#0x00
   0355 FD                  846 	mov	r5,a
   0356 A3                  847 	inc	dptr
   0357 E0                  848 	movx	a,@dptr
   0358 34 00               849 	addc	a,#0x00
   035A FA                  850 	mov	r2,a
   035B A3                  851 	inc	dptr
   035C E0                  852 	movx	a,@dptr
   035D FB                  853 	mov	r3,a
   035E 8C 82               854 	mov	dpl,r4
   0360 8D 83               855 	mov	dph,r5
   0362 8A 93               856 	mov	dpx,r2
   0364 8B F0               857 	mov	b,r3
   0366 12s00r00r00         858 	lcall	__gptrget
   036A FC                  859 	mov	r4,a
   036B 75 F0 03            860 	mov	b,#0x03
   036E EC                  861 	mov	a,r4
   036F A4                  862 	mul	ab
   0370 FC                  863 	mov  r4,a
   0371 F5 F0               864 	mov	b,a
   0373 90s00r00r0C         865 	mov	dptr,#___month
   0377 93                  866 	movc	a,@a+dptr
   0378 A3                  867 	inc	dptr
   0379 FA                  868 	mov	r2,a
   037A E5 F0               869 	mov	a,b
   037C 93                  870 	movc	a,@a+dptr
   037D A3                  871 	inc	dptr
   037E FB                  872 	mov	r3,a
   037F E5 F0               873 	mov	a,b
   0381 93                  874 	movc	a,@a+dptr
   0382 FC                  875 	mov	r4,a
   0383 7D 80               876 	mov	r5,#0x80
   0385 90s00r00r31         877 	mov	dptr,#_asctime_timeptr_1_1
   0389 E0                  878 	movx	a,@dptr
   038A 24 07               879 	add	a,#0x07
   038C F8                  880 	mov	r0,a
   038D A3                  881 	inc	dptr
   038E E0                  882 	movx	a,@dptr
   038F 34 00               883 	addc	a,#0x00
   0391 F9                  884 	mov	r1,a
   0392 A3                  885 	inc	dptr
   0393 E0                  886 	movx	a,@dptr
   0394 34 00               887 	addc	a,#0x00
   0396 FE                  888 	mov	r6,a
   0397 A3                  889 	inc	dptr
   0398 E0                  890 	movx	a,@dptr
   0399 FF                  891 	mov	r7,a
   039A 88 82               892 	mov	dpl,r0
   039C 89 83               893 	mov	dph,r1
   039E 8E 93               894 	mov	dpx,r6
   03A0 8F F0               895 	mov	b,r7
   03A2 12s00r00r00         896 	lcall	__gptrget
   03A6 F8                  897 	mov	r0,a
   03A7 75 F0 03            898 	mov	b,#0x03
   03AA E8                  899 	mov	a,r0
   03AB A4                  900 	mul	ab
   03AC F8                  901 	mov  r0,a
   03AD F5 F0               902 	mov	b,a
   03AF 90s00r00r30         903 	mov	dptr,#___day
   03B3 93                  904 	movc	a,@a+dptr
   03B4 A3                  905 	inc	dptr
   03B5 FE                  906 	mov	r6,a
   03B6 E5 F0               907 	mov	a,b
   03B8 93                  908 	movc	a,@a+dptr
   03B9 A3                  909 	inc	dptr
   03BA FF                  910 	mov	r7,a
   03BB E5 F0               911 	mov	a,b
   03BD 93                  912 	movc	a,@a+dptr
   03BE F8                  913 	mov	r0,a
   03BF 79 80               914 	mov	r1,#0x80
                            915 ;	time.c:97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
   03C1 90s00r00r3D         916 	mov	dptr,#_asctime_sloc4_1_0
   03C5 E0                  917 	movx	a,@dptr
   03C6 C0 E0               918 	push	acc
   03C8 A3                  919 	inc	dptr
   03C9 E0                  920 	movx	a,@dptr
   03CA C0 E0               921 	push	acc
   03CC 90s00r00r3B         922 	mov	dptr,#_asctime_sloc3_1_0
   03D0 E0                  923 	movx	a,@dptr
   03D1 C0 E0               924 	push	acc
   03D3 A3                  925 	inc	dptr
   03D4 E0                  926 	movx	a,@dptr
   03D5 C0 E0               927 	push	acc
   03D7 90s00r00r35         928 	mov	dptr,#_asctime_sloc0_1_0
   03DB E0                  929 	movx	a,@dptr
   03DC C0 E0               930 	push	acc
   03DE A3                  931 	inc	dptr
   03DF E0                  932 	movx	a,@dptr
   03E0 C0 E0               933 	push	acc
   03E2 90s00r00r37         934 	mov	dptr,#_asctime_sloc1_1_0
   03E6 E0                  935 	movx	a,@dptr
   03E7 C0 E0               936 	push	acc
   03E9 A3                  937 	inc	dptr
   03EA E0                  938 	movx	a,@dptr
   03EB C0 E0               939 	push	acc
   03ED 90s00r00r39         940 	mov	dptr,#_asctime_sloc2_1_0
   03F1 E0                  941 	movx	a,@dptr
   03F2 C0 E0               942 	push	acc
   03F4 A3                  943 	inc	dptr
   03F5 E0                  944 	movx	a,@dptr
   03F6 C0 E0               945 	push	acc
   03F8 C0 02               946 	push	ar2
   03FA C0 03               947 	push	ar3
   03FC C0 04               948 	push	ar4
   03FE C0 05               949 	push	ar5
   0400 C0 06               950 	push	ar6
   0402 C0 07               951 	push	ar7
   0404 C0 00               952 	push	ar0
   0406 C0 01               953 	push	ar1
   0408 74r45               954 	mov	a,#__str_0
   040A C0 E0               955 	push	acc
   040C 74s00               956 	mov	a,#(__str_0 >> 8)
   040E C0 E0               957 	push	acc
   0410 74s00               958 	mov	a,#(__str_0 >> 16)
   0412 C0 E0               959 	push	acc
   0414 74 80               960 	mov	a,#0x80
   0416 C0 E0               961 	push	acc
   0418 74r10               962 	mov	a,#_ascTimeBuffer
   041A C0 E0               963 	push	acc
   041C 74s00               964 	mov	a,#(_ascTimeBuffer >> 8)
   041E C0 E0               965 	push	acc
   0420 74s00               966 	mov	a,#(_ascTimeBuffer >> 16)
   0422 C0 E0               967 	push	acc
   0424 E4                  968 	clr  a
   0425 C0 E0               969 	push	acc
   0427 12s00r00r00         970 	lcall	_sprintf
   042B C3                  971 	clr	c
   042C E5 81               972 	mov	a,sp
   042E 94 1A               973 	subb	a,#0x1A
   0430 F5 81               974 	mov	sp,a
   0432 E5 9B               975 	mov	a,esp
   0434 54 03               976 	anl	a,#3
   0436 94 00               977 	subb	a,#0x00
   0438 F5 9B               978 	mov	esp,a
                            979 ;	time.c:101: return ascTimeBuffer;
   043A 90s00r00r10         980 	mov dptr,#_ascTimeBuffer
   043E 75 F0 00            981 	mov	b,#0x00
   0441                     982 00101$:
   0441 22                  983 	ret
                            984 ;------------------------------------------------------------
                            985 ;Allocation info for local variables in function 'ctime'
                            986 ;------------------------------------------------------------
                            987 ;timep                     Allocated to registers r2 r3 r4 r5 
                            988 ;------------------------------------------------------------
                            989 ;	time.c:104: char *ctime(time_t *timep) {
                            990 ;	-----------------------------------------
                            991 ;	 function ctime
                            992 ;	-----------------------------------------
   0442                     993 _ctime:
                            994 ;	time.c:105: return asctime(localtime(timep));
   0442 AA 82               995 	mov     r2,dpl
   0444 AB 83               996 	mov     r3,dph
   0446 AC 93               997 	mov     r4,dpx
   0448 AD F0               998 	mov     r5,b
   044A 8D F0               999 	mov	b,r5
   044C 12s00r04r55        1000 	lcall	_localtime
   0450 12s00r02r41        1001 	lcall	_asctime
   0454                    1002 00101$:
   0454 22                 1003 	ret
                           1004 ;------------------------------------------------------------
                           1005 ;Allocation info for local variables in function 'localtime'
                           1006 ;------------------------------------------------------------
                           1007 ;timep                     Allocated to registers r2 r3 r4 r5 
                           1008 ;------------------------------------------------------------
                           1009 ;	time.c:121: struct tm *localtime(time_t *timep) {
                           1010 ;	-----------------------------------------
                           1011 ;	 function localtime
                           1012 ;	-----------------------------------------
   0455                    1013 _localtime:
                           1014 ;	time.c:122: return gmtime(timep);
   0455 AA 82              1015 	mov     r2,dpl
   0457 AB 83              1016 	mov     r3,dph
   0459 AC 93              1017 	mov     r4,dpx
   045B AD F0              1018 	mov     r5,b
   045D 8D F0              1019 	mov	b,r5
   045F 12s00r04r64        1020 	lcall	_gmtime
   0463                    1021 00101$:
   0463 22                 1022 	ret
                           1023 ;------------------------------------------------------------
                           1024 ;Allocation info for local variables in function 'gmtime'
                           1025 ;------------------------------------------------------------
                           1026 ;timep                     Allocated to registers 
                           1027 ;epoch                     Allocated with name '_gmtime_epoch_1_1'
                           1028 ;year                      Allocated to registers 
                           1029 ;month                     Allocated to registers 
                           1030 ;monthLength               Allocated to registers r1 
                           1031 ;days                      Allocated to registers r2 r3 r4 r5 
                           1032 ;------------------------------------------------------------
                           1033 ;	time.c:125: struct tm *gmtime(time_t *timep) {
                           1034 ;	-----------------------------------------
                           1035 ;	 function gmtime
                           1036 ;	-----------------------------------------
   0464                    1037 _gmtime:
                           1038 ;	time.c:126: unsigned long epoch=*timep;
   0464 12s00r00r00        1039 	lcall	__gptrgetWord
   0468 FA                 1040 	mov	r2,a
   0469 AB 9C              1041 	mov	r3,_ap
   046B A3                 1042 	inc	dptr
   046C 12s00r00r00        1043 	lcall	__gptrgetWord
   0470 FC                 1044 	mov	r4,a
   0471 AD 9C              1045 	mov	r5,_ap
                           1046 ;	genAssign: resultIsFar = TRUE
   0473 90s00r00r4B        1047 	mov	dptr,#_gmtime_epoch_1_1
   0477 EA                 1048 	mov	a,r2
   0478 F0                 1049 	movx	@dptr,a
   0479 A3                 1050 	inc	dptr
   047A EB                 1051 	mov	a,r3
   047B F0                 1052 	movx	@dptr,a
   047C A3                 1053 	inc	dptr
   047D EC                 1054 	mov	a,r4
   047E F0                 1055 	movx	@dptr,a
   047F A3                 1056 	inc	dptr
   0480 ED                 1057 	mov	a,r5
   0481 F0                 1058 	movx	@dptr,a
                           1059 ;	time.c:131: lastTime.tm_sec=epoch%60;
                           1060 ;	genAssign: resultIsFar = TRUE
   0482 90s00r00r00        1061 	mov	dptr,#__modulong_PARM_2
   0486 74 3C              1062 	mov	a,#0x3C
   0488 F0                 1063 	movx	@dptr,a
   0489 E4                 1064 	clr	a
   048A A3                 1065 	inc	dptr
   048B F0                 1066 	movx	@dptr,a
   048C A3                 1067 	inc	dptr
   048D F0                 1068 	movx	@dptr,a
   048E A3                 1069 	inc	dptr
   048F F0                 1070 	movx	@dptr,a
   0490 05 86              1071 	inc	dps
   0492 90s00r00r4B        1072 	mov	dptr,#_gmtime_epoch_1_1
   0496 E0                 1073 	movx	a,@dptr
   0497 F5 82              1074 	mov	dpl,a
   0499 A3                 1075 	inc	dptr
   049A E0                 1076 	movx	a,@dptr
   049B F5 83              1077 	mov	dph,a
   049D A3                 1078 	inc	dptr
   049E E0                 1079 	movx	a,@dptr
   049F F5 93              1080 	mov	dpx,a
   04A1 A3                 1081 	inc	dptr
   04A2 E0                 1082 	movx	a,@dptr
   04A3 F5 F0              1083 	mov	b,a
   04A5 75 86 00           1084 	mov	dps,#0
   04A8 12s00r00r00        1085 	lcall	__modulong
   04AC AE 82              1086 	mov	r6,dpl
   04AE 90s00r00r3F        1087 	mov	dptr,#_lastTime
   04B2 EE                 1088 	mov	a,r6
   04B3 F0                 1089 	movx	@dptr,a
                           1090 ;	time.c:132: epoch/=60; // now it is minutes
                           1091 ;	genAssign: resultIsFar = TRUE
   04B4 90s00r00r00        1092 	mov	dptr,#__divulong_PARM_2
   04B8 74 3C              1093 	mov	a,#0x3C
   04BA F0                 1094 	movx	@dptr,a
   04BB E4                 1095 	clr	a
   04BC A3                 1096 	inc	dptr
   04BD F0                 1097 	movx	@dptr,a
   04BE A3                 1098 	inc	dptr
   04BF F0                 1099 	movx	@dptr,a
   04C0 A3                 1100 	inc	dptr
   04C1 F0                 1101 	movx	@dptr,a
   04C2 05 86              1102 	inc	dps
   04C4 90s00r00r4B        1103 	mov	dptr,#_gmtime_epoch_1_1
   04C8 E0                 1104 	movx	a,@dptr
   04C9 F5 82              1105 	mov	dpl,a
   04CB A3                 1106 	inc	dptr
   04CC E0                 1107 	movx	a,@dptr
   04CD F5 83              1108 	mov	dph,a
   04CF A3                 1109 	inc	dptr
   04D0 E0                 1110 	movx	a,@dptr
   04D1 F5 93              1111 	mov	dpx,a
   04D3 A3                 1112 	inc	dptr
   04D4 E0                 1113 	movx	a,@dptr
   04D5 F5 F0              1114 	mov	b,a
   04D7 75 86 00           1115 	mov	dps,#0
   04DA 12s00r00r00        1116 	lcall	__divulong
   04DE AE 82              1117 	mov	r6,dpl
   04E0 AF 83              1118 	mov	r7,dph
   04E2 A8 93              1119 	mov	r0,dpx
   04E4 A9 F0              1120 	mov	r1,b
                           1121 ;	genAssign: resultIsFar = TRUE
   04E6 90s00r00r4B        1122 	mov	dptr,#_gmtime_epoch_1_1
   04EA EE                 1123 	mov	a,r6
   04EB F0                 1124 	movx	@dptr,a
   04EC A3                 1125 	inc	dptr
   04ED EF                 1126 	mov	a,r7
   04EE F0                 1127 	movx	@dptr,a
   04EF A3                 1128 	inc	dptr
   04F0 E8                 1129 	mov	a,r0
   04F1 F0                 1130 	movx	@dptr,a
   04F2 A3                 1131 	inc	dptr
   04F3 E9                 1132 	mov	a,r1
   04F4 F0                 1133 	movx	@dptr,a
                           1134 ;	time.c:133: lastTime.tm_min=epoch%60;
                           1135 ;	genAssign: resultIsFar = TRUE
   04F5 90s00r00r00        1136 	mov	dptr,#__modulong_PARM_2
   04F9 74 3C              1137 	mov	a,#0x3C
   04FB F0                 1138 	movx	@dptr,a
   04FC E4                 1139 	clr	a
   04FD A3                 1140 	inc	dptr
   04FE F0                 1141 	movx	@dptr,a
   04FF A3                 1142 	inc	dptr
   0500 F0                 1143 	movx	@dptr,a
   0501 A3                 1144 	inc	dptr
   0502 F0                 1145 	movx	@dptr,a
   0503 05 86              1146 	inc	dps
   0505 90s00r00r4B        1147 	mov	dptr,#_gmtime_epoch_1_1
   0509 E0                 1148 	movx	a,@dptr
   050A F5 82              1149 	mov	dpl,a
   050C A3                 1150 	inc	dptr
   050D E0                 1151 	movx	a,@dptr
   050E F5 83              1152 	mov	dph,a
   0510 A3                 1153 	inc	dptr
   0511 E0                 1154 	movx	a,@dptr
   0512 F5 93              1155 	mov	dpx,a
   0514 A3                 1156 	inc	dptr
   0515 E0                 1157 	movx	a,@dptr
   0516 F5 F0              1158 	mov	b,a
   0518 75 86 00           1159 	mov	dps,#0
   051B 12s00r00r00        1160 	lcall	__modulong
   051F AE 82              1161 	mov	r6,dpl
   0521 90s00r00r40        1162 	mov	dptr,#(_lastTime + 0x000001)
   0525 EE                 1163 	mov	a,r6
   0526 F0                 1164 	movx	@dptr,a
                           1165 ;	time.c:134: epoch/=60; // now it is hours
                           1166 ;	genAssign: resultIsFar = TRUE
   0527 90s00r00r00        1167 	mov	dptr,#__divulong_PARM_2
   052B 74 3C              1168 	mov	a,#0x3C
   052D F0                 1169 	movx	@dptr,a
   052E E4                 1170 	clr	a
   052F A3                 1171 	inc	dptr
   0530 F0                 1172 	movx	@dptr,a
   0531 A3                 1173 	inc	dptr
   0532 F0                 1174 	movx	@dptr,a
   0533 A3                 1175 	inc	dptr
   0534 F0                 1176 	movx	@dptr,a
   0535 05 86              1177 	inc	dps
   0537 90s00r00r4B        1178 	mov	dptr,#_gmtime_epoch_1_1
   053B E0                 1179 	movx	a,@dptr
   053C F5 82              1180 	mov	dpl,a
   053E A3                 1181 	inc	dptr
   053F E0                 1182 	movx	a,@dptr
   0540 F5 83              1183 	mov	dph,a
   0542 A3                 1184 	inc	dptr
   0543 E0                 1185 	movx	a,@dptr
   0544 F5 93              1186 	mov	dpx,a
   0546 A3                 1187 	inc	dptr
   0547 E0                 1188 	movx	a,@dptr
   0548 F5 F0              1189 	mov	b,a
   054A 75 86 00           1190 	mov	dps,#0
   054D 12s00r00r00        1191 	lcall	__divulong
   0551 AE 82              1192 	mov	r6,dpl
   0553 AF 83              1193 	mov	r7,dph
   0555 A8 93              1194 	mov	r0,dpx
   0557 A9 F0              1195 	mov	r1,b
                           1196 ;	genAssign: resultIsFar = TRUE
   0559 90s00r00r4B        1197 	mov	dptr,#_gmtime_epoch_1_1
   055D EE                 1198 	mov	a,r6
   055E F0                 1199 	movx	@dptr,a
   055F A3                 1200 	inc	dptr
   0560 EF                 1201 	mov	a,r7
   0561 F0                 1202 	movx	@dptr,a
   0562 A3                 1203 	inc	dptr
   0563 E8                 1204 	mov	a,r0
   0564 F0                 1205 	movx	@dptr,a
   0565 A3                 1206 	inc	dptr
   0566 E9                 1207 	mov	a,r1
   0567 F0                 1208 	movx	@dptr,a
                           1209 ;	time.c:135: lastTime.tm_hour=epoch%24;
                           1210 ;	genAssign: resultIsFar = TRUE
   0568 90s00r00r00        1211 	mov	dptr,#__modulong_PARM_2
   056C 74 18              1212 	mov	a,#0x18
   056E F0                 1213 	movx	@dptr,a
   056F E4                 1214 	clr	a
   0570 A3                 1215 	inc	dptr
   0571 F0                 1216 	movx	@dptr,a
   0572 A3                 1217 	inc	dptr
   0573 F0                 1218 	movx	@dptr,a
   0574 A3                 1219 	inc	dptr
   0575 F0                 1220 	movx	@dptr,a
   0576 05 86              1221 	inc	dps
   0578 90s00r00r4B        1222 	mov	dptr,#_gmtime_epoch_1_1
   057C E0                 1223 	movx	a,@dptr
   057D F5 82              1224 	mov	dpl,a
   057F A3                 1225 	inc	dptr
   0580 E0                 1226 	movx	a,@dptr
   0581 F5 83              1227 	mov	dph,a
   0583 A3                 1228 	inc	dptr
   0584 E0                 1229 	movx	a,@dptr
   0585 F5 93              1230 	mov	dpx,a
   0587 A3                 1231 	inc	dptr
   0588 E0                 1232 	movx	a,@dptr
   0589 F5 F0              1233 	mov	b,a
   058B 75 86 00           1234 	mov	dps,#0
   058E 12s00r00r00        1235 	lcall	__modulong
   0592 AE 82              1236 	mov	r6,dpl
   0594 90s00r00r41        1237 	mov	dptr,#(_lastTime + 0x000002)
   0598 EE                 1238 	mov	a,r6
   0599 F0                 1239 	movx	@dptr,a
                           1240 ;	time.c:136: epoch/=24; // now it is days
                           1241 ;	genAssign: resultIsFar = TRUE
   059A 90s00r00r00        1242 	mov	dptr,#__divulong_PARM_2
   059E 74 18              1243 	mov	a,#0x18
   05A0 F0                 1244 	movx	@dptr,a
   05A1 E4                 1245 	clr	a
   05A2 A3                 1246 	inc	dptr
   05A3 F0                 1247 	movx	@dptr,a
   05A4 A3                 1248 	inc	dptr
   05A5 F0                 1249 	movx	@dptr,a
   05A6 A3                 1250 	inc	dptr
   05A7 F0                 1251 	movx	@dptr,a
   05A8 05 86              1252 	inc	dps
   05AA 90s00r00r4B        1253 	mov	dptr,#_gmtime_epoch_1_1
   05AE E0                 1254 	movx	a,@dptr
   05AF F5 82              1255 	mov	dpl,a
   05B1 A3                 1256 	inc	dptr
   05B2 E0                 1257 	movx	a,@dptr
   05B3 F5 83              1258 	mov	dph,a
   05B5 A3                 1259 	inc	dptr
   05B6 E0                 1260 	movx	a,@dptr
   05B7 F5 93              1261 	mov	dpx,a
   05B9 A3                 1262 	inc	dptr
   05BA E0                 1263 	movx	a,@dptr
   05BB F5 F0              1264 	mov	b,a
   05BD 75 86 00           1265 	mov	dps,#0
   05C0 12s00r00r00        1266 	lcall	__divulong
   05C4 AE 82              1267 	mov	r6,dpl
   05C6 AF 83              1268 	mov	r7,dph
   05C8 A8 93              1269 	mov	r0,dpx
   05CA A9 F0              1270 	mov	r1,b
                           1271 ;	genAssign: resultIsFar = TRUE
   05CC 90s00r00r4B        1272 	mov	dptr,#_gmtime_epoch_1_1
   05D0 EE                 1273 	mov	a,r6
   05D1 F0                 1274 	movx	@dptr,a
   05D2 A3                 1275 	inc	dptr
   05D3 EF                 1276 	mov	a,r7
   05D4 F0                 1277 	movx	@dptr,a
   05D5 A3                 1278 	inc	dptr
   05D6 E8                 1279 	mov	a,r0
   05D7 F0                 1280 	movx	@dptr,a
   05D8 A3                 1281 	inc	dptr
   05D9 E9                 1282 	mov	a,r1
   05DA F0                 1283 	movx	@dptr,a
                           1284 ;	time.c:137: lastTime.tm_wday=(epoch+4)%7;
   05DB 90s00r00r4B        1285 	mov	dptr,#_gmtime_epoch_1_1
   05DF E0                 1286 	movx	a,@dptr
   05E0 24 04              1287 	add	a,#0x04
   05E2 FE                 1288 	mov	r6,a
   05E3 A3                 1289 	inc	dptr
   05E4 E0                 1290 	movx	a,@dptr
   05E5 34 00              1291 	addc	a,#0x00
   05E7 FF                 1292 	mov	r7,a
   05E8 A3                 1293 	inc	dptr
   05E9 E0                 1294 	movx	a,@dptr
   05EA 34 00              1295 	addc	a,#0x00
   05EC F8                 1296 	mov	r0,a
   05ED A3                 1297 	inc	dptr
   05EE E0                 1298 	movx	a,@dptr
   05EF 34 00              1299 	addc	a,#0x00
   05F1 F9                 1300 	mov	r1,a
                           1301 ;	genAssign: resultIsFar = TRUE
   05F2 90s00r00r00        1302 	mov	dptr,#__modulong_PARM_2
   05F6 74 07              1303 	mov	a,#0x07
   05F8 F0                 1304 	movx	@dptr,a
   05F9 E4                 1305 	clr	a
   05FA A3                 1306 	inc	dptr
   05FB F0                 1307 	movx	@dptr,a
   05FC A3                 1308 	inc	dptr
   05FD F0                 1309 	movx	@dptr,a
   05FE A3                 1310 	inc	dptr
   05FF F0                 1311 	movx	@dptr,a
   0600 8E 82              1312 	mov	dpl,r6
   0602 8F 83              1313 	mov	dph,r7
   0604 88 93              1314 	mov	dpx,r0
   0606 89 F0              1315 	mov	b,r1
   0608 12s00r00r00        1316 	lcall	__modulong
   060C AE 82              1317 	mov	r6,dpl
   060E 90s00r00r46        1318 	mov	dptr,#(_lastTime + 0x000007)
   0612 EE                 1319 	mov	a,r6
   0613 F0                 1320 	movx	@dptr,a
                           1321 ;	time.c:140: days=0;
                           1322 ;	genAssign: resultIsFar = FALSE
   0614 7A 00              1323 	mov	r2,#0x00
   0616 7B 00              1324 	mov	r3,#0x00
   0618 7C 00              1325 	mov	r4,#0x00
   061A 7D 00              1326 	mov	r5,#0x00
                           1327 ;	time.c:141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
                           1328 ;	genAssign: resultIsFar = FALSE
   061C 7E B2              1329 	mov	r6,#0xB2
   061E 7F 07              1330 	mov	r7,#0x07
   0620                    1331 00101$:
   0620 74 03              1332 	mov	a,#0x03
   0622 5E                 1333 	anl	a,r6
   0623 F8                 1334 	mov	r0,a
   0624 79 00              1335 	mov	r1,#0
   0626 E8                 1336 	mov	a,r0
   0627 49                 1337 	orl	a,r1
   0628 B4 01 00           1338 	cjne	a,#0x01,00134$
   062B                    1339 00134$:
   062B E4                 1340 	clr	a
   062C 33                 1341 	rlc	a
   062D F8                 1342 	mov  r0,a
   062E 60 06              1343 	jz  00119$
   0630                    1344 00135$:
                           1345 ;	genAssign: resultIsFar = FALSE
   0630 78 6E              1346 	mov	r0,#0x6E
   0632 79 01              1347 	mov	r1,#0x01
   0634 80 04              1348 	sjmp 00120$
   0636                    1349 00119$:
                           1350 ;	genAssign: resultIsFar = FALSE
   0636 78 6D              1351 	mov	r0,#0x6D
   0638 79 01              1352 	mov	r1,#0x01
   063A                    1353 00120$:
   063A C0 06              1354 	push	ar6
   063C C0 07              1355 	push	ar7
   063E E9                 1356 	mov	a,r1
   063F 33                 1357 	rlc	a
   0640 95 E0              1358 	subb	a,acc
   0642 FE                 1359 	mov	r6,a
   0643 FF                 1360 	mov	r7,a
   0644 E8                 1361 	mov	a,r0
   0645 2A                 1362 	add	a,r2
   0646 F8                 1363 	mov	r0,a
   0647 E9                 1364 	mov	a,r1
   0648 3B                 1365 	addc	a,r3
   0649 F9                 1366 	mov	r1,a
   064A EE                 1367 	mov	a,r6
   064B 3C                 1368 	addc	a,r4
   064C FE                 1369 	mov	r6,a
   064D EF                 1370 	mov	a,r7
   064E 3D                 1371 	addc	a,r5
   064F FF                 1372 	mov	r7,a
                           1373 ;	genAssign: resultIsFar = FALSE
   0650 88 02              1374 	mov	ar2,r0
   0652 89 03              1375 	mov	ar3,r1
   0654 8E 04              1376 	mov	ar4,r6
   0656 8F 05              1377 	mov	ar5,r7
   0658 90s00r00r4B        1378 	mov	dptr,#_gmtime_epoch_1_1
   065C C3                 1379 	clr	c
   065D E0                 1380 	movx	a,@dptr
   065E 98                 1381 	subb	a,r0
   065F A3                 1382 	inc	dptr
   0660 E0                 1383 	movx	a,@dptr
   0661 99                 1384 	subb	a,r1
   0662 A3                 1385 	inc	dptr
   0663 E0                 1386 	movx	a,@dptr
   0664 9E                 1387 	subb	a,r6
   0665 A3                 1388 	inc	dptr
   0666 E0                 1389 	movx	a,@dptr
   0667 9F                 1390 	subb	a,r7
   0668 D0 07              1391 	pop	ar7
   066A D0 06              1392 	pop	ar6
   066C 40 07              1393 	jc   00103$
   066E                    1394 00136$:
                           1395 ;	time.c:142: year++;
   066E 0E                 1396 	inc	r6
   066F BE 00 01           1397 	cjne	r6,#0,00137$
   0672 0F                 1398 	inc	r7
   0673                    1399 00137$:
   0673 80 AB              1400 	sjmp 00101$
   0675                    1401 00103$:
                           1402 ;	time.c:144: lastTime.tm_year=year-1900;
   0675 EE                 1403 	mov	a,r6
   0676 24 94              1404 	add	a,#0x94
   0678 F8                 1405 	mov	r0,a
   0679 EF                 1406 	mov	a,r7
   067A 34 F8              1407 	addc	a,#0xF8
   067C F9                 1408 	mov	r1,a
   067D 90s00r00r44        1409 	mov	dptr,#(_lastTime + 0x000005)
   0681 E8                 1410 	mov	a,r0
   0682 F0                 1411 	movx	@dptr,a
   0683 A3                 1412 	inc	dptr
   0684 E9                 1413 	mov	a,r1
   0685 F0                 1414 	movx	@dptr,a
                           1415 ;	time.c:146: days -= LEAP_YEAR(year) ? 366 : 365;
   0686 53 06 03           1416 	anl	ar6,#0x03
   0689 7F 00              1417 	mov	r7,#0
   068B EE                 1418 	mov	a,r6
   068C 4F                 1419 	orl	a,r7
   068D B4 01 00           1420 	cjne	a,#0x01,00138$
   0690                    1421 00138$:
   0690 E4                 1422 	clr	a
   0691 33                 1423 	rlc	a
   0692 F8                 1424 	mov  r0,a
   0693 60 06              1425 	jz  00121$
   0695                    1426 00139$:
                           1427 ;	genAssign: resultIsFar = FALSE
   0695 78 6E              1428 	mov	r0,#0x6E
   0697 79 01              1429 	mov	r1,#0x01
   0699 80 04              1430 	sjmp 00122$
   069B                    1431 00121$:
                           1432 ;	genAssign: resultIsFar = FALSE
   069B 78 6D              1433 	mov	r0,#0x6D
   069D 79 01              1434 	mov	r1,#0x01
   069F                    1435 00122$:
   069F C0 06              1436 	push	ar6
   06A1 C0 07              1437 	push	ar7
   06A3 E9                 1438 	mov	a,r1
   06A4 33                 1439 	rlc	a
   06A5 95 E0              1440 	subb	a,acc
   06A7 FE                 1441 	mov	r6,a
   06A8 FF                 1442 	mov	r7,a
   06A9 C3                 1443 	clr	c
   06AA EA                 1444 	mov	a,r2
   06AB 98                 1445 	subb	a,r0
   06AC FA                 1446 	mov	r2,a
   06AD EB                 1447 	mov	a,r3
   06AE 99                 1448 	subb	a,r1
   06AF FB                 1449 	mov	r3,a
   06B0 EC                 1450 	mov	a,r4
   06B1 9E                 1451 	subb	a,r6
   06B2 FC                 1452 	mov	r4,a
   06B3 ED                 1453 	mov	a,r5
   06B4 9F                 1454 	subb	a,r7
   06B5 FD                 1455 	mov	r5,a
                           1456 ;	time.c:147: epoch -= days; // now it is days in this year, starting at 0
   06B6 90s00r00r4B        1457 	mov	dptr,#_gmtime_epoch_1_1
   06BA C3                 1458 	clr	c
   06BB E0                 1459 	movx	a,@dptr
   06BC 9A                 1460 	subb	a,r2
   06BD F0                 1461 	movx	@dptr,a
   06BE A3                 1462 	inc	dptr
   06BF E0                 1463 	movx	a,@dptr
   06C0 9B                 1464 	subb	a,r3
   06C1 F0                 1465 	movx	@dptr,a
   06C2 A3                 1466 	inc	dptr
   06C3 E0                 1467 	movx	a,@dptr
   06C4 9C                 1468 	subb	a,r4
   06C5 F0                 1469 	movx	@dptr,a
   06C6 A3                 1470 	inc	dptr
   06C7 E0                 1471 	movx	a,@dptr
   06C8 9D                 1472 	subb	a,r5
   06C9 F0                 1473 	movx	@dptr,a
                           1474 ;	time.c:148: lastTime.tm_yday=epoch;
   06CA 90s00r00r4B        1475 	mov	dptr,#_gmtime_epoch_1_1
   06CE E0                 1476 	movx	a,@dptr
   06CF FE                 1477 	mov	r6,a
   06D0 A3                 1478 	inc	dptr
   06D1 E0                 1479 	movx	a,@dptr
   06D2 FF                 1480 	mov	r7,a
   06D3 90s00r00r47        1481 	mov	dptr,#(_lastTime + 0x000008)
   06D7 EE                 1482 	mov	a,r6
   06D8 F0                 1483 	movx	@dptr,a
   06D9 A3                 1484 	inc	dptr
   06DA EF                 1485 	mov	a,r7
   06DB F0                 1486 	movx	@dptr,a
                           1487 ;	time.c:175: return &lastTime;
   06DC D0 07              1488 	pop	ar7
   06DE D0 06              1489 	pop	ar6
                           1490 ;	time.c:153: for (month=0; month<12; month++) {
                           1491 ;	genAssign: resultIsFar = FALSE
   06E0 78 00              1492 	mov	r0,#0x00
   06E2                    1493 00113$:
   06E2 B8 0C 00           1494 	cjne	r0,#0x0C,00140$
   06E5                    1495 00140$:
   06E5 50 4A              1496 	jnc  00116$
   06E7                    1497 00141$:
                           1498 ;	time.c:154: if (month==1) { // februari
   06E7 E8                 1499 	mov	a,r0
   06E8 B4 01 0C           1500 	cjne a,#0x01,00108$
   06EB                    1501 00143$:
                           1502 ;	time.c:155: if (LEAP_YEAR(year)) {
   06EB EE                 1503 	mov	a,r6
   06EC 4F                 1504 	orl	a,r7
   06ED 70 04              1505 	jnz  00105$
   06EF                    1506 00144$:
                           1507 ;	time.c:156: monthLength=29;
                           1508 ;	genAssign: resultIsFar = TRUE
   06EF 79 1D              1509 	mov	r1,#0x1D
   06F1 80 0D              1510 	sjmp 00109$
   06F3                    1511 00105$:
                           1512 ;	time.c:158: monthLength=28;
                           1513 ;	genAssign: resultIsFar = TRUE
   06F3 79 1C              1514 	mov	r1,#0x1C
   06F5 80 09              1515 	sjmp 00109$
   06F7                    1516 00108$:
                           1517 ;	time.c:161: monthLength = monthDays[month];
   06F7 E8                 1518 	mov	a,r0
   06F8 90s00r00r00        1519 	mov	dptr,#_monthDays
   06FC 93                 1520 	movc	a,@a+dptr
   06FD FA                 1521 	mov	r2,a
                           1522 ;	genAssign: resultIsFar = TRUE
   06FE 8A 01              1523 	mov	ar1,r2
   0700                    1524 00109$:
                           1525 ;	time.c:164: if (epoch>=monthLength) {
   0700 89 02              1526 	mov	ar2,r1
   0702 7B 00              1527 	mov	r3,#0
   0704 7C 00              1528 	mov	r4,#0
   0706 7D 00              1529 	mov	r5,#0
   0708 90s00r00r4B        1530 	mov	dptr,#_gmtime_epoch_1_1
   070C C3                 1531 	clr	c
   070D E0                 1532 	movx	a,@dptr
   070E 9A                 1533 	subb	a,r2
   070F A3                 1534 	inc	dptr
   0710 E0                 1535 	movx	a,@dptr
   0711 9B                 1536 	subb	a,r3
   0712 A3                 1537 	inc	dptr
   0713 E0                 1538 	movx	a,@dptr
   0714 9C                 1539 	subb	a,r4
   0715 A3                 1540 	inc	dptr
   0716 E0                 1541 	movx	a,@dptr
   0717 9D                 1542 	subb	a,r5
   0718 40 17              1543 	jc   00116$
   071A                    1544 00145$:
                           1545 ;	time.c:165: epoch-=monthLength;
   071A 90s00r00r4B        1546 	mov	dptr,#_gmtime_epoch_1_1
   071E C3                 1547 	clr	c
   071F E0                 1548 	movx	a,@dptr
   0720 9A                 1549 	subb	a,r2
   0721 F0                 1550 	movx	@dptr,a
   0722 A3                 1551 	inc	dptr
   0723 E0                 1552 	movx	a,@dptr
   0724 9B                 1553 	subb	a,r3
   0725 F0                 1554 	movx	@dptr,a
   0726 A3                 1555 	inc	dptr
   0727 E0                 1556 	movx	a,@dptr
   0728 9C                 1557 	subb	a,r4
   0729 F0                 1558 	movx	@dptr,a
   072A A3                 1559 	inc	dptr
   072B E0                 1560 	movx	a,@dptr
   072C 9D                 1561 	subb	a,r5
   072D F0                 1562 	movx	@dptr,a
                           1563 ;	time.c:153: for (month=0; month<12; month++) {
   072E 08                 1564 	inc	r0
   072F 80 B1              1565 	sjmp 00113$
   0731                    1566 00116$:
                           1567 ;	time.c:170: lastTime.tm_mon=month;
   0731 90s00r00r43        1568 	mov	dptr,#(_lastTime + 0x000004)
   0735 E8                 1569 	mov	a,r0
   0736 F0                 1570 	movx	@dptr,a
                           1571 ;	time.c:171: lastTime.tm_mday=epoch+1;
   0737 90s00r00r4B        1572 	mov	dptr,#_gmtime_epoch_1_1
   073B E0                 1573 	movx	a,@dptr
   073C 04                 1574 	inc  a
   073D FA                 1575 	mov  r2,a
   073E 90s00r00r42        1576 	mov  dptr,#(_lastTime + 0x000003)
   0742 F0                 1577 	movx @dptr,a
                           1578 ;	time.c:173: lastTime.tm_isdst=0;
   0743 90s00r00r49        1579 	mov	dptr,#(_lastTime + 0x00000a)
   0747 E4                 1580 	clr  a
   0748 F0                 1581 	movx	@dptr,a
                           1582 ;	time.c:175: return &lastTime;
   0749 90s00r00r3F        1583 	mov dptr,#_lastTime
   074D 75 F0 00           1584 	mov	b,#0x00
   0750                    1585 00117$:
   0750 22                 1586 	ret
                           1587 ;------------------------------------------------------------
                           1588 ;Allocation info for local variables in function 'mktime'
                           1589 ;------------------------------------------------------------
                           1590 ;timeptr                   Allocated with name '_mktime_timeptr_1_1'
                           1591 ;year                      Allocated with name '_mktime_year_1_1'
                           1592 ;month                     Allocated with name '_mktime_month_1_1'
                           1593 ;i                         Allocated to registers 
                           1594 ;seconds                   Allocated with name '_mktime_seconds_1_1'
                           1595 ;sloc0                     Allocated with name '_mktime_sloc0_1_0'
                           1596 ;------------------------------------------------------------
                           1597 ;	time.c:179: time_t mktime(struct tm *timeptr) {
                           1598 ;	-----------------------------------------
                           1599 ;	 function mktime
                           1600 ;	-----------------------------------------
   0751                    1601 _mktime:
   0751 75 86 01           1602 	mov     dps, #1
   0754 90s00r00r4F        1603 	mov     dptr, #_mktime_timeptr_1_1
   0758 E5 82              1604 	mov	a,dpl
   075A F0                 1605 	movx	@dptr,a
   075B A3                 1606 	inc	dptr
   075C E5 83              1607 	mov	a,dph
   075E F0                 1608 	movx	@dptr,a
   075F A3                 1609 	inc	dptr
   0760 E5 93              1610 	mov	a,dpx
   0762 F0                 1611 	movx	@dptr,a
   0763 A3                 1612 	inc	dptr
   0764 E5 F0              1613 	mov	a,b
   0766 F0                 1614 	movx	@dptr,a
   0767 75 86 00           1615 	mov	dps,#0
                           1616 ;	time.c:180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
   076A 90s00r00r4F        1617 	mov	dptr,#_mktime_timeptr_1_1
   076E E0                 1618 	movx	a,@dptr
   076F 24 05              1619 	add	a,#0x05
   0771 FE                 1620 	mov	r6,a
   0772 A3                 1621 	inc	dptr
   0773 E0                 1622 	movx	a,@dptr
   0774 34 00              1623 	addc	a,#0x00
   0776 FF                 1624 	mov	r7,a
   0777 A3                 1625 	inc	dptr
   0778 E0                 1626 	movx	a,@dptr
   0779 34 00              1627 	addc	a,#0x00
   077B F8                 1628 	mov	r0,a
   077C A3                 1629 	inc	dptr
   077D E0                 1630 	movx	a,@dptr
   077E F9                 1631 	mov	r1,a
   077F 8E 82              1632 	mov	dpl,r6
   0781 8F 83              1633 	mov	dph,r7
   0783 88 93              1634 	mov	dpx,r0
   0785 89 F0              1635 	mov	b,r1
   0787 12s00r00r00        1636 	lcall	__gptrgetWord
   078B FE                 1637 	mov	r6,a
   078C AF 9C              1638 	mov	r7,_ap
   078E 90s00r00r53        1639 	mov	dptr,#_mktime_year_1_1
   0792 74 6C              1640 	mov	a,#0x6C
   0794 2E                 1641 	add	a,r6
   0795 F0                 1642 	movx	@dptr,a
   0796 74 07              1643 	mov	a,#0x07
   0798 3F                 1644 	addc	a,r7
   0799 A3                 1645 	inc	dptr
   079A F0                 1646 	movx	@dptr,a
   079B 90s00r00r4F        1647 	mov	dptr,#_mktime_timeptr_1_1
   079F E0                 1648 	movx	a,@dptr
   07A0 24 04              1649 	add	a,#0x04
   07A2 F8                 1650 	mov	r0,a
   07A3 A3                 1651 	inc	dptr
   07A4 E0                 1652 	movx	a,@dptr
   07A5 34 00              1653 	addc	a,#0x00
   07A7 F9                 1654 	mov	r1,a
   07A8 A3                 1655 	inc	dptr
   07A9 E0                 1656 	movx	a,@dptr
   07AA 34 00              1657 	addc	a,#0x00
   07AC FE                 1658 	mov	r6,a
   07AD A3                 1659 	inc	dptr
   07AE E0                 1660 	movx	a,@dptr
   07AF FF                 1661 	mov	r7,a
   07B0 88 82              1662 	mov	dpl,r0
   07B2 89 83              1663 	mov	dph,r1
   07B4 8E 93              1664 	mov	dpx,r6
   07B6 8F F0              1665 	mov	b,r7
   07B8 12s00r00r00        1666 	lcall	__gptrget
   07BC F8                 1667 	mov  r0,a
   07BD 90s00r00r55        1668 	mov  dptr,#_mktime_month_1_1
   07C1 F0                 1669 	movx @dptr,a
   07C2 A3                 1670 	inc	dptr
   07C3 E4                 1671 	clr	a
   07C4 F0                 1672 	movx	@dptr,a
                           1673 ;	time.c:183: CheckTime(timeptr);
   07C5 05 86              1674 	inc	dps
   07C7 90s00r00r4F        1675 	mov	dptr,#_mktime_timeptr_1_1
   07CB E0                 1676 	movx	a,@dptr
   07CC F5 82              1677 	mov	dpl,a
   07CE A3                 1678 	inc	dptr
   07CF E0                 1679 	movx	a,@dptr
   07D0 F5 83              1680 	mov	dph,a
   07D2 A3                 1681 	inc	dptr
   07D3 E0                 1682 	movx	a,@dptr
   07D4 F5 93              1683 	mov	dpx,a
   07D6 A3                 1684 	inc	dptr
   07D7 E0                 1685 	movx	a,@dptr
   07D8 F5 F0              1686 	mov	b,a
   07DA 75 86 00           1687 	mov	dps,#0
   07DD 12s00r00r9D        1688 	lcall	_CheckTime
                           1689 ;	time.c:186: seconds= (year-1970)*(60*60*24L*365);
   07E1 90s00r00r53        1690 	mov	dptr,#_mktime_year_1_1
   07E5 E0                 1691 	movx	a,@dptr
   07E6 24 4E              1692 	add	a,#0x4E
   07E8 F8                 1693 	mov	r0,a
   07E9 A3                 1694 	inc	dptr
   07EA E0                 1695 	movx	a,@dptr
   07EB 34 F8              1696 	addc	a,#0xF8
   07ED F9                 1697 	mov	r1,a
   07EE 90s00r00r00        1698 	mov	dptr,#__mullong_PARM_2
   07F2 E8                 1699 	mov	a,r0
   07F3 F0                 1700 	movx	@dptr,a
   07F4 A3                 1701 	inc	dptr
   07F5 E9                 1702 	mov	a,r1
   07F6 F0                 1703 	movx	@dptr,a
   07F7 E9                 1704 	mov	a,r1
   07F8 33                 1705 	rlc	a
   07F9 95 E0              1706 	subb	a,acc
   07FB A3                 1707 	inc	dptr
   07FC F0                 1708 	movx	@dptr,a
   07FD A3                 1709 	inc	dptr
   07FE F0                 1710 	movx	@dptr,a
   07FF 90 E1 33 80        1711 	mov	dptr,#0xE13380
   0803 75 F0 01           1712 	mov	b,#0x01
   0806 12s00r00r00        1713 	lcall	__mullong
   080A A8 82              1714 	mov	r0,dpl
   080C A9 83              1715 	mov	r1,dph
   080E AE 93              1716 	mov	r6,dpx
   0810 AF F0              1717 	mov	r7,b
                           1718 ;	genAssign: resultIsFar = TRUE
   0812 90s00r00r57        1719 	mov	dptr,#_mktime_seconds_1_1
   0816 E8                 1720 	mov	a,r0
   0817 F0                 1721 	movx	@dptr,a
   0818 A3                 1722 	inc	dptr
   0819 E9                 1723 	mov	a,r1
   081A F0                 1724 	movx	@dptr,a
   081B A3                 1725 	inc	dptr
   081C EE                 1726 	mov	a,r6
   081D F0                 1727 	movx	@dptr,a
   081E A3                 1728 	inc	dptr
   081F EF                 1729 	mov	a,r7
   0820 F0                 1730 	movx	@dptr,a
                           1731 ;	time.c:189: for (i=1970; i<year; i++) {
   0821 90s00r00r57        1732 	mov	dptr,#_mktime_seconds_1_1
                           1733 ;	genAssign: resultIsFar = FALSE
   0825 E0                 1734 	movx	a,@dptr
   0826 FA                 1735 	mov	r2,a
   0827 A3                 1736 	inc	dptr
   0828 E0                 1737 	movx	a,@dptr
   0829 FB                 1738 	mov	r3,a
   082A A3                 1739 	inc	dptr
   082B E0                 1740 	movx	a,@dptr
   082C FC                 1741 	mov	r4,a
   082D A3                 1742 	inc	dptr
   082E E0                 1743 	movx	a,@dptr
   082F FD                 1744 	mov	r5,a
                           1745 ;	genAssign: resultIsFar = FALSE
   0830 7E B2              1746 	mov	r6,#0xB2
   0832 7F 07              1747 	mov	r7,#0x07
   0834                    1748 00107$:
   0834 90s00r00r53        1749 	mov	dptr,#_mktime_year_1_1
   0838 C3                 1750 	clr	c
   0839 EE                 1751 	mov	a,r6
   083A C5 F0              1752 	xch	a, b
   083C E0                 1753 	movx	a,@dptr
   083D C5 F0              1754 	xch	a, b
   083F 95 F0              1755 	subb	a,b
   0841 EF                 1756 	mov	a,r7
   0842 64 80              1757 	xrl	a,#0x80
   0844 C5 F0              1758 	xch	a, b
   0846 A3                 1759 	inc	dptr
   0847 E0                 1760 	movx	a,@dptr
   0848 C5 F0              1761 	xch	a, b
   084A 63 F0 80           1762 	xrl	b,#0x80
   084D 95 F0              1763 	subb	a,b
   084F 50 46              1764 	jnc  00124$
   0851                    1765 00126$:
                           1766 ;	time.c:190: if (LEAP_YEAR(i)) {
                           1767 ;	genAssign: resultIsFar = TRUE
   0851 90s00r00r00        1768 	mov	dptr,#__modsint_PARM_2
   0855 74 04              1769 	mov	a,#0x04
   0857 F0                 1770 	movx	@dptr,a
   0858 E4                 1771 	clr	a
   0859 A3                 1772 	inc	dptr
   085A F0                 1773 	movx	@dptr,a
   085B C0 02              1774 	push	ar2
   085D C0 03              1775 	push	ar3
   085F C0 04              1776 	push	ar4
   0861 C0 05              1777 	push	ar5
   0863 C0 06              1778 	push	ar6
   0865 C0 07              1779 	push	ar7
   0867 8E 82              1780 	mov	dpl,r6
   0869 8F 83              1781 	mov	dph,r7
   086B 12s00r00r00        1782 	lcall	__modsint
   086F D0 07              1783 	pop	ar7
   0871 D0 06              1784 	pop	ar6
   0873 D0 05              1785 	pop	ar5
   0875 D0 04              1786 	pop	ar4
   0877 D0 03              1787 	pop	ar3
   0879 D0 02              1788 	pop	ar2
   087B E5 82              1789 	mov	a,dpl
   087D 45 83              1790 	orl	a,dph
   087F 70 0F              1791 	jnz  00109$
   0881                    1792 00127$:
                           1793 ;	time.c:191: seconds+= 60*60*24L;
   0881 74 80              1794 	mov	a,#0x80
   0883 2A                 1795 	add	a,r2
   0884 FA                 1796 	mov	r2,a
   0885 74 51              1797 	mov	a,#0x51
   0887 3B                 1798 	addc	a,r3
   0888 FB                 1799 	mov	r3,a
   0889 74 01              1800 	mov	a,#0x01
   088B 3C                 1801 	addc	a,r4
   088C FC                 1802 	mov	r4,a
   088D E4                 1803 	clr  a
   088E 3D                 1804 	addc	a,r5
   088F FD                 1805 	mov	r5,a
   0890                    1806 00109$:
                           1807 ;	time.c:189: for (i=1970; i<year; i++) {
   0890 0E                 1808 	inc	r6
   0891 BE 00 01           1809 	cjne	r6,#0,00128$
   0894 0F                 1810 	inc	r7
   0895                    1811 00128$:
   0895 80 9D              1812 	sjmp 00107$
   0897                    1813 00124$:
                           1814 ;	genAssign: resultIsFar = TRUE
   0897 90s00r00r57        1815 	mov	dptr,#_mktime_seconds_1_1
   089B EA                 1816 	mov	a,r2
   089C F0                 1817 	movx	@dptr,a
   089D A3                 1818 	inc	dptr
   089E EB                 1819 	mov	a,r3
   089F F0                 1820 	movx	@dptr,a
   08A0 A3                 1821 	inc	dptr
   08A1 EC                 1822 	mov	a,r4
   08A2 F0                 1823 	movx	@dptr,a
   08A3 A3                 1824 	inc	dptr
   08A4 ED                 1825 	mov	a,r5
   08A5 F0                 1826 	movx	@dptr,a
                           1827 ;	time.c:196: for (i=0; i<month; i++) {
                           1828 ;	genAssign: resultIsFar = TRUE
   08A6 90s00r00r00        1829 	mov	dptr,#__modsint_PARM_2
   08AA 74 04              1830 	mov	a,#0x04
   08AC F0                 1831 	movx	@dptr,a
   08AD E4                 1832 	clr	a
   08AE A3                 1833 	inc	dptr
   08AF F0                 1834 	movx	@dptr,a
   08B0 05 86              1835 	inc	dps
   08B2 90s00r00r53        1836 	mov	dptr,#_mktime_year_1_1
   08B6 E0                 1837 	movx	a,@dptr
   08B7 F5 82              1838 	mov	dpl,a
   08B9 A3                 1839 	inc	dptr
   08BA E0                 1840 	movx	a,@dptr
   08BB F5 83              1841 	mov	dph,a
   08BD 75 86 00           1842 	mov	dps,#0
   08C0 12s00r00r00        1843 	lcall	__modsint
   08C4 AA 82              1844 	mov	r2,dpl
   08C6 AB 83              1845 	mov	r3,dph
                           1846 ;	genAssign: resultIsFar = FALSE
   08C8 7C 00              1847 	mov	r4,#0x00
   08CA 7D 00              1848 	mov	r5,#0x00
   08CC                    1849 00111$:
   08CC 90s00r00r55        1850 	mov	dptr,#_mktime_month_1_1
   08D0 C3                 1851 	clr	c
   08D1 EC                 1852 	mov	a,r4
   08D2 C5 F0              1853 	xch	a, b
   08D4 E0                 1854 	movx	a,@dptr
   08D5 C5 F0              1855 	xch	a, b
   08D7 95 F0              1856 	subb	a,b
   08D9 ED                 1857 	mov	a,r5
   08DA 64 80              1858 	xrl	a,#0x80
   08DC C5 F0              1859 	xch	a, b
   08DE A3                 1860 	inc	dptr
   08DF E0                 1861 	movx	a,@dptr
   08E0 C5 F0              1862 	xch	a, b
   08E2 63 F0 80           1863 	xrl	b,#0x80
   08E5 95 F0              1864 	subb	a,b
   08E7 40 04              1865 	jc	00129$
   08E9 02s00r09r72        1866 	ljmp	00114$
   08ED                    1867 00129$:
                           1868 ;	time.c:197: if (i==1 && LEAP_YEAR(year)) { 
   08ED EC                 1869 	mov	a,r4
   08EE B4 01 21           1870 	cjne a,#0x01,00104$
   08F1 ED                 1871 	mov  a,r5
   08F2 B4 00 1D           1872 	cjne a,#0x00,00104$
   08F5                    1873 00131$:
   08F5 EA                 1874 	mov	a,r2
   08F6 4B                 1875 	orl	a,r3
   08F7 70 19              1876 	jnz  00104$
   08F9                    1877 00132$:
                           1878 ;	time.c:198: seconds+= 60*60*24L*29;
   08F9 90s00r00r57        1879 	mov	dptr,#_mktime_seconds_1_1
   08FD E0                 1880 	movx	a,@dptr
   08FE 24 80              1881 	add	a,#0x80
   0900 F0                 1882 	movx	@dptr,a
   0901 A3                 1883 	inc	dptr
   0902 E0                 1884 	movx	a,@dptr
   0903 34 3B              1885 	addc	a,#0x3B
   0905 F0                 1886 	movx	@dptr,a
   0906 A3                 1887 	inc	dptr
   0907 E0                 1888 	movx	a,@dptr
   0908 34 26              1889 	addc	a,#0x26
   090A F0                 1890 	movx	@dptr,a
   090B A3                 1891 	inc	dptr
   090C E0                 1892 	movx	a,@dptr
   090D 34 00              1893 	addc	a,#0x00
   090F F0                 1894 	movx	@dptr,a
   0910 80 57              1895 	sjmp 00113$
   0912                    1896 00104$:
                           1897 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
   0912 C0 02              1898 	push	ar2
   0914 C0 03              1899 	push	ar3
   0916 EC                 1900 	mov	a,r4
   0917 24r00              1901 	add	a,#_monthDays
   0919 F5 82              1902 	mov	dpl,a
   091B ED                 1903 	mov	a,r5
   091C 34s00              1904 	addc	a,#(_monthDays >> 8)
   091E F5 83              1905 	mov	dph,a
   0920 E4                 1906 	clr	a
   0921 34s00              1907 	addc	a,#(_monthDays >> 16)
   0923 F5 93              1908 	mov	dpx,a
   0925 E4                 1909 	clr	a
   0926 93                 1910 	movc	a,@a+dptr
   0927 FA                 1911 	mov  r2,a
   0928 90s00r00r00        1912 	mov  dptr,#__mullong_PARM_2
   092C F0                 1913 	movx @dptr,a
   092D EA                 1914 	mov	a,r2
   092E 33                 1915 	rlc	a
   092F 95 E0              1916 	subb	a,acc
   0931 A3                 1917 	inc	dptr
   0932 F0                 1918 	movx	@dptr,a
   0933 A3                 1919 	inc	dptr
   0934 F0                 1920 	movx	@dptr,a
   0935 A3                 1921 	inc	dptr
   0936 F0                 1922 	movx	@dptr,a
   0937 C0 04              1923 	push	ar4
   0939 C0 05              1924 	push	ar5
   093B 90 01 51 80        1925 	mov	dptr,#0x015180
   093F 75 F0 00           1926 	mov	b,#0x00
   0942 12s00r00r00        1927 	lcall	__mullong
   0946 AA 82              1928 	mov	r2,dpl
   0948 AB 83              1929 	mov	r3,dph
   094A AE 93              1930 	mov	r6,dpx
   094C AF F0              1931 	mov	r7,b
   094E D0 05              1932 	pop	ar5
   0950 D0 04              1933 	pop	ar4
   0952 90s00r00r57        1934 	mov	dptr,#_mktime_seconds_1_1
   0956 E0                 1935 	movx	a,@dptr
   0957 2A                 1936 	add	a,r2
   0958 F0                 1937 	movx	@dptr,a
   0959 A3                 1938 	inc	dptr
   095A E0                 1939 	movx	a,@dptr
   095B 3B                 1940 	addc	a,r3
   095C F0                 1941 	movx	@dptr,a
   095D A3                 1942 	inc	dptr
   095E E0                 1943 	movx	a,@dptr
   095F 3E                 1944 	addc	a,r6
   0960 F0                 1945 	movx	@dptr,a
   0961 A3                 1946 	inc	dptr
   0962 E0                 1947 	movx	a,@dptr
   0963 3F                 1948 	addc	a,r7
   0964 F0                 1949 	movx	@dptr,a
                           1950 ;	time.c:208: return seconds;
   0965 D0 03              1951 	pop	ar3
   0967 D0 02              1952 	pop	ar2
                           1953 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
   0969                    1954 00113$:
                           1955 ;	time.c:196: for (i=0; i<month; i++) {
   0969 0C                 1956 	inc	r4
   096A BC 00 01           1957 	cjne	r4,#0,00133$
   096D 0D                 1958 	inc	r5
   096E                    1959 00133$:
   096E 02s00r08rCC        1960 	ljmp	00111$
   0972                    1961 00114$:
                           1962 ;	time.c:204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
   0972 90s00r00r4F        1963 	mov	dptr,#_mktime_timeptr_1_1
   0976 E0                 1964 	movx	a,@dptr
   0977 24 03              1965 	add	a,#0x03
   0979 FA                 1966 	mov	r2,a
   097A A3                 1967 	inc	dptr
   097B E0                 1968 	movx	a,@dptr
   097C 34 00              1969 	addc	a,#0x00
   097E FB                 1970 	mov	r3,a
   097F A3                 1971 	inc	dptr
   0980 E0                 1972 	movx	a,@dptr
   0981 34 00              1973 	addc	a,#0x00
   0983 FC                 1974 	mov	r4,a
   0984 A3                 1975 	inc	dptr
   0985 E0                 1976 	movx	a,@dptr
   0986 FD                 1977 	mov	r5,a
   0987 8A 82              1978 	mov	dpl,r2
   0989 8B 83              1979 	mov	dph,r3
   098B 8C 93              1980 	mov	dpx,r4
   098D 8D F0              1981 	mov	b,r5
   098F 12s00r00r00        1982 	lcall	__gptrget
   0993 FA                 1983 	mov	r2,a
   0994 7B 00              1984 	mov	r3,#0
   0996 1A                 1985 	dec	r2
   0997 BA FF 01           1986 	cjne	r2,#0xFF,00134$
   099A 1B                 1987 	dec	r3
   099B                    1988 00134$:
   099B 90s00r00r00        1989 	mov	dptr,#__mullong_PARM_2
   099F EA                 1990 	mov	a,r2
   09A0 F0                 1991 	movx	@dptr,a
   09A1 A3                 1992 	inc	dptr
   09A2 EB                 1993 	mov	a,r3
   09A3 F0                 1994 	movx	@dptr,a
   09A4 EB                 1995 	mov	a,r3
   09A5 33                 1996 	rlc	a
   09A6 95 E0              1997 	subb	a,acc
   09A8 A3                 1998 	inc	dptr
   09A9 F0                 1999 	movx	@dptr,a
   09AA A3                 2000 	inc	dptr
   09AB F0                 2001 	movx	@dptr,a
   09AC 90 01 51 80        2002 	mov	dptr,#0x015180
   09B0 75 F0 00           2003 	mov	b,#0x00
   09B3 12s00r00r00        2004 	lcall	__mullong
   09B7 AA 82              2005 	mov	r2,dpl
   09B9 AB 83              2006 	mov	r3,dph
   09BB AC 93              2007 	mov	r4,dpx
   09BD AD F0              2008 	mov	r5,b
   09BF 90s00r00r57        2009 	mov	dptr,#_mktime_seconds_1_1
   09C3 E0                 2010 	movx	a,@dptr
   09C4 2A                 2011 	add	a,r2
   09C5 F0                 2012 	movx	@dptr,a
   09C6 A3                 2013 	inc	dptr
   09C7 E0                 2014 	movx	a,@dptr
   09C8 3B                 2015 	addc	a,r3
   09C9 F0                 2016 	movx	@dptr,a
   09CA A3                 2017 	inc	dptr
   09CB E0                 2018 	movx	a,@dptr
   09CC 3C                 2019 	addc	a,r4
   09CD F0                 2020 	movx	@dptr,a
   09CE A3                 2021 	inc	dptr
   09CF E0                 2022 	movx	a,@dptr
   09D0 3D                 2023 	addc	a,r5
   09D1 F0                 2024 	movx	@dptr,a
                           2025 ;	time.c:205: seconds+= timeptr->tm_hour*60*60L;
   09D2 90s00r00r4F        2026 	mov	dptr,#_mktime_timeptr_1_1
   09D6 E0                 2027 	movx	a,@dptr
   09D7 24 02              2028 	add	a,#0x02
   09D9 FA                 2029 	mov	r2,a
   09DA A3                 2030 	inc	dptr
   09DB E0                 2031 	movx	a,@dptr
   09DC 34 00              2032 	addc	a,#0x00
   09DE FB                 2033 	mov	r3,a
   09DF A3                 2034 	inc	dptr
   09E0 E0                 2035 	movx	a,@dptr
   09E1 34 00              2036 	addc	a,#0x00
   09E3 FC                 2037 	mov	r4,a
   09E4 A3                 2038 	inc	dptr
   09E5 E0                 2039 	movx	a,@dptr
   09E6 FD                 2040 	mov	r5,a
   09E7 8A 82              2041 	mov	dpl,r2
   09E9 8B 83              2042 	mov	dph,r3
   09EB 8C 93              2043 	mov	dpx,r4
   09ED 8D F0              2044 	mov	b,r5
   09EF 12s00r00r00        2045 	lcall	__gptrget
   09F3 FA                 2046 	mov  r2,a
   09F4 90s00r00r00        2047 	mov  dptr,#__mullong_PARM_2
   09F8 F0                 2048 	movx @dptr,a
   09F9 A3                 2049 	inc	dptr
   09FA E4                 2050 	clr	a
   09FB F0                 2051 	movx	@dptr,a
   09FC A3                 2052 	inc	dptr
   09FD E4                 2053 	clr	a
   09FE F0                 2054 	movx	@dptr,a
   09FF A3                 2055 	inc	dptr
   0A00 E4                 2056 	clr	a
   0A01 F0                 2057 	movx	@dptr,a
   0A02 90 00 0E 10        2058 	mov	dptr,#0x000E10
   0A06 75 F0 00           2059 	mov	b,#0x00
   0A09 12s00r00r00        2060 	lcall	__mullong
   0A0D AA 82              2061 	mov	r2,dpl
   0A0F AB 83              2062 	mov	r3,dph
   0A11 AC 93              2063 	mov	r4,dpx
   0A13 AD F0              2064 	mov	r5,b
   0A15 90s00r00r57        2065 	mov	dptr,#_mktime_seconds_1_1
   0A19 E0                 2066 	movx	a,@dptr
   0A1A 2A                 2067 	add	a,r2
   0A1B F0                 2068 	movx	@dptr,a
   0A1C A3                 2069 	inc	dptr
   0A1D E0                 2070 	movx	a,@dptr
   0A1E 3B                 2071 	addc	a,r3
   0A1F F0                 2072 	movx	@dptr,a
   0A20 A3                 2073 	inc	dptr
   0A21 E0                 2074 	movx	a,@dptr
   0A22 3C                 2075 	addc	a,r4
   0A23 F0                 2076 	movx	@dptr,a
   0A24 A3                 2077 	inc	dptr
   0A25 E0                 2078 	movx	a,@dptr
   0A26 3D                 2079 	addc	a,r5
   0A27 F0                 2080 	movx	@dptr,a
                           2081 ;	time.c:206: seconds+= timeptr->tm_min*60;
   0A28 90s00r00r4F        2082 	mov	dptr,#_mktime_timeptr_1_1
   0A2C E0                 2083 	movx	a,@dptr
   0A2D 24 01              2084 	add	a,#0x01
   0A2F FA                 2085 	mov	r2,a
   0A30 A3                 2086 	inc	dptr
   0A31 E0                 2087 	movx	a,@dptr
   0A32 34 00              2088 	addc	a,#0x00
   0A34 FB                 2089 	mov	r3,a
   0A35 A3                 2090 	inc	dptr
   0A36 E0                 2091 	movx	a,@dptr
   0A37 34 00              2092 	addc	a,#0x00
   0A39 FC                 2093 	mov	r4,a
   0A3A A3                 2094 	inc	dptr
   0A3B E0                 2095 	movx	a,@dptr
   0A3C FD                 2096 	mov	r5,a
   0A3D 8A 82              2097 	mov	dpl,r2
   0A3F 8B 83              2098 	mov	dph,r3
   0A41 8C 93              2099 	mov	dpx,r4
   0A43 8D F0              2100 	mov	b,r5
   0A45 12s00r00r00        2101 	lcall	__gptrget
   0A49 FA                 2102 	mov	r2,a
   0A4A 75 F0 3C           2103 	mov	b,#0x3C
   0A4D EA                 2104 	mov	a,r2
   0A4E A4                 2105 	mul	ab
   0A4F FA                 2106 	mov	r2,a
   0A50 AB F0              2107 	mov	r3,b
   0A52 EB                 2108 	mov	a,r3
   0A53 33                 2109 	rlc	a
   0A54 95 E0              2110 	subb	a,acc
   0A56 FC                 2111 	mov	r4,a
   0A57 FD                 2112 	mov	r5,a
   0A58 90s00r00r57        2113 	mov	dptr,#_mktime_seconds_1_1
   0A5C E0                 2114 	movx	a,@dptr
   0A5D 2A                 2115 	add	a,r2
   0A5E F0                 2116 	movx	@dptr,a
   0A5F A3                 2117 	inc	dptr
   0A60 E0                 2118 	movx	a,@dptr
   0A61 3B                 2119 	addc	a,r3
   0A62 F0                 2120 	movx	@dptr,a
   0A63 A3                 2121 	inc	dptr
   0A64 E0                 2122 	movx	a,@dptr
   0A65 3C                 2123 	addc	a,r4
   0A66 F0                 2124 	movx	@dptr,a
   0A67 A3                 2125 	inc	dptr
   0A68 E0                 2126 	movx	a,@dptr
   0A69 3D                 2127 	addc	a,r5
   0A6A F0                 2128 	movx	@dptr,a
                           2129 ;	time.c:207: seconds+= timeptr->tm_sec;
   0A6B 75 86 01           2130 	mov     dps, #1
   0A6E 90s00r00r4F        2131 	mov     dptr, #_mktime_timeptr_1_1
   0A72 E0                 2132 	movx	a,@dptr
   0A73 F5 82              2133 	mov	dpl,a
   0A75 A3                 2134 	inc	dptr
   0A76 E0                 2135 	movx	a,@dptr
   0A77 F5 83              2136 	mov	dph,a
   0A79 A3                 2137 	inc	dptr
   0A7A E0                 2138 	movx	a,@dptr
   0A7B F5 93              2139 	mov	dpx,a
   0A7D A3                 2140 	inc	dptr
   0A7E E0                 2141 	movx	a,@dptr
   0A7F F5 F0              2142 	mov	b,a
   0A81 75 86 00           2143 	mov	dps,#0
   0A84 12s00r00r00        2144 	lcall	__gptrget
   0A88 FA                 2145 	mov	r2,a
   0A89 7B 00              2146 	mov	r3,#0
   0A8B EB                 2147 	mov	a,r3
   0A8C 33                 2148 	rlc	a
   0A8D 95 E0              2149 	subb	a,acc
   0A8F FC                 2150 	mov	r4,a
   0A90 FD                 2151 	mov	r5,a
   0A91 90s00r00r57        2152 	mov	dptr,#_mktime_seconds_1_1
   0A95 E0                 2153 	movx	a,@dptr
   0A96 2A                 2154 	add	a,r2
   0A97 F0                 2155 	movx	@dptr,a
   0A98 A3                 2156 	inc	dptr
   0A99 E0                 2157 	movx	a,@dptr
   0A9A 3B                 2158 	addc	a,r3
   0A9B F0                 2159 	movx	@dptr,a
   0A9C A3                 2160 	inc	dptr
   0A9D E0                 2161 	movx	a,@dptr
   0A9E 3C                 2162 	addc	a,r4
   0A9F F0                 2163 	movx	@dptr,a
   0AA0 A3                 2164 	inc	dptr
   0AA1 E0                 2165 	movx	a,@dptr
   0AA2 3D                 2166 	addc	a,r5
   0AA3 F0                 2167 	movx	@dptr,a
                           2168 ;	time.c:208: return seconds;
   0AA4 75 86 01           2169 	mov     dps, #1
   0AA7 90s00r00r57        2170 	mov     dptr, #_mktime_seconds_1_1
   0AAB E0                 2171 	movx	a,@dptr
   0AAC F5 82              2172 	mov	dpl,a
   0AAE A3                 2173 	inc	dptr
   0AAF E0                 2174 	movx	a,@dptr
   0AB0 F5 83              2175 	mov	dph,a
   0AB2 A3                 2176 	inc	dptr
   0AB3 E0                 2177 	movx	a,@dptr
   0AB4 F5 93              2178 	mov	dpx,a
   0AB6 A3                 2179 	inc	dptr
   0AB7 E0                 2180 	movx	a,@dptr
   0AB8 F5 F0              2181 	mov	b,a
   0ABA 75 86 00           2182 	mov	dps,#0
   0ABD                    2183 00115$:
   0ABD 22                 2184 	ret
                           2185 	.area CSEG    (CODE)
                           2186 	.area CONST   (CODE)
   0000                    2187 _monthDays:
   0000 1F                 2188 	.db #0x1F	;  31
   0001 1C                 2189 	.db #0x1C	;  28
   0002 1F                 2190 	.db #0x1F	;  31
   0003 1E                 2191 	.db #0x1E	;  30
   0004 1F                 2192 	.db #0x1F	;  31
   0005 1E                 2193 	.db #0x1E	;  30
   0006 1F                 2194 	.db #0x1F	;  31
   0007 1F                 2195 	.db #0x1F	;  31
   0008 1E                 2196 	.db #0x1E	;  30
   0009 1F                 2197 	.db #0x1F	;  31
   000A 1E                 2198 	.db #0x1E	;  30
   000B 1F                 2199 	.db #0x1F	;  31
   000C                    2200 ___month:
   000Cr64s00s00           2201 	.byte _str_1,(_str_1 >> 8),(_str_1 >> 16)
   000Fr68s00s00           2202 	.byte _str_2,(_str_2 >> 8),(_str_2 >> 16)
   0012r6Cs00s00           2203 	.byte _str_3,(_str_3 >> 8),(_str_3 >> 16)
   0015r70s00s00           2204 	.byte _str_4,(_str_4 >> 8),(_str_4 >> 16)
   0018r74s00s00           2205 	.byte _str_5,(_str_5 >> 8),(_str_5 >> 16)
   001Br78s00s00           2206 	.byte _str_6,(_str_6 >> 8),(_str_6 >> 16)
   001Er7Cs00s00           2207 	.byte _str_7,(_str_7 >> 8),(_str_7 >> 16)
   0021r80s00s00           2208 	.byte _str_8,(_str_8 >> 8),(_str_8 >> 16)
   0024r84s00s00           2209 	.byte _str_9,(_str_9 >> 8),(_str_9 >> 16)
   0027r88s00s00           2210 	.byte _str_10,(_str_10 >> 8),(_str_10 >> 16)
   002Ar8Cs00s00           2211 	.byte _str_11,(_str_11 >> 8),(_str_11 >> 16)
   002Dr90s00s00           2212 	.byte _str_12,(_str_12 >> 8),(_str_12 >> 16)
   0030                    2213 ___day:
   0030r94s00s00           2214 	.byte _str_13,(_str_13 >> 8),(_str_13 >> 16)
   0033r98s00s00           2215 	.byte _str_14,(_str_14 >> 8),(_str_14 >> 16)
   0036r9Cs00s00           2216 	.byte _str_15,(_str_15 >> 8),(_str_15 >> 16)
   0039rA0s00s00           2217 	.byte _str_16,(_str_16 >> 8),(_str_16 >> 16)
   003CrA4s00s00           2218 	.byte _str_17,(_str_17 >> 8),(_str_17 >> 16)
   003FrA8s00s00           2219 	.byte _str_18,(_str_18 >> 8),(_str_18 >> 16)
   0042rACs00s00           2220 	.byte _str_19,(_str_19 >> 8),(_str_19 >> 16)
   0045                    2221 __str_0:
   0045 25 73 20 25 73 20  2222 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
        25 32 64 20 25 30
        32 64 3A 25 30 32
        64 3A 25 30 32 64
        20 25 30 34 64
   0062 0A                 2223 	.db 0x0A
   0063 00                 2224 	.db 0x00
   0064                    2225 _str_1:
   0064 4A 61 6E           2226 	.ascii "Jan"
   0067 00                 2227 	.db 0x00
   0068                    2228 _str_2:
   0068 46 65 62           2229 	.ascii "Feb"
   006B 00                 2230 	.db 0x00
   006C                    2231 _str_3:
   006C 4D 61 72           2232 	.ascii "Mar"
   006F 00                 2233 	.db 0x00
   0070                    2234 _str_4:
   0070 41 70 72           2235 	.ascii "Apr"
   0073 00                 2236 	.db 0x00
   0074                    2237 _str_5:
   0074 4D 61 79           2238 	.ascii "May"
   0077 00                 2239 	.db 0x00
   0078                    2240 _str_6:
   0078 4A 75 6E           2241 	.ascii "Jun"
   007B 00                 2242 	.db 0x00
   007C                    2243 _str_7:
   007C 4A 75 6C           2244 	.ascii "Jul"
   007F 00                 2245 	.db 0x00
   0080                    2246 _str_8:
   0080 41 75 67           2247 	.ascii "Aug"
   0083 00                 2248 	.db 0x00
   0084                    2249 _str_9:
   0084 53 65 70           2250 	.ascii "Sep"
   0087 00                 2251 	.db 0x00
   0088                    2252 _str_10:
   0088 4F 63 74           2253 	.ascii "Oct"
   008B 00                 2254 	.db 0x00
   008C                    2255 _str_11:
   008C 4E 6F 76           2256 	.ascii "Nov"
   008F 00                 2257 	.db 0x00
   0090                    2258 _str_12:
   0090 44 65 63           2259 	.ascii "Dec"
   0093 00                 2260 	.db 0x00
   0094                    2261 _str_13:
   0094 53 75 6E           2262 	.ascii "Sun"
   0097 00                 2263 	.db 0x00
   0098                    2264 _str_14:
   0098 4D 6F 6E           2265 	.ascii "Mon"
   009B 00                 2266 	.db 0x00
   009C                    2267 _str_15:
   009C 54 75 65           2268 	.ascii "Tue"
   009F 00                 2269 	.db 0x00
   00A0                    2270 _str_16:
   00A0 57 65 64           2271 	.ascii "Wed"
   00A3 00                 2272 	.db 0x00
   00A4                    2273 _str_17:
   00A4 54 68 75           2274 	.ascii "Thu"
   00A7 00                 2275 	.db 0x00
   00A8                    2276 _str_18:
   00A8 46 72 69           2277 	.ascii "Fri"
   00AB 00                 2278 	.db 0x00
   00AC                    2279 _str_19:
   00AC 53 61 74           2280 	.ascii "Sat"
   00AF 00                 2281 	.db 0x00
                           2282 	.area XINIT   (CODE)
                           2283 	.area CABS    (ABS,CODE)
