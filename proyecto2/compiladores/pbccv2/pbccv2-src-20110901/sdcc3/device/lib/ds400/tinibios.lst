                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:20 2015
                              5 ;--------------------------------------------------------
                              6 	.module tinibios
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _ClockInit
                             31 	.globl _installInterrupt_PARM_2
                             32 	.globl _romInit_PARM_2
                             33 	.globl _Serial0Init_PARM_2
                             34 	.globl __sdcc_external_startup
                             35 	.globl _Serial0Init
                             36 	.globl _Serial0SwitchToBuffered
                             37 	.globl _Serial0IrqHandler
                             38 	.globl _Serial0CharArrived
                             39 	.globl _Serial0PutChar
                             40 	.globl _Serial0GetChar
                             41 	.globl _Serial0SendBreak
                             42 	.globl _Serial0Flush
                             43 	.globl _ClockTicks
                             44 	.globl _ClockMilliSecondsDelay
                             45 	.globl _romInit
                             46 	.globl _installInterrupt
                             47 ;--------------------------------------------------------
                             48 ; special function registers
                             49 ;--------------------------------------------------------
                    0080     50 _P4	=	0x0080
                    0081     51 _SP	=	0x0081
                    0082     52 _DPL	=	0x0082
                    0083     53 _DPH	=	0x0083
                    0084     54 _DPL1	=	0x0084
                    0085     55 _DPH1	=	0x0085
                    0086     56 _DPS	=	0x0086
                    0087     57 _PCON	=	0x0087
                    0088     58 _TCON	=	0x0088
                    0089     59 _TMOD	=	0x0089
                    008A     60 _TL0	=	0x008a
                    008B     61 _TL1	=	0x008b
                    008C     62 _TH0	=	0x008c
                    008D     63 _TH1	=	0x008d
                    008E     64 _CKCON	=	0x008e
                    0090     65 _P1	=	0x0090
                    0091     66 _EXIF	=	0x0091
                    0092     67 _P4CNT	=	0x0092
                    0093     68 _DPX	=	0x0093
                    0095     69 _DPX1	=	0x0095
                    0098     70 _SCON0	=	0x0098
                    0099     71 _SBUF0	=	0x0099
                    009B     72 _ESP	=	0x009b
                    009C     73 _AP	=	0x009c
                    009D     74 _ACON	=	0x009d
                    00A0     75 _P2	=	0x00a0
                    00A1     76 _P5	=	0x00a1
                    00A2     77 _P5CNT	=	0x00a2
                    00A8     78 _IE	=	0x00a8
                    00B0     79 _P3	=	0x00b0
                    00B8     80 _IP	=	0x00b8
                    00C0     81 _SCON1	=	0x00c0
                    00C1     82 _SBUF1	=	0x00c1
                    00C4     83 _PMR	=	0x00c4
                    00C6     84 _MCON	=	0x00c6
                    00C7     85 _TA	=	0x00c7
                    00C8     86 _T2CON	=	0x00c8
                    00C9     87 _T2MOD	=	0x00c9
                    00CA     88 _RCAP2L	=	0x00ca
                    00CA     89 _RTL2	=	0x00ca
                    00CB     90 _RCAP2H	=	0x00cb
                    00CB     91 _RTH2	=	0x00cb
                    00CC     92 _TL2	=	0x00cc
                    00CD     93 _TH2	=	0x00cd
                    00D0     94 _PSW	=	0x00d0
                    00D1     95 _MCNT0	=	0x00d1
                    00D2     96 _MCNT1	=	0x00d2
                    00D3     97 _MA	=	0x00d3
                    00D4     98 _MB	=	0x00d4
                    00D5     99 _MC	=	0x00d5
                    00D8    100 _WDCON	=	0x00d8
                    00E0    101 _ACC	=	0x00e0
                    00E8    102 _EIE	=	0x00e8
                    00EA    103 _MXAX	=	0x00ea
                    00F0    104 _B	=	0x00f0
                    00F8    105 _EIP	=	0x00f8
                    8C8A    106 _TMR0	=	0x8c8a
                    8D8B    107 _TMR1	=	0x8d8b
                    CDCC    108 _TMR2	=	0xcdcc
                    CBCA    109 _RCAP2	=	0xcbca
                            110 ;--------------------------------------------------------
                            111 ; special function bits
                            112 ;--------------------------------------------------------
                    0088    113 _IT0	=	0x0088
                    0089    114 _IE0	=	0x0089
                    008A    115 _IT1	=	0x008a
                    008B    116 _IE1	=	0x008b
                    008C    117 _TR0	=	0x008c
                    008D    118 _TF0	=	0x008d
                    008E    119 _TR1	=	0x008e
                    008F    120 _TF1	=	0x008f
                    0090    121 _T2	=	0x0090
                    0091    122 _T2EX	=	0x0091
                    0092    123 _RXD1	=	0x0092
                    0093    124 _TXD1	=	0x0093
                    0094    125 _INT2	=	0x0094
                    0095    126 _INT3	=	0x0095
                    0096    127 _INT4	=	0x0096
                    0097    128 _INT5	=	0x0097
                    0098    129 _RI_0	=	0x0098
                    0099    130 _TI_0	=	0x0099
                    009A    131 _RB8_0	=	0x009a
                    009B    132 _TB8_0	=	0x009b
                    009C    133 _REN_0	=	0x009c
                    009D    134 _SM2_0	=	0x009d
                    009E    135 _SM1_0	=	0x009e
                    009F    136 _SM0_0	=	0x009f
                    009F    137 _FE_0	=	0x009f
                    00A8    138 _EX0	=	0x00a8
                    00A9    139 _ET0	=	0x00a9
                    00AA    140 _EX1	=	0x00aa
                    00AB    141 _ET1	=	0x00ab
                    00AC    142 _ES0	=	0x00ac
                    00AD    143 _ET2	=	0x00ad
                    00AE    144 _ES1	=	0x00ae
                    00AF    145 _EA	=	0x00af
                    00B0    146 _RXD0	=	0x00b0
                    00B1    147 _TXD0	=	0x00b1
                    00B2    148 _INT0	=	0x00b2
                    00B3    149 _INT1	=	0x00b3
                    00B4    150 _T0	=	0x00b4
                    00B5    151 _T1	=	0x00b5
                    00B6    152 _WR	=	0x00b6
                    00B7    153 _RD	=	0x00b7
                    00B8    154 _PX0	=	0x00b8
                    00B9    155 _PT0	=	0x00b9
                    00BA    156 _PX1	=	0x00ba
                    00BB    157 _PT1	=	0x00bb
                    00BC    158 _PS0	=	0x00bc
                    00BD    159 _PT2	=	0x00bd
                    00BE    160 _PS1	=	0x00be
                    00C0    161 _RI_1	=	0x00c0
                    00C1    162 _TI_1	=	0x00c1
                    00C2    163 _RB8_1	=	0x00c2
                    00C3    164 _TB8_1	=	0x00c3
                    00C4    165 _REN_1	=	0x00c4
                    00C5    166 _SM2_1	=	0x00c5
                    00C6    167 _SM1_1	=	0x00c6
                    00C7    168 _SM0_1	=	0x00c7
                    00C7    169 _FE_1	=	0x00c7
                    00C8    170 _CP_RL	=	0x00c8
                    00C9    171 _C_T	=	0x00c9
                    00CA    172 _TR2	=	0x00ca
                    00CB    173 _EXEN2	=	0x00cb
                    00CC    174 _TCLK	=	0x00cc
                    00CD    175 _RCLK	=	0x00cd
                    00CE    176 _EXF2	=	0x00ce
                    00CF    177 _TF2	=	0x00cf
                    00D0    178 _P	=	0x00d0
                    00D1    179 _F1	=	0x00d1
                    00D2    180 _OV	=	0x00d2
                    00D3    181 _RS0	=	0x00d3
                    00D4    182 _RS1	=	0x00d4
                    00D5    183 _F0	=	0x00d5
                    00D6    184 _AC	=	0x00d6
                    00D7    185 _CY	=	0x00d7
                    00D8    186 _RWT	=	0x00d8
                    00D9    187 _EWT	=	0x00d9
                    00DA    188 _WDRF	=	0x00da
                    00DB    189 _WDIF	=	0x00db
                    00DC    190 _PFI	=	0x00dc
                    00DD    191 _EPFI	=	0x00dd
                    00DE    192 _POR	=	0x00de
                    00DF    193 _SMOD_1	=	0x00df
                    00E8    194 _EX2	=	0x00e8
                    00E9    195 _EX3	=	0x00e9
                    00EA    196 _EX4	=	0x00ea
                    00EB    197 _EX5	=	0x00eb
                    00EC    198 _EWDI	=	0x00ec
                    00ED    199 _C1IE	=	0x00ed
                    00EE    200 _C0IE	=	0x00ee
                    00EF    201 _CANBIE	=	0x00ef
                    00F8    202 _PX2	=	0x00f8
                    00F9    203 _PX3	=	0x00f9
                    00FA    204 _PX4	=	0x00fa
                    00FB    205 _PX5	=	0x00fb
                    00FC    206 _PWDI	=	0x00fc
                    00FD    207 _C1IP	=	0x00fd
                    00FE    208 _C0IP	=	0x00fe
                    00FF    209 _CANBIP	=	0x00ff
                            210 ;--------------------------------------------------------
                            211 ; overlayable register banks
                            212 ;--------------------------------------------------------
                            213 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     214 	.ds 8
                            215 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                     216 	.ds 8
                            217 ;--------------------------------------------------------
                            218 ; internal ram data
                            219 ;--------------------------------------------------------
                            220 	.area DSEG    (DATA)
   0000                     221 _serial0Buffered:
   0000                     222 	.ds 1
                            223 ;--------------------------------------------------------
                            224 ; overlayable items in internal ram 
                            225 ;--------------------------------------------------------
                            226 	.area OSEG    (OVR,DATA)
                            227 ;--------------------------------------------------------
                            228 ; indirectly addressable internal ram data
                            229 ;--------------------------------------------------------
                            230 	.area ISEG    (DATA)
                            231 ;--------------------------------------------------------
                            232 ; absolute internal ram data
                            233 ;--------------------------------------------------------
                            234 	.area IABS    (ABS,DATA)
                            235 	.area IABS    (ABS,DATA)
                            236 ;--------------------------------------------------------
                            237 ; bit data
                            238 ;--------------------------------------------------------
                            239 	.area BSEG    (BIT)
                            240 ;--------------------------------------------------------
                            241 ; paged external ram data
                            242 ;--------------------------------------------------------
                            243 	.area PSEG    (PAG,XDATA)
                            244 ;--------------------------------------------------------
                            245 ; external ram data
                            246 ;--------------------------------------------------------
                            247 	.area XSEG    (XDATA)
   0000                     248 _receive0Buffer:
   0000                     249 	.ds 1024
   0400                     250 _Serial0Init_PARM_2:
   0400                     251 	.ds 1
   0401                     252 _romInit_PARM_2:
   0401                     253 	.ds 1
   0402                     254 _installInterrupt_PARM_2:
   0402                     255 	.ds 1
   0403                     256 _installInterrupt_isr_1_1:
   0403                     257 	.ds 4
                            258 ;--------------------------------------------------------
                            259 ; absolute external ram data
                            260 ;--------------------------------------------------------
                            261 	.area XABS    (ABS,XDATA)
                            262 ;--------------------------------------------------------
                            263 ; external initialized ram data
                            264 ;--------------------------------------------------------
                            265 	.area XISEG   (XDATA)
   0000                     266 _receive0BufferHead:
   0000                     267 	.ds 2
   0002                     268 _receive0BufferTail:
   0002                     269 	.ds 2
   0004                     270 _transmit0IsBusy:
   0004                     271 	.ds 1
                            272 ;--------------------------------------------------------
                            273 ; global & static initialisations
                            274 ;--------------------------------------------------------
                            275 	.area HOME    (CODE)
                            276 	.area GSINIT  (CODE)
                            277 	.area GSFINAL (CODE)
                            278 	.area GSINIT  (CODE)
                            279 ;--------------------------------------------------------
                            280 ; Home
                            281 ;--------------------------------------------------------
                            282 	.area HOME    (CODE)
                            283 	.area HOME    (CODE)
                            284 ;--------------------------------------------------------
                            285 ; code
                            286 ;--------------------------------------------------------
                            287 	.area CSEG    (CODE)
                            288 ;------------------------------------------------------------
                            289 ;Allocation info for local variables in function '_sdcc_external_startup'
                            290 ;------------------------------------------------------------
                            291 ;------------------------------------------------------------
                            292 ;	tinibios.c:36: unsigned char _sdcc_external_startup(void)
                            293 ;	-----------------------------------------
                            294 ;	 function _sdcc_external_startup
                            295 ;	-----------------------------------------
   0000                     296 __sdcc_external_startup:
                    0002    297 	ar2 = 0x02
                    0003    298 	ar3 = 0x03
                    0004    299 	ar4 = 0x04
                    0005    300 	ar5 = 0x05
                    0006    301 	ar6 = 0x06
                    0007    302 	ar7 = 0x07
                    0000    303 	ar0 = 0x00
                    0001    304 	ar1 = 0x01
                            305 ;	tinibios.c:38: IE = 0; // Disable all interrupts.
                            306 ;	genAssign: resultIsFar = FALSE
   0000 75 A8 00            307 	mov	_IE,#0x00
                            308 ;	tinibios.c:40: PSW = 0;
                            309 ;	genAssign: resultIsFar = FALSE
   0003 75 D0 00            310 	mov	_PSW,#0x00
                            311 ;	tinibios.c:56: __endasm;    
                            312 	
                            313   ; save the 24-bit return address
   0006 D0 02               314 	  pop ar2; msb
   0008 D0 01               315 	  pop ar1
   000A D0 00               316 	  pop ar0; lsb
                            317 	
                            318 	
   000C 75 9B 00            319 	  mov _ESP,#0x00; reinitialize the stack
   000F 75 81 00            320 	  mov _SP,#0x00
                            321 	
                            322   ; restore the 24-bit return address
   0012 C0 00               323 	  push ar0; lsb
   0014 C0 01               324 	  push ar1
   0016 C0 02               325 	  push ar2; msb
                            326 	  
                            327 ;	tinibios.c:61: Serial0Init(1, 0); // baud argument ignored.
                            328 ;	genAssign: resultIsFar = TRUE
   0018 90s00r04r00         329 	mov	dptr,#_Serial0Init_PARM_2
   001C E4                  330 	clr  a
   001D F0                  331 	movx	@dptr,a
   001E 90 00 00 01         332 	mov	dptr,#0x000001
   0022 75 F0 00            333 	mov	b,#0x00
   0025 12s00r00r30         334 	lcall	_Serial0Init
                            335 ;	tinibios.c:63: IE = 0x80; // Enable interrupts.
                            336 ;	genAssign: resultIsFar = FALSE
   0029 75 A8 80            337 	mov	_IE,#0x80
                            338 ;	tinibios.c:65: return 0;
   002C 75 82 00            339 	mov	dpl,#0x00
   002F                     340 00101$:
   002F 22                  341 	ret
                            342 ;------------------------------------------------------------
                            343 ;Allocation info for local variables in function 'Serial0Init'
                            344 ;------------------------------------------------------------
                            345 ;buffered                  Allocated with name '_Serial0Init_PARM_2'
                            346 ;baud                      Allocated to registers 
                            347 ;------------------------------------------------------------
                            348 ;	tinibios.c:93: void Serial0Init (unsigned long baud, unsigned char buffered)
                            349 ;	-----------------------------------------
                            350 ;	 function Serial0Init
                            351 ;	-----------------------------------------
   0030                     352 _Serial0Init:
                            353 ;	tinibios.c:95: ES0 = 0; // disable serial channel 0 interrupt
                            354 ;	genAssign: resultIsFar = FALSE
   0030 C2 AC               355 	clr	_ES0
                            356 ;	tinibios.c:101: SCON0 = 0x5A; // 10 bit serial 0, use timer baud rate, enable recieving
                            357 ;	genAssign: resultIsFar = FALSE
   0032 75 98 5A            358 	mov	_SCON0,#0x5A
                            359 ;	tinibios.c:102: RCAP2H = (TIMER_RELOAD >> 8) & 0xff;
                            360 ;	genAssign: resultIsFar = FALSE
   0035 75 CB FF            361 	mov	_RCAP2H,#0xFF
                            362 ;	tinibios.c:103: RCAP2L = TIMER_RELOAD & 0xff;
                            363 ;	genAssign: resultIsFar = FALSE
   0038 75 CA FC            364 	mov	_RCAP2L,#0xFC
                            365 ;	tinibios.c:104: T2CON = 0x30; // Enable timer 2 for serial port
                            366 ;	genAssign: resultIsFar = FALSE
   003B 75 C8 30            367 	mov	_T2CON,#0x30
                            368 ;	tinibios.c:105: TR2 = 1; // Set timer 2 to run
                            369 ;	genAssign: resultIsFar = FALSE
   003E D2 CA               370 	setb	_TR2
                            371 ;	tinibios.c:110: serial0Buffered=buffered;
   0040 90s00r04r00         372 	mov	dptr,#_Serial0Init_PARM_2
                            373 ;	genAssign: resultIsFar = TRUE
   0044 E0                  374 	movx	a,@dptr
                            375 ;	genAssign: resultIsFar = FALSE
                            376 ;	tinibios.c:112: if (buffered) {
   0045 FA                  377 	mov  r2,a
   0046 8A*00               378 	mov  _serial0Buffered,r2 
   0048 60 17               379 	jz  00102$
   004A                     380 00107$:
                            381 ;	tinibios.c:113: installInterrupt(Serial0IrqHandler, 0x23);
                            382 ;	genAssign: resultIsFar = TRUE
   004A 90s00r04r02         383 	mov	dptr,#_installInterrupt_PARM_2
   004E 74 23               384 	mov	a,#0x23
   0050 F0                  385 	movx	@dptr,a
   0051 90s00r00r85         386 	mov dptr,#_Serial0IrqHandler
   0055 12s00r04r10         387 	lcall	_installInterrupt
                            388 ;	tinibios.c:114: RI_0=TI_0=0; // clear "pending" interrupts
                            389 ;	genAssign: resultIsFar = FALSE
   0059 C2 99               390 	clr	_TI_0
                            391 ;	genAssign: resultIsFar = FALSE
   005B C2 98               392 	clr	_RI_0
                            393 ;	tinibios.c:115: ES0 = 1; // enable serial channel 0 interrupt
                            394 ;	genAssign: resultIsFar = FALSE
   005D D2 AC               395 	setb	_ES0
   005F 80 04               396 	sjmp 00104$
   0061                     397 00102$:
                            398 ;	tinibios.c:117: RI_0=0; // receive buffer empty
                            399 ;	genAssign: resultIsFar = FALSE
   0061 C2 98               400 	clr	_RI_0
                            401 ;	tinibios.c:118: TI_0=1; // transmit buffer empty
                            402 ;	genAssign: resultIsFar = FALSE
   0063 D2 99               403 	setb	_TI_0
   0065                     404 00104$:
   0065 22                  405 	ret
                            406 ;------------------------------------------------------------
                            407 ;Allocation info for local variables in function 'Serial0SwitchToBuffered'
                            408 ;------------------------------------------------------------
                            409 ;------------------------------------------------------------
                            410 ;	tinibios.c:122: void Serial0SwitchToBuffered(void)
                            411 ;	-----------------------------------------
                            412 ;	 function Serial0SwitchToBuffered
                            413 ;	-----------------------------------------
   0066                     414 _Serial0SwitchToBuffered:
                            415 ;	tinibios.c:124: IE &= ~0x80;
   0066 53 A8 7F            416 	anl	_IE,#0x7F
                            417 ;	tinibios.c:126: serial0Buffered = 1;
                            418 ;	genAssign: resultIsFar = FALSE
   0069 75*00 01            419 	mov	_serial0Buffered,#0x01
                            420 ;	tinibios.c:127: installInterrupt(Serial0IrqHandler, 0x23);
                            421 ;	genAssign: resultIsFar = TRUE
   006C 90s00r04r02         422 	mov	dptr,#_installInterrupt_PARM_2
   0070 74 23               423 	mov	a,#0x23
   0072 F0                  424 	movx	@dptr,a
   0073 90s00r00r85         425 	mov dptr,#_Serial0IrqHandler
   0077 12s00r04r10         426 	lcall	_installInterrupt
                            427 ;	tinibios.c:128: RI_0=TI_0=0; // clear "pending" interrupts
                            428 ;	genAssign: resultIsFar = FALSE
   007B C2 99               429 	clr	_TI_0
                            430 ;	genAssign: resultIsFar = FALSE
   007D C2 98               431 	clr	_RI_0
                            432 ;	tinibios.c:129: ES0 = 1; // enable serial channel 0 interrupt
                            433 ;	genAssign: resultIsFar = FALSE
   007F D2 AC               434 	setb	_ES0
                            435 ;	tinibios.c:131: IE |= 0x80;
   0081 43 A8 80            436 	orl	_IE,#0x80
   0084                     437 00101$:
   0084 22                  438 	ret
                            439 ;------------------------------------------------------------
                            440 ;Allocation info for local variables in function 'Serial0IrqHandler'
                            441 ;------------------------------------------------------------
                            442 ;------------------------------------------------------------
                            443 ;	tinibios.c:134: void Serial0IrqHandler (void) __interrupt 4
                            444 ;	-----------------------------------------
                            445 ;	 function Serial0IrqHandler
                            446 ;	-----------------------------------------
   0085                     447 _Serial0IrqHandler:
   0085 C0 E0               448 	push	acc
   0087 C0 F0               449 	push	b
   0089 C0 82               450 	push	dpl
   008B C0 83               451 	push	dph
   008D C0 93               452 	push	dpx
   008F C0 86               453 	push	dps
   0091 75 86 00            454 	mov	dps,#0
   0094 C0 84               455 	push	dpl1
   0096 C0 85               456 	push	dph1
   0098 C0 95               457 	push	dpx1
   009A C0 02               458 	push	ar2
   009C C0 03               459 	push	ar3
   009E C0 D0               460 	push	psw
   00A0 75 D0 00            461 	mov	psw,#0x00
                            462 ;	tinibios.c:136: if (RI_0) {
   00A3 30 98 76            463 	jnb  _RI_0,00104$
   00A6                     464 00112$:
                            465 ;	tinibios.c:137: receive0Buffer[receive0BufferHead]=SBUF0;
   00A6 90s00r00r00         466 	mov	dptr,#_receive0BufferHead
   00AA E0                  467 	movx	a,@dptr
   00AB 24r00               468 	add	a,#_receive0Buffer
   00AD F5 84               469 	mov	dpl1,a
   00AF A3                  470 	inc	dptr
   00B0 E0                  471 	movx	a,@dptr
   00B1 34s00               472 	addc	a,#(_receive0Buffer >> 8)
   00B3 F5 85               473 	mov	dph1,a
   00B5 E4                  474 	clr	a
   00B6 34s00               475 	addc	a,#(_receive0Buffer >> 16)
   00B8 F5 95               476 	mov	dpx1,a
   00BA E5 99               477 	mov	a,_SBUF0
   00BC 05 86               478 	inc	dps
   00BE F0                  479 	movx	@dptr,a
   00BF 75 86 00            480 	mov	dps,#0
                            481 ;	tinibios.c:138: receive0BufferHead=(receive0BufferHead+1)&(S0RBS-1);
   00C2 90s00r00r00         482 	mov	dptr,#_receive0BufferHead
   00C6 E0                  483 	movx	a,@dptr
   00C7 24 01               484 	add	a,#0x01
   00C9 FA                  485 	mov	r2,a
   00CA A3                  486 	inc	dptr
   00CB E0                  487 	movx	a,@dptr
   00CC 34 00               488 	addc	a,#0x00
   00CE FB                  489 	mov	r3,a
   00CF 90s00r00r00         490 	mov	dptr,#_receive0BufferHead
   00D3 EA                  491 	mov	a,r2
   00D4 F0                  492 	movx	@dptr,a
   00D5 74 03               493 	mov	a,#0x03
   00D7 5B                  494 	anl	a,r3
   00D8 A3                  495 	inc	dptr
   00D9 F0                  496 	movx	@dptr,a
                            497 ;	tinibios.c:139: if (receive0BufferHead==receive0BufferTail) {
   00DA 90s00r00r02         498 	mov	dptr,#_receive0BufferTail
   00DE 75 86 01            499 	mov     dps, #1
   00E1 90s00r00r00         500 	mov     dptr, #_receive0BufferHead
   00E5 E0                  501 	movx	a,@dptr
   00E6 75 86 00            502 	mov	dps,#0
   00E9 F5 F0               503 	mov	b,a
   00EB E0                  504 	movx	a,@dptr
   00EC B5 F0 11            505 	cjne	a,b,00113$
   00EF 75 86 01            506 	mov	dps,#1
   00F2 A3                  507 	inc	dptr
   00F3 E0                  508 	movx	a,@dptr
   00F4 75 86 00            509 	mov	dps,#0
   00F7 F5 F0               510 	mov	b,a
   00F9 A3                  511 	inc	dptr
   00FA E0                  512 	movx	a,@dptr
   00FB B5 F0 02            513 	cjne	a,b,00113$
   00FE 80 02               514 	sjmp	00114$
   0100                     515 00113$:
   0100 80 18               516 	sjmp 00102$
   0102                     517 00114$:
                            518 ;	tinibios.c:141: receive0BufferTail=(receive0BufferTail+1)&(S0RBS-1);
   0102 90s00r00r02         519 	mov	dptr,#_receive0BufferTail
   0106 E0                  520 	movx	a,@dptr
   0107 24 01               521 	add	a,#0x01
   0109 FA                  522 	mov	r2,a
   010A A3                  523 	inc	dptr
   010B E0                  524 	movx	a,@dptr
   010C 34 00               525 	addc	a,#0x00
   010E FB                  526 	mov	r3,a
   010F 90s00r00r02         527 	mov	dptr,#_receive0BufferTail
   0113 EA                  528 	mov	a,r2
   0114 F0                  529 	movx	@dptr,a
   0115 74 03               530 	mov	a,#0x03
   0117 5B                  531 	anl	a,r3
   0118 A3                  532 	inc	dptr
   0119 F0                  533 	movx	@dptr,a
   011A                     534 00102$:
                            535 ;	tinibios.c:143: RI_0=0;
                            536 ;	genAssign: resultIsFar = FALSE
   011A C2 98               537 	clr	_RI_0
   011C                     538 00104$:
                            539 ;	tinibios.c:145: if (TI_0) {
                            540 ;	tinibios.c:146: TI_0=0;
                            541 ;	genAssign: resultIsFar = FALSE
   011C 10 99 02            542 	jbc     _TI_0,00115$
   011F 80 06               543 	sjmp    00107$
   0121                     544 00115$:
                            545 ;	tinibios.c:147: transmit0IsBusy=0;
                            546 ;	genAssign: resultIsFar = TRUE
   0121 90s00r00r04         547 	mov	dptr,#_transmit0IsBusy
   0125 E4                  548 	clr  a
   0126 F0                  549 	movx	@dptr,a
   0127                     550 00107$:
   0127 D0 D0               551 	pop	psw
   0129 D0 03               552 	pop	ar3
   012B D0 02               553 	pop	ar2
   012D D0 95               554 	pop	dpx1
   012F D0 85               555 	pop	dph1
   0131 D0 84               556 	pop	dpl1
   0133 D0 86               557 	pop	dps
   0135 D0 93               558 	pop	dpx
   0137 D0 83               559 	pop	dph
   0139 D0 82               560 	pop	dpl
   013B D0 F0               561 	pop	b
   013D D0 E0               562 	pop	acc
   013F 32                  563 	reti
                            564 ;	eliminated unneeded push/pop ar4
                            565 ;	eliminated unneeded push/pop ap
                            566 ;------------------------------------------------------------
                            567 ;Allocation info for local variables in function 'Serial0CharArrived'
                            568 ;------------------------------------------------------------
                            569 ;------------------------------------------------------------
                            570 ;	tinibios.c:151: char Serial0CharArrived(void)
                            571 ;	-----------------------------------------
                            572 ;	 function Serial0CharArrived
                            573 ;	-----------------------------------------
   0140                     574 _Serial0CharArrived:
                            575 ;	tinibios.c:153: if (serial0Buffered) {
   0140 E5*00               576 	mov	a,_serial0Buffered
   0142 60 45               577 	jz  00106$
   0144                     578 00113$:
                            579 ;	tinibios.c:154: if (receive0BufferHead!=receive0BufferTail)
   0144 90s00r00r02         580 	mov	dptr,#_receive0BufferTail
   0148 75 86 01            581 	mov     dps, #1
   014B 90s00r00r00         582 	mov     dptr, #_receive0BufferHead
   014F E0                  583 	movx	a,@dptr
   0150 75 86 00            584 	mov	dps,#0
   0153 F5 F0               585 	mov	b,a
   0155 E0                  586 	movx	a,@dptr
   0156 B5 F0 11            587 	cjne	a,b,00114$
   0159 75 86 01            588 	mov	dps,#1
   015C A3                  589 	inc	dptr
   015D E0                  590 	movx	a,@dptr
   015E 75 86 00            591 	mov	dps,#0
   0161 F5 F0               592 	mov	b,a
   0163 A3                  593 	inc	dptr
   0164 E0                  594 	movx	a,@dptr
   0165 B5 F0 02            595 	cjne	a,b,00114$
   0168 80 27               596 	sjmp 00107$
   016A                     597 00114$:
                            598 ;	tinibios.c:155: return receive0Buffer[receive0BufferTail];
   016A 90s00r00r02         599 	mov	dptr,#_receive0BufferTail
   016E E0                  600 	movx	a,@dptr
   016F 24r00               601 	add	a,#_receive0Buffer
   0171 F5 84               602 	mov	dpl1,a
   0173 A3                  603 	inc	dptr
   0174 E0                  604 	movx	a,@dptr
   0175 34s00               605 	addc	a,#(_receive0Buffer >> 8)
   0177 F5 85               606 	mov	dph1,a
   0179 E4                  607 	clr	a
   017A 34s00               608 	addc	a,#(_receive0Buffer >> 16)
   017C F5 95               609 	mov	dpx1,a
   017E 05 86               610 	inc	dps
   0180 E0                  611 	movx	a,@dptr
   0181 FA                  612 	mov	r2,a
   0182 75 86 00            613 	mov	dps,#0
   0185 8A 82               614 	mov	dpl,r2
   0187 80 0B               615 	sjmp 00108$
   0189                     616 00106$:
                            617 ;	tinibios.c:157: if (RI_0)
   0189 30 98 05            618 	jnb  _RI_0,00107$
   018C                     619 00115$:
                            620 ;	tinibios.c:158: return SBUF0;
                            621 ;	genAssign: resultIsFar = FALSE
   018C AA 99               622 	mov	r2,_SBUF0
   018E 8A 82               623 	mov	dpl,r2
                            624 ;	tinibios.c:160: return 0;
   0190 22                  625 	ret
   0191                     626 00107$:
   0191 75 82 00            627 	mov     dpl,#0x00
   0194                     628 00108$:
   0194 22                  629 	ret
                            630 ;------------------------------------------------------------
                            631 ;Allocation info for local variables in function 'Serial0PutChar'
                            632 ;------------------------------------------------------------
                            633 ;c                         Allocated to registers r2 
                            634 ;------------------------------------------------------------
                            635 ;	tinibios.c:163: void Serial0PutChar (char c)
                            636 ;	-----------------------------------------
                            637 ;	 function Serial0PutChar
                            638 ;	-----------------------------------------
   0195                     639 _Serial0PutChar:
   0195 AA 82               640 	mov	r2,dpl
                            641 ;	tinibios.c:165: if (serial0Buffered) {
   0197 E5*00               642 	mov	a,_serial0Buffered
   0199 60 12               643 	jz  00104$
   019B                     644 00116$:
                            645 ;	tinibios.c:166: while (transmit0IsBusy)
   019B                     646 00101$:
   019B 90s00r00r04         647 	mov	dptr,#_transmit0IsBusy
   019F E0                  648 	movx	a,@dptr
   01A0 70 F9               649 	jnz  00101$
   01A2                     650 00117$:
                            651 ;	tinibios.c:168: transmit0IsBusy=1;
                            652 ;	genAssign: resultIsFar = TRUE
   01A2 90s00r00r04         653 	mov	dptr,#_transmit0IsBusy
   01A6 74 01               654 	mov	a,#0x01
   01A8 F0                  655 	movx	@dptr,a
                            656 ;	tinibios.c:169: SBUF0=c;
                            657 ;	genAssign: resultIsFar = FALSE
   01A9 8A 99               658 	mov	_SBUF0,r2
                            659 ;	tinibios.c:171: while (!TI_0)
   01AB 80 07               660 	sjmp 00110$
   01AD                     661 00104$:
                            662 ;	tinibios.c:173: TI_0 = 0;
                            663 ;	genAssign: resultIsFar = FALSE
   01AD 10 99 02            664 	jbc     _TI_0,00118$
   01B0 80 FB               665 	sjmp    00104$
   01B2                     666 00118$:
                            667 ;	tinibios.c:174: SBUF0=c;
                            668 ;	genAssign: resultIsFar = FALSE
   01B2 8A 99               669 	mov	_SBUF0,r2
   01B4                     670 00110$:
   01B4 22                  671 	ret
                            672 ;------------------------------------------------------------
                            673 ;Allocation info for local variables in function 'Serial0GetChar'
                            674 ;------------------------------------------------------------
                            675 ;c                         Allocated to registers r2 
                            676 ;------------------------------------------------------------
                            677 ;	tinibios.c:178: char Serial0GetChar (void)
                            678 ;	-----------------------------------------
                            679 ;	 function Serial0GetChar
                            680 ;	-----------------------------------------
   01B5                     681 _Serial0GetChar:
                            682 ;	tinibios.c:181: if (serial0Buffered) {
   01B5 E5*00               683 	mov	a,_serial0Buffered
   01B7 60 5F               684 	jz  00104$
   01B9                     685 00116$:
                            686 ;	tinibios.c:182: while (receive0BufferHead==receive0BufferTail)
   01B9                     687 00101$:
   01B9 90s00r00r02         688 	mov	dptr,#_receive0BufferTail
   01BD 75 86 01            689 	mov     dps, #1
   01C0 90s00r00r00         690 	mov     dptr, #_receive0BufferHead
   01C4 E0                  691 	movx	a,@dptr
   01C5 75 86 00            692 	mov	dps,#0
   01C8 F5 F0               693 	mov	b,a
   01CA E0                  694 	movx	a,@dptr
   01CB B5 F0 11            695 	cjne	a,b,00117$
   01CE 75 86 01            696 	mov	dps,#1
   01D1 A3                  697 	inc	dptr
   01D2 E0                  698 	movx	a,@dptr
   01D3 75 86 00            699 	mov	dps,#0
   01D6 F5 F0               700 	mov	b,a
   01D8 A3                  701 	inc	dptr
   01D9 E0                  702 	movx	a,@dptr
   01DA B5 F0 02            703 	cjne	a,b,00117$
   01DD 80 DA               704 	sjmp 00101$
   01DF                     705 00117$:
                            706 ;	tinibios.c:184: c=receive0Buffer[receive0BufferTail];
   01DF 90s00r00r02         707 	mov	dptr,#_receive0BufferTail
   01E3 E0                  708 	movx	a,@dptr
   01E4 24r00               709 	add	a,#_receive0Buffer
   01E6 F5 84               710 	mov	dpl1,a
   01E8 A3                  711 	inc	dptr
   01E9 E0                  712 	movx	a,@dptr
   01EA 34s00               713 	addc	a,#(_receive0Buffer >> 8)
   01EC F5 85               714 	mov	dph1,a
   01EE E4                  715 	clr	a
   01EF 34s00               716 	addc	a,#(_receive0Buffer >> 16)
   01F1 F5 95               717 	mov	dpx1,a
   01F3 05 86               718 	inc	dps
   01F5 E0                  719 	movx	a,@dptr
   01F6 FA                  720 	mov	r2,a
   01F7 75 86 00            721 	mov	dps,#0
                            722 ;	genAssign: resultIsFar = TRUE
                            723 ;	tinibios.c:185: ES0=0; // disable serial interrupts
                            724 ;	genAssign: resultIsFar = FALSE
   01FA C2 AC               725 	clr	_ES0
                            726 ;	tinibios.c:186: receive0BufferTail=(receive0BufferTail+1)&(S0RBS-1);
   01FC 90s00r00r02         727 	mov	dptr,#_receive0BufferTail
   0200 E0                  728 	movx	a,@dptr
   0201 24 01               729 	add	a,#0x01
   0203 FB                  730 	mov	r3,a
   0204 A3                  731 	inc	dptr
   0205 E0                  732 	movx	a,@dptr
   0206 34 00               733 	addc	a,#0x00
   0208 FC                  734 	mov	r4,a
   0209 90s00r00r02         735 	mov	dptr,#_receive0BufferTail
   020D EB                  736 	mov	a,r3
   020E F0                  737 	movx	@dptr,a
   020F 74 03               738 	mov	a,#0x03
   0211 5C                  739 	anl	a,r4
   0212 A3                  740 	inc	dptr
   0213 F0                  741 	movx	@dptr,a
                            742 ;	tinibios.c:187: ES0=1; // enable serial interrupts
                            743 ;	genAssign: resultIsFar = FALSE
   0214 D2 AC               744 	setb	_ES0
                            745 ;	tinibios.c:189: while (!RI_0)
   0216 80 07               746 	sjmp 00109$
   0218                     747 00104$:
   0218 30 98 FD            748 	jnb  _RI_0,00104$
   021B                     749 00118$:
                            750 ;	tinibios.c:191: c=SBUF0;
                            751 ;	genAssign: resultIsFar = TRUE
   021B AA 99               752 	mov	r2,_SBUF0
                            753 ;	tinibios.c:192: RI_0=0;
                            754 ;	genAssign: resultIsFar = FALSE
   021D C2 98               755 	clr	_RI_0
   021F                     756 00109$:
                            757 ;	tinibios.c:194: return c;
   021F 8A 82               758 	mov	dpl,r2
   0221                     759 00110$:
   0221 22                  760 	ret
                            761 ;------------------------------------------------------------
                            762 ;Allocation info for local variables in function 'Serial0SendBreak'
                            763 ;------------------------------------------------------------
                            764 ;------------------------------------------------------------
                            765 ;	tinibios.c:197: void Serial0SendBreak()
                            766 ;	-----------------------------------------
                            767 ;	 function Serial0SendBreak
                            768 ;	-----------------------------------------
   0222                     769 _Serial0SendBreak:
                            770 ;	tinibios.c:199: P3 &= ~0x02;
   0222 53 B0 FD            771 	anl	_P3,#0xFD
                            772 ;	tinibios.c:200: ClockMilliSecondsDelay(2);
   0225 90 00 00 02         773 	mov	dptr,#0x000002
   0229 75 F0 00            774 	mov	b,#0x00
   022C 12s00r02r5B         775 	lcall	_ClockMilliSecondsDelay
                            776 ;	tinibios.c:201: P3 |= 0x02;
   0230 43 B0 02            777 	orl	_P3,#0x02
   0233                     778 00101$:
   0233 22                  779 	ret
                            780 ;------------------------------------------------------------
                            781 ;Allocation info for local variables in function 'Serial0Flush'
                            782 ;------------------------------------------------------------
                            783 ;------------------------------------------------------------
                            784 ;	tinibios.c:204: void Serial0Flush()
                            785 ;	-----------------------------------------
                            786 ;	 function Serial0Flush
                            787 ;	-----------------------------------------
   0234                     788 _Serial0Flush:
                            789 ;	tinibios.c:206: ES0=0; // disable interrupts
                            790 ;	genAssign: resultIsFar = FALSE
   0234 C2 AC               791 	clr	_ES0
                            792 ;	tinibios.c:207: receive0BufferHead=receive0BufferTail=0;
                            793 ;	genAssign: resultIsFar = TRUE
   0236 90s00r00r02         794 	mov	dptr,#_receive0BufferTail
   023A E4                  795 	clr	a
   023B F0                  796 	movx	@dptr,a
   023C A3                  797 	inc	dptr
   023D F0                  798 	movx	@dptr,a
                            799 ;	genAssign: resultIsFar = TRUE
   023E 90s00r00r00         800 	mov	dptr,#_receive0BufferHead
   0242 E4                  801 	clr	a
   0243 F0                  802 	movx	@dptr,a
   0244 A3                  803 	inc	dptr
   0245 F0                  804 	movx	@dptr,a
                            805 ;	tinibios.c:208: RI_0=0;
                            806 ;	genAssign: resultIsFar = FALSE
   0246 C2 98               807 	clr	_RI_0
                            808 ;	tinibios.c:209: if (serial0Buffered) {
   0248 E5*00               809 	mov	a,_serial0Buffered
   024A 60 06               810 	jz  00102$
   024C                     811 00107$:
                            812 ;	tinibios.c:210: TI_0=0;
                            813 ;	genAssign: resultIsFar = FALSE
   024C C2 99               814 	clr	_TI_0
                            815 ;	tinibios.c:211: ES0=1; // enable interrupts
                            816 ;	genAssign: resultIsFar = FALSE
   024E D2 AC               817 	setb	_ES0
   0250 80 02               818 	sjmp 00104$
   0252                     819 00102$:
                            820 ;	tinibios.c:213: TI_0=1;
                            821 ;	genAssign: resultIsFar = FALSE
   0252 D2 99               822 	setb	_TI_0
   0254                     823 00104$:
   0254 22                  824 	ret
                            825 ;------------------------------------------------------------
                            826 ;Allocation info for local variables in function 'ClockInit'
                            827 ;------------------------------------------------------------
                            828 ;------------------------------------------------------------
                            829 ;	tinibios.c:223: void ClockInit()
                            830 ;	-----------------------------------------
                            831 ;	 function ClockInit
                            832 ;	-----------------------------------------
   0255                     833 _ClockInit:
                            834 ;	tinibios.c:226: }
   0255                     835 00101$:
   0255 22                  836 	ret
                            837 ;------------------------------------------------------------
                            838 ;Allocation info for local variables in function 'ClockTicks'
                            839 ;------------------------------------------------------------
                            840 ;------------------------------------------------------------
                            841 ;	tinibios.c:229: unsigned long ClockTicks(void)
                            842 ;	-----------------------------------------
                            843 ;	 function ClockTicks
                            844 ;	-----------------------------------------
   0256                     845 _ClockTicks:
                            846 ;	tinibios.c:231: return task_gettimemillis_long();
   0256 12s00r00r00         847 	lcall	_task_gettimemillis_long
   025A                     848 00101$:
   025A 22                  849 	ret
                            850 ;------------------------------------------------------------
                            851 ;Allocation info for local variables in function 'ClockMilliSecondsDelay'
                            852 ;------------------------------------------------------------
                            853 ;delay                     Allocated to registers r2 r3 r4 r5 
                            854 ;ms                        Allocated to registers r2 r3 r4 r5 
                            855 ;------------------------------------------------------------
                            856 ;	tinibios.c:234: void ClockMilliSecondsDelay(unsigned long delay)
                            857 ;	-----------------------------------------
                            858 ;	 function ClockMilliSecondsDelay
                            859 ;	-----------------------------------------
   025B                     860 _ClockMilliSecondsDelay:
   025B AA 82               861 	mov	r2,dpl
   025D AB 83               862 	mov	r3,dph
   025F AC 93               863 	mov	r4,dpx
   0261 AD F0               864 	mov	r5,b
                            865 ;	tinibios.c:236: unsigned long ms = task_gettimemillis_long() + delay;
   0263 C0 02               866 	push	ar2
   0265 C0 03               867 	push	ar3
   0267 C0 04               868 	push	ar4
   0269 C0 05               869 	push	ar5
   026B 12s00r00r00         870 	lcall	_task_gettimemillis_long
   026F AE 82               871 	mov	r6,dpl
   0271 AF 83               872 	mov	r7,dph
   0273 A8 93               873 	mov	r0,dpx
   0275 A9 F0               874 	mov	r1,b
   0277 D0 05               875 	pop	ar5
   0279 D0 04               876 	pop	ar4
   027B D0 03               877 	pop	ar3
   027D D0 02               878 	pop	ar2
   027F EA                  879 	mov	a,r2
   0280 2E                  880 	add	a,r6
   0281 FA                  881 	mov	r2,a
   0282 EB                  882 	mov	a,r3
   0283 3F                  883 	addc	a,r7
   0284 FB                  884 	mov	r3,a
   0285 EC                  885 	mov	a,r4
   0286 38                  886 	addc	a,r0
   0287 FC                  887 	mov	r4,a
   0288 ED                  888 	mov	a,r5
   0289 39                  889 	addc	a,r1
   028A FD                  890 	mov	r5,a
                            891 ;	tinibios.c:238: while (ms > task_gettimemillis_long())
   028B                     892 00101$:
   028B C0 02               893 	push	ar2
   028D C0 03               894 	push	ar3
   028F C0 04               895 	push	ar4
   0291 C0 05               896 	push	ar5
   0293 12s00r00r00         897 	lcall	_task_gettimemillis_long
   0297 AE 82               898 	mov	r6,dpl
   0299 AF 83               899 	mov	r7,dph
   029B A8 93               900 	mov	r0,dpx
   029D A9 F0               901 	mov	r1,b
   029F D0 05               902 	pop	ar5
   02A1 D0 04               903 	pop	ar4
   02A3 D0 03               904 	pop	ar3
   02A5 D0 02               905 	pop	ar2
   02A7 C3                  906 	clr	c
   02A8 EE                  907 	mov	a,r6
   02A9 9A                  908 	subb	a,r2
   02AA EF                  909 	mov	a,r7
   02AB 9B                  910 	subb	a,r3
   02AC E8                  911 	mov	a,r0
   02AD 9C                  912 	subb	a,r4
   02AE E9                  913 	mov	a,r1
   02AF 9D                  914 	subb	a,r5
   02B0 40 D9               915 	jc   00101$
   02B2                     916 00107$:
   02B2                     917 00104$:
   02B2 22                  918 	ret
                            919 ;------------------------------------------------------------
                            920 ;Allocation info for local variables in function '_xisegStart'
                            921 ;------------------------------------------------------------
                            922 ;------------------------------------------------------------
                            923 ;	tinibios.c:246: static void __xdata *_xisegStart(void) __naked
                            924 ;	-----------------------------------------
                            925 ;	 function _xisegStart
                            926 ;	-----------------------------------------
   02B3                     927 __xisegStart:
                            928 ;	naked function: no prologue.
                            929 ;	tinibios.c:251: __endasm;
                            930 	
   02B3 90s00r00r00         931 	  mov dptr, #(s_XISEG)
   02B7 22                  932 	  ret
                            933 	  
   02B8                     934 00101$:
                            935 ;	naked function: no epilogue.
                            936 ;------------------------------------------------------------
                            937 ;Allocation info for local variables in function '_xisegLen'
                            938 ;------------------------------------------------------------
                            939 ;------------------------------------------------------------
                            940 ;	tinibios.c:258: static unsigned  _xisegLen(void) __naked
                            941 ;	-----------------------------------------
                            942 ;	 function _xisegLen
                            943 ;	-----------------------------------------
   02B8                     944 __xisegLen:
                            945 ;	naked function: no prologue.
                            946 ;	tinibios.c:263: __endasm;
                            947 	
   02B8 90s00r00r00         948 	  mov dptr, #(l_XISEG)
   02BC 22                  949 	  ret
                            950 	  
   02BD                     951 00101$:
                            952 ;	naked function: no epilogue.
                            953 ;------------------------------------------------------------
                            954 ;Allocation info for local variables in function '_firstHeapByte'
                            955 ;------------------------------------------------------------
                            956 ;start                     Allocated to registers r2 r3 r4 
                            957 ;------------------------------------------------------------
                            958 ;	tinibios.c:268: static void __xdata *_firstHeapByte(void)
                            959 ;	-----------------------------------------
                            960 ;	 function _firstHeapByte
                            961 ;	-----------------------------------------
   02BD                     962 __firstHeapByte:
                            963 ;	tinibios.c:272: start = (unsigned char __xdata *) _xisegStart();
   02BD 12s00r02rB3         964 	lcall	__xisegStart
   02C1 AA 82               965 	mov	r2,dpl
   02C3 AB 83               966 	mov	r3,dph
   02C5 AC 93               967 	mov	r4,dpx
                            968 ;	genAssign: resultIsFar = TRUE
                            969 ;	tinibios.c:273: start += _xisegLen();
   02C7 C0 02               970 	push	ar2
   02C9 C0 03               971 	push	ar3
   02CB C0 04               972 	push	ar4
   02CD 12s00r02rB8         973 	lcall	__xisegLen
   02D1 AD 82               974 	mov	r5,dpl
   02D3 AE 83               975 	mov	r6,dph
   02D5 D0 04               976 	pop	ar4
   02D7 D0 03               977 	pop	ar3
   02D9 D0 02               978 	pop	ar2
   02DB ED                  979 	mov	a,r5
   02DC 2A                  980 	add	a,r2
   02DD FA                  981 	mov	r2,a
   02DE EE                  982 	mov	a,r6
   02DF 3B                  983 	addc	a,r3
   02E0 FB                  984 	mov	r3,a
   02E1 E4                  985 	clr	a
   02E2 3C                  986 	addc	a,r4
   02E3 FC                  987 	mov	r4,a
                            988 ;	tinibios.c:275: return (void __xdata *)start;
   02E4 8A 82               989 	mov	dpl,r2
   02E6 8B 83               990 	mov	dph,r3
   02E8 8C 93               991 	mov	dpx,r4
   02EA                     992 00101$:
   02EA 22                  993 	ret
                            994 ;------------------------------------------------------------
                            995 ;Allocation info for local variables in function 'romInit'
                            996 ;------------------------------------------------------------
                            997 ;speed                     Allocated with name '_romInit_PARM_2'
                            998 ;noisy                     Allocated to registers r2 
                            999 ;heapStart                 Allocated to registers r3 r4 r5 
                           1000 ;heapEnd                   Allocated to registers 
                           1001 ;heapLen                   Allocated to registers r2 r6 r7 r0 
                           1002 ;rc                        Allocated to registers r6 
                           1003 ;------------------------------------------------------------
                           1004 ;	tinibios.c:283: unsigned char romInit(unsigned char noisy, char speed)
                           1005 ;	-----------------------------------------
                           1006 ;	 function romInit
                           1007 ;	-----------------------------------------
   02EB                    1008 _romInit:
   02EB AA 82              1009 	mov	r2,dpl
                           1010 ;	tinibios.c:290: if (speed == SPEED_2X)
   02ED 90s00r04r01        1011 	mov	dptr,#_romInit_PARM_2
   02F1 E0                 1012 	movx	a,@dptr
   02F2 B4 01 10           1013 	cjne a,#0x01,00110$
   02F5                    1014 00128$:
                           1015 ;	tinibios.c:292: PMR = 0x82;
                           1016 ;	genAssign: resultIsFar = FALSE
   02F5 75 C4 82           1017 	mov	_PMR,#0x82
                           1018 ;	tinibios.c:293: PMR = 0x92;
                           1019 ;	genAssign: resultIsFar = FALSE
   02F8 75 C4 92           1020 	mov	_PMR,#0x92
                           1021 ;	tinibios.c:295: while (!(EXIF & 8))
   02FB                    1022 00101$:
   02FB E5 91              1023 	mov	a,_EXIF
   02FD 30 E3 FB           1024 	jnb  acc.3,00101$
   0300                    1025 00129$:
                           1026 ;	tinibios.c:298: PMR = 0x12;
                           1027 ;	genAssign: resultIsFar = FALSE
   0300 75 C4 12           1028 	mov	_PMR,#0x12
   0303 80 19              1029 	sjmp 00111$
   0305                    1030 00110$:
                           1031 ;	tinibios.c:300: else if (speed == SPEED_4X)
   0305 90s00r04r01        1032 	mov	dptr,#_romInit_PARM_2
   0309 E0                 1033 	movx	a,@dptr
   030A B4 02 11           1034 	cjne a,#0x02,00111$
   030D                    1035 00131$:
                           1036 ;	tinibios.c:303: PMR = 0x82;
                           1037 ;	genAssign: resultIsFar = FALSE
   030D 75 C4 82           1038 	mov	_PMR,#0x82
                           1039 ;	tinibios.c:304: PMR = 0x8a;
                           1040 ;	genAssign: resultIsFar = FALSE
   0310 75 C4 8A           1041 	mov	_PMR,#0x8A
                           1042 ;	tinibios.c:305: PMR = 0x9a;
                           1043 ;	genAssign: resultIsFar = FALSE
   0313 75 C4 9A           1044 	mov	_PMR,#0x9A
                           1045 ;	tinibios.c:307: while (!(EXIF & 8))
   0316                    1046 00104$:
   0316 E5 91              1047 	mov	a,_EXIF
   0318 30 E3 FB           1048 	jnb  acc.3,00104$
   031B                    1049 00132$:
                           1050 ;	tinibios.c:310: PMR = 0x1a;
                           1051 ;	genAssign: resultIsFar = FALSE
   031B 75 C4 1A           1052 	mov	_PMR,#0x1A
   031E                    1053 00111$:
                           1054 ;	tinibios.c:313: heapStart = _firstHeapByte();
   031E C0 02              1055 	push	ar2
   0320 12s00r02rBD        1056 	lcall	__firstHeapByte
   0324 AB 82              1057 	mov	r3,dpl
   0326 AC 83              1058 	mov	r4,dph
   0328 AD 93              1059 	mov	r5,dpx
   032A D0 02              1060 	pop	ar2
                           1061 ;	genAssign: resultIsFar = TRUE
                           1062 ;	tinibios.c:316: rc = init_rom(heapStart, heapEnd);
                           1063 ;	genAssign: resultIsFar = TRUE
   032C 90s00r00r00        1064 	mov	dptr,#_init_rom_PARM_2
   0330 74 FF              1065 	mov  a,#0xFF
   0332 F0                 1066 	movx @dptr,a
   0333 A3                 1067 	inc  dptr
   0334 F0                 1068 	movx @dptr,a
   0335 A3                 1069 	inc	dptr
   0336 74 0F              1070 	mov	a,#0x0F
   0338 F0                 1071 	movx	@dptr,a
   0339 C0 02              1072 	push	ar2
   033B C0 03              1073 	push	ar3
   033D C0 04              1074 	push	ar4
   033F C0 05              1075 	push	ar5
   0341 8B 82              1076 	mov	dpl,r3
   0343 8C 83              1077 	mov	dph,r4
   0345 8D 93              1078 	mov	dpx,r5
   0347 12s00r00r00        1079 	lcall	_init_rom
   034B AE 82              1080 	mov	r6,dpl
   034D D0 05              1081 	pop	ar5
   034F D0 04              1082 	pop	ar4
   0351 D0 03              1083 	pop	ar3
   0353 D0 02              1084 	pop	ar2
                           1085 ;	genAssign: resultIsFar = TRUE
                           1086 ;	tinibios.c:318: if (noisy)
   0355 EA                 1087 	mov	a,r2
   0356 70 04              1088 	jnz	00133$
   0358 02s00r03rFD        1089 	ljmp	00116$
   035C                    1090 00133$:
                           1091 ;	tinibios.c:320: if (rc)
   035C EE                 1092 	mov	a,r6
   035D 60 32              1093 	jz  00113$
   035F                    1094 00134$:
                           1095 ;	tinibios.c:322: printf("error: rom_init returns %d\n", (int)rc);
   035F 8E 02              1096 	mov	ar2,r6
   0361 7F 00              1097 	mov	r7,#0
   0363 C0 06              1098 	push	ar6
   0365 C0 02              1099 	push	ar2
   0367 C0 07              1100 	push	ar7
   0369 74r00              1101 	mov	a,#__str_0
   036B C0 E0              1102 	push	acc
   036D 74s00              1103 	mov	a,#(__str_0 >> 8)
   036F C0 E0              1104 	push	acc
   0371 74s00              1105 	mov	a,#(__str_0 >> 16)
   0373 C0 E0              1106 	push	acc
   0375 74 80              1107 	mov	a,#0x80
   0377 C0 E0              1108 	push	acc
   0379 12s00r00r00        1109 	lcall	_printf
                           1110 ;	stack adjustment for parms
   037D D0 E0              1111 	pop	acc
   037F D0 E0              1112 	pop	acc
   0381 D0 E0              1113 	pop	acc
   0383 D0 E0              1114 	pop	acc
   0385 D0 E0              1115 	pop	acc
   0387 D0 E0              1116 	pop	acc
   0389 D0 06              1117 	pop	ar6
                           1118 ;	tinibios.c:323: return rc;
   038B 8E 82              1119 	mov	dpl,r6
   038D 02s00r04r0F        1120 	ljmp	00117$
   0391                    1121 00113$:
                           1122 ;	tinibios.c:327: heapLen = CE0_END - (unsigned long)heapStart;
                           1123 ;	genAssign: resultIsFar = FALSE
   0391 8B 02              1124 	mov	ar2,r3
   0393 8C 06              1125 	mov	ar6,r4
   0395 8D 07              1126 	mov	ar7,r5
   0397 78 00              1127 	mov	r0,#0
   0399 C3                 1128 	clr	c
   039A 74 FF              1129 	mov	a,#0xFF
   039C 9A                 1130 	subb	a,r2
   039D FA                 1131 	mov	r2,a
   039E 74 FF              1132 	mov	a,#0xFF
   03A0 9E                 1133 	subb	a,r6
   03A1 FE                 1134 	mov	r6,a
   03A2 74 0F              1135 	mov	a,#0x0F
   03A4 9F                 1136 	subb	a,r7
   03A5 FF                 1137 	mov	r7,a
   03A6 E4                 1138 	clr  a
   03A7 98                 1139 	subb	a,r0
   03A8 F8                 1140 	mov	r0,a
                           1141 ;	tinibios.c:328: printf("Heap starts at %p, length %luK\n", heapStart, heapLen / 1024);
   03A9 8E 02              1142 	mov	ar2,r6
   03AB EF                 1143 	mov	a,r7
   03AC C3                 1144 	clr	c
   03AD 13                 1145 	rrc	a
   03AE CA                 1146 	xch	a,r2
   03AF 13                 1147 	rrc	a
   03B0 CA                 1148 	xch	a,r2
   03B1 C3                 1149 	clr	c
   03B2 13                 1150 	rrc	a
   03B3 CA                 1151 	xch	a,r2
   03B4 13                 1152 	rrc	a
   03B5 CA                 1153 	xch	a,r2
   03B6 FE                 1154 	mov	r6,a
   03B7 E8                 1155 	mov	a,r0
   03B8 03                 1156 	rr	a
   03B9 03                 1157 	rr	a
   03BA 54 C0              1158 	anl	a,#0xC0
   03BC 4E                 1159 	orl	a,r6
   03BD FE                 1160 	mov	r6,a
   03BE E8                 1161 	mov	a,r0
   03BF 03                 1162 	rr	a
   03C0 03                 1163 	rr	a
   03C1 54 3F              1164 	anl	a,#0x3F
   03C3 FF                 1165 	mov	r7,a
   03C4 78 00              1166 	mov	r0,#0
                           1167 ;	genAssign: resultIsFar = FALSE
   03C6 79 00              1168 	mov	r1,#0x00
   03C8 C0 02              1169 	push	ar2
   03CA C0 06              1170 	push	ar6
   03CC C0 07              1171 	push	ar7
   03CE C0 00              1172 	push	ar0
   03D0 C0 03              1173 	push	ar3
   03D2 C0 04              1174 	push	ar4
   03D4 C0 05              1175 	push	ar5
   03D6 C0 01              1176 	push	ar1
   03D8 74r1C              1177 	mov	a,#__str_1
   03DA C0 E0              1178 	push	acc
   03DC 74s00              1179 	mov	a,#(__str_1 >> 8)
   03DE C0 E0              1180 	push	acc
   03E0 74s00              1181 	mov	a,#(__str_1 >> 16)
   03E2 C0 E0              1182 	push	acc
   03E4 74 80              1183 	mov	a,#0x80
   03E6 C0 E0              1184 	push	acc
   03E8 12s00r00r00        1185 	lcall	_printf
   03EC C3                 1186 	clr	c
   03ED E5 81              1187 	mov	a,sp
   03EF 94 0C              1188 	subb	a,#0x0C
   03F1 F5 81              1189 	mov	sp,a
   03F3 E5 9B              1190 	mov	a,esp
   03F5 54 03              1191 	anl	a,#3
   03F7 44 DC              1192 	orl	a,#0xDC
   03F9 94 00              1193 	subb	a,#0x00
   03FB F5 9B              1194 	mov	esp,a
   03FD                    1195 00116$:
                           1196 ;	tinibios.c:332: task_settickreload(RELOAD_14_746);
   03FD 90 00 FB 33        1197 	mov  dptr,#0xFB33
   0401 12s00r00r00        1198 	lcall	_task_settickreload
                           1199 ;	tinibios.c:335: Serial0SwitchToBuffered();
   0405 12s00r00r66        1200 	lcall	_Serial0SwitchToBuffered
                           1201 ;	tinibios.c:337: P5 &= ~4; // LED on.
   0409 53 A1 FB           1202 	anl	_P5,#0xFB
                           1203 ;	tinibios.c:339: return 0;
   040C 75 82 00           1204 	mov	dpl,#0x00
   040F                    1205 00117$:
   040F 22                 1206 	ret
                           1207 ;------------------------------------------------------------
                           1208 ;Allocation info for local variables in function 'installInterrupt'
                           1209 ;------------------------------------------------------------
                           1210 ;offset                    Allocated with name '_installInterrupt_PARM_2'
                           1211 ;isrPtr                    Allocated to registers 
                           1212 ;vectPtr                   Allocated to registers r5 r6 r7 
                           1213 ;isr                       Allocated with name '_installInterrupt_isr_1_1'
                           1214 ;------------------------------------------------------------
                           1215 ;	tinibios.c:343: void installInterrupt(void (*isrPtr)(void), unsigned char offset)
                           1216 ;	-----------------------------------------
                           1217 ;	 function installInterrupt
                           1218 ;	-----------------------------------------
   0410                    1219 _installInterrupt:
   0410 AA 82              1220 	mov	r2,dpl
   0412 AB 83              1221 	mov	r3,dph
   0414 AC 93              1222 	mov	r4,dpx
                           1223 ;	tinibios.c:345: unsigned char __xdata * vectPtr = (unsigned char __xdata *) offset;
   0416 90s00r04r02        1224 	mov	dptr,#_installInterrupt_PARM_2
   041A E0                 1225 	movx	a,@dptr
   041B FD                 1226 	mov	r5,a
   041C 7E 00              1227 	mov	r6,#0
   041E 7F 00              1228 	mov	r7,#0
                           1229 ;	genAssign: resultIsFar = TRUE
   0420 8D 84              1230 	mov	dpl1,r5
   0422 8E 85              1231 	mov	dph1,r6
   0424 8F 95              1232 	mov	dpx1,r7
                           1233 ;	tinibios.c:346: unsigned long isr = (unsigned long)isrPtr;
   0426 90s00r04r03        1234 	mov	dptr,#_installInterrupt_isr_1_1
   042A EA                 1235 	mov	a,r2
   042B F0                 1236 	movx	@dptr,a
   042C A3                 1237 	inc	dptr
   042D EB                 1238 	mov	a,r3
   042E F0                 1239 	movx	@dptr,a
   042F A3                 1240 	inc	dptr
   0430 EC                 1241 	mov	a,r4
   0431 F0                 1242 	movx	@dptr,a
   0432 A3                 1243 	inc	dptr
   0433 E4                 1244 	clr	a
   0434 F0                 1245 	movx	@dptr,a
                           1246 ;	tinibios.c:348: *vectPtr++ = 0x02;
   0435 74 02              1247 	mov	a,#0x02
   0437 05 86              1248 	inc	dps
   0439 F0                 1249 	movx	@dptr,a
   043A A3                 1250 	inc	dptr
   043B 75 86 00           1251 	mov	dps,#0
                           1252 ;	tinibios.c:349: *vectPtr++ = (unsigned char)(isr >> 16);
   043E 90s00r04r03        1253 	mov	dptr,#_installInterrupt_isr_1_1
   0442 A3                 1254 	inc	dptr
   0443 A3                 1255 	inc	dptr
   0444 E0                 1256 	movx	a,@dptr
   0445 F9                 1257 	mov	r1,a
   0446 A3                 1258 	inc	dptr
   0447 E0                 1259 	movx	a,@dptr
   0448 FA                 1260 	mov	r2,a
   0449 7B 00              1261 	mov	r3,#0
   044B 7C 00              1262 	mov	r4,#0
   044D E9                 1263 	mov	a,r1
   044E 05 86              1264 	inc	dps
   0450 F0                 1265 	movx	@dptr,a
   0451 A3                 1266 	inc	dptr
   0452 75 86 00           1267 	mov	dps,#0
                           1268 ;	tinibios.c:350: *vectPtr++ = (unsigned char)(isr >> 8);
   0455 90s00r04r03        1269 	mov	dptr,#_installInterrupt_isr_1_1
   0459 A3                 1270 	inc	dptr
   045A E0                 1271 	movx	a,@dptr
   045B FA                 1272 	mov	r2,a
   045C A3                 1273 	inc	dptr
   045D E0                 1274 	movx	a,@dptr
   045E FB                 1275 	mov	r3,a
   045F A3                 1276 	inc	dptr
   0460 E0                 1277 	movx	a,@dptr
   0461 FC                 1278 	mov	r4,a
   0462 78 00              1279 	mov	r0,#0
   0464 EA                 1280 	mov	a,r2
   0465 05 86              1281 	inc	dps
   0467 F0                 1282 	movx	@dptr,a
   0468 A3                 1283 	inc	dptr
   0469 75 86 00           1284 	mov	dps,#0
                           1285 ;	tinibios.c:351: *vectPtr = (unsigned char)isr;
   046C 90s00r04r03        1286 	mov	dptr,#_installInterrupt_isr_1_1
   0470 E0                 1287 	movx	a,@dptr
   0471 FA                 1288 	mov  r2,a
   0472 05 86              1289 	inc	dps
   0474 F0                 1290 	movx	@dptr,a
   0475 75 86 00           1291 	mov	dps,#0
   0478                    1292 00101$:
   0478 22                 1293 	ret
                           1294 	.area CSEG    (CODE)
                           1295 	.area CONST   (CODE)
   0000                    1296 __str_0:
   0000 65 72 72 6F 72 3A  1297 	.ascii "error: rom_init returns %d"
        20 72 6F 6D 5F 69
        6E 69 74 20 72 65
        74 75 72 6E 73 20
        25 64
   001A 0A                 1298 	.db 0x0A
   001B 00                 1299 	.db 0x00
   001C                    1300 __str_1:
   001C 48 65 61 70 20 73  1301 	.ascii "Heap starts at %p, length %luK"
        74 61 72 74 73 20
        61 74 20 25 70 2C
        20 6C 65 6E 67 74
        68 20 25 6C 75 4B
   003A 0A                 1302 	.db 0x0A
   003B 00                 1303 	.db 0x00
                           1304 	.area XINIT   (CODE)
   0000                    1305 __xinit__receive0BufferHead:
   0000 00 00              1306 	.byte #0x00,#0x00	;  0
   0002                    1307 __xinit__receive0BufferTail:
   0002 00 00              1308 	.byte #0x00,#0x00	;  0
   0004                    1309 __xinit__transmit0IsBusy:
   0004 00                 1310 	.db #0x00	;  0
                           1311 	.area CABS    (ABS,CODE)
