                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:16 2015
                              5 ;--------------------------------------------------------
                              6 	.module _atoi
                              7 	.optsdcc -mds390 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _atoi
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; special function bits
                             36 ;--------------------------------------------------------
                             37 ;--------------------------------------------------------
                             38 ; overlayable register banks
                             39 ;--------------------------------------------------------
                             40 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      41 	.ds 8
                             42 ;--------------------------------------------------------
                             43 ; internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area DSEG    (DATA)
   0000                      46 _atoi_rv_1_1:
   0000                      47 	.ds 2
                             48 ;--------------------------------------------------------
                             49 ; overlayable items in internal ram 
                             50 ;--------------------------------------------------------
                             51 	.area OSEG    (OVR,DATA)
                             52 ;--------------------------------------------------------
                             53 ; indirectly addressable internal ram data
                             54 ;--------------------------------------------------------
                             55 	.area ISEG    (DATA)
                             56 ;--------------------------------------------------------
                             57 ; absolute internal ram data
                             58 ;--------------------------------------------------------
                             59 	.area IABS    (ABS,DATA)
                             60 	.area IABS    (ABS,DATA)
                             61 ;--------------------------------------------------------
                             62 ; bit data
                             63 ;--------------------------------------------------------
                             64 	.area BSEG    (BIT)
                             65 ;--------------------------------------------------------
                             66 ; paged external ram data
                             67 ;--------------------------------------------------------
                             68 	.area PSEG    (PAG,XDATA)
                             69 ;--------------------------------------------------------
                             70 ; external ram data
                             71 ;--------------------------------------------------------
                             72 	.area XSEG    (XDATA)
                             73 ;--------------------------------------------------------
                             74 ; absolute external ram data
                             75 ;--------------------------------------------------------
                             76 	.area XABS    (ABS,XDATA)
                             77 ;--------------------------------------------------------
                             78 ; external initialized ram data
                             79 ;--------------------------------------------------------
                             80 	.area XISEG   (XDATA)
                             81 ;--------------------------------------------------------
                             82 ; global & static initialisations
                             83 ;--------------------------------------------------------
                             84 	.area HOME    (CODE)
                             85 	.area GSINIT  (CODE)
                             86 	.area GSFINAL (CODE)
                             87 	.area GSINIT  (CODE)
                             88 ;--------------------------------------------------------
                             89 ; Home
                             90 ;--------------------------------------------------------
                             91 	.area HOME    (CODE)
                             92 	.area HOME    (CODE)
                             93 ;--------------------------------------------------------
                             94 ; code
                             95 ;--------------------------------------------------------
                             96 	.area CSEG    (CODE)
                             97 ;------------------------------------------------------------
                             98 ;Allocation info for local variables in function 'atoi'
                             99 ;------------------------------------------------------------
                            100 ;rv                        Allocated with name '_atoi_rv_1_1'
                            101 ;sign                      Allocated to registers r0 
                            102 ;s                         Allocated to registers r2 r3 r4 r5 
                            103 ;sloc0                     Allocated with name '_atoi_sloc0_1_0'
                            104 ;------------------------------------------------------------
                            105 ;	_atoi.c:29: int atoi(const char * s)
                            106 ;	-----------------------------------------
                            107 ;	 function atoi
                            108 ;	-----------------------------------------
   0000                     109 _atoi:
                    0002    110 	ar2 = 0x02
                    0003    111 	ar3 = 0x03
                    0004    112 	ar4 = 0x04
                    0005    113 	ar5 = 0x05
                    0006    114 	ar6 = 0x06
                    0007    115 	ar7 = 0x07
                    0000    116 	ar0 = 0x00
                    0001    117 	ar1 = 0x01
   0000 AA 82               118 	mov	r2,dpl
   0002 AB 83               119 	mov	r3,dph
   0004 AC 93               120 	mov	r4,dpx
   0006 AD F0               121 	mov	r5,b
                            122 ;	_atoi.c:31: register int rv=0; 
                            123 ;	genAssign: resultIsFar = FALSE
   0008 E4                  124 	clr	a
   0009 F5*00               125 	mov	_atoi_rv_1_1,a
   000B F5*01               126 	mov	(_atoi_rv_1_1 + 1),a
                            127 ;	_atoi.c:35: while (*s) {
                            128 ;	genAssign: resultIsFar = FALSE
   000D 8A 00               129 	mov	ar0,r2
   000F 8B 01               130 	mov	ar1,r3
   0011 8C 06               131 	mov	ar6,r4
   0013 8D 07               132 	mov	ar7,r5
   0015                     133 00107$:
   0015 88 82               134 	mov	dpl,r0
   0017 89 83               135 	mov	dph,r1
   0019 8E 93               136 	mov	dpx,r6
   001B 8F F0               137 	mov	b,r7
   001D 12s00r00r00         138 	lcall	__gptrget
   0021 FA                  139 	mov  r2,a
   0022 60 37               140 	jz  00133$
   0024                     141 00135$:
                            142 ;	_atoi.c:36: if (*s <= '9' && *s >= '0')
   0024 C3                  143 	clr	c
   0025 74 B9               144 	mov  a,#(0x39 ^ 0x80)
   0027 8A F0               145 	mov	b,r2
   0029 63 F0 80            146 	xrl	b,#0x80
   002C 95 F0               147 	subb	a,b
   002E 40 08               148 	jc   00102$
   0030                     149 00136$:
   0030 C3                  150 	clr	c
   0031 EA                  151 	mov	a,r2
   0032 64 80               152 	xrl	a,#0x80
   0034 94 B0               153 	subb	a,#0xB0
   0036 50 23               154 	jnc  00133$
   0038                     155 00137$:
                            156 ;	_atoi.c:37: break;
   0038                     157 00102$:
                            158 ;	_atoi.c:38: if (*s == '-' || *s == '+') 
   0038 88 82               159 	mov	dpl,r0
   003A 89 83               160 	mov	dph,r1
   003C 8E 93               161 	mov	dpx,r6
   003E 8F F0               162 	mov	b,r7
   0040 12s00r00r00         163 	lcall	__gptrget
   0044 FA                  164 	mov  r2,a
   0045 B4 2D 02            165 	cjne	a,#0x2D,00138$
   0048 80 11               166 	sjmp 00133$
   004A                     167 00138$:
   004A EA                  168 	mov	a,r2
   004B B4 2B 02            169 	cjne	a,#0x2B,00139$
   004E 80 0B               170 	sjmp 00133$
   0050                     171 00139$:
                            172 ;	_atoi.c:40: s++;
   0050 08                  173 	inc	r0
   0051 B8 00 05            174 	cjne	r0,#0,00140$
   0054 09                  175 	inc	r1
   0055 B9 00 01            176 	cjne	r1,#0,00140$
   0058 0E                  177 	inc	r6
   0059                     178 00140$:
   0059 80 BA               179 	sjmp 00107$
   005B                     180 00133$:
                            181 ;	genAssign: resultIsFar = TRUE
   005B 88 02               182 	mov	ar2,r0
   005D 89 03               183 	mov	ar3,r1
   005F 8E 04               184 	mov	ar4,r6
   0061 8F 05               185 	mov	ar5,r7
                            186 ;	_atoi.c:43: sign = (*s == '-');
   0063 88 82               187 	mov	dpl,r0
   0065 89 83               188 	mov	dph,r1
   0067 8E 93               189 	mov	dpx,r6
   0069 8F F0               190 	mov	b,r7
   006B 12s00r00r00         191 	lcall	__gptrget
   006F FE                  192 	mov  r6,a
   0070 B4 2D 04            193 	cjne	a,#0x2D,00141$
   0073 74 01               194 	mov	a,#1
   0075 80 01               195 	sjmp	00142$
   0077                     196 00141$:
   0077 E4                  197 	clr	a
   0078                     198 00142$:
                            199 ;	genAssign: resultIsFar = FALSE
                            200 ;	_atoi.c:44: if (*s == '-' || *s == '+') s++;
   0078 FF                  201 	mov  r7,a
   0079 8F 00               202 	mov  ar0,r7 
   007B 70 04               203 	jnz  00110$
   007D                     204 00143$:
   007D EE                  205 	mov	a,r6
   007E B4 2B 09            206 	cjne a,#0x2B,00131$
   0081                     207 00145$:
   0081                     208 00110$:
   0081 0A                  209 	inc	r2
   0082 BA 00 05            210 	cjne	r2,#0,00146$
   0085 0B                  211 	inc	r3
   0086 BB 00 01            212 	cjne	r3,#0,00146$
   0089 0C                  213 	inc	r4
   008A                     214 00146$:
                            215 ;	_atoi.c:46: while (*s && *s >= '0' && *s <= '9') {
   008A                     216 00131$:
                            217 ;	genAssign: resultIsFar = FALSE
   008A                     218 00115$:
   008A 8A 82               219 	mov	dpl,r2
   008C 8B 83               220 	mov	dph,r3
   008E 8C 93               221 	mov	dpx,r4
   0090 8D F0               222 	mov	b,r5
   0092 12s00r00r00         223 	lcall	__gptrget
   0096 FE                  224 	mov  r6,a
   0097 60 69               225 	jz  00117$
   0099                     226 00147$:
   0099 C3                  227 	clr	c
   009A EE                  228 	mov	a,r6
   009B 64 80               229 	xrl	a,#0x80
   009D 94 B0               230 	subb	a,#0xB0
   009F 40 61               231 	jc   00117$
   00A1                     232 00148$:
   00A1 C3                  233 	clr	c
   00A2 74 B9               234 	mov  a,#(0x39 ^ 0x80)
   00A4 8E F0               235 	mov	b,r6
   00A6 63 F0 80            236 	xrl	b,#0x80
   00A9 95 F0               237 	subb	a,b
   00AB 40 55               238 	jc   00117$
   00AD                     239 00149$:
                            240 ;	_atoi.c:47: rv = (rv * 10) + (*s - '0');
   00AD C0 00               241 	push	ar0
                            242 ;	genAssign: resultIsFar = TRUE
   00AF 90s00r00r00         243 	mov	dptr,#__mulint_PARM_2
   00B3 E5*00               244 	mov	a,_atoi_rv_1_1
   00B5 F0                  245 	movx	@dptr,a
   00B6 A3                  246 	inc	dptr
   00B7 E5*01               247 	mov	a,(_atoi_rv_1_1 + 1)
   00B9 F0                  248 	movx	@dptr,a
   00BA C0 02               249 	push	ar2
   00BC C0 03               250 	push	ar3
   00BE C0 04               251 	push	ar4
   00C0 C0 05               252 	push	ar5
   00C2 C0 06               253 	push	ar6
   00C4 C0 00               254 	push	ar0
   00C6 90 00 00 0A         255 	mov  dptr,#0x000A
   00CA 12s00r00r00         256 	lcall	__mulint
   00CE AF 82               257 	mov	r7,dpl
   00D0 A9 83               258 	mov	r1,dph
   00D2 D0 00               259 	pop	ar0
   00D4 D0 06               260 	pop	ar6
   00D6 D0 05               261 	pop	ar5
   00D8 D0 04               262 	pop	ar4
   00DA D0 03               263 	pop	ar3
   00DC D0 02               264 	pop	ar2
   00DE EE                  265 	mov	a,r6
   00DF 33                  266 	rlc	a
   00E0 95 E0               267 	subb	a,acc
   00E2 F8                  268 	mov	r0,a
   00E3 EE                  269 	mov	a,r6
   00E4 24 D0               270 	add	a,#0xD0
   00E6 FE                  271 	mov	r6,a
   00E7 E8                  272 	mov	a,r0
   00E8 34 FF               273 	addc	a,#0xFF
   00EA F8                  274 	mov	r0,a
   00EB EE                  275 	mov	a,r6
   00EC 2F                  276 	add	a,r7
   00ED F5*00               277 	mov	_atoi_rv_1_1,a
   00EF E8                  278 	mov	a,r0
   00F0 39                  279 	addc	a,r1
   00F1 F5*01               280 	mov	(_atoi_rv_1_1 + 1),a
                            281 ;	_atoi.c:48: s++;
   00F3 0A                  282 	inc	r2
   00F4 BA 00 05            283 	cjne	r2,#0,00150$
   00F7 0B                  284 	inc	r3
   00F8 BB 00 01            285 	cjne	r3,#0,00150$
   00FB 0C                  286 	inc	r4
   00FC                     287 00150$:
   00FC D0 00               288 	pop	ar0
   00FE 02s00r00r8A         289 	ljmp	00115$
   0102                     290 00117$:
                            291 ;	_atoi.c:51: return (sign ? -rv : rv);
   0102 E8                  292 	mov	a,r0
   0103 60 0D               293 	jz  00120$
   0105                     294 00151$:
   0105 C3                  295 	clr	c
   0106 E4                  296 	clr	a
   0107 95*00               297 	subb	a,_atoi_rv_1_1
   0109 F5 82               298 	mov	dpl,a
   010B E4                  299 	clr	a
   010C 95*01               300 	subb	a,(_atoi_rv_1_1 + 1)
   010E F5 83               301 	mov	dph,a
   0110 80 06               302 	sjmp 00121$
   0112                     303 00120$:
                            304 ;	genAssign: resultIsFar = FALSE
   0112 85*00 82            305 	mov	dpl,_atoi_rv_1_1
   0115 85*01 83            306 	mov	dph,(_atoi_rv_1_1 + 1)
   0118                     307 00121$:
   0118                     308 00118$:
   0118 22                  309 	ret
                            310 	.area CSEG    (CODE)
                            311 	.area CONST   (CODE)
                            312 	.area XINIT   (CODE)
                            313 	.area CABS    (ABS,CODE)
