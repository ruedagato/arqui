                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:21 2015
                              5 ;--------------------------------------------------------
                              6 	.module cotf
                              7 	.optsdcc -mhc08
                              8 	
                              9 	.area HOME (CODE)
                             10 	.area GSINIT0 (CODE)
                             11 	.area GSINIT (CODE)
                             12 	.area GSFINAL (CODE)
                             13 	.area CSEG (CODE)
                             14 	.area XINIT
                             15 	.area CONST   (CODE)
                             16 	.area DSEG
                             17 	.area OSEG    (OVR)
                             18 	.area BSEG
                             19 	.area XSEG
                             20 	.area XISEG
                             21 ;--------------------------------------------------------
                             22 ; Public variables in this module
                             23 ;--------------------------------------------------------
                             24 	.globl _cotf
                             25 ;--------------------------------------------------------
                             26 ;  ram data
                             27 ;--------------------------------------------------------
                             28 	.area DSEG
                             29 ;--------------------------------------------------------
                             30 ; overlayable items in  ram 
                             31 ;--------------------------------------------------------
                             32 	.area OSEG    (OVR)
                             33 ;--------------------------------------------------------
                             34 ; absolute external ram data
                             35 ;--------------------------------------------------------
                             36 	.area XABS    (ABS)
                             37 ;--------------------------------------------------------
                             38 ; external initialized ram data
                             39 ;--------------------------------------------------------
                             40 	.area XISEG
                             41 ;--------------------------------------------------------
                             42 ; extended address mode data
                             43 ;--------------------------------------------------------
                             44 	.area XSEG
                             45 ;--------------------------------------------------------
                             46 ; global & static initialisations
                             47 ;--------------------------------------------------------
                             48 	.area HOME (CODE)
                             49 	.area GSINIT (CODE)
                             50 	.area GSFINAL (CODE)
                             51 	.area GSINIT (CODE)
                             52 ;--------------------------------------------------------
                             53 ; Home
                             54 ;--------------------------------------------------------
                             55 	.area HOME (CODE)
                             56 	.area HOME (CODE)
                             57 ;--------------------------------------------------------
                             58 ; code
                             59 ;--------------------------------------------------------
                             60 	.area CSEG (CODE)
                             61 ;------------------------------------------------------------
                             62 ;Allocation info for local variables in function 'cotf'
                             63 ;------------------------------------------------------------
                             64 ;x                         Allocated to stack - offset 2
                             65 ;y                         Allocated to registers 
                             66 ;sloc0                     Allocated to stack - offset -1
                             67 ;sloc1                     Allocated to stack - offset -5
                             68 ;------------------------------------------------------------
                             69 ;../cotf.c:37: float cotf(const float x) _FLOAT_FUNC_REENTRANT
                             70 ;	-----------------------------------------
                             71 ;	 function cotf
                             72 ;	-----------------------------------------
   0000                      73 _cotf:
   0000 A7 FB                74 	ais	#-5
                             75 ;../cotf.c:41: y=fabsf(x);
   0002 9E E6 0B             76 	lda	11,s
   0005 87                   77 	psha
   0006 9E E6 0B             78 	lda	11,s
   0009 87                   79 	psha
   000A 9E E6 0B             80 	lda	11,s
   000D 87                   81 	psha
   000E 9E E6 0B             82 	lda	11,s
   0011 87                   83 	psha
   0012 CDs00r00             84 	jsr	_fabsf
   0015 C7s00r03             85 	sta	(___fslt_PARM_1 + 3)
   0018 CFs00r02             86 	stx	(___fslt_PARM_1 + 2)
   001B B6*00                87 	lda	*__ret2
   001D C7s00r01             88 	sta	(___fslt_PARM_1 + 1)
   0020 B6*00                89 	lda	*__ret3
   0022 C7s00r00             90 	sta	___fslt_PARM_1
   0025 A7 04                91 	ais	#4
                             92 ;../cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
   0027 A6 0D                93 	lda	#0x0D
   0029 C7s00r00             94 	sta	___fslt_PARM_2
   002C A6 A2                95 	lda	#0xA2
   002E C7s00r01             96 	sta	(___fslt_PARM_2 + 1)
   0031 A6 42                97 	lda	#0x42
   0033 C7s00r02             98 	sta	(___fslt_PARM_2 + 2)
   0036 A6 60                99 	lda	#0x60
   0038 C7s00r03            100 	sta	(___fslt_PARM_2 + 3)
   003B CDs00r00            101 	jsr	___fslt
   003E 9E E7 05            102 	sta	5,s
   0041 9E 6D 05            103 	tst	5,s
   0044 27 4E               104 	beq	00105$
   0046                     105 00110$:
                            106 ;../cotf.c:44: errno = ERANGE;
   0046 4F                  107 	clra
   0047 C7s00r00            108 	sta	_errno
   004A A6 22               109 	lda	#0x22
   004C C7s00r01            110 	sta	(_errno + 1)
                            111 ;../cotf.c:45: if (x<0.0)
   004F 9E E6 08            112 	lda	8,s
   0052 C7s00r00            113 	sta	___fslt_PARM_1
   0055 9E E6 09            114 	lda	9,s
   0058 C7s00r01            115 	sta	(___fslt_PARM_1 + 1)
   005B 9E E6 0A            116 	lda	10,s
   005E C7s00r02            117 	sta	(___fslt_PARM_1 + 2)
   0061 9E E6 0B            118 	lda	11,s
   0064 C7s00r03            119 	sta	(___fslt_PARM_1 + 3)
   0067 4F                  120 	clra
   0068 C7s00r00            121 	sta	___fslt_PARM_2
   006B C7s00r01            122 	sta	(___fslt_PARM_2 + 1)
   006E C7s00r02            123 	sta	(___fslt_PARM_2 + 2)
   0071 C7s00r03            124 	sta	(___fslt_PARM_2 + 3)
   0074 CDs00r00            125 	jsr	___fslt
   0077 9E E7 05            126 	sta	5,s
   007A 9E 6D 05            127 	tst	5,s
   007D 27 0B               128 	beq	00102$
   007F                     129 00111$:
                            130 ;../cotf.c:46: return -HUGE_VALF;
   007F 6E FF*00            131 	mov	#0xFF,*__ret3
   0082 3F*00               132 	clr	*__ret2
   0084 AE FF               133 	ldx	#0xFF
   0086 A6 FF               134 	lda	#0xFF
   0088 20 4A               135 	bra	00106$
   008A                     136 00102$:
                            137 ;../cotf.c:48: return +HUGE_VALF;
   008A 3F*00               138 	clr	*__ret3
   008C 3F*00               139 	clr	*__ret2
   008E AE FF               140 	ldx	#0xFF
   0090 A6 FF               141 	lda	#0xFF
   0092 20 40               142 	bra	00106$
   0094                     143 00105$:
                            144 ;../cotf.c:50: return tancotf(x, 1);
   0094 9E E6 08            145 	lda	8,s
   0097 C7s00r00            146 	sta	_tancotf_PARM_1
   009A 9E E6 09            147 	lda	9,s
   009D C7s00r01            148 	sta	(_tancotf_PARM_1 + 1)
   00A0 9E E6 0A            149 	lda	10,s
   00A3 C7s00r02            150 	sta	(_tancotf_PARM_1 + 2)
   00A6 9E E6 0B            151 	lda	11,s
   00A9 C7s00r03            152 	sta	(_tancotf_PARM_1 + 3)
   00AC A6 01               153 	lda	#0x01
   00AE C7s00r00            154 	sta	_tancotf_PARM_2
   00B1 CDs00r00            155 	jsr	_tancotf
   00B4 9E E7 04            156 	sta	4,s
   00B7 9E EF 03            157 	stx	3,s
   00BA B6*00               158 	lda	*__ret2
   00BC 9E E7 02            159 	sta	2,s
   00BF B6*00               160 	lda	*__ret3
   00C1 9E E7 01            161 	sta	1,s
   00C4 9E E6 01            162 	lda	1,s
   00C7 B7*00               163 	sta	*__ret3
   00C9 9E E6 02            164 	lda	2,s
   00CC B7*00               165 	sta	*__ret2
   00CE 9E EE 03            166 	ldx	3,s
   00D1 9E E6 04            167 	lda	4,s
   00D4                     168 00106$:
   00D4 A7 05               169 	ais	#5
   00D6 81                  170 	rts
                            171 	.area CSEG (CODE)
                            172 	.area CONST   (CODE)
                            173 	.area XINIT
                            174 	.area CABS    (ABS,CODE)
