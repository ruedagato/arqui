                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:19 2015
                              5 ;--------------------------------------------------------
                              6 	.module _atoi
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _atoi
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; special function bits
                             36 ;--------------------------------------------------------
                             37 ;--------------------------------------------------------
                             38 ; overlayable register banks
                             39 ;--------------------------------------------------------
                             40 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      41 	.ds 8
                             42 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                      43 	.ds 8
                             44 ;--------------------------------------------------------
                             45 ; internal ram data
                             46 ;--------------------------------------------------------
                             47 	.area DSEG    (DATA)
   0000                      48 _atoi_rv_1_1:
   0000                      49 	.ds 2
                             50 ;--------------------------------------------------------
                             51 ; overlayable items in internal ram 
                             52 ;--------------------------------------------------------
                             53 	.area OSEG    (OVR,DATA)
                             54 ;--------------------------------------------------------
                             55 ; indirectly addressable internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area ISEG    (DATA)
                             58 ;--------------------------------------------------------
                             59 ; absolute internal ram data
                             60 ;--------------------------------------------------------
                             61 	.area IABS    (ABS,DATA)
                             62 	.area IABS    (ABS,DATA)
                             63 ;--------------------------------------------------------
                             64 ; bit data
                             65 ;--------------------------------------------------------
                             66 	.area BSEG    (BIT)
                             67 ;--------------------------------------------------------
                             68 ; paged external ram data
                             69 ;--------------------------------------------------------
                             70 	.area PSEG    (PAG,XDATA)
                             71 ;--------------------------------------------------------
                             72 ; external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XSEG    (XDATA)
                             75 ;--------------------------------------------------------
                             76 ; absolute external ram data
                             77 ;--------------------------------------------------------
                             78 	.area XABS    (ABS,XDATA)
                             79 ;--------------------------------------------------------
                             80 ; external initialized ram data
                             81 ;--------------------------------------------------------
                             82 	.area XISEG   (XDATA)
                             83 ;--------------------------------------------------------
                             84 ; global & static initialisations
                             85 ;--------------------------------------------------------
                             86 	.area HOME    (CODE)
                             87 	.area GSINIT  (CODE)
                             88 	.area GSFINAL (CODE)
                             89 	.area GSINIT  (CODE)
                             90 ;--------------------------------------------------------
                             91 ; Home
                             92 ;--------------------------------------------------------
                             93 	.area HOME    (CODE)
                             94 	.area HOME    (CODE)
                             95 ;--------------------------------------------------------
                             96 ; code
                             97 ;--------------------------------------------------------
                             98 	.area CSEG    (CODE)
                             99 ;------------------------------------------------------------
                            100 ;Allocation info for local variables in function 'atoi'
                            101 ;------------------------------------------------------------
                            102 ;rv                        Allocated with name '_atoi_rv_1_1'
                            103 ;sign                      Allocated to registers r0 
                            104 ;s                         Allocated to registers r2 r3 r4 r5 
                            105 ;sloc0                     Allocated with name '_atoi_sloc0_1_0'
                            106 ;------------------------------------------------------------
                            107 ;	_atoi.c:29: int atoi(const char * s)
                            108 ;	-----------------------------------------
                            109 ;	 function atoi
                            110 ;	-----------------------------------------
   0000                     111 _atoi:
                    0002    112 	ar2 = 0x02
                    0003    113 	ar3 = 0x03
                    0004    114 	ar4 = 0x04
                    0005    115 	ar5 = 0x05
                    0006    116 	ar6 = 0x06
                    0007    117 	ar7 = 0x07
                    0000    118 	ar0 = 0x00
                    0001    119 	ar1 = 0x01
   0000 AA 82               120 	mov	r2,dpl
   0002 AB 83               121 	mov	r3,dph
   0004 AC 93               122 	mov	r4,dpx
   0006 AD F0               123 	mov	r5,b
                            124 ;	_atoi.c:31: register int rv=0; 
                            125 ;	genAssign: resultIsFar = FALSE
   0008 E4                  126 	clr	a
   0009 F5*00               127 	mov	_atoi_rv_1_1,a
   000B F5*01               128 	mov	(_atoi_rv_1_1 + 1),a
                            129 ;	_atoi.c:35: while (*s) {
                            130 ;	genAssign: resultIsFar = FALSE
   000D 8A 00               131 	mov	ar0,r2
   000F 8B 01               132 	mov	ar1,r3
   0011 8C 06               133 	mov	ar6,r4
   0013 8D 07               134 	mov	ar7,r5
   0015                     135 00107$:
   0015 88 82               136 	mov	dpl,r0
   0017 89 83               137 	mov	dph,r1
   0019 8E 93               138 	mov	dpx,r6
   001B 8F F0               139 	mov	b,r7
   001D 12s00r00r00         140 	lcall	__gptrget
   0021 FA                  141 	mov  r2,a
   0022 60 37               142 	jz  00133$
   0024                     143 00135$:
                            144 ;	_atoi.c:36: if (*s <= '9' && *s >= '0')
   0024 C3                  145 	clr	c
   0025 74 B9               146 	mov  a,#(0x39 ^ 0x80)
   0027 8A F0               147 	mov	b,r2
   0029 63 F0 80            148 	xrl	b,#0x80
   002C 95 F0               149 	subb	a,b
   002E 40 08               150 	jc   00102$
   0030                     151 00136$:
   0030 C3                  152 	clr	c
   0031 EA                  153 	mov	a,r2
   0032 64 80               154 	xrl	a,#0x80
   0034 94 B0               155 	subb	a,#0xB0
   0036 50 23               156 	jnc  00133$
   0038                     157 00137$:
                            158 ;	_atoi.c:37: break;
   0038                     159 00102$:
                            160 ;	_atoi.c:38: if (*s == '-' || *s == '+') 
   0038 88 82               161 	mov	dpl,r0
   003A 89 83               162 	mov	dph,r1
   003C 8E 93               163 	mov	dpx,r6
   003E 8F F0               164 	mov	b,r7
   0040 12s00r00r00         165 	lcall	__gptrget
   0044 FA                  166 	mov  r2,a
   0045 B4 2D 02            167 	cjne	a,#0x2D,00138$
   0048 80 11               168 	sjmp 00133$
   004A                     169 00138$:
   004A EA                  170 	mov	a,r2
   004B B4 2B 02            171 	cjne	a,#0x2B,00139$
   004E 80 0B               172 	sjmp 00133$
   0050                     173 00139$:
                            174 ;	_atoi.c:40: s++;
   0050 08                  175 	inc	r0
   0051 B8 00 05            176 	cjne	r0,#0,00140$
   0054 09                  177 	inc	r1
   0055 B9 00 01            178 	cjne	r1,#0,00140$
   0058 0E                  179 	inc	r6
   0059                     180 00140$:
   0059 80 BA               181 	sjmp 00107$
   005B                     182 00133$:
                            183 ;	genAssign: resultIsFar = TRUE
   005B 88 02               184 	mov	ar2,r0
   005D 89 03               185 	mov	ar3,r1
   005F 8E 04               186 	mov	ar4,r6
   0061 8F 05               187 	mov	ar5,r7
                            188 ;	_atoi.c:43: sign = (*s == '-');
   0063 88 82               189 	mov	dpl,r0
   0065 89 83               190 	mov	dph,r1
   0067 8E 93               191 	mov	dpx,r6
   0069 8F F0               192 	mov	b,r7
   006B 12s00r00r00         193 	lcall	__gptrget
   006F FE                  194 	mov  r6,a
   0070 B4 2D 04            195 	cjne	a,#0x2D,00141$
   0073 74 01               196 	mov	a,#1
   0075 80 01               197 	sjmp	00142$
   0077                     198 00141$:
   0077 E4                  199 	clr	a
   0078                     200 00142$:
                            201 ;	genAssign: resultIsFar = FALSE
                            202 ;	_atoi.c:44: if (*s == '-' || *s == '+') s++;
   0078 FF                  203 	mov  r7,a
   0079 8F 00               204 	mov  ar0,r7 
   007B 70 04               205 	jnz  00110$
   007D                     206 00143$:
   007D EE                  207 	mov	a,r6
   007E B4 2B 09            208 	cjne a,#0x2B,00131$
   0081                     209 00145$:
   0081                     210 00110$:
   0081 0A                  211 	inc	r2
   0082 BA 00 05            212 	cjne	r2,#0,00146$
   0085 0B                  213 	inc	r3
   0086 BB 00 01            214 	cjne	r3,#0,00146$
   0089 0C                  215 	inc	r4
   008A                     216 00146$:
                            217 ;	_atoi.c:46: while (*s && *s >= '0' && *s <= '9') {
   008A                     218 00131$:
                            219 ;	genAssign: resultIsFar = FALSE
   008A                     220 00115$:
   008A 8A 82               221 	mov	dpl,r2
   008C 8B 83               222 	mov	dph,r3
   008E 8C 93               223 	mov	dpx,r4
   0090 8D F0               224 	mov	b,r5
   0092 12s00r00r00         225 	lcall	__gptrget
   0096 FE                  226 	mov  r6,a
   0097 60 69               227 	jz  00117$
   0099                     228 00147$:
   0099 C3                  229 	clr	c
   009A EE                  230 	mov	a,r6
   009B 64 80               231 	xrl	a,#0x80
   009D 94 B0               232 	subb	a,#0xB0
   009F 40 61               233 	jc   00117$
   00A1                     234 00148$:
   00A1 C3                  235 	clr	c
   00A2 74 B9               236 	mov  a,#(0x39 ^ 0x80)
   00A4 8E F0               237 	mov	b,r6
   00A6 63 F0 80            238 	xrl	b,#0x80
   00A9 95 F0               239 	subb	a,b
   00AB 40 55               240 	jc   00117$
   00AD                     241 00149$:
                            242 ;	_atoi.c:47: rv = (rv * 10) + (*s - '0');
   00AD C0 00               243 	push	ar0
                            244 ;	genAssign: resultIsFar = TRUE
   00AF 90s00r00r00         245 	mov	dptr,#__mulint_PARM_2
   00B3 E5*00               246 	mov	a,_atoi_rv_1_1
   00B5 F0                  247 	movx	@dptr,a
   00B6 A3                  248 	inc	dptr
   00B7 E5*01               249 	mov	a,(_atoi_rv_1_1 + 1)
   00B9 F0                  250 	movx	@dptr,a
   00BA C0 02               251 	push	ar2
   00BC C0 03               252 	push	ar3
   00BE C0 04               253 	push	ar4
   00C0 C0 05               254 	push	ar5
   00C2 C0 06               255 	push	ar6
   00C4 C0 00               256 	push	ar0
   00C6 90 00 00 0A         257 	mov  dptr,#0x000A
   00CA 12s00r00r00         258 	lcall	__mulint
   00CE AF 82               259 	mov	r7,dpl
   00D0 A9 83               260 	mov	r1,dph
   00D2 D0 00               261 	pop	ar0
   00D4 D0 06               262 	pop	ar6
   00D6 D0 05               263 	pop	ar5
   00D8 D0 04               264 	pop	ar4
   00DA D0 03               265 	pop	ar3
   00DC D0 02               266 	pop	ar2
   00DE EE                  267 	mov	a,r6
   00DF 33                  268 	rlc	a
   00E0 95 E0               269 	subb	a,acc
   00E2 F8                  270 	mov	r0,a
   00E3 EE                  271 	mov	a,r6
   00E4 24 D0               272 	add	a,#0xD0
   00E6 FE                  273 	mov	r6,a
   00E7 E8                  274 	mov	a,r0
   00E8 34 FF               275 	addc	a,#0xFF
   00EA F8                  276 	mov	r0,a
   00EB EE                  277 	mov	a,r6
   00EC 2F                  278 	add	a,r7
   00ED F5*00               279 	mov	_atoi_rv_1_1,a
   00EF E8                  280 	mov	a,r0
   00F0 39                  281 	addc	a,r1
   00F1 F5*01               282 	mov	(_atoi_rv_1_1 + 1),a
                            283 ;	_atoi.c:48: s++;
   00F3 0A                  284 	inc	r2
   00F4 BA 00 05            285 	cjne	r2,#0,00150$
   00F7 0B                  286 	inc	r3
   00F8 BB 00 01            287 	cjne	r3,#0,00150$
   00FB 0C                  288 	inc	r4
   00FC                     289 00150$:
   00FC D0 00               290 	pop	ar0
   00FE 02s00r00r8A         291 	ljmp	00115$
   0102                     292 00117$:
                            293 ;	_atoi.c:51: return (sign ? -rv : rv);
   0102 E8                  294 	mov	a,r0
   0103 60 0D               295 	jz  00120$
   0105                     296 00151$:
   0105 C3                  297 	clr	c
   0106 E4                  298 	clr	a
   0107 95*00               299 	subb	a,_atoi_rv_1_1
   0109 F5 82               300 	mov	dpl,a
   010B E4                  301 	clr	a
   010C 95*01               302 	subb	a,(_atoi_rv_1_1 + 1)
   010E F5 83               303 	mov	dph,a
   0110 80 06               304 	sjmp 00121$
   0112                     305 00120$:
                            306 ;	genAssign: resultIsFar = FALSE
   0112 85*00 82            307 	mov	dpl,_atoi_rv_1_1
   0115 85*01 83            308 	mov	dph,(_atoi_rv_1_1 + 1)
   0118                     309 00121$:
   0118                     310 00118$:
   0118 22                  311 	ret
                            312 	.area CSEG    (CODE)
                            313 	.area CONST   (CODE)
                            314 	.area XINIT   (CODE)
                            315 	.area CABS    (ABS,CODE)
