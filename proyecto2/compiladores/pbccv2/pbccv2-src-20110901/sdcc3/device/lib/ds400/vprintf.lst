                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:20 2015
                              5 ;--------------------------------------------------------
                              6 	.module vprintf
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _vprintf_PARM_2
                             31 	.globl _vprintf
                             32 	.globl _printf
                             33 ;--------------------------------------------------------
                             34 ; special function registers
                             35 ;--------------------------------------------------------
                    0080     36 _P4	=	0x0080
                    0081     37 _SP	=	0x0081
                    0082     38 _DPL	=	0x0082
                    0083     39 _DPH	=	0x0083
                    0084     40 _DPL1	=	0x0084
                    0085     41 _DPH1	=	0x0085
                    0086     42 _DPS	=	0x0086
                    0087     43 _PCON	=	0x0087
                    0088     44 _TCON	=	0x0088
                    0089     45 _TMOD	=	0x0089
                    008A     46 _TL0	=	0x008a
                    008B     47 _TL1	=	0x008b
                    008C     48 _TH0	=	0x008c
                    008D     49 _TH1	=	0x008d
                    008E     50 _CKCON	=	0x008e
                    0090     51 _P1	=	0x0090
                    0091     52 _EXIF	=	0x0091
                    0092     53 _P4CNT	=	0x0092
                    0093     54 _DPX	=	0x0093
                    0095     55 _DPX1	=	0x0095
                    0098     56 _SCON0	=	0x0098
                    0099     57 _SBUF0	=	0x0099
                    009B     58 _ESP	=	0x009b
                    009C     59 _AP	=	0x009c
                    009D     60 _ACON	=	0x009d
                    00A0     61 _P2	=	0x00a0
                    00A1     62 _P5	=	0x00a1
                    00A2     63 _P5CNT	=	0x00a2
                    00A8     64 _IE	=	0x00a8
                    00B0     65 _P3	=	0x00b0
                    00B8     66 _IP	=	0x00b8
                    00C0     67 _SCON1	=	0x00c0
                    00C1     68 _SBUF1	=	0x00c1
                    00C4     69 _PMR	=	0x00c4
                    00C6     70 _MCON	=	0x00c6
                    00C7     71 _TA	=	0x00c7
                    00C8     72 _T2CON	=	0x00c8
                    00C9     73 _T2MOD	=	0x00c9
                    00CA     74 _RCAP2L	=	0x00ca
                    00CA     75 _RTL2	=	0x00ca
                    00CB     76 _RCAP2H	=	0x00cb
                    00CB     77 _RTH2	=	0x00cb
                    00CC     78 _TL2	=	0x00cc
                    00CD     79 _TH2	=	0x00cd
                    00D0     80 _PSW	=	0x00d0
                    00D1     81 _MCNT0	=	0x00d1
                    00D2     82 _MCNT1	=	0x00d2
                    00D3     83 _MA	=	0x00d3
                    00D4     84 _MB	=	0x00d4
                    00D5     85 _MC	=	0x00d5
                    00D8     86 _WDCON	=	0x00d8
                    00E0     87 _ACC	=	0x00e0
                    00E8     88 _EIE	=	0x00e8
                    00EA     89 _MXAX	=	0x00ea
                    00F0     90 _B	=	0x00f0
                    00F8     91 _EIP	=	0x00f8
                    8C8A     92 _TMR0	=	0x8c8a
                    8D8B     93 _TMR1	=	0x8d8b
                    CDCC     94 _TMR2	=	0xcdcc
                    CBCA     95 _RCAP2	=	0xcbca
                             96 ;--------------------------------------------------------
                             97 ; special function bits
                             98 ;--------------------------------------------------------
                    0088     99 _IT0	=	0x0088
                    0089    100 _IE0	=	0x0089
                    008A    101 _IT1	=	0x008a
                    008B    102 _IE1	=	0x008b
                    008C    103 _TR0	=	0x008c
                    008D    104 _TF0	=	0x008d
                    008E    105 _TR1	=	0x008e
                    008F    106 _TF1	=	0x008f
                    0090    107 _T2	=	0x0090
                    0091    108 _T2EX	=	0x0091
                    0092    109 _RXD1	=	0x0092
                    0093    110 _TXD1	=	0x0093
                    0094    111 _INT2	=	0x0094
                    0095    112 _INT3	=	0x0095
                    0096    113 _INT4	=	0x0096
                    0097    114 _INT5	=	0x0097
                    0098    115 _RI_0	=	0x0098
                    0099    116 _TI_0	=	0x0099
                    009A    117 _RB8_0	=	0x009a
                    009B    118 _TB8_0	=	0x009b
                    009C    119 _REN_0	=	0x009c
                    009D    120 _SM2_0	=	0x009d
                    009E    121 _SM1_0	=	0x009e
                    009F    122 _SM0_0	=	0x009f
                    009F    123 _FE_0	=	0x009f
                    00A8    124 _EX0	=	0x00a8
                    00A9    125 _ET0	=	0x00a9
                    00AA    126 _EX1	=	0x00aa
                    00AB    127 _ET1	=	0x00ab
                    00AC    128 _ES0	=	0x00ac
                    00AD    129 _ET2	=	0x00ad
                    00AE    130 _ES1	=	0x00ae
                    00AF    131 _EA	=	0x00af
                    00B0    132 _RXD0	=	0x00b0
                    00B1    133 _TXD0	=	0x00b1
                    00B2    134 _INT0	=	0x00b2
                    00B3    135 _INT1	=	0x00b3
                    00B4    136 _T0	=	0x00b4
                    00B5    137 _T1	=	0x00b5
                    00B6    138 _WR	=	0x00b6
                    00B7    139 _RD	=	0x00b7
                    00B8    140 _PX0	=	0x00b8
                    00B9    141 _PT0	=	0x00b9
                    00BA    142 _PX1	=	0x00ba
                    00BB    143 _PT1	=	0x00bb
                    00BC    144 _PS0	=	0x00bc
                    00BD    145 _PT2	=	0x00bd
                    00BE    146 _PS1	=	0x00be
                    00C0    147 _RI_1	=	0x00c0
                    00C1    148 _TI_1	=	0x00c1
                    00C2    149 _RB8_1	=	0x00c2
                    00C3    150 _TB8_1	=	0x00c3
                    00C4    151 _REN_1	=	0x00c4
                    00C5    152 _SM2_1	=	0x00c5
                    00C6    153 _SM1_1	=	0x00c6
                    00C7    154 _SM0_1	=	0x00c7
                    00C7    155 _FE_1	=	0x00c7
                    00C8    156 _CP_RL	=	0x00c8
                    00C9    157 _C_T	=	0x00c9
                    00CA    158 _TR2	=	0x00ca
                    00CB    159 _EXEN2	=	0x00cb
                    00CC    160 _TCLK	=	0x00cc
                    00CD    161 _RCLK	=	0x00cd
                    00CE    162 _EXF2	=	0x00ce
                    00CF    163 _TF2	=	0x00cf
                    00D0    164 _P	=	0x00d0
                    00D1    165 _F1	=	0x00d1
                    00D2    166 _OV	=	0x00d2
                    00D3    167 _RS0	=	0x00d3
                    00D4    168 _RS1	=	0x00d4
                    00D5    169 _F0	=	0x00d5
                    00D6    170 _AC	=	0x00d6
                    00D7    171 _CY	=	0x00d7
                    00D8    172 _RWT	=	0x00d8
                    00D9    173 _EWT	=	0x00d9
                    00DA    174 _WDRF	=	0x00da
                    00DB    175 _WDIF	=	0x00db
                    00DC    176 _PFI	=	0x00dc
                    00DD    177 _EPFI	=	0x00dd
                    00DE    178 _POR	=	0x00de
                    00DF    179 _SMOD_1	=	0x00df
                    00E8    180 _EX2	=	0x00e8
                    00E9    181 _EX3	=	0x00e9
                    00EA    182 _EX4	=	0x00ea
                    00EB    183 _EX5	=	0x00eb
                    00EC    184 _EWDI	=	0x00ec
                    00ED    185 _C1IE	=	0x00ed
                    00EE    186 _C0IE	=	0x00ee
                    00EF    187 _CANBIE	=	0x00ef
                    00F8    188 _PX2	=	0x00f8
                    00F9    189 _PX3	=	0x00f9
                    00FA    190 _PX4	=	0x00fa
                    00FB    191 _PX5	=	0x00fb
                    00FC    192 _PWDI	=	0x00fc
                    00FD    193 _C1IP	=	0x00fd
                    00FE    194 _C0IP	=	0x00fe
                    00FF    195 _CANBIP	=	0x00ff
                            196 ;--------------------------------------------------------
                            197 ; overlayable register banks
                            198 ;--------------------------------------------------------
                            199 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     200 	.ds 8
                            201 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                     202 	.ds 8
                            203 ;--------------------------------------------------------
                            204 ; internal ram data
                            205 ;--------------------------------------------------------
                            206 	.area DSEG    (DATA)
                            207 ;--------------------------------------------------------
                            208 ; overlayable items in internal ram 
                            209 ;--------------------------------------------------------
                            210 	.area OSEG    (OVR,DATA)
                            211 ;--------------------------------------------------------
                            212 ; indirectly addressable internal ram data
                            213 ;--------------------------------------------------------
                            214 	.area ISEG    (DATA)
                            215 ;--------------------------------------------------------
                            216 ; absolute internal ram data
                            217 ;--------------------------------------------------------
                            218 	.area IABS    (ABS,DATA)
                            219 	.area IABS    (ABS,DATA)
                            220 ;--------------------------------------------------------
                            221 ; bit data
                            222 ;--------------------------------------------------------
                            223 	.area BSEG    (BIT)
                            224 ;--------------------------------------------------------
                            225 ; paged external ram data
                            226 ;--------------------------------------------------------
                            227 	.area PSEG    (PAG,XDATA)
                            228 ;--------------------------------------------------------
                            229 ; external ram data
                            230 ;--------------------------------------------------------
                            231 	.area XSEG    (XDATA)
   0000                     232 _vprintf_PARM_2:
   0000                     233 	.ds 4
                            234 ;--------------------------------------------------------
                            235 ; absolute external ram data
                            236 ;--------------------------------------------------------
                            237 	.area XABS    (ABS,XDATA)
                            238 ;--------------------------------------------------------
                            239 ; external initialized ram data
                            240 ;--------------------------------------------------------
                            241 	.area XISEG   (XDATA)
                            242 ;--------------------------------------------------------
                            243 ; global & static initialisations
                            244 ;--------------------------------------------------------
                            245 	.area HOME    (CODE)
                            246 	.area GSINIT  (CODE)
                            247 	.area GSFINAL (CODE)
                            248 	.area GSINIT  (CODE)
                            249 ;--------------------------------------------------------
                            250 ; Home
                            251 ;--------------------------------------------------------
                            252 	.area HOME    (CODE)
                            253 	.area HOME    (CODE)
                            254 ;--------------------------------------------------------
                            255 ; code
                            256 ;--------------------------------------------------------
                            257 	.area CSEG    (CODE)
                            258 ;------------------------------------------------------------
                            259 ;Allocation info for local variables in function 'put_char_to_stdout'
                            260 ;------------------------------------------------------------
                            261 ;p                         Allocated to stack - offset -8
                            262 ;c                         Allocated to registers r2 
                            263 ;------------------------------------------------------------
                            264 ;	vprintf.c:34: put_char_to_stdout (char c, void* p) _REENTRANT
                            265 ;	-----------------------------------------
                            266 ;	 function put_char_to_stdout
                            267 ;	-----------------------------------------
   0000                     268 _put_char_to_stdout:
                    0002    269 	ar2 = 0x02
                    0003    270 	ar3 = 0x03
                    0004    271 	ar4 = 0x04
                    0005    272 	ar5 = 0x05
                    0006    273 	ar6 = 0x06
                    0007    274 	ar7 = 0x07
                    0000    275 	ar0 = 0x00
                    0001    276 	ar1 = 0x01
   0000 C0*00               277 	push	_bpx
   0002 C0*01               278 	push	_bpx+1
   0004 85 81*00            279 	mov	_bpx,sp
   0007 85 9B*01            280 	mov	_bpx+1,esp
   000A 53*01 03            281 	anl	_bpx+1,#3
   000D 43*01 DC            282 	orl	_bpx+1,#0xDC
   0010 AA 82               283 	mov	r2,dpl
                            284 ;	vprintf.c:37: putchar (c);
   0012 8A 82               285 	mov	dpl,r2
   0014 12s00r00r00         286 	lcall	_putchar
   0018                     287 00101$:
   0018 85*00 81            288 	mov	sp,_bpx
   001B 85*01 9B            289 	mov	esp,_bpx+1
   001E D0*01               290 	pop	_bpx+1
   0020 D0*00               291 	pop	_bpx
   0022 22                  292 	ret
                            293 ;------------------------------------------------------------
                            294 ;Allocation info for local variables in function 'vprintf'
                            295 ;------------------------------------------------------------
                            296 ;ap                        Allocated with name '_vprintf_PARM_2'
                            297 ;format                    Allocated to registers r2 r3 r4 r5 
                            298 ;------------------------------------------------------------
                            299 ;	vprintf.c:41: vprintf (const char *format, va_list ap)
                            300 ;	-----------------------------------------
                            301 ;	 function vprintf
                            302 ;	-----------------------------------------
   0023                     303 _vprintf:
   0023 AA 82               304 	mov	r2,dpl
   0025 AB 83               305 	mov	r3,dph
   0027 AC 93               306 	mov	r4,dpx
   0029 AD F0               307 	mov	r5,b
                            308 ;	vprintf.c:43: return _print_format (put_char_to_stdout, NULL, format, ap);
   002B 90s00r00r00         309 	mov	dptr,#_vprintf_PARM_2
                            310 ;	genAssign: resultIsFar = FALSE
   002F E0                  311 	movx	a,@dptr
   0030 FE                  312 	mov	r6,a
   0031 A3                  313 	inc	dptr
   0032 E0                  314 	movx	a,@dptr
   0033 FF                  315 	mov	r7,a
   0034 A3                  316 	inc	dptr
   0035 E0                  317 	movx	a,@dptr
   0036 F8                  318 	mov	r0,a
   0037 A3                  319 	inc	dptr
   0038 E0                  320 	movx	a,@dptr
   0039 F9                  321 	mov	r1,a
                            322 ;	genAssign: resultIsFar = TRUE
   003A 90s00r00r00         323 	mov	dptr,#__print_format_PARM_2
   003E E4                  324 	clr	a
   003F F0                  325 	movx	@dptr,a
   0040 A3                  326 	inc	dptr
   0041 F0                  327 	movx	@dptr,a
   0042 A3                  328 	inc	dptr
   0043 F0                  329 	movx	@dptr,a
   0044 A3                  330 	inc	dptr
   0045 E4                  331 	clr  a
   0046 F0                  332 	movx	@dptr,a
                            333 ;	genAssign: resultIsFar = TRUE
   0047 90s00r00r00         334 	mov	dptr,#__print_format_PARM_3
   004B EA                  335 	mov	a,r2
   004C F0                  336 	movx	@dptr,a
   004D A3                  337 	inc	dptr
   004E EB                  338 	mov	a,r3
   004F F0                  339 	movx	@dptr,a
   0050 A3                  340 	inc	dptr
   0051 EC                  341 	mov	a,r4
   0052 F0                  342 	movx	@dptr,a
   0053 A3                  343 	inc	dptr
   0054 ED                  344 	mov	a,r5
   0055 F0                  345 	movx	@dptr,a
                            346 ;	genAssign: resultIsFar = TRUE
   0056 90s00r00r00         347 	mov	dptr,#__print_format_PARM_4
   005A EE                  348 	mov	a,r6
   005B F0                  349 	movx	@dptr,a
   005C A3                  350 	inc	dptr
   005D EF                  351 	mov	a,r7
   005E F0                  352 	movx	@dptr,a
   005F A3                  353 	inc	dptr
   0060 E8                  354 	mov	a,r0
   0061 F0                  355 	movx	@dptr,a
   0062 A3                  356 	inc	dptr
   0063 E9                  357 	mov	a,r1
   0064 F0                  358 	movx	@dptr,a
   0065 90s00r00r00         359 	mov dptr,#_put_char_to_stdout
   0069 12s00r00r00         360 	lcall	__print_format
   006D                     361 00101$:
   006D 22                  362 	ret
                            363 ;------------------------------------------------------------
                            364 ;Allocation info for local variables in function 'printf'
                            365 ;------------------------------------------------------------
                            366 ;format                    Allocated to stack - offset -8
                            367 ;arg                       Allocated to registers r2 r3 r4 r5 
                            368 ;i                         Allocated to registers r2 r3 
                            369 ;------------------------------------------------------------
                            370 ;	vprintf.c:47: printf (const char *format, ...)
                            371 ;	-----------------------------------------
                            372 ;	 function printf
                            373 ;	-----------------------------------------
   006E                     374 _printf:
   006E C0*00               375 	push	_bpx
   0070 C0*01               376 	push	_bpx+1
   0072 85 81*00            377 	mov	_bpx,sp
   0075 85 9B*01            378 	mov	_bpx+1,esp
   0078 53*01 03            379 	anl	_bpx+1,#3
   007B 43*01 DC            380 	orl	_bpx+1,#0xDC
                            381 ;	vprintf.c:52: va_start (arg, format);
   007E E5*00               382 	mov	a,_bpx
   0080 24 F8               383 	add	a,#0xF8
   0082 F5 F0               384 	mov	b,a
   0084 E5*01               385 	mov	a,_bpx+1
   0086 34 FF               386 	addc	a,#0xFF
   0088 AA F0               387 	mov	r2,b
   008A FB                  388 	mov	r3,a
   008B 7C FF               389 	mov	r4,#0xFF
   008D 7D 00               390 	mov	r5,#0x00
                            391 ;	vprintf.c:53: i = _print_format (put_char_to_stdout, NULL, format, arg);
   008F E5*00               392 	mov	a,_bpx
   0091 C3                  393 	clr	c
   0092 94 08               394 	subb	a,#0x08
   0094 F5 82               395 	mov	dpl,a
   0096 E5*01               396 	mov	a,_bpx+1
   0098 94 00               397 	subb	a,#0x00
   009A F5 83               398 	mov	dph,a
   009C 75 93 FF            399 	mov	dpx,#0xFF
                            400 ;	genAssign: resultIsFar = FALSE
   009F E0                  401 	movx	a,@dptr
   00A0 FE                  402 	mov	r6,a
   00A1 A3                  403 	inc	dptr
   00A2 E0                  404 	movx	a,@dptr
   00A3 FF                  405 	mov	r7,a
   00A4 A3                  406 	inc	dptr
   00A5 E0                  407 	movx	a,@dptr
   00A6 F8                  408 	mov	r0,a
   00A7 A3                  409 	inc	dptr
   00A8 E0                  410 	movx	a,@dptr
   00A9 F9                  411 	mov	r1,a
                            412 ;	genAssign: resultIsFar = TRUE
   00AA 90s00r00r00         413 	mov	dptr,#__print_format_PARM_2
   00AE E4                  414 	clr	a
   00AF F0                  415 	movx	@dptr,a
   00B0 A3                  416 	inc	dptr
   00B1 F0                  417 	movx	@dptr,a
   00B2 A3                  418 	inc	dptr
   00B3 F0                  419 	movx	@dptr,a
   00B4 A3                  420 	inc	dptr
   00B5 E4                  421 	clr  a
   00B6 F0                  422 	movx	@dptr,a
                            423 ;	genAssign: resultIsFar = TRUE
   00B7 90s00r00r00         424 	mov	dptr,#__print_format_PARM_3
   00BB EE                  425 	mov	a,r6
   00BC F0                  426 	movx	@dptr,a
   00BD A3                  427 	inc	dptr
   00BE EF                  428 	mov	a,r7
   00BF F0                  429 	movx	@dptr,a
   00C0 A3                  430 	inc	dptr
   00C1 E8                  431 	mov	a,r0
   00C2 F0                  432 	movx	@dptr,a
   00C3 A3                  433 	inc	dptr
   00C4 E9                  434 	mov	a,r1
   00C5 F0                  435 	movx	@dptr,a
                            436 ;	genAssign: resultIsFar = TRUE
   00C6 90s00r00r00         437 	mov	dptr,#__print_format_PARM_4
   00CA EA                  438 	mov	a,r2
   00CB F0                  439 	movx	@dptr,a
   00CC A3                  440 	inc	dptr
   00CD EB                  441 	mov	a,r3
   00CE F0                  442 	movx	@dptr,a
   00CF A3                  443 	inc	dptr
   00D0 EC                  444 	mov	a,r4
   00D1 F0                  445 	movx	@dptr,a
   00D2 A3                  446 	inc	dptr
   00D3 ED                  447 	mov	a,r5
   00D4 F0                  448 	movx	@dptr,a
   00D5 90s00r00r00         449 	mov dptr,#_put_char_to_stdout
   00D9 12s00r00r00         450 	lcall	__print_format
   00DD AA 82               451 	mov	r2,dpl
   00DF AB 83               452 	mov	r3,dph
                            453 ;	genAssign: resultIsFar = FALSE
   00E1 8A 82               454 	mov	dpl,r2
   00E3 8B 83               455 	mov	dph,r3
                            456 ;	vprintf.c:56: return i;
   00E5                     457 00101$:
   00E5 85*00 81            458 	mov	sp,_bpx
   00E8 85*01 9B            459 	mov	esp,_bpx+1
   00EB D0*01               460 	pop	_bpx+1
   00ED D0*00               461 	pop	_bpx
   00EF 22                  462 	ret
                            463 	.area CSEG    (CODE)
                            464 	.area CONST   (CODE)
                            465 	.area XINIT   (CODE)
                            466 	.area CABS    (ABS,CODE)
