                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:30 2015
                              5 ;--------------------------------------------------------
                              6 	.module asinf
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _asinf
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; overlayable bit register bank
                             30 ;--------------------------------------------------------
                             31 	.area BIT_BANK	(REL,OVR,DATA)
   0000                      32 bits:
   0000                      33 	.ds 1
                    8000     34 	b0 = bits[0]
                    8100     35 	b1 = bits[1]
                    8200     36 	b2 = bits[2]
                    8300     37 	b3 = bits[3]
                    8400     38 	b4 = bits[4]
                    8500     39 	b5 = bits[5]
                    8600     40 	b6 = bits[6]
                    8700     41 	b7 = bits[7]
                             42 ;--------------------------------------------------------
                             43 ; internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area DSEG    (DATA)
                             46 ;--------------------------------------------------------
                             47 ; overlayable items in internal ram 
                             48 ;--------------------------------------------------------
                             49 	.area OSEG    (OVR,DATA)
                             50 ;--------------------------------------------------------
                             51 ; indirectly addressable internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area ISEG    (DATA)
                             54 ;--------------------------------------------------------
                             55 ; absolute internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area IABS    (ABS,DATA)
                             58 	.area IABS    (ABS,DATA)
                             59 ;--------------------------------------------------------
                             60 ; bit data
                             61 ;--------------------------------------------------------
                             62 	.area BSEG    (BIT)
                             63 ;--------------------------------------------------------
                             64 ; paged external ram data
                             65 ;--------------------------------------------------------
                             66 	.area PSEG    (PAG,XDATA)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                             71 ;--------------------------------------------------------
                             72 ; absolute external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XABS    (ABS,XDATA)
                             75 ;--------------------------------------------------------
                             76 ; external initialized ram data
                             77 ;--------------------------------------------------------
                             78 	.area XISEG   (XDATA)
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT0 (CODE)
                             81 	.area GSINIT1 (CODE)
                             82 	.area GSINIT2 (CODE)
                             83 	.area GSINIT3 (CODE)
                             84 	.area GSINIT4 (CODE)
                             85 	.area GSINIT5 (CODE)
                             86 	.area GSINIT  (CODE)
                             87 	.area GSFINAL (CODE)
                             88 	.area CSEG    (CODE)
                             89 ;--------------------------------------------------------
                             90 ; global & static initialisations
                             91 ;--------------------------------------------------------
                             92 	.area HOME    (CODE)
                             93 	.area GSINIT  (CODE)
                             94 	.area GSFINAL (CODE)
                             95 	.area GSINIT  (CODE)
                             96 ;--------------------------------------------------------
                             97 ; Home
                             98 ;--------------------------------------------------------
                             99 	.area HOME    (CODE)
                            100 	.area HOME    (CODE)
                            101 ;--------------------------------------------------------
                            102 ; code
                            103 ;--------------------------------------------------------
                            104 	.area CSEG    (CODE)
                            105 ;------------------------------------------------------------
                            106 ;Allocation info for local variables in function 'asinf'
                            107 ;------------------------------------------------------------
                            108 ;x                         Allocated to registers r2 r3 r4 r5 
                            109 ;------------------------------------------------------------
                            110 ;	asinf.c:36: float asinf(const float x) _FLOAT_FUNC_REENTRANT
                            111 ;	-----------------------------------------
                            112 ;	 function asinf
                            113 ;	-----------------------------------------
   0000                     114 _asinf:
                    0002    115 	ar2 = 0x02
                    0003    116 	ar3 = 0x03
                    0004    117 	ar4 = 0x04
                    0005    118 	ar5 = 0x05
                    0006    119 	ar6 = 0x06
                    0007    120 	ar7 = 0x07
                    0000    121 	ar0 = 0x00
                    0001    122 	ar1 = 0x01
   0000 AA 82               123 	mov	r2,dpl
   0002 AB 83               124 	mov	r3,dph
   0004 AC F0               125 	mov	r4,b
   0006 FD                  126 	mov	r5,a
                            127 ;	asinf.c:38: if (x == 1.0) return  HALF_PI;
   0007 C0 02               128 	push	ar2
   0009 C0 03               129 	push	ar3
   000B C0 04               130 	push	ar4
   000D C0 05               131 	push	ar5
   000F E4                  132 	clr	a
   0010 C0 E0               133 	push	acc
   0012 C0 E0               134 	push	acc
   0014 74 80               135 	mov	a,#0x80
   0016 C0 E0               136 	push	acc
   0018 74 3F               137 	mov	a,#0x3F
   001A C0 E0               138 	push	acc
   001C 8A 82               139 	mov	dpl,r2
   001E 8B 83               140 	mov	dph,r3
   0020 8C F0               141 	mov	b,r4
   0022 ED                  142 	mov	a,r5
   0023 12s00r00            143 	lcall	___fseq
   0026 AE 82               144 	mov	r6,dpl
   0028 E5 81               145 	mov	a,sp
   002A 24 FC               146 	add	a,#0xfc
   002C F5 81               147 	mov	sp,a
   002E D0 05               148 	pop	ar5
   0030 D0 04               149 	pop	ar4
   0032 D0 03               150 	pop	ar3
   0034 D0 02               151 	pop	ar2
   0036 EE                  152 	mov	a,r6
   0037 60 09               153 	jz	00108$
   0039 90 0F DB            154 	mov	dptr,#0x0FDB
   003C 75 F0 C9            155 	mov	b,#0xC9
   003F 74 3F               156 	mov	a,#0x3F
   0041 22                  157 	ret
   0042                     158 00108$:
                            159 ;	asinf.c:39: else if (x ==-1.0) return -HALF_PI;
   0042 C0 02               160 	push	ar2
   0044 C0 03               161 	push	ar3
   0046 C0 04               162 	push	ar4
   0048 C0 05               163 	push	ar5
   004A E4                  164 	clr	a
   004B C0 E0               165 	push	acc
   004D C0 E0               166 	push	acc
   004F 74 80               167 	mov	a,#0x80
   0051 C0 E0               168 	push	acc
   0053 74 BF               169 	mov	a,#0xBF
   0055 C0 E0               170 	push	acc
   0057 8A 82               171 	mov	dpl,r2
   0059 8B 83               172 	mov	dph,r3
   005B 8C F0               173 	mov	b,r4
   005D ED                  174 	mov	a,r5
   005E 12s00r00            175 	lcall	___fseq
   0061 AE 82               176 	mov	r6,dpl
   0063 E5 81               177 	mov	a,sp
   0065 24 FC               178 	add	a,#0xfc
   0067 F5 81               179 	mov	sp,a
   0069 D0 05               180 	pop	ar5
   006B D0 04               181 	pop	ar4
   006D D0 03               182 	pop	ar3
   006F D0 02               183 	pop	ar2
   0071 EE                  184 	mov	a,r6
   0072 60 09               185 	jz	00105$
   0074 90 0F DB            186 	mov	dptr,#0x0FDB
   0077 75 F0 C9            187 	mov	b,#0xC9
   007A 74 BF               188 	mov	a,#0xBF
   007C 22                  189 	ret
   007D                     190 00105$:
                            191 ;	asinf.c:40: else if (x == 0.0) return 0.0;
   007D EA                  192 	mov	a,r2
   007E 4B                  193 	orl	a,r3
   007F 4C                  194 	orl	a,r4
   0080 4D                  195 	orl	a,r5
   0081 70 07               196 	jnz	00102$
   0083 90 00 00            197 	mov	dptr,#(0x00&0x00ff)
   0086 E4                  198 	clr	a
   0087 F5 F0               199 	mov	b,a
   0089 22                  200 	ret
   008A                     201 00102$:
                            202 ;	asinf.c:41: else               return asincosf(x, false);
   008A C2 F0               203 	clr	b[0]
   008C 85 F0*00            204 	mov	bits,b
   008F 8A 82               205 	mov	dpl,r2
   0091 8B 83               206 	mov	dph,r3
   0093 8C F0               207 	mov	b,r4
   0095 ED                  208 	mov	a,r5
   0096 02s00r00            209 	ljmp	_asincosf
                            210 	.area CSEG    (CODE)
                            211 	.area CONST   (CODE)
                            212 	.area XINIT   (CODE)
                            213 	.area CABS    (ABS,CODE)
