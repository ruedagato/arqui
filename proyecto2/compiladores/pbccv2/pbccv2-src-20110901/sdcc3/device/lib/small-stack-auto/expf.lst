                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:30 2015
                              5 ;--------------------------------------------------------
                              6 	.module expf
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _expf
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; overlayable bit register bank
                             30 ;--------------------------------------------------------
                             31 	.area BIT_BANK	(REL,OVR,DATA)
   0000                      32 bits:
   0000                      33 	.ds 1
                    8000     34 	b0 = bits[0]
                    8100     35 	b1 = bits[1]
                    8200     36 	b2 = bits[2]
                    8300     37 	b3 = bits[3]
                    8400     38 	b4 = bits[4]
                    8500     39 	b5 = bits[5]
                    8600     40 	b6 = bits[6]
                    8700     41 	b7 = bits[7]
                             42 ;--------------------------------------------------------
                             43 ; internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area DSEG    (DATA)
                             46 ;--------------------------------------------------------
                             47 ; overlayable items in internal ram 
                             48 ;--------------------------------------------------------
                             49 	.area OSEG    (OVR,DATA)
                             50 ;--------------------------------------------------------
                             51 ; indirectly addressable internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area ISEG    (DATA)
                             54 ;--------------------------------------------------------
                             55 ; absolute internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area IABS    (ABS,DATA)
                             58 	.area IABS    (ABS,DATA)
                             59 ;--------------------------------------------------------
                             60 ; bit data
                             61 ;--------------------------------------------------------
                             62 	.area BSEG    (BIT)
                             63 ;--------------------------------------------------------
                             64 ; paged external ram data
                             65 ;--------------------------------------------------------
                             66 	.area PSEG    (PAG,XDATA)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                             71 ;--------------------------------------------------------
                             72 ; absolute external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XABS    (ABS,XDATA)
                             75 ;--------------------------------------------------------
                             76 ; external initialized ram data
                             77 ;--------------------------------------------------------
                             78 	.area XISEG   (XDATA)
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT0 (CODE)
                             81 	.area GSINIT1 (CODE)
                             82 	.area GSINIT2 (CODE)
                             83 	.area GSINIT3 (CODE)
                             84 	.area GSINIT4 (CODE)
                             85 	.area GSINIT5 (CODE)
                             86 	.area GSINIT  (CODE)
                             87 	.area GSFINAL (CODE)
                             88 	.area CSEG    (CODE)
                             89 ;--------------------------------------------------------
                             90 ; global & static initialisations
                             91 ;--------------------------------------------------------
                             92 	.area HOME    (CODE)
                             93 	.area GSINIT  (CODE)
                             94 	.area GSFINAL (CODE)
                             95 	.area GSINIT  (CODE)
                             96 ;--------------------------------------------------------
                             97 ; Home
                             98 ;--------------------------------------------------------
                             99 	.area HOME    (CODE)
                            100 	.area HOME    (CODE)
                            101 ;--------------------------------------------------------
                            102 ; code
                            103 ;--------------------------------------------------------
                            104 	.area CSEG    (CODE)
                            105 ;------------------------------------------------------------
                            106 ;Allocation info for local variables in function 'expf'
                            107 ;------------------------------------------------------------
                            108 ;x                         Allocated to registers r2 r3 r4 r5 
                            109 ;n                         Allocated to stack - offset 1
                            110 ;xn                        Allocated to stack - offset 3
                            111 ;g                         Allocated to stack - offset 7
                            112 ;r                         Allocated to stack - offset 11
                            113 ;z                         Allocated to stack - offset 15
                            114 ;y                         Allocated to stack - offset 19
                            115 ;sign                      Allocated to registers b0 
                            116 ;sloc0                     Allocated to stack - offset 23
                            117 ;------------------------------------------------------------
                            118 ;	expf.c:332: float expf(const float x)
                            119 ;	-----------------------------------------
                            120 ;	 function expf
                            121 ;	-----------------------------------------
   0000                     122 _expf:
                    0002    123 	ar2 = 0x02
                    0003    124 	ar3 = 0x03
                    0004    125 	ar4 = 0x04
                    0005    126 	ar5 = 0x05
                    0006    127 	ar6 = 0x06
                    0007    128 	ar7 = 0x07
                    0000    129 	ar0 = 0x00
                    0001    130 	ar1 = 0x01
   0000 C0*00               131 	push	_bp
   0002 85 81*00            132 	mov	_bp,sp
   0005 AA 82               133 	mov	r2,dpl
   0007 AB 83               134 	mov	r3,dph
   0009 AC F0               135 	mov	r4,b
   000B FD                  136 	mov	r5,a
   000C E5 81               137 	mov	a,sp
   000E 24 1A               138 	add	a,#0x1a
   0010 F5 81               139 	mov	sp,a
                            140 ;	expf.c:338: if(x>=0.0)
   0012 C0 02               141 	push	ar2
   0014 C0 03               142 	push	ar3
   0016 C0 04               143 	push	ar4
   0018 C0 05               144 	push	ar5
   001A E4                  145 	clr	a
   001B C0 E0               146 	push	acc
   001D C0 E0               147 	push	acc
   001F C0 E0               148 	push	acc
   0021 C0 E0               149 	push	acc
   0023 8A 82               150 	mov	dpl,r2
   0025 8B 83               151 	mov	dph,r3
   0027 8C F0               152 	mov	b,r4
   0029 ED                  153 	mov	a,r5
   002A 12s00r00            154 	lcall	___fslt
   002D AE 82               155 	mov	r6,dpl
   002F E5 81               156 	mov	a,sp
   0031 24 FC               157 	add	a,#0xfc
   0033 F5 81               158 	mov	sp,a
   0035 D0 05               159 	pop	ar5
   0037 D0 04               160 	pop	ar4
   0039 D0 03               161 	pop	ar3
   003B D0 02               162 	pop	ar2
   003D EE                  163 	mov	a,r6
   003E 70 14               164 	jnz	00102$
                            165 ;	expf.c:339: { y=x;  sign=0; }
   0040 E5*00               166 	mov	a,_bp
   0042 24 13               167 	add	a,#0x13
   0044 F8                  168 	mov	r0,a
   0045 A6 02               169 	mov	@r0,ar2
   0047 08                  170 	inc	r0
   0048 A6 03               171 	mov	@r0,ar3
   004A 08                  172 	inc	r0
   004B A6 04               173 	mov	@r0,ar4
   004D 08                  174 	inc	r0
   004E A6 05               175 	mov	@r0,ar5
   0050 C2*00               176 	clr	b0
   0052 80 16               177 	sjmp	00103$
   0054                     178 00102$:
                            179 ;	expf.c:341: { y=-x; sign=1; }
   0054 ED                  180 	mov	a,r5
   0055 B2 E7               181 	cpl	acc.7
   0057 FD                  182 	mov	r5,a
   0058 E5*00               183 	mov	a,_bp
   005A 24 13               184 	add	a,#0x13
   005C F8                  185 	mov	r0,a
   005D A6 02               186 	mov	@r0,ar2
   005F 08                  187 	inc	r0
   0060 A6 03               188 	mov	@r0,ar3
   0062 08                  189 	inc	r0
   0063 A6 04               190 	mov	@r0,ar4
   0065 08                  191 	inc	r0
   0066 A6 05               192 	mov	@r0,ar5
   0068 D2*00               193 	setb	b0
   006A                     194 00103$:
                            195 ;	expf.c:343: if(y<EXPEPS) return 1.0;
   006A C0*00               196 	push	bits
   006C 74 95               197 	mov	a,#0x95
   006E C0 E0               198 	push	acc
   0070 74 BF               199 	mov	a,#0xBF
   0072 C0 E0               200 	push	acc
   0074 74 D6               201 	mov	a,#0xD6
   0076 C0 E0               202 	push	acc
   0078 74 33               203 	mov	a,#0x33
   007A C0 E0               204 	push	acc
   007C E5*00               205 	mov	a,_bp
   007E 24 13               206 	add	a,#0x13
   0080 F8                  207 	mov	r0,a
   0081 86 82               208 	mov	dpl,@r0
   0083 08                  209 	inc	r0
   0084 86 83               210 	mov	dph,@r0
   0086 08                  211 	inc	r0
   0087 86 F0               212 	mov	b,@r0
   0089 08                  213 	inc	r0
   008A E6                  214 	mov	a,@r0
   008B 12s00r00            215 	lcall	___fslt
   008E AC 82               216 	mov	r4,dpl
   0090 E5 81               217 	mov	a,sp
   0092 24 FC               218 	add	a,#0xfc
   0094 F5 81               219 	mov	sp,a
   0096 D0*00               220 	pop	bits
   0098 EC                  221 	mov	a,r4
   0099 60 0B               222 	jz	00105$
   009B 90 00 00            223 	mov	dptr,#0x0000
   009E 75 F0 80            224 	mov	b,#0x80
   00A1 74 3F               225 	mov	a,#0x3F
   00A3 02s05r18            226 	ljmp	00118$
   00A6                     227 00105$:
                            228 ;	expf.c:345: if(y>BIGX)
   00A6 C0*00               229 	push	bits
   00A8 74 18               230 	mov	a,#0x18
   00AA C0 E0               231 	push	acc
   00AC 74 72               232 	mov	a,#0x72
   00AE C0 E0               233 	push	acc
   00B0 74 B1               234 	mov	a,#0xB1
   00B2 C0 E0               235 	push	acc
   00B4 74 42               236 	mov	a,#0x42
   00B6 C0 E0               237 	push	acc
   00B8 E5*00               238 	mov	a,_bp
   00BA 24 13               239 	add	a,#0x13
   00BC F8                  240 	mov	r0,a
   00BD 86 82               241 	mov	dpl,@r0
   00BF 08                  242 	inc	r0
   00C0 86 83               243 	mov	dph,@r0
   00C2 08                  244 	inc	r0
   00C3 86 F0               245 	mov	b,@r0
   00C5 08                  246 	inc	r0
   00C6 E6                  247 	mov	a,@r0
   00C7 12s00r00            248 	lcall	___fsgt
   00CA AC 82               249 	mov	r4,dpl
   00CC E5 81               250 	mov	a,sp
   00CE 24 FC               251 	add	a,#0xfc
   00D0 F5 81               252 	mov	sp,a
   00D2 D0*00               253 	pop	bits
   00D4 EC                  254 	mov	a,r4
   00D5 60 1C               255 	jz	00110$
                            256 ;	expf.c:347: if(sign)
   00D7 30*00 10            257 	jnb	b0,00107$
                            258 ;	expf.c:349: errno=ERANGE;
   00DA 75*00 22            259 	mov	_errno,#0x22
   00DD 75*01 00            260 	mov	(_errno + 1),#0x00
                            261 ;	expf.c:351: ;
   00E0 90 FF FF            262 	mov	dptr,#0xFFFF
   00E3 74 7F               263 	mov	a,#0x7F
   00E5 F5 F0               264 	mov	b,a
   00E7 02s05r18            265 	ljmp	00118$
   00EA                     266 00107$:
                            267 ;	expf.c:355: return 0.0;
   00EA 90 00 00            268 	mov	dptr,#(0x00&0x00ff)
   00ED E4                  269 	clr	a
   00EE F5 F0               270 	mov	b,a
   00F0 02s05r18            271 	ljmp	00118$
   00F3                     272 00110$:
                            273 ;	expf.c:359: z=y*K1;
   00F3 C0*00               274 	push	bits
   00F5 E5*00               275 	mov	a,_bp
   00F7 24 13               276 	add	a,#0x13
   00F9 F8                  277 	mov	r0,a
   00FA E6                  278 	mov	a,@r0
   00FB C0 E0               279 	push	acc
   00FD 08                  280 	inc	r0
   00FE E6                  281 	mov	a,@r0
   00FF C0 E0               282 	push	acc
   0101 08                  283 	inc	r0
   0102 E6                  284 	mov	a,@r0
   0103 C0 E0               285 	push	acc
   0105 08                  286 	inc	r0
   0106 E6                  287 	mov	a,@r0
   0107 C0 E0               288 	push	acc
   0109 90 AA 3B            289 	mov	dptr,#0xAA3B
   010C 75 F0 B8            290 	mov	b,#0xB8
   010F 74 3F               291 	mov	a,#0x3F
   0111 12s00r00            292 	lcall	___fsmul
   0114 AA 82               293 	mov	r2,dpl
   0116 AB 83               294 	mov	r3,dph
   0118 AC F0               295 	mov	r4,b
   011A FD                  296 	mov	r5,a
   011B E5 81               297 	mov	a,sp
   011D 24 FC               298 	add	a,#0xfc
   011F F5 81               299 	mov	sp,a
   0121 D0*00               300 	pop	bits
   0123 E5*00               301 	mov	a,_bp
   0125 24 0F               302 	add	a,#0x0f
   0127 F8                  303 	mov	r0,a
   0128 A6 02               304 	mov	@r0,ar2
   012A 08                  305 	inc	r0
   012B A6 03               306 	mov	@r0,ar3
   012D 08                  307 	inc	r0
   012E A6 04               308 	mov	@r0,ar4
   0130 08                  309 	inc	r0
   0131 A6 05               310 	mov	@r0,ar5
                            311 ;	expf.c:360: n=z;
   0133 E5*00               312 	mov	a,_bp
   0135 24 0F               313 	add	a,#0x0f
   0137 F8                  314 	mov	r0,a
   0138 86 82               315 	mov	dpl,@r0
   013A 08                  316 	inc	r0
   013B 86 83               317 	mov	dph,@r0
   013D 08                  318 	inc	r0
   013E 86 F0               319 	mov	b,@r0
   0140 08                  320 	inc	r0
   0141 E6                  321 	mov	a,@r0
   0142 C0*00               322 	push	bits
   0144 12s00r00            323 	lcall	___fs2sint
   0147 AE 82               324 	mov	r6,dpl
   0149 AF 83               325 	mov	r7,dph
   014B D0*00               326 	pop	bits
   014D A8*00               327 	mov	r0,_bp
   014F 08                  328 	inc	r0
   0150 A6 06               329 	mov	@r0,ar6
   0152 08                  330 	inc	r0
   0153 A6 07               331 	mov	@r0,ar7
                            332 ;	expf.c:362: if(n<0) --n;
   0155 A8*00               333 	mov	r0,_bp
   0157 08                  334 	inc	r0
   0158 08                  335 	inc	r0
   0159 E6                  336 	mov	a,@r0
   015A 30 E7 09            337 	jnb	acc.7,00112$
   015D A8*00               338 	mov	r0,_bp
   015F 08                  339 	inc	r0
   0160 16                  340 	dec	@r0
   0161 B6 FF 02            341 	cjne	@r0,#0xff,00132$
   0164 08                  342 	inc	r0
   0165 16                  343 	dec	@r0
   0166                     344 00132$:
   0166                     345 00112$:
                            346 ;	expf.c:363: if(z-n>=0.5) ++n;
   0166 A8*00               347 	mov	r0,_bp
   0168 08                  348 	inc	r0
   0169 86 82               349 	mov	dpl,@r0
   016B 08                  350 	inc	r0
   016C 86 83               351 	mov	dph,@r0
   016E C0*00               352 	push	bits
   0170 12s00r00            353 	lcall	___sint2fs
   0173 AA 82               354 	mov	r2,dpl
   0175 AB 83               355 	mov	r3,dph
   0177 AC F0               356 	mov	r4,b
   0179 FD                  357 	mov	r5,a
   017A D0*00               358 	pop	bits
   017C C0*00               359 	push	bits
   017E C0 02               360 	push	ar2
   0180 C0 03               361 	push	ar3
   0182 C0 04               362 	push	ar4
   0184 C0 05               363 	push	ar5
   0186 E5*00               364 	mov	a,_bp
   0188 24 0F               365 	add	a,#0x0f
   018A F8                  366 	mov	r0,a
   018B 86 82               367 	mov	dpl,@r0
   018D 08                  368 	inc	r0
   018E 86 83               369 	mov	dph,@r0
   0190 08                  370 	inc	r0
   0191 86 F0               371 	mov	b,@r0
   0193 08                  372 	inc	r0
   0194 E6                  373 	mov	a,@r0
   0195 12s00r00            374 	lcall	___fssub
   0198 AA 82               375 	mov	r2,dpl
   019A AB 83               376 	mov	r3,dph
   019C AC F0               377 	mov	r4,b
   019E FD                  378 	mov	r5,a
   019F E5 81               379 	mov	a,sp
   01A1 24 FC               380 	add	a,#0xfc
   01A3 F5 81               381 	mov	sp,a
   01A5 D0*00               382 	pop	bits
   01A7 C0*00               383 	push	bits
   01A9 E4                  384 	clr	a
   01AA C0 E0               385 	push	acc
   01AC C0 E0               386 	push	acc
   01AE C0 E0               387 	push	acc
   01B0 74 3F               388 	mov	a,#0x3F
   01B2 C0 E0               389 	push	acc
   01B4 8A 82               390 	mov	dpl,r2
   01B6 8B 83               391 	mov	dph,r3
   01B8 8C F0               392 	mov	b,r4
   01BA ED                  393 	mov	a,r5
   01BB 12s00r00            394 	lcall	___fslt
   01BE AA 82               395 	mov	r2,dpl
   01C0 E5 81               396 	mov	a,sp
   01C2 24 FC               397 	add	a,#0xfc
   01C4 F5 81               398 	mov	sp,a
   01C6 D0*00               399 	pop	bits
   01C8 EA                  400 	mov	a,r2
   01C9 70 09               401 	jnz	00114$
   01CB A8*00               402 	mov	r0,_bp
   01CD 08                  403 	inc	r0
   01CE 06                  404 	inc	@r0
   01CF B6 00 02            405 	cjne	@r0,#0x00,00134$
   01D2 08                  406 	inc	r0
   01D3 06                  407 	inc	@r0
   01D4                     408 00134$:
   01D4                     409 00114$:
                            410 ;	expf.c:364: xn=n;
   01D4 A8*00               411 	mov	r0,_bp
   01D6 08                  412 	inc	r0
   01D7 86 82               413 	mov	dpl,@r0
   01D9 08                  414 	inc	r0
   01DA 86 83               415 	mov	dph,@r0
   01DC C0*00               416 	push	bits
   01DE 12s00r00            417 	lcall	___sint2fs
   01E1 AA 82               418 	mov	r2,dpl
   01E3 AB 83               419 	mov	r3,dph
   01E5 AC F0               420 	mov	r4,b
   01E7 FD                  421 	mov	r5,a
   01E8 D0*00               422 	pop	bits
   01EA E5*00               423 	mov	a,_bp
   01EC 24 03               424 	add	a,#0x03
   01EE F8                  425 	mov	r0,a
   01EF A6 02               426 	mov	@r0,ar2
   01F1 08                  427 	inc	r0
   01F2 A6 03               428 	mov	@r0,ar3
   01F4 08                  429 	inc	r0
   01F5 A6 04               430 	mov	@r0,ar4
   01F7 08                  431 	inc	r0
   01F8 A6 05               432 	mov	@r0,ar5
                            433 ;	expf.c:365: g=((y-xn*C1))-xn*C2;
   01FA C0*00               434 	push	bits
   01FC E5*00               435 	mov	a,_bp
   01FE 24 03               436 	add	a,#0x03
   0200 F8                  437 	mov	r0,a
   0201 E6                  438 	mov	a,@r0
   0202 C0 E0               439 	push	acc
   0204 08                  440 	inc	r0
   0205 E6                  441 	mov	a,@r0
   0206 C0 E0               442 	push	acc
   0208 08                  443 	inc	r0
   0209 E6                  444 	mov	a,@r0
   020A C0 E0               445 	push	acc
   020C 08                  446 	inc	r0
   020D E6                  447 	mov	a,@r0
   020E C0 E0               448 	push	acc
   0210 90 80 00            449 	mov	dptr,#0x8000
   0213 75 F0 31            450 	mov	b,#0x31
   0216 74 3F               451 	mov	a,#0x3F
   0218 12s00r00            452 	lcall	___fsmul
   021B AA 82               453 	mov	r2,dpl
   021D AB 83               454 	mov	r3,dph
   021F AC F0               455 	mov	r4,b
   0221 FD                  456 	mov	r5,a
   0222 E5 81               457 	mov	a,sp
   0224 24 FC               458 	add	a,#0xfc
   0226 F5 81               459 	mov	sp,a
   0228 D0*00               460 	pop	bits
   022A C0*00               461 	push	bits
   022C C0 02               462 	push	ar2
   022E C0 03               463 	push	ar3
   0230 C0 04               464 	push	ar4
   0232 C0 05               465 	push	ar5
   0234 E5*00               466 	mov	a,_bp
   0236 24 13               467 	add	a,#0x13
   0238 F8                  468 	mov	r0,a
   0239 86 82               469 	mov	dpl,@r0
   023B 08                  470 	inc	r0
   023C 86 83               471 	mov	dph,@r0
   023E 08                  472 	inc	r0
   023F 86 F0               473 	mov	b,@r0
   0241 08                  474 	inc	r0
   0242 E6                  475 	mov	a,@r0
   0243 12s00r00            476 	lcall	___fssub
   0246 C8                  477 	xch	a,r0
   0247 E5*00               478 	mov	a,_bp
   0249 24 17               479 	add	a,#0x17
   024B C8                  480 	xch	a,r0
   024C A6 82               481 	mov	@r0,dpl
   024E 08                  482 	inc	r0
   024F A6 83               483 	mov	@r0,dph
   0251 08                  484 	inc	r0
   0252 A6 F0               485 	mov	@r0,b
   0254 08                  486 	inc	r0
   0255 F6                  487 	mov	@r0,a
   0256 E5 81               488 	mov	a,sp
   0258 24 FC               489 	add	a,#0xfc
   025A F5 81               490 	mov	sp,a
   025C D0*00               491 	pop	bits
   025E C0*00               492 	push	bits
   0260 E5*00               493 	mov	a,_bp
   0262 24 03               494 	add	a,#0x03
   0264 F8                  495 	mov	r0,a
   0265 E6                  496 	mov	a,@r0
   0266 C0 E0               497 	push	acc
   0268 08                  498 	inc	r0
   0269 E6                  499 	mov	a,@r0
   026A C0 E0               500 	push	acc
   026C 08                  501 	inc	r0
   026D E6                  502 	mov	a,@r0
   026E C0 E0               503 	push	acc
   0270 08                  504 	inc	r0
   0271 E6                  505 	mov	a,@r0
   0272 C0 E0               506 	push	acc
   0274 90 80 83            507 	mov	dptr,#0x8083
   0277 75 F0 5E            508 	mov	b,#0x5E
   027A 74 B9               509 	mov	a,#0xB9
   027C 12s00r00            510 	lcall	___fsmul
   027F AE 82               511 	mov	r6,dpl
   0281 AF 83               512 	mov	r7,dph
   0283 AA F0               513 	mov	r2,b
   0285 FB                  514 	mov	r3,a
   0286 E5 81               515 	mov	a,sp
   0288 24 FC               516 	add	a,#0xfc
   028A F5 81               517 	mov	sp,a
   028C D0*00               518 	pop	bits
   028E C0*00               519 	push	bits
   0290 C0 06               520 	push	ar6
   0292 C0 07               521 	push	ar7
   0294 C0 02               522 	push	ar2
   0296 C0 03               523 	push	ar3
   0298 E5*00               524 	mov	a,_bp
   029A 24 17               525 	add	a,#0x17
   029C F8                  526 	mov	r0,a
   029D 86 82               527 	mov	dpl,@r0
   029F 08                  528 	inc	r0
   02A0 86 83               529 	mov	dph,@r0
   02A2 08                  530 	inc	r0
   02A3 86 F0               531 	mov	b,@r0
   02A5 08                  532 	inc	r0
   02A6 E6                  533 	mov	a,@r0
   02A7 12s00r00            534 	lcall	___fssub
   02AA AA 82               535 	mov	r2,dpl
   02AC AB 83               536 	mov	r3,dph
   02AE AC F0               537 	mov	r4,b
   02B0 FD                  538 	mov	r5,a
   02B1 E5 81               539 	mov	a,sp
   02B3 24 FC               540 	add	a,#0xfc
   02B5 F5 81               541 	mov	sp,a
   02B7 D0*00               542 	pop	bits
   02B9 E5*00               543 	mov	a,_bp
   02BB 24 07               544 	add	a,#0x07
   02BD F8                  545 	mov	r0,a
   02BE A6 02               546 	mov	@r0,ar2
   02C0 08                  547 	inc	r0
   02C1 A6 03               548 	mov	@r0,ar3
   02C3 08                  549 	inc	r0
   02C4 A6 04               550 	mov	@r0,ar4
   02C6 08                  551 	inc	r0
   02C7 A6 05               552 	mov	@r0,ar5
                            553 ;	expf.c:366: z=g*g;
   02C9 C0*00               554 	push	bits
   02CB E5*00               555 	mov	a,_bp
   02CD 24 07               556 	add	a,#0x07
   02CF F8                  557 	mov	r0,a
   02D0 E6                  558 	mov	a,@r0
   02D1 C0 E0               559 	push	acc
   02D3 08                  560 	inc	r0
   02D4 E6                  561 	mov	a,@r0
   02D5 C0 E0               562 	push	acc
   02D7 08                  563 	inc	r0
   02D8 E6                  564 	mov	a,@r0
   02D9 C0 E0               565 	push	acc
   02DB 08                  566 	inc	r0
   02DC E6                  567 	mov	a,@r0
   02DD C0 E0               568 	push	acc
   02DF E5*00               569 	mov	a,_bp
   02E1 24 07               570 	add	a,#0x07
   02E3 F8                  571 	mov	r0,a
   02E4 86 82               572 	mov	dpl,@r0
   02E6 08                  573 	inc	r0
   02E7 86 83               574 	mov	dph,@r0
   02E9 08                  575 	inc	r0
   02EA 86 F0               576 	mov	b,@r0
   02EC 08                  577 	inc	r0
   02ED E6                  578 	mov	a,@r0
   02EE 12s00r00            579 	lcall	___fsmul
   02F1 AE 82               580 	mov	r6,dpl
   02F3 AF 83               581 	mov	r7,dph
   02F5 AA F0               582 	mov	r2,b
   02F7 FB                  583 	mov	r3,a
   02F8 E5 81               584 	mov	a,sp
   02FA 24 FC               585 	add	a,#0xfc
   02FC F5 81               586 	mov	sp,a
   02FE D0*00               587 	pop	bits
   0300 E5*00               588 	mov	a,_bp
   0302 24 0F               589 	add	a,#0x0f
   0304 F8                  590 	mov	r0,a
   0305 A6 06               591 	mov	@r0,ar6
   0307 08                  592 	inc	r0
   0308 A6 07               593 	mov	@r0,ar7
   030A 08                  594 	inc	r0
   030B A6 02               595 	mov	@r0,ar2
   030D 08                  596 	inc	r0
   030E A6 03               597 	mov	@r0,ar3
                            598 ;	expf.c:367: r=P(z)*g;
   0310 C0*00               599 	push	bits
   0312 E5*00               600 	mov	a,_bp
   0314 24 0F               601 	add	a,#0x0f
   0316 F8                  602 	mov	r0,a
   0317 E6                  603 	mov	a,@r0
   0318 C0 E0               604 	push	acc
   031A 08                  605 	inc	r0
   031B E6                  606 	mov	a,@r0
   031C C0 E0               607 	push	acc
   031E 08                  608 	inc	r0
   031F E6                  609 	mov	a,@r0
   0320 C0 E0               610 	push	acc
   0322 08                  611 	inc	r0
   0323 E6                  612 	mov	a,@r0
   0324 C0 E0               613 	push	acc
   0326 90 53 08            614 	mov	dptr,#0x5308
   0329 75 F0 88            615 	mov	b,#0x88
   032C 74 3B               616 	mov	a,#0x3B
   032E 12s00r00            617 	lcall	___fsmul
   0331 AA 82               618 	mov	r2,dpl
   0333 AB 83               619 	mov	r3,dph
   0335 AC F0               620 	mov	r4,b
   0337 FD                  621 	mov	r5,a
   0338 E5 81               622 	mov	a,sp
   033A 24 FC               623 	add	a,#0xfc
   033C F5 81               624 	mov	sp,a
   033E D0*00               625 	pop	bits
   0340 C0*00               626 	push	bits
   0342 E4                  627 	clr	a
   0343 C0 E0               628 	push	acc
   0345 C0 E0               629 	push	acc
   0347 74 80               630 	mov	a,#0x80
   0349 C0 E0               631 	push	acc
   034B 74 3E               632 	mov	a,#0x3E
   034D C0 E0               633 	push	acc
   034F 8A 82               634 	mov	dpl,r2
   0351 8B 83               635 	mov	dph,r3
   0353 8C F0               636 	mov	b,r4
   0355 ED                  637 	mov	a,r5
   0356 12s00r00            638 	lcall	___fsadd
   0359 AA 82               639 	mov	r2,dpl
   035B AB 83               640 	mov	r3,dph
   035D AC F0               641 	mov	r4,b
   035F FD                  642 	mov	r5,a
   0360 E5 81               643 	mov	a,sp
   0362 24 FC               644 	add	a,#0xfc
   0364 F5 81               645 	mov	sp,a
   0366 D0*00               646 	pop	bits
   0368 C0*00               647 	push	bits
   036A E5*00               648 	mov	a,_bp
   036C 24 07               649 	add	a,#0x07
   036E F8                  650 	mov	r0,a
   036F E6                  651 	mov	a,@r0
   0370 C0 E0               652 	push	acc
   0372 08                  653 	inc	r0
   0373 E6                  654 	mov	a,@r0
   0374 C0 E0               655 	push	acc
   0376 08                  656 	inc	r0
   0377 E6                  657 	mov	a,@r0
   0378 C0 E0               658 	push	acc
   037A 08                  659 	inc	r0
   037B E6                  660 	mov	a,@r0
   037C C0 E0               661 	push	acc
   037E 8A 82               662 	mov	dpl,r2
   0380 8B 83               663 	mov	dph,r3
   0382 8C F0               664 	mov	b,r4
   0384 ED                  665 	mov	a,r5
   0385 12s00r00            666 	lcall	___fsmul
   0388 AA 82               667 	mov	r2,dpl
   038A AB 83               668 	mov	r3,dph
   038C AC F0               669 	mov	r4,b
   038E FD                  670 	mov	r5,a
   038F E5 81               671 	mov	a,sp
   0391 24 FC               672 	add	a,#0xfc
   0393 F5 81               673 	mov	sp,a
   0395 D0*00               674 	pop	bits
   0397 E5*00               675 	mov	a,_bp
   0399 24 0B               676 	add	a,#0x0b
   039B F8                  677 	mov	r0,a
   039C A6 02               678 	mov	@r0,ar2
   039E 08                  679 	inc	r0
   039F A6 03               680 	mov	@r0,ar3
   03A1 08                  681 	inc	r0
   03A2 A6 04               682 	mov	@r0,ar4
   03A4 08                  683 	inc	r0
   03A5 A6 05               684 	mov	@r0,ar5
                            685 ;	expf.c:368: r=0.5+(r/(Q(z)-r));
   03A7 C0*00               686 	push	bits
   03A9 E5*00               687 	mov	a,_bp
   03AB 24 0F               688 	add	a,#0x0f
   03AD F8                  689 	mov	r0,a
   03AE E6                  690 	mov	a,@r0
   03AF C0 E0               691 	push	acc
   03B1 08                  692 	inc	r0
   03B2 E6                  693 	mov	a,@r0
   03B3 C0 E0               694 	push	acc
   03B5 08                  695 	inc	r0
   03B6 E6                  696 	mov	a,@r0
   03B7 C0 E0               697 	push	acc
   03B9 08                  698 	inc	r0
   03BA E6                  699 	mov	a,@r0
   03BB C0 E0               700 	push	acc
   03BD 90 BF 5B            701 	mov	dptr,#0xBF5B
   03C0 75 F0 4C            702 	mov	b,#0x4C
   03C3 74 3D               703 	mov	a,#0x3D
   03C5 12s00r00            704 	lcall	___fsmul
   03C8 AE 82               705 	mov	r6,dpl
   03CA AF 83               706 	mov	r7,dph
   03CC AA F0               707 	mov	r2,b
   03CE FB                  708 	mov	r3,a
   03CF E5 81               709 	mov	a,sp
   03D1 24 FC               710 	add	a,#0xfc
   03D3 F5 81               711 	mov	sp,a
   03D5 D0*00               712 	pop	bits
   03D7 C0*00               713 	push	bits
   03D9 E4                  714 	clr	a
   03DA C0 E0               715 	push	acc
   03DC C0 E0               716 	push	acc
   03DE C0 E0               717 	push	acc
   03E0 74 3F               718 	mov	a,#0x3F
   03E2 C0 E0               719 	push	acc
   03E4 8E 82               720 	mov	dpl,r6
   03E6 8F 83               721 	mov	dph,r7
   03E8 8A F0               722 	mov	b,r2
   03EA EB                  723 	mov	a,r3
   03EB 12s00r00            724 	lcall	___fsadd
   03EE AA 82               725 	mov	r2,dpl
   03F0 AB 83               726 	mov	r3,dph
   03F2 AC F0               727 	mov	r4,b
   03F4 FD                  728 	mov	r5,a
   03F5 E5 81               729 	mov	a,sp
   03F7 24 FC               730 	add	a,#0xfc
   03F9 F5 81               731 	mov	sp,a
   03FB D0*00               732 	pop	bits
   03FD C0*00               733 	push	bits
   03FF E5*00               734 	mov	a,_bp
   0401 24 0B               735 	add	a,#0x0b
   0403 F8                  736 	mov	r0,a
   0404 E6                  737 	mov	a,@r0
   0405 C0 E0               738 	push	acc
   0407 08                  739 	inc	r0
   0408 E6                  740 	mov	a,@r0
   0409 C0 E0               741 	push	acc
   040B 08                  742 	inc	r0
   040C E6                  743 	mov	a,@r0
   040D C0 E0               744 	push	acc
   040F 08                  745 	inc	r0
   0410 E6                  746 	mov	a,@r0
   0411 C0 E0               747 	push	acc
   0413 8A 82               748 	mov	dpl,r2
   0415 8B 83               749 	mov	dph,r3
   0417 8C F0               750 	mov	b,r4
   0419 ED                  751 	mov	a,r5
   041A 12s00r00            752 	lcall	___fssub
   041D AA 82               753 	mov	r2,dpl
   041F AB 83               754 	mov	r3,dph
   0421 AC F0               755 	mov	r4,b
   0423 FD                  756 	mov	r5,a
   0424 E5 81               757 	mov	a,sp
   0426 24 FC               758 	add	a,#0xfc
   0428 F5 81               759 	mov	sp,a
   042A D0*00               760 	pop	bits
   042C C0*00               761 	push	bits
   042E C0 02               762 	push	ar2
   0430 C0 03               763 	push	ar3
   0432 C0 04               764 	push	ar4
   0434 C0 05               765 	push	ar5
   0436 E5*00               766 	mov	a,_bp
   0438 24 0B               767 	add	a,#0x0b
   043A F8                  768 	mov	r0,a
   043B 86 82               769 	mov	dpl,@r0
   043D 08                  770 	inc	r0
   043E 86 83               771 	mov	dph,@r0
   0440 08                  772 	inc	r0
   0441 86 F0               773 	mov	b,@r0
   0443 08                  774 	inc	r0
   0444 E6                  775 	mov	a,@r0
   0445 12s00r00            776 	lcall	___fsdiv
   0448 AA 82               777 	mov	r2,dpl
   044A AB 83               778 	mov	r3,dph
   044C AC F0               779 	mov	r4,b
   044E FD                  780 	mov	r5,a
   044F E5 81               781 	mov	a,sp
   0451 24 FC               782 	add	a,#0xfc
   0453 F5 81               783 	mov	sp,a
   0455 D0*00               784 	pop	bits
   0457 C0*00               785 	push	bits
   0459 E4                  786 	clr	a
   045A C0 E0               787 	push	acc
   045C C0 E0               788 	push	acc
   045E C0 E0               789 	push	acc
   0460 74 3F               790 	mov	a,#0x3F
   0462 C0 E0               791 	push	acc
   0464 8A 82               792 	mov	dpl,r2
   0466 8B 83               793 	mov	dph,r3
   0468 8C F0               794 	mov	b,r4
   046A ED                  795 	mov	a,r5
   046B 12s00r00            796 	lcall	___fsadd
   046E AA 82               797 	mov	r2,dpl
   0470 AB 83               798 	mov	r3,dph
   0472 AC F0               799 	mov	r4,b
   0474 FD                  800 	mov	r5,a
   0475 E5 81               801 	mov	a,sp
   0477 24 FC               802 	add	a,#0xfc
   0479 F5 81               803 	mov	sp,a
   047B D0*00               804 	pop	bits
   047D E5*00               805 	mov	a,_bp
   047F 24 0B               806 	add	a,#0x0b
   0481 F8                  807 	mov	r0,a
   0482 A6 02               808 	mov	@r0,ar2
   0484 08                  809 	inc	r0
   0485 A6 03               810 	mov	@r0,ar3
   0487 08                  811 	inc	r0
   0488 A6 04               812 	mov	@r0,ar4
   048A 08                  813 	inc	r0
   048B A6 05               814 	mov	@r0,ar5
                            815 ;	expf.c:370: n++;
   048D A8*00               816 	mov	r0,_bp
   048F 08                  817 	inc	r0
   0490 06                  818 	inc	@r0
   0491 B6 00 02            819 	cjne	@r0,#0x00,00135$
   0494 08                  820 	inc	r0
   0495 06                  821 	inc	@r0
   0496                     822 00135$:
                            823 ;	expf.c:371: z=ldexpf(r, n);
   0496 C0*00               824 	push	bits
   0498 A8*00               825 	mov	r0,_bp
   049A 08                  826 	inc	r0
   049B E6                  827 	mov	a,@r0
   049C C0 E0               828 	push	acc
   049E 08                  829 	inc	r0
   049F E6                  830 	mov	a,@r0
   04A0 C0 E0               831 	push	acc
   04A2 E5*00               832 	mov	a,_bp
   04A4 24 0B               833 	add	a,#0x0b
   04A6 F8                  834 	mov	r0,a
   04A7 86 82               835 	mov	dpl,@r0
   04A9 08                  836 	inc	r0
   04AA 86 83               837 	mov	dph,@r0
   04AC 08                  838 	inc	r0
   04AD 86 F0               839 	mov	b,@r0
   04AF 08                  840 	inc	r0
   04B0 E6                  841 	mov	a,@r0
   04B1 12s00r00            842 	lcall	_ldexpf
   04B4 AA 82               843 	mov	r2,dpl
   04B6 AB 83               844 	mov	r3,dph
   04B8 AC F0               845 	mov	r4,b
   04BA FD                  846 	mov	r5,a
   04BB 15 81               847 	dec	sp
   04BD 15 81               848 	dec	sp
   04BF D0*00               849 	pop	bits
   04C1 E5*00               850 	mov	a,_bp
   04C3 24 0F               851 	add	a,#0x0f
   04C5 F8                  852 	mov	r0,a
   04C6 A6 02               853 	mov	@r0,ar2
   04C8 08                  854 	inc	r0
   04C9 A6 03               855 	mov	@r0,ar3
   04CB 08                  856 	inc	r0
   04CC A6 04               857 	mov	@r0,ar4
   04CE 08                  858 	inc	r0
   04CF A6 05               859 	mov	@r0,ar5
                            860 ;	expf.c:372: if(sign)
   04D1 30*00 35            861 	jnb	b0,00116$
                            862 ;	expf.c:373: return 1.0/z;
   04D4 E5*00               863 	mov	a,_bp
   04D6 24 0F               864 	add	a,#0x0f
   04D8 F8                  865 	mov	r0,a
   04D9 E6                  866 	mov	a,@r0
   04DA C0 E0               867 	push	acc
   04DC 08                  868 	inc	r0
   04DD E6                  869 	mov	a,@r0
   04DE C0 E0               870 	push	acc
   04E0 08                  871 	inc	r0
   04E1 E6                  872 	mov	a,@r0
   04E2 C0 E0               873 	push	acc
   04E4 08                  874 	inc	r0
   04E5 E6                  875 	mov	a,@r0
   04E6 C0 E0               876 	push	acc
   04E8 90 00 00            877 	mov	dptr,#0x0000
   04EB 75 F0 80            878 	mov	b,#0x80
   04EE 74 3F               879 	mov	a,#0x3F
   04F0 12s00r00            880 	lcall	___fsdiv
   04F3 AA 82               881 	mov	r2,dpl
   04F5 AB 83               882 	mov	r3,dph
   04F7 AC F0               883 	mov	r4,b
   04F9 FD                  884 	mov	r5,a
   04FA E5 81               885 	mov	a,sp
   04FC 24 FC               886 	add	a,#0xfc
   04FE F5 81               887 	mov	sp,a
   0500 8A 82               888 	mov	dpl,r2
   0502 8B 83               889 	mov	dph,r3
   0504 8C F0               890 	mov	b,r4
   0506 ED                  891 	mov	a,r5
   0507 80 0F               892 	sjmp	00118$
   0509                     893 00116$:
                            894 ;	expf.c:375: return z;
   0509 E5*00               895 	mov	a,_bp
   050B 24 0F               896 	add	a,#0x0f
   050D F8                  897 	mov	r0,a
   050E 86 82               898 	mov	dpl,@r0
   0510 08                  899 	inc	r0
   0511 86 83               900 	mov	dph,@r0
   0513 08                  901 	inc	r0
   0514 86 F0               902 	mov	b,@r0
   0516 08                  903 	inc	r0
   0517 E6                  904 	mov	a,@r0
   0518                     905 00118$:
   0518 85*00 81            906 	mov	sp,_bp
   051B D0*00               907 	pop	_bp
   051D 22                  908 	ret
                            909 	.area CSEG    (CODE)
                            910 	.area CONST   (CODE)
                            911 	.area XINIT   (CODE)
                            912 	.area CABS    (ABS,CODE)
