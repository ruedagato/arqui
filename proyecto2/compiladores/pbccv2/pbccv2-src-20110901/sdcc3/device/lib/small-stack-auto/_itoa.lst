                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:32 2015
                              5 ;--------------------------------------------------------
                              6 	.module _itoa
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __itoa
                             13 	.globl __uitoa
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (ABS,DATA)
   0000                      18 	.org 0x0000
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (ABS,DATA)
   0000                      23 	.org 0x0000
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
                             33 ;--------------------------------------------------------
                             34 ; overlayable items in internal ram 
                             35 ;--------------------------------------------------------
                             36 	.area OSEG    (OVR,DATA)
                             37 ;--------------------------------------------------------
                             38 ; indirectly addressable internal ram data
                             39 ;--------------------------------------------------------
                             40 	.area ISEG    (DATA)
                             41 ;--------------------------------------------------------
                             42 ; absolute internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area IABS    (ABS,DATA)
                             45 	.area IABS    (ABS,DATA)
                             46 ;--------------------------------------------------------
                             47 ; bit data
                             48 ;--------------------------------------------------------
                             49 	.area BSEG    (BIT)
                             50 ;--------------------------------------------------------
                             51 ; paged external ram data
                             52 ;--------------------------------------------------------
                             53 	.area PSEG    (PAG,XDATA)
                             54 ;--------------------------------------------------------
                             55 ; external ram data
                             56 ;--------------------------------------------------------
                             57 	.area XSEG    (XDATA)
                             58 ;--------------------------------------------------------
                             59 ; absolute external ram data
                             60 ;--------------------------------------------------------
                             61 	.area XABS    (ABS,XDATA)
                             62 ;--------------------------------------------------------
                             63 ; external initialized ram data
                             64 ;--------------------------------------------------------
                             65 	.area XISEG   (XDATA)
                             66 	.area HOME    (CODE)
                             67 	.area GSINIT0 (CODE)
                             68 	.area GSINIT1 (CODE)
                             69 	.area GSINIT2 (CODE)
                             70 	.area GSINIT3 (CODE)
                             71 	.area GSINIT4 (CODE)
                             72 	.area GSINIT5 (CODE)
                             73 	.area GSINIT  (CODE)
                             74 	.area GSFINAL (CODE)
                             75 	.area CSEG    (CODE)
                             76 ;--------------------------------------------------------
                             77 ; global & static initialisations
                             78 ;--------------------------------------------------------
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT  (CODE)
                             81 	.area GSFINAL (CODE)
                             82 	.area GSINIT  (CODE)
                             83 ;--------------------------------------------------------
                             84 ; Home
                             85 ;--------------------------------------------------------
                             86 	.area HOME    (CODE)
                             87 	.area HOME    (CODE)
                             88 ;--------------------------------------------------------
                             89 ; code
                             90 ;--------------------------------------------------------
                             91 	.area CSEG    (CODE)
                             92 ;------------------------------------------------------------
                             93 ;Allocation info for local variables in function '_uitoa'
                             94 ;------------------------------------------------------------
                             95 ;string                    Allocated to stack - offset -5
                             96 ;radix                     Allocated to stack - offset -6
                             97 ;value                     Allocated to stack - offset 1
                             98 ;index                     Allocated to registers r2 
                             99 ;i                         Allocated to stack - offset 3
                            100 ;tmp                       Allocated to registers 
                            101 ;sloc0                     Allocated to stack - offset 4
                            102 ;sloc1                     Allocated to stack - offset 6
                            103 ;------------------------------------------------------------
                            104 ;	_itoa.c:40: void _uitoa(unsigned int value, char* string, unsigned char radix)
                            105 ;	-----------------------------------------
                            106 ;	 function _uitoa
                            107 ;	-----------------------------------------
   0000                     108 __uitoa:
                    0002    109 	ar2 = 0x02
                    0003    110 	ar3 = 0x03
                    0004    111 	ar4 = 0x04
                    0005    112 	ar5 = 0x05
                    0006    113 	ar6 = 0x06
                    0007    114 	ar7 = 0x07
                    0000    115 	ar0 = 0x00
                    0001    116 	ar1 = 0x01
   0000 C0*00               117 	push	_bp
   0002 85 81*00            118 	mov	_bp,sp
   0005 C0 82               119 	push	dpl
   0007 C0 83               120 	push	dph
   0009 E5 81               121 	mov	a,sp
   000B 24 08               122 	add	a,#0x08
   000D F5 81               123 	mov	sp,a
                            124 ;	_itoa.c:45: do {
   000F 7B 00               125 	mov	r3,#0x00
   0011                     126 00103$:
                            127 ;	_itoa.c:46: string[index] = '0' + (value % radix);
   0011 E5*00               128 	mov	a,_bp
   0013 24 FB               129 	add	a,#0xfb
   0015 F8                  130 	mov	r0,a
   0016 EB                  131 	mov	a,r3
   0017 26                  132 	add	a,@r0
   0018 FD                  133 	mov	r5,a
   0019 E4                  134 	clr	a
   001A 08                  135 	inc	r0
   001B 36                  136 	addc	a,@r0
   001C FE                  137 	mov	r6,a
   001D 08                  138 	inc	r0
   001E 86 07               139 	mov	ar7,@r0
   0020 E5*00               140 	mov	a,_bp
   0022 24 FA               141 	add	a,#0xfa
   0024 F8                  142 	mov	r0,a
   0025 E5*00               143 	mov	a,_bp
   0027 24 04               144 	add	a,#0x04
   0029 F9                  145 	mov	r1,a
   002A E6                  146 	mov	a,@r0
   002B F7                  147 	mov	@r1,a
   002C 09                  148 	inc	r1
   002D 77 00               149 	mov	@r1,#0x00
   002F C0 03               150 	push	ar3
   0031 C0 05               151 	push	ar5
   0033 C0 06               152 	push	ar6
   0035 C0 07               153 	push	ar7
   0037 E5*00               154 	mov	a,_bp
   0039 24 04               155 	add	a,#0x04
   003B F8                  156 	mov	r0,a
   003C E6                  157 	mov	a,@r0
   003D C0 E0               158 	push	acc
   003F 08                  159 	inc	r0
   0040 E6                  160 	mov	a,@r0
   0041 C0 E0               161 	push	acc
   0043 A8*00               162 	mov	r0,_bp
   0045 08                  163 	inc	r0
   0046 86 82               164 	mov	dpl,@r0
   0048 08                  165 	inc	r0
   0049 86 83               166 	mov	dph,@r0
   004B 12s00r00            167 	lcall	__moduint
   004E AC 82               168 	mov	r4,dpl
   0050 AA 83               169 	mov	r2,dph
   0052 15 81               170 	dec	sp
   0054 15 81               171 	dec	sp
   0056 D0 07               172 	pop	ar7
   0058 D0 06               173 	pop	ar6
   005A D0 05               174 	pop	ar5
   005C D0 03               175 	pop	ar3
   005E 74 30               176 	mov	a,#0x30
   0060 2C                  177 	add	a,r4
   0061 FC                  178 	mov	r4,a
   0062 8D 82               179 	mov	dpl,r5
   0064 8E 83               180 	mov	dph,r6
   0066 8F F0               181 	mov	b,r7
   0068 12s00r00            182 	lcall	__gptrput
                            183 ;	_itoa.c:47: if (string[index] > '9')
   006B C3                  184 	clr	c
   006C 74 B9               185 	mov	a,#(0x39 ^ 0x80)
   006E 8C F0               186 	mov	b,r4
   0070 63 F0 80            187 	xrl	b,#0x80
   0073 95 F0               188 	subb	a,b
   0075 50 17               189 	jnc	00102$
                            190 ;	_itoa.c:48: string[index] += 'A' - '9' - 1;
   0077 8D 82               191 	mov	dpl,r5
   0079 8E 83               192 	mov	dph,r6
   007B 8F F0               193 	mov	b,r7
   007D 12s00r00            194 	lcall	__gptrget
   0080 FA                  195 	mov	r2,a
   0081 74 07               196 	mov	a,#0x07
   0083 2A                  197 	add	a,r2
   0084 FA                  198 	mov	r2,a
   0085 8D 82               199 	mov	dpl,r5
   0087 8E 83               200 	mov	dph,r6
   0089 8F F0               201 	mov	b,r7
   008B 12s00r00            202 	lcall	__gptrput
   008E                     203 00102$:
                            204 ;	_itoa.c:49: value /= radix;
   008E C0 03               205 	push	ar3
   0090 E5*00               206 	mov	a,_bp
   0092 24 04               207 	add	a,#0x04
   0094 F8                  208 	mov	r0,a
   0095 E6                  209 	mov	a,@r0
   0096 C0 E0               210 	push	acc
   0098 08                  211 	inc	r0
   0099 E6                  212 	mov	a,@r0
   009A C0 E0               213 	push	acc
   009C A8*00               214 	mov	r0,_bp
   009E 08                  215 	inc	r0
   009F 86 82               216 	mov	dpl,@r0
   00A1 08                  217 	inc	r0
   00A2 86 83               218 	mov	dph,@r0
   00A4 12s00r00            219 	lcall	__divuint
   00A7 A8*00               220 	mov	r0,_bp
   00A9 08                  221 	inc	r0
   00AA A6 82               222 	mov	@r0,dpl
   00AC 08                  223 	inc	r0
   00AD A6 83               224 	mov	@r0,dph
   00AF 15 81               225 	dec	sp
   00B1 15 81               226 	dec	sp
   00B3 D0 03               227 	pop	ar3
                            228 ;	_itoa.c:50: ++index;
   00B5 0B                  229 	inc	r3
                            230 ;	_itoa.c:51: } while (value != 0);
   00B6 A8*00               231 	mov	r0,_bp
   00B8 08                  232 	inc	r0
   00B9 E6                  233 	mov	a,@r0
   00BA 08                  234 	inc	r0
   00BB 46                  235 	orl	a,@r0
   00BC 60 03               236 	jz	00119$
   00BE 02s00r11            237 	ljmp	00103$
   00C1                     238 00119$:
                            239 ;	_itoa.c:54: string[index--] = '\0';
   00C1 EB                  240 	mov	a,r3
   00C2 14                  241 	dec	a
   00C3 FA                  242 	mov	r2,a
   00C4 E5*00               243 	mov	a,_bp
   00C6 24 FB               244 	add	a,#0xfb
   00C8 F8                  245 	mov	r0,a
   00C9 EB                  246 	mov	a,r3
   00CA 26                  247 	add	a,@r0
   00CB FB                  248 	mov	r3,a
   00CC E4                  249 	clr	a
   00CD 08                  250 	inc	r0
   00CE 36                  251 	addc	a,@r0
   00CF FC                  252 	mov	r4,a
   00D0 08                  253 	inc	r0
   00D1 86 05               254 	mov	ar5,@r0
   00D3 8B 82               255 	mov	dpl,r3
   00D5 8C 83               256 	mov	dph,r4
   00D7 8D F0               257 	mov	b,r5
   00D9 E4                  258 	clr	a
   00DA 12s00r00            259 	lcall	__gptrput
                            260 ;	_itoa.c:57: while (index > i) {
   00DD E5*00               261 	mov	a,_bp
   00DF 24 03               262 	add	a,#0x03
   00E1 F8                  263 	mov	r0,a
   00E2 76 00               264 	mov	@r0,#0x00
   00E4                     265 00106$:
   00E4 E5*00               266 	mov	a,_bp
   00E6 24 03               267 	add	a,#0x03
   00E8 F8                  268 	mov	r0,a
   00E9 C3                  269 	clr	c
   00EA E6                  270 	mov	a,@r0
   00EB 64 80               271 	xrl	a,#0x80
   00ED 8A F0               272 	mov	b,r2
   00EF 63 F0 80            273 	xrl	b,#0x80
   00F2 95 F0               274 	subb	a,b
   00F4 50 76               275 	jnc	00109$
                            276 ;	_itoa.c:58: char tmp = string[i];
   00F6 E5*00               277 	mov	a,_bp
   00F8 24 FB               278 	add	a,#0xfb
   00FA F8                  279 	mov	r0,a
   00FB E5*00               280 	mov	a,_bp
   00FD 24 03               281 	add	a,#0x03
   00FF F9                  282 	mov	r1,a
   0100 E7                  283 	mov	a,@r1
   0101 26                  284 	add	a,@r0
   0102 C0 E0               285 	push	acc
   0104 E4                  286 	clr	a
   0105 08                  287 	inc	r0
   0106 36                  288 	addc	a,@r0
   0107 C0 E0               289 	push	acc
   0109 08                  290 	inc	r0
   010A E6                  291 	mov	a,@r0
   010B C0 E0               292 	push	acc
   010D E5*00               293 	mov	a,_bp
   010F 24 08               294 	add	a,#0x08
   0111 F8                  295 	mov	r0,a
   0112 D0 E0               296 	pop	acc
   0114 F6                  297 	mov	@r0,a
   0115 18                  298 	dec	r0
   0116 D0 E0               299 	pop	acc
   0118 F6                  300 	mov	@r0,a
   0119 18                  301 	dec	r0
   011A D0 E0               302 	pop	acc
   011C F6                  303 	mov	@r0,a
   011D E5*00               304 	mov	a,_bp
   011F 24 06               305 	add	a,#0x06
   0121 F8                  306 	mov	r0,a
   0122 86 82               307 	mov	dpl,@r0
   0124 08                  308 	inc	r0
   0125 86 83               309 	mov	dph,@r0
   0127 08                  310 	inc	r0
   0128 86 F0               311 	mov	b,@r0
   012A 12s00r00            312 	lcall	__gptrget
   012D FE                  313 	mov	r6,a
                            314 ;	_itoa.c:59: string[i] = string[index];
   012E E5*00               315 	mov	a,_bp
   0130 24 FB               316 	add	a,#0xfb
   0132 F8                  317 	mov	r0,a
   0133 EA                  318 	mov	a,r2
   0134 26                  319 	add	a,@r0
   0135 FF                  320 	mov	r7,a
   0136 E4                  321 	clr	a
   0137 08                  322 	inc	r0
   0138 36                  323 	addc	a,@r0
   0139 FB                  324 	mov	r3,a
   013A 08                  325 	inc	r0
   013B 86 04               326 	mov	ar4,@r0
   013D 8F 82               327 	mov	dpl,r7
   013F 8B 83               328 	mov	dph,r3
   0141 8C F0               329 	mov	b,r4
   0143 12s00r00            330 	lcall	__gptrget
   0146 FD                  331 	mov	r5,a
   0147 E5*00               332 	mov	a,_bp
   0149 24 06               333 	add	a,#0x06
   014B F8                  334 	mov	r0,a
   014C 86 82               335 	mov	dpl,@r0
   014E 08                  336 	inc	r0
   014F 86 83               337 	mov	dph,@r0
   0151 08                  338 	inc	r0
   0152 86 F0               339 	mov	b,@r0
   0154 ED                  340 	mov	a,r5
   0155 12s00r00            341 	lcall	__gptrput
                            342 ;	_itoa.c:60: string[index] = tmp;
   0158 8F 82               343 	mov	dpl,r7
   015A 8B 83               344 	mov	dph,r3
   015C 8C F0               345 	mov	b,r4
   015E EE                  346 	mov	a,r6
   015F 12s00r00            347 	lcall	__gptrput
                            348 ;	_itoa.c:61: ++i;
   0162 E5*00               349 	mov	a,_bp
   0164 24 03               350 	add	a,#0x03
   0166 F8                  351 	mov	r0,a
   0167 06                  352 	inc	@r0
                            353 ;	_itoa.c:62: --index;
   0168 1A                  354 	dec	r2
   0169 02s00rE4            355 	ljmp	00106$
   016C                     356 00109$:
   016C 85*00 81            357 	mov	sp,_bp
   016F D0*00               358 	pop	_bp
   0171 22                  359 	ret
                            360 ;------------------------------------------------------------
                            361 ;Allocation info for local variables in function '_itoa'
                            362 ;------------------------------------------------------------
                            363 ;string                    Allocated to stack - offset -5
                            364 ;radix                     Allocated to stack - offset -6
                            365 ;value                     Allocated to registers r2 r3 
                            366 ;------------------------------------------------------------
                            367 ;	_itoa.c:66: void _itoa(int value, char* string, unsigned char radix)
                            368 ;	-----------------------------------------
                            369 ;	 function _itoa
                            370 ;	-----------------------------------------
   0172                     371 __itoa:
   0172 C0*00               372 	push	_bp
   0174 85 81*00            373 	mov	_bp,sp
   0177 AA 82               374 	mov	r2,dpl
                            375 ;	_itoa.c:68: if (value < 0 && radix == 10) {
   0179 E5 83               376 	mov	a,dph
   017B FB                  377 	mov	r3,a
   017C 30 E7 37            378 	jnb	acc.7,00102$
   017F E5*00               379 	mov	a,_bp
   0181 24 FA               380 	add	a,#0xfa
   0183 F8                  381 	mov	r0,a
   0184 B6 0A 2F            382 	cjne	@r0,#0x0A,00102$
                            383 ;	_itoa.c:69: *string++ = '-';
   0187 E5*00               384 	mov	a,_bp
   0189 24 FB               385 	add	a,#0xfb
   018B F8                  386 	mov	r0,a
   018C 86 04               387 	mov	ar4,@r0
   018E 08                  388 	inc	r0
   018F 86 05               389 	mov	ar5,@r0
   0191 08                  390 	inc	r0
   0192 86 06               391 	mov	ar6,@r0
   0194 8C 82               392 	mov	dpl,r4
   0196 8D 83               393 	mov	dph,r5
   0198 8E F0               394 	mov	b,r6
   019A 74 2D               395 	mov	a,#0x2D
   019C 12s00r00            396 	lcall	__gptrput
   019F E5*00               397 	mov	a,_bp
   01A1 24 FB               398 	add	a,#0xfb
   01A3 F8                  399 	mov	r0,a
   01A4 74 01               400 	mov	a,#0x01
   01A6 2C                  401 	add	a,r4
   01A7 F6                  402 	mov	@r0,a
   01A8 E4                  403 	clr	a
   01A9 3D                  404 	addc	a,r5
   01AA 08                  405 	inc	r0
   01AB F6                  406 	mov	@r0,a
   01AC 08                  407 	inc	r0
   01AD A6 06               408 	mov	@r0,ar6
                            409 ;	_itoa.c:70: value = -value;
   01AF C3                  410 	clr	c
   01B0 E4                  411 	clr	a
   01B1 9A                  412 	subb	a,r2
   01B2 FA                  413 	mov	r2,a
   01B3 E4                  414 	clr	a
   01B4 9B                  415 	subb	a,r3
   01B5 FB                  416 	mov	r3,a
   01B6                     417 00102$:
                            418 ;	_itoa.c:72: _uitoa(value, string, radix);
   01B6 E5*00               419 	mov	a,_bp
   01B8 24 FA               420 	add	a,#0xfa
   01BA F8                  421 	mov	r0,a
   01BB E6                  422 	mov	a,@r0
   01BC C0 E0               423 	push	acc
   01BE E5*00               424 	mov	a,_bp
   01C0 24 FB               425 	add	a,#0xfb
   01C2 F8                  426 	mov	r0,a
   01C3 E6                  427 	mov	a,@r0
   01C4 C0 E0               428 	push	acc
   01C6 08                  429 	inc	r0
   01C7 E6                  430 	mov	a,@r0
   01C8 C0 E0               431 	push	acc
   01CA 08                  432 	inc	r0
   01CB E6                  433 	mov	a,@r0
   01CC C0 E0               434 	push	acc
   01CE 8A 82               435 	mov	dpl,r2
   01D0 8B 83               436 	mov	dph,r3
   01D2 12s00r00            437 	lcall	__uitoa
   01D5 E5 81               438 	mov	a,sp
   01D7 24 FC               439 	add	a,#0xfc
   01D9 F5 81               440 	mov	sp,a
   01DB D0*00               441 	pop	_bp
   01DD 22                  442 	ret
                            443 	.area CSEG    (CODE)
                            444 	.area CONST   (CODE)
                            445 	.area XINIT   (CODE)
                            446 	.area CABS    (ABS,CODE)
