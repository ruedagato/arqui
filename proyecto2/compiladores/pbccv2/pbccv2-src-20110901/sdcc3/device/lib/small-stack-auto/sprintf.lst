                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:32 2015
                              5 ;--------------------------------------------------------
                              6 	.module sprintf
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _vsprintf
                             13 	.globl _sprintf
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (ABS,DATA)
   0000                      18 	.org 0x0000
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (ABS,DATA)
   0000                      23 	.org 0x0000
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
                             33 ;--------------------------------------------------------
                             34 ; overlayable items in internal ram 
                             35 ;--------------------------------------------------------
                             36 	.area OSEG    (OVR,DATA)
                             37 ;--------------------------------------------------------
                             38 ; indirectly addressable internal ram data
                             39 ;--------------------------------------------------------
                             40 	.area ISEG    (DATA)
                             41 ;--------------------------------------------------------
                             42 ; absolute internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area IABS    (ABS,DATA)
                             45 	.area IABS    (ABS,DATA)
                             46 ;--------------------------------------------------------
                             47 ; bit data
                             48 ;--------------------------------------------------------
                             49 	.area BSEG    (BIT)
                             50 ;--------------------------------------------------------
                             51 ; paged external ram data
                             52 ;--------------------------------------------------------
                             53 	.area PSEG    (PAG,XDATA)
                             54 ;--------------------------------------------------------
                             55 ; external ram data
                             56 ;--------------------------------------------------------
                             57 	.area XSEG    (XDATA)
                             58 ;--------------------------------------------------------
                             59 ; absolute external ram data
                             60 ;--------------------------------------------------------
                             61 	.area XABS    (ABS,XDATA)
                             62 ;--------------------------------------------------------
                             63 ; external initialized ram data
                             64 ;--------------------------------------------------------
                             65 	.area XISEG   (XDATA)
                             66 	.area HOME    (CODE)
                             67 	.area GSINIT0 (CODE)
                             68 	.area GSINIT1 (CODE)
                             69 	.area GSINIT2 (CODE)
                             70 	.area GSINIT3 (CODE)
                             71 	.area GSINIT4 (CODE)
                             72 	.area GSINIT5 (CODE)
                             73 	.area GSINIT  (CODE)
                             74 	.area GSFINAL (CODE)
                             75 	.area CSEG    (CODE)
                             76 ;--------------------------------------------------------
                             77 ; global & static initialisations
                             78 ;--------------------------------------------------------
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT  (CODE)
                             81 	.area GSFINAL (CODE)
                             82 	.area GSINIT  (CODE)
                             83 ;--------------------------------------------------------
                             84 ; Home
                             85 ;--------------------------------------------------------
                             86 	.area HOME    (CODE)
                             87 	.area HOME    (CODE)
                             88 ;--------------------------------------------------------
                             89 ; code
                             90 ;--------------------------------------------------------
                             91 	.area CSEG    (CODE)
                             92 ;------------------------------------------------------------
                             93 ;Allocation info for local variables in function 'put_char_to_string'
                             94 ;------------------------------------------------------------
                             95 ;p                         Allocated to stack - offset -5
                             96 ;c                         Allocated to stack - offset 1
                             97 ;buf                       Allocated to registers 
                             98 ;------------------------------------------------------------
                             99 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                            100 ;	-----------------------------------------
                            101 ;	 function put_char_to_string
                            102 ;	-----------------------------------------
   0000                     103 _put_char_to_string:
                    0002    104 	ar2 = 0x02
                    0003    105 	ar3 = 0x03
                    0004    106 	ar4 = 0x04
                    0005    107 	ar5 = 0x05
                    0006    108 	ar6 = 0x06
                    0007    109 	ar7 = 0x07
                    0000    110 	ar0 = 0x00
                    0001    111 	ar1 = 0x01
   0000 C0*00               112 	push	_bp
   0002 85 81*00            113 	mov	_bp,sp
   0005 C0 82               114 	push	dpl
                            115 ;	sprintf.c:36: char **buf = (char **)p;
                            116 ;	sprintf.c:37: *(*buf)++ = c;
   0007 E5*00               117 	mov	a,_bp
   0009 24 FB               118 	add	a,#0xfb
   000B F8                  119 	mov	r0,a
   000C 86 82               120 	mov	dpl,@r0
   000E 08                  121 	inc	r0
   000F 86 83               122 	mov	dph,@r0
   0011 08                  123 	inc	r0
   0012 86 F0               124 	mov	b,@r0
   0014 12s00r00            125 	lcall	__gptrget
   0017 FE                  126 	mov	r6,a
   0018 A3                  127 	inc	dptr
   0019 12s00r00            128 	lcall	__gptrget
   001C FF                  129 	mov	r7,a
   001D A3                  130 	inc	dptr
   001E 12s00r00            131 	lcall	__gptrget
   0021 FA                  132 	mov	r2,a
   0022 74 01               133 	mov	a,#0x01
   0024 2E                  134 	add	a,r6
   0025 FB                  135 	mov	r3,a
   0026 E4                  136 	clr	a
   0027 3F                  137 	addc	a,r7
   0028 FC                  138 	mov	r4,a
   0029 8A 05               139 	mov	ar5,r2
   002B E5*00               140 	mov	a,_bp
   002D 24 FB               141 	add	a,#0xfb
   002F F8                  142 	mov	r0,a
   0030 86 82               143 	mov	dpl,@r0
   0032 08                  144 	inc	r0
   0033 86 83               145 	mov	dph,@r0
   0035 08                  146 	inc	r0
   0036 86 F0               147 	mov	b,@r0
   0038 EB                  148 	mov	a,r3
   0039 12s00r00            149 	lcall	__gptrput
   003C A3                  150 	inc	dptr
   003D EC                  151 	mov	a,r4
   003E 12s00r00            152 	lcall	__gptrput
   0041 A3                  153 	inc	dptr
   0042 ED                  154 	mov	a,r5
   0043 12s00r00            155 	lcall	__gptrput
   0046 8E 82               156 	mov	dpl,r6
   0048 8F 83               157 	mov	dph,r7
   004A 8A F0               158 	mov	b,r2
   004C A8*00               159 	mov	r0,_bp
   004E 08                  160 	inc	r0
   004F E6                  161 	mov	a,@r0
   0050 12s00r00            162 	lcall	__gptrput
   0053 85*00 81            163 	mov	sp,_bp
   0056 D0*00               164 	pop	_bp
   0058 22                  165 	ret
                            166 ;------------------------------------------------------------
                            167 ;Allocation info for local variables in function 'vsprintf'
                            168 ;------------------------------------------------------------
                            169 ;format                    Allocated to stack - offset -5
                            170 ;ap                        Allocated to stack - offset -6
                            171 ;buf                       Allocated to stack - offset 1
                            172 ;i                         Allocated to registers r2 r3 
                            173 ;------------------------------------------------------------
                            174 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                            175 ;	-----------------------------------------
                            176 ;	 function vsprintf
                            177 ;	-----------------------------------------
   0059                     178 _vsprintf:
   0059 C0*00               179 	push	_bp
   005B 85 81*00            180 	mov	_bp,sp
   005E C0 82               181 	push	dpl
   0060 C0 83               182 	push	dph
   0062 C0 F0               183 	push	b
                            184 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
   0064 AA*00               185 	mov	r2,_bp
   0066 0A                  186 	inc	r2
   0067 7B 00               187 	mov	r3,#0x00
   0069 7C 40               188 	mov	r4,#0x40
   006B E5*00               189 	mov	a,_bp
   006D 24 FA               190 	add	a,#0xfa
   006F F8                  191 	mov	r0,a
   0070 E6                  192 	mov	a,@r0
   0071 C0 E0               193 	push	acc
   0073 E5*00               194 	mov	a,_bp
   0075 24 FB               195 	add	a,#0xfb
   0077 F8                  196 	mov	r0,a
   0078 E6                  197 	mov	a,@r0
   0079 C0 E0               198 	push	acc
   007B 08                  199 	inc	r0
   007C E6                  200 	mov	a,@r0
   007D C0 E0               201 	push	acc
   007F 08                  202 	inc	r0
   0080 E6                  203 	mov	a,@r0
   0081 C0 E0               204 	push	acc
   0083 C0 02               205 	push	ar2
   0085 C0 03               206 	push	ar3
   0087 C0 04               207 	push	ar4
   0089 90s00r00            208 	mov	dptr,#_put_char_to_string
   008C 12s00r00            209 	lcall	__print_format
   008F AA 82               210 	mov	r2,dpl
   0091 AB 83               211 	mov	r3,dph
   0093 E5 81               212 	mov	a,sp
   0095 24 F9               213 	add	a,#0xf9
   0097 F5 81               214 	mov	sp,a
                            215 ;	sprintf.c:45: *buf = 0;
   0099 A8*00               216 	mov	r0,_bp
   009B 08                  217 	inc	r0
   009C 86 04               218 	mov	ar4,@r0
   009E 08                  219 	inc	r0
   009F 86 05               220 	mov	ar5,@r0
   00A1 08                  221 	inc	r0
   00A2 86 06               222 	mov	ar6,@r0
   00A4 8C 82               223 	mov	dpl,r4
   00A6 8D 83               224 	mov	dph,r5
   00A8 8E F0               225 	mov	b,r6
   00AA E4                  226 	clr	a
   00AB 12s00r00            227 	lcall	__gptrput
                            228 ;	sprintf.c:46: return i;
   00AE 8A 82               229 	mov	dpl,r2
   00B0 8B 83               230 	mov	dph,r3
   00B2 85*00 81            231 	mov	sp,_bp
   00B5 D0*00               232 	pop	_bp
   00B7 22                  233 	ret
                            234 ;------------------------------------------------------------
                            235 ;Allocation info for local variables in function 'sprintf'
                            236 ;------------------------------------------------------------
                            237 ;buf                       Allocated to stack - offset -5
                            238 ;format                    Allocated to stack - offset -8
                            239 ;arg                       Allocated to registers 
                            240 ;i                         Allocated to registers r2 r3 
                            241 ;------------------------------------------------------------
                            242 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                            243 ;	-----------------------------------------
                            244 ;	 function sprintf
                            245 ;	-----------------------------------------
   00B8                     246 _sprintf:
   00B8 C0*00               247 	push	_bp
   00BA 85 81*00            248 	mov	_bp,sp
                            249 ;	sprintf.c:55: va_start (arg, format);
   00BD E5*00               250 	mov	a,_bp
   00BF 24 F8               251 	add	a,#0xf8
   00C1 FA                  252 	mov	r2,a
                            253 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
   00C2 E5*00               254 	mov	a,_bp
   00C4 24 FB               255 	add	a,#0xfb
   00C6 FB                  256 	mov	r3,a
   00C7 7C 00               257 	mov	r4,#0x00
   00C9 7D 40               258 	mov	r5,#0x40
   00CB C0 02               259 	push	ar2
   00CD E5*00               260 	mov	a,_bp
   00CF 24 F8               261 	add	a,#0xf8
   00D1 F8                  262 	mov	r0,a
   00D2 E6                  263 	mov	a,@r0
   00D3 C0 E0               264 	push	acc
   00D5 08                  265 	inc	r0
   00D6 E6                  266 	mov	a,@r0
   00D7 C0 E0               267 	push	acc
   00D9 08                  268 	inc	r0
   00DA E6                  269 	mov	a,@r0
   00DB C0 E0               270 	push	acc
   00DD C0 03               271 	push	ar3
   00DF C0 04               272 	push	ar4
   00E1 C0 05               273 	push	ar5
   00E3 90s00r00            274 	mov	dptr,#_put_char_to_string
   00E6 12s00r00            275 	lcall	__print_format
   00E9 AA 82               276 	mov	r2,dpl
   00EB AB 83               277 	mov	r3,dph
   00ED E5 81               278 	mov	a,sp
   00EF 24 F9               279 	add	a,#0xf9
   00F1 F5 81               280 	mov	sp,a
                            281 ;	sprintf.c:57: *buf = 0;
   00F3 E5*00               282 	mov	a,_bp
   00F5 24 FB               283 	add	a,#0xfb
   00F7 F8                  284 	mov	r0,a
   00F8 86 04               285 	mov	ar4,@r0
   00FA 08                  286 	inc	r0
   00FB 86 05               287 	mov	ar5,@r0
   00FD 08                  288 	inc	r0
   00FE 86 06               289 	mov	ar6,@r0
   0100 8C 82               290 	mov	dpl,r4
   0102 8D 83               291 	mov	dph,r5
   0104 8E F0               292 	mov	b,r6
   0106 E4                  293 	clr	a
   0107 12s00r00            294 	lcall	__gptrput
                            295 ;	sprintf.c:60: return i;
   010A 8A 82               296 	mov	dpl,r2
   010C 8B 83               297 	mov	dph,r3
   010E D0*00               298 	pop	_bp
   0110 22                  299 	ret
                            300 	.area CSEG    (CODE)
                            301 	.area CONST   (CODE)
                            302 	.area XINIT   (CODE)
                            303 	.area CABS    (ABS,CODE)
