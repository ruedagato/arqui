                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:30 2015
                              5 ;--------------------------------------------------------
                              6 	.module _atof
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _atof
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; overlayable bit register bank
                             30 ;--------------------------------------------------------
                             31 	.area BIT_BANK	(REL,OVR,DATA)
   0000                      32 bits:
   0000                      33 	.ds 1
                    8000     34 	b0 = bits[0]
                    8100     35 	b1 = bits[1]
                    8200     36 	b2 = bits[2]
                    8300     37 	b3 = bits[3]
                    8400     38 	b4 = bits[4]
                    8500     39 	b5 = bits[5]
                    8600     40 	b6 = bits[6]
                    8700     41 	b7 = bits[7]
                             42 ;--------------------------------------------------------
                             43 ; internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area DSEG    (DATA)
                             46 ;--------------------------------------------------------
                             47 ; overlayable items in internal ram 
                             48 ;--------------------------------------------------------
                             49 	.area OSEG    (OVR,DATA)
                             50 ;--------------------------------------------------------
                             51 ; indirectly addressable internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area ISEG    (DATA)
                             54 ;--------------------------------------------------------
                             55 ; absolute internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area IABS    (ABS,DATA)
                             58 	.area IABS    (ABS,DATA)
                             59 ;--------------------------------------------------------
                             60 ; bit data
                             61 ;--------------------------------------------------------
                             62 	.area BSEG    (BIT)
                             63 ;--------------------------------------------------------
                             64 ; paged external ram data
                             65 ;--------------------------------------------------------
                             66 	.area PSEG    (PAG,XDATA)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                             71 ;--------------------------------------------------------
                             72 ; absolute external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XABS    (ABS,XDATA)
                             75 ;--------------------------------------------------------
                             76 ; external initialized ram data
                             77 ;--------------------------------------------------------
                             78 	.area XISEG   (XDATA)
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT0 (CODE)
                             81 	.area GSINIT1 (CODE)
                             82 	.area GSINIT2 (CODE)
                             83 	.area GSINIT3 (CODE)
                             84 	.area GSINIT4 (CODE)
                             85 	.area GSINIT5 (CODE)
                             86 	.area GSINIT  (CODE)
                             87 	.area GSFINAL (CODE)
                             88 	.area CSEG    (CODE)
                             89 ;--------------------------------------------------------
                             90 ; global & static initialisations
                             91 ;--------------------------------------------------------
                             92 	.area HOME    (CODE)
                             93 	.area GSINIT  (CODE)
                             94 	.area GSFINAL (CODE)
                             95 	.area GSINIT  (CODE)
                             96 ;--------------------------------------------------------
                             97 ; Home
                             98 ;--------------------------------------------------------
                             99 	.area HOME    (CODE)
                            100 	.area HOME    (CODE)
                            101 ;--------------------------------------------------------
                            102 ; code
                            103 ;--------------------------------------------------------
                            104 	.area CSEG    (CODE)
                            105 ;------------------------------------------------------------
                            106 ;Allocation info for local variables in function 'atof'
                            107 ;------------------------------------------------------------
                            108 ;s                         Allocated to registers r3 r4 r6 
                            109 ;value                     Allocated to stack - offset 1
                            110 ;fraction                  Allocated to stack - offset 5
                            111 ;iexp                      Allocated to registers r2 
                            112 ;sign                      Allocated to registers b0 
                            113 ;sloc0                     Allocated to stack - offset 9
                            114 ;sloc1                     Allocated to stack - offset 12
                            115 ;------------------------------------------------------------
                            116 ;	_atof.c:33: float atof(const char * s)
                            117 ;	-----------------------------------------
                            118 ;	 function atof
                            119 ;	-----------------------------------------
   0000                     120 _atof:
                    0002    121 	ar2 = 0x02
                    0003    122 	ar3 = 0x03
                    0004    123 	ar4 = 0x04
                    0005    124 	ar5 = 0x05
                    0006    125 	ar6 = 0x06
                    0007    126 	ar7 = 0x07
                    0000    127 	ar0 = 0x00
                    0001    128 	ar1 = 0x01
   0000 C0*00               129 	push	_bp
   0002 E5 81               130 	mov	a,sp
   0004 F5*00               131 	mov	_bp,a
   0006 24 0F               132 	add	a,#0x0f
   0008 F5 81               133 	mov	sp,a
   000A AB 82               134 	mov	r3,dpl
   000C AC 83               135 	mov	r4,dph
   000E AE F0               136 	mov	r6,b
                            137 ;	_atof.c:40: while (isspace(*s)) s++;
   0010 E5*00               138 	mov	a,_bp
   0012 24 09               139 	add	a,#0x09
   0014 F8                  140 	mov	r0,a
   0015 A6 03               141 	mov	@r0,ar3
   0017 08                  142 	inc	r0
   0018 A6 04               143 	mov	@r0,ar4
   001A 08                  144 	inc	r0
   001B A6 06               145 	mov	@r0,ar6
   001D                     146 00101$:
   001D E5*00               147 	mov	a,_bp
   001F 24 09               148 	add	a,#0x09
   0021 F8                  149 	mov	r0,a
   0022 86 82               150 	mov	dpl,@r0
   0024 08                  151 	inc	r0
   0025 86 83               152 	mov	dph,@r0
   0027 08                  153 	inc	r0
   0028 86 F0               154 	mov	b,@r0
   002A 12s00r00            155 	lcall	__gptrget
   002D F5 82               156 	mov	dpl,a
   002F 12s00r00            157 	lcall	_isspace
   0032 E5 82               158 	mov	a,dpl
   0034 60 0D               159 	jz	00148$
   0036 E5*00               160 	mov	a,_bp
   0038 24 09               161 	add	a,#0x09
   003A F8                  162 	mov	r0,a
   003B 06                  163 	inc	@r0
   003C B6 00 DE            164 	cjne	@r0,#0x00,00101$
   003F 08                  165 	inc	r0
   0040 06                  166 	inc	@r0
   0041 80 DA               167 	sjmp	00101$
   0043                     168 00148$:
   0043 E5*00               169 	mov	a,_bp
   0045 24 09               170 	add	a,#0x09
   0047 F8                  171 	mov	r0,a
   0048 86 03               172 	mov	ar3,@r0
   004A 08                  173 	inc	r0
   004B 86 04               174 	mov	ar4,@r0
   004D 08                  175 	inc	r0
   004E 86 06               176 	mov	ar6,@r0
                            177 ;	_atof.c:43: if (*s == '-')
   0050 E5*00               178 	mov	a,_bp
   0052 24 09               179 	add	a,#0x09
   0054 F8                  180 	mov	r0,a
   0055 86 82               181 	mov	dpl,@r0
   0057 08                  182 	inc	r0
   0058 86 83               183 	mov	dph,@r0
   005A 08                  184 	inc	r0
   005B 86 F0               185 	mov	b,@r0
   005D 12s00r00            186 	lcall	__gptrget
   0060 FD                  187 	mov	r5,a
   0061 BD 2D 14            188 	cjne	r5,#0x2D,00107$
                            189 ;	_atof.c:45: sign=1;
   0064 D2*00               190 	setb	b0
                            191 ;	_atof.c:46: s++;
   0066 E5*00               192 	mov	a,_bp
   0068 24 09               193 	add	a,#0x09
   006A F8                  194 	mov	r0,a
   006B 74 01               195 	mov	a,#0x01
   006D 26                  196 	add	a,@r0
   006E FB                  197 	mov	r3,a
   006F E4                  198 	clr	a
   0070 08                  199 	inc	r0
   0071 36                  200 	addc	a,@r0
   0072 FC                  201 	mov	r4,a
   0073 08                  202 	inc	r0
   0074 86 06               203 	mov	ar6,@r0
   0076 80 15               204 	sjmp	00108$
   0078                     205 00107$:
                            206 ;	_atof.c:50: sign=0;
   0078 C2*00               207 	clr	b0
                            208 ;	_atof.c:51: if (*s == '+') s++;
   007A BD 2B 10            209 	cjne	r5,#0x2B,00108$
   007D E5*00               210 	mov	a,_bp
   007F 24 09               211 	add	a,#0x09
   0081 F8                  212 	mov	r0,a
   0082 74 01               213 	mov	a,#0x01
   0084 26                  214 	add	a,@r0
   0085 FB                  215 	mov	r3,a
   0086 E4                  216 	clr	a
   0087 08                  217 	inc	r0
   0088 36                  218 	addc	a,@r0
   0089 FC                  219 	mov	r4,a
   008A 08                  220 	inc	r0
   008B 86 06               221 	mov	ar6,@r0
   008D                     222 00108$:
                            223 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
   008D A8*00               224 	mov	r0,_bp
   008F 08                  225 	inc	r0
   0090 E4                  226 	clr	a
   0091 F6                  227 	mov	@r0,a
   0092 08                  228 	inc	r0
   0093 F6                  229 	mov	@r0,a
   0094 08                  230 	inc	r0
   0095 F6                  231 	mov	@r0,a
   0096 08                  232 	inc	r0
   0097 F6                  233 	mov	@r0,a
   0098 E5*00               234 	mov	a,_bp
   009A 24 09               235 	add	a,#0x09
   009C F8                  236 	mov	r0,a
   009D A6 03               237 	mov	@r0,ar3
   009F 08                  238 	inc	r0
   00A0 A6 04               239 	mov	@r0,ar4
   00A2 08                  240 	inc	r0
   00A3 A6 06               241 	mov	@r0,ar6
   00A5                     242 00121$:
   00A5 E5*00               243 	mov	a,_bp
   00A7 24 09               244 	add	a,#0x09
   00A9 F8                  245 	mov	r0,a
   00AA 86 82               246 	mov	dpl,@r0
   00AC 08                  247 	inc	r0
   00AD 86 83               248 	mov	dph,@r0
   00AF 08                  249 	inc	r0
   00B0 86 F0               250 	mov	b,@r0
   00B2 12s00r00            251 	lcall	__gptrget
   00B5 F5 82               252 	mov	dpl,a
   00B7 C0*00               253 	push	bits
   00B9 12s00r00            254 	lcall	_isdigit
   00BC E5 82               255 	mov	a,dpl
   00BE D0*00               256 	pop	bits
   00C0 70 03               257 	jnz	00156$
   00C2 02s01r6E            258 	ljmp	00149$
   00C5                     259 00156$:
                            260 ;	_atof.c:57: value=10.0*value+(*s-'0');
   00C5 C0*00               261 	push	bits
   00C7 A8*00               262 	mov	r0,_bp
   00C9 08                  263 	inc	r0
   00CA E6                  264 	mov	a,@r0
   00CB C0 E0               265 	push	acc
   00CD 08                  266 	inc	r0
   00CE E6                  267 	mov	a,@r0
   00CF C0 E0               268 	push	acc
   00D1 08                  269 	inc	r0
   00D2 E6                  270 	mov	a,@r0
   00D3 C0 E0               271 	push	acc
   00D5 08                  272 	inc	r0
   00D6 E6                  273 	mov	a,@r0
   00D7 C0 E0               274 	push	acc
   00D9 90 00 00            275 	mov	dptr,#0x0000
   00DC 75 F0 20            276 	mov	b,#0x20
   00DF 74 41               277 	mov	a,#0x41
   00E1 12s00r00            278 	lcall	___fsmul
   00E4 C8                  279 	xch	a,r0
   00E5 E5*00               280 	mov	a,_bp
   00E7 24 0C               281 	add	a,#0x0c
   00E9 C8                  282 	xch	a,r0
   00EA A6 82               283 	mov	@r0,dpl
   00EC 08                  284 	inc	r0
   00ED A6 83               285 	mov	@r0,dph
   00EF 08                  286 	inc	r0
   00F0 A6 F0               287 	mov	@r0,b
   00F2 08                  288 	inc	r0
   00F3 F6                  289 	mov	@r0,a
   00F4 E5 81               290 	mov	a,sp
   00F6 24 FC               291 	add	a,#0xfc
   00F8 F5 81               292 	mov	sp,a
   00FA D0*00               293 	pop	bits
   00FC E5*00               294 	mov	a,_bp
   00FE 24 09               295 	add	a,#0x09
   0100 F8                  296 	mov	r0,a
   0101 86 82               297 	mov	dpl,@r0
   0103 08                  298 	inc	r0
   0104 86 83               299 	mov	dph,@r0
   0106 08                  300 	inc	r0
   0107 86 F0               301 	mov	b,@r0
   0109 12s00r00            302 	lcall	__gptrget
   010C FB                  303 	mov	r3,a
   010D A3                  304 	inc	dptr
   010E 18                  305 	dec	r0
   010F 18                  306 	dec	r0
   0110 A6 82               307 	mov	@r0,dpl
   0112 08                  308 	inc	r0
   0113 A6 83               309 	mov	@r0,dph
   0115 EB                  310 	mov	a,r3
   0116 33                  311 	rlc	a
   0117 95 E0               312 	subb	a,acc
   0119 FC                  313 	mov	r4,a
   011A EB                  314 	mov	a,r3
   011B 24 D0               315 	add	a,#0xd0
   011D F5 82               316 	mov	dpl,a
   011F EC                  317 	mov	a,r4
   0120 34 FF               318 	addc	a,#0xff
   0122 F5 83               319 	mov	dph,a
   0124 C0*00               320 	push	bits
   0126 12s00r00            321 	lcall	___sint2fs
   0129 AB 82               322 	mov	r3,dpl
   012B AC 83               323 	mov	r4,dph
   012D AA F0               324 	mov	r2,b
   012F FD                  325 	mov	r5,a
   0130 D0*00               326 	pop	bits
   0132 C0*00               327 	push	bits
   0134 C0 03               328 	push	ar3
   0136 C0 04               329 	push	ar4
   0138 C0 02               330 	push	ar2
   013A C0 05               331 	push	ar5
   013C E5*00               332 	mov	a,_bp
   013E 24 0C               333 	add	a,#0x0c
   0140 F8                  334 	mov	r0,a
   0141 86 82               335 	mov	dpl,@r0
   0143 08                  336 	inc	r0
   0144 86 83               337 	mov	dph,@r0
   0146 08                  338 	inc	r0
   0147 86 F0               339 	mov	b,@r0
   0149 08                  340 	inc	r0
   014A E6                  341 	mov	a,@r0
   014B 12s00r00            342 	lcall	___fsadd
   014E AA 82               343 	mov	r2,dpl
   0150 AB 83               344 	mov	r3,dph
   0152 AC F0               345 	mov	r4,b
   0154 FD                  346 	mov	r5,a
   0155 E5 81               347 	mov	a,sp
   0157 24 FC               348 	add	a,#0xfc
   0159 F5 81               349 	mov	sp,a
   015B D0*00               350 	pop	bits
   015D A8*00               351 	mov	r0,_bp
   015F 08                  352 	inc	r0
   0160 A6 02               353 	mov	@r0,ar2
   0162 08                  354 	inc	r0
   0163 A6 03               355 	mov	@r0,ar3
   0165 08                  356 	inc	r0
   0166 A6 04               357 	mov	@r0,ar4
   0168 08                  358 	inc	r0
   0169 A6 05               359 	mov	@r0,ar5
                            360 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
   016B 02s00rA5            361 	ljmp	00121$
   016E                     362 00149$:
   016E E5*00               363 	mov	a,_bp
   0170 24 09               364 	add	a,#0x09
   0172 F8                  365 	mov	r0,a
   0173 86 03               366 	mov	ar3,@r0
   0175 08                  367 	inc	r0
   0176 86 04               368 	mov	ar4,@r0
   0178 08                  369 	inc	r0
   0179 86 06               370 	mov	ar6,@r0
                            371 ;	_atof.c:61: if (*s == '.')
   017B E5*00               372 	mov	a,_bp
   017D 24 09               373 	add	a,#0x09
   017F F8                  374 	mov	r0,a
   0180 86 82               375 	mov	dpl,@r0
   0182 08                  376 	inc	r0
   0183 86 83               377 	mov	dph,@r0
   0185 08                  378 	inc	r0
   0186 86 F0               379 	mov	b,@r0
   0188 12s00r00            380 	lcall	__gptrget
   018B FA                  381 	mov	r2,a
   018C BA 2E 02            382 	cjne	r2,#0x2E,00157$
   018F 80 03               383 	sjmp	00158$
   0191                     384 00157$:
   0191 02s02rCD            385 	ljmp	00110$
   0194                     386 00158$:
                            387 ;	_atof.c:63: s++;
   0194 E5*00               388 	mov	a,_bp
   0196 24 09               389 	add	a,#0x09
   0198 F8                  390 	mov	r0,a
   0199 74 01               391 	mov	a,#0x01
   019B 26                  392 	add	a,@r0
   019C FB                  393 	mov	r3,a
   019D E4                  394 	clr	a
   019E 08                  395 	inc	r0
   019F 36                  396 	addc	a,@r0
   01A0 FC                  397 	mov	r4,a
   01A1 08                  398 	inc	r0
   01A2 86 06               399 	mov	ar6,@r0
                            400 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
   01A4 E5*00               401 	mov	a,_bp
   01A6 24 05               402 	add	a,#0x05
   01A8 F8                  403 	mov	r0,a
   01A9 76 CD               404 	mov	@r0,#0xCD
   01AB 08                  405 	inc	r0
   01AC 76 CC               406 	mov	@r0,#0xCC
   01AE 08                  407 	inc	r0
   01AF 76 CC               408 	mov	@r0,#0xCC
   01B1 08                  409 	inc	r0
   01B2 76 3D               410 	mov	@r0,#0x3D
   01B4 E5*00               411 	mov	a,_bp
   01B6 24 0C               412 	add	a,#0x0c
   01B8 F8                  413 	mov	r0,a
   01B9 A6 03               414 	mov	@r0,ar3
   01BB 08                  415 	inc	r0
   01BC A6 04               416 	mov	@r0,ar4
   01BE 08                  417 	inc	r0
   01BF A6 06               418 	mov	@r0,ar6
   01C1                     419 00125$:
   01C1 E5*00               420 	mov	a,_bp
   01C3 24 0C               421 	add	a,#0x0c
   01C5 F8                  422 	mov	r0,a
   01C6 86 82               423 	mov	dpl,@r0
   01C8 08                  424 	inc	r0
   01C9 86 83               425 	mov	dph,@r0
   01CB 08                  426 	inc	r0
   01CC 86 F0               427 	mov	b,@r0
   01CE 12s00r00            428 	lcall	__gptrget
   01D1 F5 82               429 	mov	dpl,a
   01D3 C0*00               430 	push	bits
   01D5 12s00r00            431 	lcall	_isdigit
   01D8 E5 82               432 	mov	a,dpl
   01DA D0*00               433 	pop	bits
   01DC 70 03               434 	jnz	00159$
   01DE 02s02rC0            435 	ljmp	00150$
   01E1                     436 00159$:
                            437 ;	_atof.c:66: value+=(*s-'0')*fraction;
   01E1 E5*00               438 	mov	a,_bp
   01E3 24 0C               439 	add	a,#0x0c
   01E5 F8                  440 	mov	r0,a
   01E6 86 82               441 	mov	dpl,@r0
   01E8 08                  442 	inc	r0
   01E9 86 83               443 	mov	dph,@r0
   01EB 08                  444 	inc	r0
   01EC 86 F0               445 	mov	b,@r0
   01EE 12s00r00            446 	lcall	__gptrget
   01F1 FB                  447 	mov	r3,a
   01F2 A3                  448 	inc	dptr
   01F3 18                  449 	dec	r0
   01F4 18                  450 	dec	r0
   01F5 A6 82               451 	mov	@r0,dpl
   01F7 08                  452 	inc	r0
   01F8 A6 83               453 	mov	@r0,dph
   01FA EB                  454 	mov	a,r3
   01FB 33                  455 	rlc	a
   01FC 95 E0               456 	subb	a,acc
   01FE FC                  457 	mov	r4,a
   01FF EB                  458 	mov	a,r3
   0200 24 D0               459 	add	a,#0xd0
   0202 F5 82               460 	mov	dpl,a
   0204 EC                  461 	mov	a,r4
   0205 34 FF               462 	addc	a,#0xff
   0207 F5 83               463 	mov	dph,a
   0209 C0*00               464 	push	bits
   020B 12s00r00            465 	lcall	___sint2fs
   020E AB 82               466 	mov	r3,dpl
   0210 AC 83               467 	mov	r4,dph
   0212 AD F0               468 	mov	r5,b
   0214 FA                  469 	mov	r2,a
   0215 D0*00               470 	pop	bits
   0217 C0*00               471 	push	bits
   0219 E5*00               472 	mov	a,_bp
   021B 24 05               473 	add	a,#0x05
   021D F8                  474 	mov	r0,a
   021E E6                  475 	mov	a,@r0
   021F C0 E0               476 	push	acc
   0221 08                  477 	inc	r0
   0222 E6                  478 	mov	a,@r0
   0223 C0 E0               479 	push	acc
   0225 08                  480 	inc	r0
   0226 E6                  481 	mov	a,@r0
   0227 C0 E0               482 	push	acc
   0229 08                  483 	inc	r0
   022A E6                  484 	mov	a,@r0
   022B C0 E0               485 	push	acc
   022D 8B 82               486 	mov	dpl,r3
   022F 8C 83               487 	mov	dph,r4
   0231 8D F0               488 	mov	b,r5
   0233 EA                  489 	mov	a,r2
   0234 12s00r00            490 	lcall	___fsmul
   0237 AA 82               491 	mov	r2,dpl
   0239 AB 83               492 	mov	r3,dph
   023B AC F0               493 	mov	r4,b
   023D FD                  494 	mov	r5,a
   023E E5 81               495 	mov	a,sp
   0240 24 FC               496 	add	a,#0xfc
   0242 F5 81               497 	mov	sp,a
   0244 D0*00               498 	pop	bits
   0246 C0*00               499 	push	bits
   0248 C0 02               500 	push	ar2
   024A C0 03               501 	push	ar3
   024C C0 04               502 	push	ar4
   024E C0 05               503 	push	ar5
   0250 A8*00               504 	mov	r0,_bp
   0252 08                  505 	inc	r0
   0253 86 82               506 	mov	dpl,@r0
   0255 08                  507 	inc	r0
   0256 86 83               508 	mov	dph,@r0
   0258 08                  509 	inc	r0
   0259 86 F0               510 	mov	b,@r0
   025B 08                  511 	inc	r0
   025C E6                  512 	mov	a,@r0
   025D 12s00r00            513 	lcall	___fsadd
   0260 AA 82               514 	mov	r2,dpl
   0262 AB 83               515 	mov	r3,dph
   0264 AC F0               516 	mov	r4,b
   0266 FD                  517 	mov	r5,a
   0267 E5 81               518 	mov	a,sp
   0269 24 FC               519 	add	a,#0xfc
   026B F5 81               520 	mov	sp,a
   026D D0*00               521 	pop	bits
   026F A8*00               522 	mov	r0,_bp
   0271 08                  523 	inc	r0
   0272 A6 02               524 	mov	@r0,ar2
   0274 08                  525 	inc	r0
   0275 A6 03               526 	mov	@r0,ar3
   0277 08                  527 	inc	r0
   0278 A6 04               528 	mov	@r0,ar4
   027A 08                  529 	inc	r0
   027B A6 05               530 	mov	@r0,ar5
                            531 ;	_atof.c:67: fraction*=0.1;
   027D C0*00               532 	push	bits
   027F E5*00               533 	mov	a,_bp
   0281 24 05               534 	add	a,#0x05
   0283 F8                  535 	mov	r0,a
   0284 E6                  536 	mov	a,@r0
   0285 C0 E0               537 	push	acc
   0287 08                  538 	inc	r0
   0288 E6                  539 	mov	a,@r0
   0289 C0 E0               540 	push	acc
   028B 08                  541 	inc	r0
   028C E6                  542 	mov	a,@r0
   028D C0 E0               543 	push	acc
   028F 08                  544 	inc	r0
   0290 E6                  545 	mov	a,@r0
   0291 C0 E0               546 	push	acc
   0293 90 CC CD            547 	mov	dptr,#0xCCCD
   0296 75 F0 CC            548 	mov	b,#0xCC
   0299 74 3D               549 	mov	a,#0x3D
   029B 12s00r00            550 	lcall	___fsmul
   029E AA 82               551 	mov	r2,dpl
   02A0 AB 83               552 	mov	r3,dph
   02A2 AC F0               553 	mov	r4,b
   02A4 FD                  554 	mov	r5,a
   02A5 E5 81               555 	mov	a,sp
   02A7 24 FC               556 	add	a,#0xfc
   02A9 F5 81               557 	mov	sp,a
   02AB D0*00               558 	pop	bits
   02AD E5*00               559 	mov	a,_bp
   02AF 24 05               560 	add	a,#0x05
   02B1 F8                  561 	mov	r0,a
   02B2 A6 02               562 	mov	@r0,ar2
   02B4 08                  563 	inc	r0
   02B5 A6 03               564 	mov	@r0,ar3
   02B7 08                  565 	inc	r0
   02B8 A6 04               566 	mov	@r0,ar4
   02BA 08                  567 	inc	r0
   02BB A6 05               568 	mov	@r0,ar5
                            569 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
   02BD 02s01rC1            570 	ljmp	00125$
   02C0                     571 00150$:
   02C0 E5*00               572 	mov	a,_bp
   02C2 24 0C               573 	add	a,#0x0c
   02C4 F8                  574 	mov	r0,a
   02C5 86 03               575 	mov	ar3,@r0
   02C7 08                  576 	inc	r0
   02C8 86 04               577 	mov	ar4,@r0
   02CA 08                  578 	inc	r0
   02CB 86 06               579 	mov	ar6,@r0
   02CD                     580 00110$:
                            581 ;	_atof.c:72: if (toupper(*s)=='E')
   02CD 8B 82               582 	mov	dpl,r3
   02CF 8C 83               583 	mov	dph,r4
   02D1 8E F0               584 	mov	b,r6
   02D3 12s00r00            585 	lcall	__gptrget
   02D6 F5 82               586 	mov	dpl,a
   02D8 C0 03               587 	push	ar3
   02DA C0 04               588 	push	ar4
   02DC C0 06               589 	push	ar6
   02DE C0*00               590 	push	bits
   02E0 12s00r00            591 	lcall	_islower
   02E3 E5 82               592 	mov	a,dpl
   02E5 D0*00               593 	pop	bits
   02E7 D0 06               594 	pop	ar6
   02E9 D0 04               595 	pop	ar4
   02EB D0 03               596 	pop	ar3
   02ED 60 0F               597 	jz	00131$
   02EF 8B 82               598 	mov	dpl,r3
   02F1 8C 83               599 	mov	dph,r4
   02F3 8E F0               600 	mov	b,r6
   02F5 12s00r00            601 	lcall	__gptrget
   02F8 FA                  602 	mov	r2,a
   02F9 53 02 DF            603 	anl	ar2,#0xDF
   02FC 80 0A               604 	sjmp	00132$
   02FE                     605 00131$:
   02FE 8B 82               606 	mov	dpl,r3
   0300 8C 83               607 	mov	dph,r4
   0302 8E F0               608 	mov	b,r6
   0304 12s00r00            609 	lcall	__gptrget
   0307 FA                  610 	mov	r2,a
   0308                     611 00132$:
   0308 BA 45 02            612 	cjne	r2,#0x45,00161$
   030B 80 03               613 	sjmp	00162$
   030D                     614 00161$:
   030D 02s03rB7            615 	ljmp	00118$
   0310                     616 00162$:
                            617 ;	_atof.c:74: s++;
   0310 0B                  618 	inc	r3
   0311 BB 00 01            619 	cjne	r3,#0x00,00163$
   0314 0C                  620 	inc	r4
   0315                     621 00163$:
                            622 ;	_atof.c:75: iexp=(signed char)atoi(s);
   0315 8B 82               623 	mov	dpl,r3
   0317 8C 83               624 	mov	dph,r4
   0319 8E F0               625 	mov	b,r6
   031B C0*00               626 	push	bits
   031D 12s00r00            627 	lcall	_atoi
   0320 AA 82               628 	mov	r2,dpl
   0322 AB 83               629 	mov	r3,dph
   0324 D0*00               630 	pop	bits
                            631 ;	_atof.c:77: while(iexp!=0)
   0326                     632 00114$:
   0326 EA                  633 	mov	a,r2
   0327 70 03               634 	jnz	00164$
   0329 02s03rB7            635 	ljmp	00118$
   032C                     636 00164$:
                            637 ;	_atof.c:79: if(iexp<0)
   032C EA                  638 	mov	a,r2
   032D 30 E7 43            639 	jnb	acc.7,00112$
                            640 ;	_atof.c:81: value*=0.1;
   0330 C0 02               641 	push	ar2
   0332 C0*00               642 	push	bits
   0334 A8*00               643 	mov	r0,_bp
   0336 08                  644 	inc	r0
   0337 E6                  645 	mov	a,@r0
   0338 C0 E0               646 	push	acc
   033A 08                  647 	inc	r0
   033B E6                  648 	mov	a,@r0
   033C C0 E0               649 	push	acc
   033E 08                  650 	inc	r0
   033F E6                  651 	mov	a,@r0
   0340 C0 E0               652 	push	acc
   0342 08                  653 	inc	r0
   0343 E6                  654 	mov	a,@r0
   0344 C0 E0               655 	push	acc
   0346 90 CC CD            656 	mov	dptr,#0xCCCD
   0349 75 F0 CC            657 	mov	b,#0xCC
   034C 74 3D               658 	mov	a,#0x3D
   034E 12s00r00            659 	lcall	___fsmul
   0351 AB 82               660 	mov	r3,dpl
   0353 AC 83               661 	mov	r4,dph
   0355 AD F0               662 	mov	r5,b
   0357 FE                  663 	mov	r6,a
   0358 E5 81               664 	mov	a,sp
   035A 24 FC               665 	add	a,#0xfc
   035C F5 81               666 	mov	sp,a
   035E D0*00               667 	pop	bits
   0360 D0 02               668 	pop	ar2
   0362 A8*00               669 	mov	r0,_bp
   0364 08                  670 	inc	r0
   0365 A6 03               671 	mov	@r0,ar3
   0367 08                  672 	inc	r0
   0368 A6 04               673 	mov	@r0,ar4
   036A 08                  674 	inc	r0
   036B A6 05               675 	mov	@r0,ar5
   036D 08                  676 	inc	r0
   036E A6 06               677 	mov	@r0,ar6
                            678 ;	_atof.c:82: iexp++;
   0370 0A                  679 	inc	r2
   0371 80 B3               680 	sjmp	00114$
   0373                     681 00112$:
                            682 ;	_atof.c:86: value*=10.0;
   0373 C0 02               683 	push	ar2
   0375 C0*00               684 	push	bits
   0377 A8*00               685 	mov	r0,_bp
   0379 08                  686 	inc	r0
   037A E6                  687 	mov	a,@r0
   037B C0 E0               688 	push	acc
   037D 08                  689 	inc	r0
   037E E6                  690 	mov	a,@r0
   037F C0 E0               691 	push	acc
   0381 08                  692 	inc	r0
   0382 E6                  693 	mov	a,@r0
   0383 C0 E0               694 	push	acc
   0385 08                  695 	inc	r0
   0386 E6                  696 	mov	a,@r0
   0387 C0 E0               697 	push	acc
   0389 90 00 00            698 	mov	dptr,#0x0000
   038C 75 F0 20            699 	mov	b,#0x20
   038F 74 41               700 	mov	a,#0x41
   0391 12s00r00            701 	lcall	___fsmul
   0394 AB 82               702 	mov	r3,dpl
   0396 AC 83               703 	mov	r4,dph
   0398 AD F0               704 	mov	r5,b
   039A FE                  705 	mov	r6,a
   039B E5 81               706 	mov	a,sp
   039D 24 FC               707 	add	a,#0xfc
   039F F5 81               708 	mov	sp,a
   03A1 D0*00               709 	pop	bits
   03A3 D0 02               710 	pop	ar2
   03A5 A8*00               711 	mov	r0,_bp
   03A7 08                  712 	inc	r0
   03A8 A6 03               713 	mov	@r0,ar3
   03AA 08                  714 	inc	r0
   03AB A6 04               715 	mov	@r0,ar4
   03AD 08                  716 	inc	r0
   03AE A6 05               717 	mov	@r0,ar5
   03B0 08                  718 	inc	r0
   03B1 A6 06               719 	mov	@r0,ar6
                            720 ;	_atof.c:87: iexp--;
   03B3 1A                  721 	dec	r2
   03B4 02s03r26            722 	ljmp	00114$
   03B7                     723 00118$:
                            724 ;	_atof.c:93: if(sign) value*=-1.0;
   03B7 30*00 10            725 	jnb	b0,00120$
   03BA A8*00               726 	mov	r0,_bp
   03BC 08                  727 	inc	r0
   03BD E6                  728 	mov	a,@r0
   03BE F6                  729 	mov	@r0,a
   03BF 08                  730 	inc	r0
   03C0 E6                  731 	mov	a,@r0
   03C1 F6                  732 	mov	@r0,a
   03C2 08                  733 	inc	r0
   03C3 E6                  734 	mov	a,@r0
   03C4 F6                  735 	mov	@r0,a
   03C5 08                  736 	inc	r0
   03C6 E6                  737 	mov	a,@r0
   03C7 B2 E7               738 	cpl	acc.7
   03C9 F6                  739 	mov	@r0,a
   03CA                     740 00120$:
                            741 ;	_atof.c:94: return (value);
   03CA A8*00               742 	mov	r0,_bp
   03CC 08                  743 	inc	r0
   03CD 86 82               744 	mov	dpl,@r0
   03CF 08                  745 	inc	r0
   03D0 86 83               746 	mov	dph,@r0
   03D2 08                  747 	inc	r0
   03D3 86 F0               748 	mov	b,@r0
   03D5 08                  749 	inc	r0
   03D6 E6                  750 	mov	a,@r0
   03D7 85*00 81            751 	mov	sp,_bp
   03DA D0*00               752 	pop	_bp
   03DC 22                  753 	ret
                            754 	.area CSEG    (CODE)
                            755 	.area CONST   (CODE)
                            756 	.area XINIT   (CODE)
                            757 	.area CABS    (ABS,CODE)
