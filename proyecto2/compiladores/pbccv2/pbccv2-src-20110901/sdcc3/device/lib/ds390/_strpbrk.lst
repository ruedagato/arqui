                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:17 2015
                              5 ;--------------------------------------------------------
                              6 	.module _strpbrk
                              7 	.optsdcc -mds390 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _strpbrk_PARM_2
                             31 	.globl _strpbrk
                             32 ;--------------------------------------------------------
                             33 ; special function registers
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; special function bits
                             37 ;--------------------------------------------------------
                             38 ;--------------------------------------------------------
                             39 ; overlayable register banks
                             40 ;--------------------------------------------------------
                             41 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      42 	.ds 8
                             43 ;--------------------------------------------------------
                             44 ; internal ram data
                             45 ;--------------------------------------------------------
                             46 	.area DSEG    (DATA)
                             47 ;--------------------------------------------------------
                             48 ; overlayable items in internal ram 
                             49 ;--------------------------------------------------------
                             50 	.area OSEG    (OVR,DATA)
                             51 ;--------------------------------------------------------
                             52 ; indirectly addressable internal ram data
                             53 ;--------------------------------------------------------
                             54 	.area ISEG    (DATA)
                             55 ;--------------------------------------------------------
                             56 ; absolute internal ram data
                             57 ;--------------------------------------------------------
                             58 	.area IABS    (ABS,DATA)
                             59 	.area IABS    (ABS,DATA)
                             60 ;--------------------------------------------------------
                             61 ; bit data
                             62 ;--------------------------------------------------------
                             63 	.area BSEG    (BIT)
                             64 ;--------------------------------------------------------
                             65 ; paged external ram data
                             66 ;--------------------------------------------------------
                             67 	.area PSEG    (PAG,XDATA)
                             68 ;--------------------------------------------------------
                             69 ; external ram data
                             70 ;--------------------------------------------------------
                             71 	.area XSEG    (XDATA)
   0000                      72 _strpbrk_PARM_2:
   0000                      73 	.ds 4
   0004                      74 _strpbrk_string_1_1:
   0004                      75 	.ds 4
   0008                      76 _strpbrk_ret_1_1:
   0008                      77 	.ds 4
   000C                      78 _strpbrk_p_2_2:
   000C                      79 	.ds 4
                             80 ;--------------------------------------------------------
                             81 ; absolute external ram data
                             82 ;--------------------------------------------------------
                             83 	.area XABS    (ABS,XDATA)
                             84 ;--------------------------------------------------------
                             85 ; external initialized ram data
                             86 ;--------------------------------------------------------
                             87 	.area XISEG   (XDATA)
                             88 ;--------------------------------------------------------
                             89 ; global & static initialisations
                             90 ;--------------------------------------------------------
                             91 	.area HOME    (CODE)
                             92 	.area GSINIT  (CODE)
                             93 	.area GSFINAL (CODE)
                             94 	.area GSINIT  (CODE)
                             95 ;--------------------------------------------------------
                             96 ; Home
                             97 ;--------------------------------------------------------
                             98 	.area HOME    (CODE)
                             99 	.area HOME    (CODE)
                            100 ;--------------------------------------------------------
                            101 ; code
                            102 ;--------------------------------------------------------
                            103 	.area CSEG    (CODE)
                            104 ;------------------------------------------------------------
                            105 ;Allocation info for local variables in function 'strpbrk'
                            106 ;------------------------------------------------------------
                            107 ;ch                        Allocated to registers r7 
                            108 ;control                   Allocated with name '_strpbrk_PARM_2'
                            109 ;string                    Allocated with name '_strpbrk_string_1_1'
                            110 ;ret                       Allocated with name '_strpbrk_ret_1_1'
                            111 ;p                         Allocated with name '_strpbrk_p_2_2'
                            112 ;------------------------------------------------------------
                            113 ;	_strpbrk.c:31: char * strpbrk (
                            114 ;	-----------------------------------------
                            115 ;	 function strpbrk
                            116 ;	-----------------------------------------
   0000                     117 _strpbrk:
                    0002    118 	ar2 = 0x02
                    0003    119 	ar3 = 0x03
                    0004    120 	ar4 = 0x04
                    0005    121 	ar5 = 0x05
                    0006    122 	ar6 = 0x06
                    0007    123 	ar7 = 0x07
                    0000    124 	ar0 = 0x00
                    0001    125 	ar1 = 0x01
   0000 75 86 01            126 	mov     dps, #1
   0003 90s00r00r04         127 	mov     dptr, #_strpbrk_string_1_1
   0007 E5 82               128 	mov	a,dpl
   0009 F0                  129 	movx	@dptr,a
   000A A3                  130 	inc	dptr
   000B E5 83               131 	mov	a,dph
   000D F0                  132 	movx	@dptr,a
   000E A3                  133 	inc	dptr
   000F E5 93               134 	mov	a,dpx
   0011 F0                  135 	movx	@dptr,a
   0012 A3                  136 	inc	dptr
   0013 E5 F0               137 	mov	a,b
   0015 F0                  138 	movx	@dptr,a
   0016 75 86 00            139 	mov	dps,#0
                            140 ;	_strpbrk.c:36: char *ret = NULL;
                            141 ;	genAssign: resultIsFar = TRUE
   0019 90s00r00r08         142 	mov	dptr,#_strpbrk_ret_1_1
   001D E4                  143 	clr	a
   001E F0                  144 	movx	@dptr,a
   001F A3                  145 	inc	dptr
   0020 F0                  146 	movx	@dptr,a
   0021 A3                  147 	inc	dptr
   0022 F0                  148 	movx	@dptr,a
   0023 A3                  149 	inc	dptr
   0024 E4                  150 	clr  a
   0025 F0                  151 	movx	@dptr,a
                            152 ;	_strpbrk.c:39: while (ch = *control) {
   0026 90s00r00r00         153 	mov	dptr,#_strpbrk_PARM_2
                            154 ;	genAssign: resultIsFar = FALSE
   002A E0                  155 	movx	a,@dptr
   002B FA                  156 	mov	r2,a
   002C A3                  157 	inc	dptr
   002D E0                  158 	movx	a,@dptr
   002E FB                  159 	mov	r3,a
   002F A3                  160 	inc	dptr
   0030 E0                  161 	movx	a,@dptr
   0031 FC                  162 	mov	r4,a
   0032 A3                  163 	inc	dptr
   0033 E0                  164 	movx	a,@dptr
   0034 FD                  165 	mov	r5,a
   0035                     166 00105$:
   0035 8A 82               167 	mov	dpl,r2
   0037 8B 83               168 	mov	dph,r3
   0039 8C 93               169 	mov	dpx,r4
   003B 8D F0               170 	mov	b,r5
   003D 12s00r00r00         171 	lcall	__gptrget
                            172 ;	genAssign: resultIsFar = FALSE
   0041 FE                  173 	mov  r6,a
   0042 8E 07               174 	mov  ar7,r6 
   0044 70 04               175 	jnz	00115$
   0046 02s00r01r1D         176 	ljmp	00107$
   004A                     177 00115$:
                            178 ;	_strpbrk.c:40: char * p = strchr(string, ch);
                            179 ;	genAssign: resultIsFar = TRUE
   004A 90s00r00r00         180 	mov	dptr,#_strchr_PARM_2
   004E EF                  181 	mov	a,r7
   004F F0                  182 	movx	@dptr,a
   0050 C0 02               183 	push	ar2
   0052 C0 03               184 	push	ar3
   0054 C0 04               185 	push	ar4
   0056 C0 05               186 	push	ar5
   0058 05 86               187 	inc	dps
   005A 90s00r00r04         188 	mov	dptr,#_strpbrk_string_1_1
   005E E0                  189 	movx	a,@dptr
   005F F5 82               190 	mov	dpl,a
   0061 A3                  191 	inc	dptr
   0062 E0                  192 	movx	a,@dptr
   0063 F5 83               193 	mov	dph,a
   0065 A3                  194 	inc	dptr
   0066 E0                  195 	movx	a,@dptr
   0067 F5 93               196 	mov	dpx,a
   0069 A3                  197 	inc	dptr
   006A E0                  198 	movx	a,@dptr
   006B F5 F0               199 	mov	b,a
   006D 75 86 00            200 	mov	dps,#0
   0070 12s00r00r00         201 	lcall	_strchr
   0074 AE 82               202 	mov	r6,dpl
   0076 AF 83               203 	mov	r7,dph
   0078 A8 93               204 	mov	r0,dpx
   007A A9 F0               205 	mov	r1,b
   007C D0 05               206 	pop	ar5
   007E D0 04               207 	pop	ar4
   0080 D0 03               208 	pop	ar3
   0082 D0 02               209 	pop	ar2
                            210 ;	genAssign: resultIsFar = TRUE
   0084 90s00r00r0C         211 	mov	dptr,#_strpbrk_p_2_2
   0088 EE                  212 	mov	a,r6
   0089 F0                  213 	movx	@dptr,a
   008A A3                  214 	inc	dptr
   008B EF                  215 	mov	a,r7
   008C F0                  216 	movx	@dptr,a
   008D A3                  217 	inc	dptr
   008E E8                  218 	mov	a,r0
   008F F0                  219 	movx	@dptr,a
   0090 A3                  220 	inc	dptr
   0091 E9                  221 	mov	a,r1
   0092 F0                  222 	movx	@dptr,a
                            223 ;	_strpbrk.c:41: if (p != NULL && (ret == NULL || p < ret)) {
   0093 90s00r00r0C         224 	mov	dptr,#_strpbrk_p_2_2
   0097 E0                  225 	movx	a,@dptr
   0098 B4 00 0C            226 	cjne	a,#0x00,00116$
   009B A3                  227 	inc	dptr
   009C E0                  228 	movx	a,@dptr
   009D B4 00 07            229 	cjne	a,#0x00,00116$
   00A0 A3                  230 	inc	dptr
   00A1 E0                  231 	movx	a,@dptr
   00A2 B4 00 02            232 	cjne	a,#0x00,00116$
   00A5 80 69               233 	sjmp 00102$
   00A7                     234 00116$:
   00A7 90s00r00r08         235 	mov	dptr,#_strpbrk_ret_1_1
   00AB E0                  236 	movx	a,@dptr
   00AC B4 00 0C            237 	cjne	a,#0x00,00117$
   00AF A3                  238 	inc	dptr
   00B0 E0                  239 	movx	a,@dptr
   00B1 B4 00 07            240 	cjne	a,#0x00,00117$
   00B4 A3                  241 	inc	dptr
   00B5 E0                  242 	movx	a,@dptr
   00B6 B4 00 02            243 	cjne	a,#0x00,00117$
   00B9 80 39               244 	sjmp 00101$
   00BB                     245 00117$:
   00BB C0 02               246 	push	ar2
   00BD C0 03               247 	push	ar3
   00BF C0 04               248 	push	ar4
   00C1 C0 05               249 	push	ar5
   00C3 90s00r00r0C         250 	mov	dptr,#_strpbrk_p_2_2
                            251 ;	genAssign: resultIsFar = FALSE
   00C7 E0                  252 	movx	a,@dptr
   00C8 FA                  253 	mov	r2,a
   00C9 A3                  254 	inc	dptr
   00CA E0                  255 	movx	a,@dptr
   00CB FB                  256 	mov	r3,a
   00CC A3                  257 	inc	dptr
   00CD E0                  258 	movx	a,@dptr
   00CE FC                  259 	mov	r4,a
   00CF A3                  260 	inc	dptr
   00D0 E0                  261 	movx	a,@dptr
   00D1 FD                  262 	mov	r5,a
   00D2 90s00r00r08         263 	mov	dptr,#_strpbrk_ret_1_1
                            264 ;	genAssign: resultIsFar = FALSE
   00D6 E0                  265 	movx	a,@dptr
   00D7 FE                  266 	mov	r6,a
   00D8 A3                  267 	inc	dptr
   00D9 E0                  268 	movx	a,@dptr
   00DA FF                  269 	mov	r7,a
   00DB A3                  270 	inc	dptr
   00DC E0                  271 	movx	a,@dptr
   00DD F8                  272 	mov	r0,a
   00DE A3                  273 	inc	dptr
   00DF E0                  274 	movx	a,@dptr
   00E0 F9                  275 	mov	r1,a
   00E1 C3                  276 	clr	c
   00E2 EA                  277 	mov	a,r2
   00E3 9E                  278 	subb	a,r6
   00E4 EB                  279 	mov	a,r3
   00E5 9F                  280 	subb	a,r7
   00E6 EC                  281 	mov	a,r4
   00E7 98                  282 	subb	a,r0
   00E8 ED                  283 	mov	a,r5
   00E9 99                  284 	subb	a,r1
   00EA D0 05               285 	pop	ar5
   00EC D0 04               286 	pop	ar4
   00EE D0 03               287 	pop	ar3
   00F0 D0 02               288 	pop	ar2
   00F2 50 1C               289 	jnc  00102$
   00F4                     290 00118$:
   00F4                     291 00101$:
                            292 ;	_strpbrk.c:42: ret = p;
   00F4 90s00r00r0C         293 	mov	dptr,#_strpbrk_p_2_2
                            294 ;	genAssign: resultIsFar = TRUE
   00F8 75 86 21            295 	mov	dps,#0x21
   00FB 90s00r00r08         296 	mov	dptr,#_strpbrk_ret_1_1
   00FF E0                  297 	movx	a,@dptr
   0100 F0                  298 	movx	@dptr,a
   0101 A3                  299 	inc	dptr
   0102 A3                  300 	inc	dptr
   0103 E0                  301 	movx	a,@dptr
   0104 F0                  302 	movx	@dptr,a
   0105 A3                  303 	inc	dptr
   0106 A3                  304 	inc	dptr
   0107 E0                  305 	movx	a,@dptr
   0108 F0                  306 	movx	@dptr,a
   0109 A3                  307 	inc	dptr
   010A A3                  308 	inc	dptr
   010B E0                  309 	movx	a,@dptr
   010C F0                  310 	movx	@dptr,a
   010D 75 86 00            311 	mov	dps,#0
   0110                     312 00102$:
                            313 ;	_strpbrk.c:44: control++;
   0110 0A                  314 	inc	r2
   0111 BA 00 05            315 	cjne	r2,#0,00119$
   0114 0B                  316 	inc	r3
   0115 BB 00 01            317 	cjne	r3,#0,00119$
   0118 0C                  318 	inc	r4
   0119                     319 00119$:
   0119 02s00r00r35         320 	ljmp	00105$
   011D                     321 00107$:
                            322 ;	_strpbrk.c:47: return (ret);
   011D 75 86 01            323 	mov     dps, #1
   0120 90s00r00r08         324 	mov     dptr, #_strpbrk_ret_1_1
   0124 E0                  325 	movx	a,@dptr
   0125 F5 82               326 	mov	dpl,a
   0127 A3                  327 	inc	dptr
   0128 E0                  328 	movx	a,@dptr
   0129 F5 83               329 	mov	dph,a
   012B A3                  330 	inc	dptr
   012C E0                  331 	movx	a,@dptr
   012D F5 93               332 	mov	dpx,a
   012F A3                  333 	inc	dptr
   0130 E0                  334 	movx	a,@dptr
   0131 F5 F0               335 	mov	b,a
   0133 75 86 00            336 	mov	dps,#0
   0136                     337 00108$:
   0136 22                  338 	ret
                            339 	.area CSEG    (CODE)
                            340 	.area CONST   (CODE)
                            341 	.area XINIT   (CODE)
                            342 	.area CABS    (ABS,CODE)
