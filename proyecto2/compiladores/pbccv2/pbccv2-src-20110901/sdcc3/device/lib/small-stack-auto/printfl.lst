                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:32 2015
                              5 ;--------------------------------------------------------
                              6 	.module printfl
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _CY
                             13 	.globl _AC
                             14 	.globl _F0
                             15 	.globl _RS1
                             16 	.globl _RS0
                             17 	.globl _OV
                             18 	.globl _F1
                             19 	.globl _P
                             20 	.globl _PS
                             21 	.globl _PT1
                             22 	.globl _PX1
                             23 	.globl _PT0
                             24 	.globl _PX0
                             25 	.globl _RD
                             26 	.globl _WR
                             27 	.globl _T1
                             28 	.globl _T0
                             29 	.globl _INT1
                             30 	.globl _INT0
                             31 	.globl _TXD
                             32 	.globl _RXD
                             33 	.globl _P3_7
                             34 	.globl _P3_6
                             35 	.globl _P3_5
                             36 	.globl _P3_4
                             37 	.globl _P3_3
                             38 	.globl _P3_2
                             39 	.globl _P3_1
                             40 	.globl _P3_0
                             41 	.globl _EA
                             42 	.globl _ES
                             43 	.globl _ET1
                             44 	.globl _EX1
                             45 	.globl _ET0
                             46 	.globl _EX0
                             47 	.globl _P2_7
                             48 	.globl _P2_6
                             49 	.globl _P2_5
                             50 	.globl _P2_4
                             51 	.globl _P2_3
                             52 	.globl _P2_2
                             53 	.globl _P2_1
                             54 	.globl _P2_0
                             55 	.globl _SM0
                             56 	.globl _SM1
                             57 	.globl _SM2
                             58 	.globl _REN
                             59 	.globl _TB8
                             60 	.globl _RB8
                             61 	.globl _TI
                             62 	.globl _RI
                             63 	.globl _P1_7
                             64 	.globl _P1_6
                             65 	.globl _P1_5
                             66 	.globl _P1_4
                             67 	.globl _P1_3
                             68 	.globl _P1_2
                             69 	.globl _P1_1
                             70 	.globl _P1_0
                             71 	.globl _TF1
                             72 	.globl _TR1
                             73 	.globl _TF0
                             74 	.globl _TR0
                             75 	.globl _IE1
                             76 	.globl _IT1
                             77 	.globl _IE0
                             78 	.globl _IT0
                             79 	.globl _P0_7
                             80 	.globl _P0_6
                             81 	.globl _P0_5
                             82 	.globl _P0_4
                             83 	.globl _P0_3
                             84 	.globl _P0_2
                             85 	.globl _P0_1
                             86 	.globl _P0_0
                             87 	.globl _B
                             88 	.globl _ACC
                             89 	.globl _PSW
                             90 	.globl _IP
                             91 	.globl _P3
                             92 	.globl _IE
                             93 	.globl _P2
                             94 	.globl _SBUF
                             95 	.globl _SCON
                             96 	.globl _P1
                             97 	.globl _TH1
                             98 	.globl _TH0
                             99 	.globl _TL1
                            100 	.globl _TL0
                            101 	.globl _TMOD
                            102 	.globl _TCON
                            103 	.globl _PCON
                            104 	.globl _DPH
                            105 	.globl _DPL
                            106 	.globl _SP
                            107 	.globl _P0
                            108 	.globl _printf_small
                            109 ;--------------------------------------------------------
                            110 ; special function registers
                            111 ;--------------------------------------------------------
                            112 	.area RSEG    (ABS,DATA)
   0000                     113 	.org 0x0000
                    0080    114 _P0	=	0x0080
                    0081    115 _SP	=	0x0081
                    0082    116 _DPL	=	0x0082
                    0083    117 _DPH	=	0x0083
                    0087    118 _PCON	=	0x0087
                    0088    119 _TCON	=	0x0088
                    0089    120 _TMOD	=	0x0089
                    008A    121 _TL0	=	0x008a
                    008B    122 _TL1	=	0x008b
                    008C    123 _TH0	=	0x008c
                    008D    124 _TH1	=	0x008d
                    0090    125 _P1	=	0x0090
                    0098    126 _SCON	=	0x0098
                    0099    127 _SBUF	=	0x0099
                    00A0    128 _P2	=	0x00a0
                    00A8    129 _IE	=	0x00a8
                    00B0    130 _P3	=	0x00b0
                    00B8    131 _IP	=	0x00b8
                    00D0    132 _PSW	=	0x00d0
                    00E0    133 _ACC	=	0x00e0
                    00F0    134 _B	=	0x00f0
                            135 ;--------------------------------------------------------
                            136 ; special function bits
                            137 ;--------------------------------------------------------
                            138 	.area RSEG    (ABS,DATA)
   0000                     139 	.org 0x0000
                    0080    140 _P0_0	=	0x0080
                    0081    141 _P0_1	=	0x0081
                    0082    142 _P0_2	=	0x0082
                    0083    143 _P0_3	=	0x0083
                    0084    144 _P0_4	=	0x0084
                    0085    145 _P0_5	=	0x0085
                    0086    146 _P0_6	=	0x0086
                    0087    147 _P0_7	=	0x0087
                    0088    148 _IT0	=	0x0088
                    0089    149 _IE0	=	0x0089
                    008A    150 _IT1	=	0x008a
                    008B    151 _IE1	=	0x008b
                    008C    152 _TR0	=	0x008c
                    008D    153 _TF0	=	0x008d
                    008E    154 _TR1	=	0x008e
                    008F    155 _TF1	=	0x008f
                    0090    156 _P1_0	=	0x0090
                    0091    157 _P1_1	=	0x0091
                    0092    158 _P1_2	=	0x0092
                    0093    159 _P1_3	=	0x0093
                    0094    160 _P1_4	=	0x0094
                    0095    161 _P1_5	=	0x0095
                    0096    162 _P1_6	=	0x0096
                    0097    163 _P1_7	=	0x0097
                    0098    164 _RI	=	0x0098
                    0099    165 _TI	=	0x0099
                    009A    166 _RB8	=	0x009a
                    009B    167 _TB8	=	0x009b
                    009C    168 _REN	=	0x009c
                    009D    169 _SM2	=	0x009d
                    009E    170 _SM1	=	0x009e
                    009F    171 _SM0	=	0x009f
                    00A0    172 _P2_0	=	0x00a0
                    00A1    173 _P2_1	=	0x00a1
                    00A2    174 _P2_2	=	0x00a2
                    00A3    175 _P2_3	=	0x00a3
                    00A4    176 _P2_4	=	0x00a4
                    00A5    177 _P2_5	=	0x00a5
                    00A6    178 _P2_6	=	0x00a6
                    00A7    179 _P2_7	=	0x00a7
                    00A8    180 _EX0	=	0x00a8
                    00A9    181 _ET0	=	0x00a9
                    00AA    182 _EX1	=	0x00aa
                    00AB    183 _ET1	=	0x00ab
                    00AC    184 _ES	=	0x00ac
                    00AF    185 _EA	=	0x00af
                    00B0    186 _P3_0	=	0x00b0
                    00B1    187 _P3_1	=	0x00b1
                    00B2    188 _P3_2	=	0x00b2
                    00B3    189 _P3_3	=	0x00b3
                    00B4    190 _P3_4	=	0x00b4
                    00B5    191 _P3_5	=	0x00b5
                    00B6    192 _P3_6	=	0x00b6
                    00B7    193 _P3_7	=	0x00b7
                    00B0    194 _RXD	=	0x00b0
                    00B1    195 _TXD	=	0x00b1
                    00B2    196 _INT0	=	0x00b2
                    00B3    197 _INT1	=	0x00b3
                    00B4    198 _T0	=	0x00b4
                    00B5    199 _T1	=	0x00b5
                    00B6    200 _WR	=	0x00b6
                    00B7    201 _RD	=	0x00b7
                    00B8    202 _PX0	=	0x00b8
                    00B9    203 _PT0	=	0x00b9
                    00BA    204 _PX1	=	0x00ba
                    00BB    205 _PT1	=	0x00bb
                    00BC    206 _PS	=	0x00bc
                    00D0    207 _P	=	0x00d0
                    00D1    208 _F1	=	0x00d1
                    00D2    209 _OV	=	0x00d2
                    00D3    210 _RS0	=	0x00d3
                    00D4    211 _RS1	=	0x00d4
                    00D5    212 _F0	=	0x00d5
                    00D6    213 _AC	=	0x00d6
                    00D7    214 _CY	=	0x00d7
                            215 ;--------------------------------------------------------
                            216 ; overlayable register banks
                            217 ;--------------------------------------------------------
                            218 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     219 	.ds 8
                            220 ;--------------------------------------------------------
                            221 ; internal ram data
                            222 ;--------------------------------------------------------
                            223 	.area DSEG    (DATA)
   0000                     224 _radix:
   0000                     225 	.ds 1
   0001                     226 _str:
   0001                     227 	.ds 3
   0004                     228 _val:
   0004                     229 	.ds 4
                            230 ;--------------------------------------------------------
                            231 ; overlayable items in internal ram 
                            232 ;--------------------------------------------------------
                            233 	.area OSEG    (OVR,DATA)
                            234 ;--------------------------------------------------------
                            235 ; indirectly addressable internal ram data
                            236 ;--------------------------------------------------------
                            237 	.area ISEG    (DATA)
   0000                     238 _printf_small_buffer_4_8:
   0000                     239 	.ds 12
                            240 ;--------------------------------------------------------
                            241 ; absolute internal ram data
                            242 ;--------------------------------------------------------
                            243 	.area IABS    (ABS,DATA)
                            244 	.area IABS    (ABS,DATA)
                            245 ;--------------------------------------------------------
                            246 ; bit data
                            247 ;--------------------------------------------------------
                            248 	.area BSEG    (BIT)
   0000                     249 _long_flag:
   0000                     250 	.ds 1
   0001                     251 _string_flag:
   0001                     252 	.ds 1
   0002                     253 _char_flag:
   0002                     254 	.ds 1
                            255 ;--------------------------------------------------------
                            256 ; paged external ram data
                            257 ;--------------------------------------------------------
                            258 	.area PSEG    (PAG,XDATA)
                            259 ;--------------------------------------------------------
                            260 ; external ram data
                            261 ;--------------------------------------------------------
                            262 	.area XSEG    (XDATA)
                            263 ;--------------------------------------------------------
                            264 ; absolute external ram data
                            265 ;--------------------------------------------------------
                            266 	.area XABS    (ABS,XDATA)
                            267 ;--------------------------------------------------------
                            268 ; external initialized ram data
                            269 ;--------------------------------------------------------
                            270 	.area XISEG   (XDATA)
                            271 	.area HOME    (CODE)
                            272 	.area GSINIT0 (CODE)
                            273 	.area GSINIT1 (CODE)
                            274 	.area GSINIT2 (CODE)
                            275 	.area GSINIT3 (CODE)
                            276 	.area GSINIT4 (CODE)
                            277 	.area GSINIT5 (CODE)
                            278 	.area GSINIT  (CODE)
                            279 	.area GSFINAL (CODE)
                            280 	.area CSEG    (CODE)
                            281 ;--------------------------------------------------------
                            282 ; global & static initialisations
                            283 ;--------------------------------------------------------
                            284 	.area HOME    (CODE)
                            285 	.area GSINIT  (CODE)
                            286 	.area GSFINAL (CODE)
                            287 	.area GSINIT  (CODE)
                            288 ;	printfl.c:54: static __bit  long_flag = 0;
   0000 C2*00               289 	clr	_long_flag
                            290 ;	printfl.c:55: static __bit  string_flag =0;
   0002 C2*01               291 	clr	_string_flag
                            292 ;	printfl.c:56: static __bit  char_flag = 0;
   0004 C2*02               293 	clr	_char_flag
                            294 ;--------------------------------------------------------
                            295 ; Home
                            296 ;--------------------------------------------------------
                            297 	.area HOME    (CODE)
                            298 	.area HOME    (CODE)
                            299 ;--------------------------------------------------------
                            300 ; code
                            301 ;--------------------------------------------------------
                            302 	.area CSEG    (CODE)
                            303 ;------------------------------------------------------------
                            304 ;Allocation info for local variables in function 'printf_small'
                            305 ;------------------------------------------------------------
                            306 ;fmt                       Allocated to stack - offset -5
                            307 ;ap                        Allocated to registers r2 
                            308 ;stri                      Allocated to registers 
                            309 ;buffer                    Allocated with name '_printf_small_buffer_4_8'
                            310 ;------------------------------------------------------------
                            311 ;	printfl.c:125: void printf_small (char * fmt, ... ) __reentrant
                            312 ;	-----------------------------------------
                            313 ;	 function printf_small
                            314 ;	-----------------------------------------
   0000                     315 _printf_small:
                    0002    316 	ar2 = 0x02
                    0003    317 	ar3 = 0x03
                    0004    318 	ar4 = 0x04
                    0005    319 	ar5 = 0x05
                    0006    320 	ar6 = 0x06
                    0007    321 	ar7 = 0x07
                    0000    322 	ar0 = 0x00
                    0001    323 	ar1 = 0x01
   0000 C0*00               324 	push	_bp
   0002 85 81*00            325 	mov	_bp,sp
                            326 ;	printfl.c:129: va_start(ap,fmt);
   0005 E5*00               327 	mov	a,_bp
   0007 24 FB               328 	add	a,#0xfb
   0009 FA                  329 	mov	r2,a
   000A                     330 00130$:
                            331 ;	printfl.c:131: for (; *fmt ; fmt++ ) {
   000A E5*00               332 	mov	a,_bp
   000C 24 FB               333 	add	a,#0xfb
   000E F8                  334 	mov	r0,a
   000F 86 03               335 	mov	ar3,@r0
   0011 08                  336 	inc	r0
   0012 86 04               337 	mov	ar4,@r0
   0014 08                  338 	inc	r0
   0015 86 05               339 	mov	ar5,@r0
   0017 8B 82               340 	mov	dpl,r3
   0019 8C 83               341 	mov	dph,r4
   001B 8D F0               342 	mov	b,r5
   001D 12s00r00            343 	lcall	__gptrget
   0020 FE                  344 	mov	r6,a
   0021 70 03               345 	jnz	00155$
   0023 02s01rC2            346 	ljmp	00134$
   0026                     347 00155$:
                            348 ;	printfl.c:132: if (*fmt == '%') {
   0026 BE 25 02            349 	cjne	r6,#0x25,00156$
   0029 80 03               350 	sjmp	00157$
   002B                     351 00156$:
   002B 02s01rAB            352 	ljmp	00128$
   002E                     353 00157$:
                            354 ;	printfl.c:133: long_flag = string_flag = char_flag = 0;
   002E C2*02               355 	clr	_char_flag
   0030 C2*01               356 	clr	_string_flag
   0032 C2*00               357 	clr	_long_flag
                            358 ;	printfl.c:134: fmt++ ;
   0034 E5*00               359 	mov	a,_bp
   0036 24 FB               360 	add	a,#0xfb
   0038 F8                  361 	mov	r0,a
   0039 74 01               362 	mov	a,#0x01
   003B 2B                  363 	add	a,r3
   003C F6                  364 	mov	@r0,a
   003D E4                  365 	clr	a
   003E 3C                  366 	addc	a,r4
   003F 08                  367 	inc	r0
   0040 F6                  368 	mov	@r0,a
   0041 08                  369 	inc	r0
   0042 A6 05               370 	mov	@r0,ar5
                            371 ;	printfl.c:135: switch (*fmt) {
   0044 E5*00               372 	mov	a,_bp
   0046 24 FB               373 	add	a,#0xfb
   0048 F8                  374 	mov	r0,a
   0049 86 03               375 	mov	ar3,@r0
   004B 08                  376 	inc	r0
   004C 86 04               377 	mov	ar4,@r0
   004E 08                  378 	inc	r0
   004F 86 05               379 	mov	ar5,@r0
   0051 8B 82               380 	mov	dpl,r3
   0053 8C 83               381 	mov	dph,r4
   0055 8D F0               382 	mov	b,r5
   0057 12s00r00            383 	lcall	__gptrget
   005A FF                  384 	mov	r7,a
   005B BF 68 02            385 	cjne	r7,#0x68,00158$
   005E 80 17               386 	sjmp	00102$
   0060                     387 00158$:
   0060 BF 6C 26            388 	cjne	r7,#0x6C,00103$
                            389 ;	printfl.c:137: long_flag = 1;
   0063 D2*00               390 	setb	_long_flag
                            391 ;	printfl.c:138: fmt++;
   0065 E5*00               392 	mov	a,_bp
   0067 24 FB               393 	add	a,#0xfb
   0069 F8                  394 	mov	r0,a
   006A 74 01               395 	mov	a,#0x01
   006C 2B                  396 	add	a,r3
   006D F6                  397 	mov	@r0,a
   006E E4                  398 	clr	a
   006F 3C                  399 	addc	a,r4
   0070 08                  400 	inc	r0
   0071 F6                  401 	mov	@r0,a
   0072 08                  402 	inc	r0
   0073 A6 05               403 	mov	@r0,ar5
                            404 ;	printfl.c:139: break;
                            405 ;	printfl.c:140: case 'h':
   0075 80 12               406 	sjmp	00103$
   0077                     407 00102$:
                            408 ;	printfl.c:141: char_flag = 1;
   0077 D2*02               409 	setb	_char_flag
                            410 ;	printfl.c:142: fmt++;
   0079 E5*00               411 	mov	a,_bp
   007B 24 FB               412 	add	a,#0xfb
   007D F8                  413 	mov	r0,a
   007E 74 01               414 	mov	a,#0x01
   0080 2B                  415 	add	a,r3
   0081 F6                  416 	mov	@r0,a
   0082 E4                  417 	clr	a
   0083 3C                  418 	addc	a,r4
   0084 08                  419 	inc	r0
   0085 F6                  420 	mov	@r0,a
   0086 08                  421 	inc	r0
   0087 A6 05               422 	mov	@r0,ar5
                            423 ;	printfl.c:143: }
   0089                     424 00103$:
                            425 ;	printfl.c:145: switch (*fmt) {
   0089 E5*00               426 	mov	a,_bp
   008B 24 FB               427 	add	a,#0xfb
   008D F8                  428 	mov	r0,a
   008E 86 03               429 	mov	ar3,@r0
   0090 08                  430 	inc	r0
   0091 86 04               431 	mov	ar4,@r0
   0093 08                  432 	inc	r0
   0094 86 05               433 	mov	ar5,@r0
   0096 8B 82               434 	mov	dpl,r3
   0098 8C 83               435 	mov	dph,r4
   009A 8D F0               436 	mov	b,r5
   009C 12s00r00            437 	lcall	__gptrget
   009F FB                  438 	mov	r3,a
   00A0 BB 63 02            439 	cjne	r3,#0x63,00161$
   00A3 80 22               440 	sjmp	00107$
   00A5                     441 00161$:
   00A5 BB 64 02            442 	cjne	r3,#0x64,00162$
   00A8 80 13               443 	sjmp	00105$
   00AA                     444 00162$:
   00AA BB 6F 02            445 	cjne	r3,#0x6F,00163$
   00AD 80 1D               446 	sjmp	00108$
   00AF                     447 00163$:
   00AF BB 73 02            448 	cjne	r3,#0x73,00164$
   00B2 80 05               449 	sjmp	00104$
   00B4                     450 00164$:
                            451 ;	printfl.c:146: case 's':
   00B4 BB 78 18            452 	cjne	r3,#0x78,00109$
   00B7 80 09               453 	sjmp	00106$
   00B9                     454 00104$:
                            455 ;	printfl.c:147: string_flag = 1;
   00B9 D2*01               456 	setb	_string_flag
                            457 ;	printfl.c:148: break;
                            458 ;	printfl.c:149: case 'd':
   00BB 80 12               459 	sjmp	00109$
   00BD                     460 00105$:
                            461 ;	printfl.c:150: radix = 10;
   00BD 75*00 0A            462 	mov	_radix,#0x0A
                            463 ;	printfl.c:151: break;
                            464 ;	printfl.c:152: case 'x':
   00C0 80 0D               465 	sjmp	00109$
   00C2                     466 00106$:
                            467 ;	printfl.c:153: radix = 16;
   00C2 75*00 10            468 	mov	_radix,#0x10
                            469 ;	printfl.c:154: break;
                            470 ;	printfl.c:155: case 'c':
   00C5 80 08               471 	sjmp	00109$
   00C7                     472 00107$:
                            473 ;	printfl.c:156: radix = 0;
   00C7 75*00 00            474 	mov	_radix,#0x00
                            475 ;	printfl.c:157: break;
                            476 ;	printfl.c:158: case 'o':
   00CA 80 03               477 	sjmp	00109$
   00CC                     478 00108$:
                            479 ;	printfl.c:159: radix = 8;
   00CC 75*00 08            480 	mov	_radix,#0x08
                            481 ;	printfl.c:161: }
   00CF                     482 00109$:
                            483 ;	printfl.c:163: if (string_flag) {
   00CF 30*01 46            484 	jnb	_string_flag,00114$
                            485 ;	printfl.c:164: str = va_arg(ap, char *);
   00D2 EA                  486 	mov	a,r2
   00D3 24 FD               487 	add	a,#0xfd
   00D5 F8                  488 	mov	r0,a
   00D6 FA                  489 	mov	r2,a
   00D7 86*01               490 	mov	_str,@r0
   00D9 08                  491 	inc	r0
   00DA 86*02               492 	mov	(_str + 1),@r0
   00DC 08                  493 	inc	r0
   00DD 86*03               494 	mov	(_str + 2),@r0
   00DF 18                  495 	dec	r0
   00E0 18                  496 	dec	r0
                            497 ;	printfl.c:165: while (*str) putchar(*str++);
   00E1                     498 00110$:
   00E1 AB*01               499 	mov	r3,_str
   00E3 AC*02               500 	mov	r4,(_str + 1)
   00E5 AD*03               501 	mov	r5,(_str + 2)
   00E7 8B 82               502 	mov	dpl,r3
   00E9 8C 83               503 	mov	dph,r4
   00EB 8D F0               504 	mov	b,r5
   00ED 12s00r00            505 	lcall	__gptrget
   00F0 70 03               506 	jnz	00167$
   00F2 02s01rB4            507 	ljmp	00132$
   00F5                     508 00167$:
   00F5 AB*01               509 	mov	r3,_str
   00F7 AC*02               510 	mov	r4,(_str + 1)
   00F9 AD*03               511 	mov	r5,(_str + 2)
   00FB 8B 82               512 	mov	dpl,r3
   00FD 8C 83               513 	mov	dph,r4
   00FF 8D F0               514 	mov	b,r5
   0101 12s00r00            515 	lcall	__gptrget
   0104 FB                  516 	mov	r3,a
   0105 05*01               517 	inc	_str
   0107 E4                  518 	clr	a
   0108 B5*01 02            519 	cjne	a,_str,00168$
   010B 05*02               520 	inc	(_str + 1)
   010D                     521 00168$:
   010D 8B 82               522 	mov	dpl,r3
   010F C0 02               523 	push	ar2
   0111 12s00r00            524 	lcall	_putchar
   0114 D0 02               525 	pop	ar2
                            526 ;	printfl.c:166: continue ;
   0116 80 C9               527 	sjmp	00110$
   0118                     528 00114$:
                            529 ;	printfl.c:169: if (long_flag)
   0118 30*00 15            530 	jnb	_long_flag,00119$
                            531 ;	printfl.c:170: val = va_arg(ap,long);
   011B EA                  532 	mov	a,r2
   011C 24 FC               533 	add	a,#0xfc
   011E F8                  534 	mov	r0,a
   011F FA                  535 	mov	r2,a
   0120 86*04               536 	mov	_val,@r0
   0122 08                  537 	inc	r0
   0123 86*05               538 	mov	(_val + 1),@r0
   0125 08                  539 	inc	r0
   0126 86*06               540 	mov	(_val + 2),@r0
   0128 08                  541 	inc	r0
   0129 86*07               542 	mov	(_val + 3),@r0
   012B 18                  543 	dec	r0
   012C 18                  544 	dec	r0
   012D 18                  545 	dec	r0
   012E 80 2D               546 	sjmp	00120$
   0130                     547 00119$:
                            548 ;	printfl.c:172: if (char_flag)
   0130 30*02 13            549 	jnb	_char_flag,00116$
                            550 ;	printfl.c:173: val = va_arg(ap,char);
   0133 EA                  551 	mov	a,r2
   0134 14                  552 	dec	a
   0135 F8                  553 	mov	r0,a
   0136 FA                  554 	mov	r2,a
   0137 E6                  555 	mov	a,@r0
   0138 FB                  556 	mov	r3,a
   0139 F5*04               557 	mov	_val,a
   013B 33                  558 	rlc	a
   013C 95 E0               559 	subb	a,acc
   013E F5*05               560 	mov	(_val + 1),a
   0140 F5*06               561 	mov	(_val + 2),a
   0142 F5*07               562 	mov	(_val + 3),a
   0144 80 17               563 	sjmp	00120$
   0146                     564 00116$:
                            565 ;	printfl.c:175: val = va_arg(ap,int);
   0146 EA                  566 	mov	a,r2
   0147 24 FE               567 	add	a,#0xfe
   0149 F8                  568 	mov	r0,a
   014A FA                  569 	mov	r2,a
   014B 86 03               570 	mov	ar3,@r0
   014D 08                  571 	inc	r0
   014E 86 04               572 	mov	ar4,@r0
   0150 18                  573 	dec	r0
   0151 8B*04               574 	mov	_val,r3
   0153 EC                  575 	mov	a,r4
   0154 F5*05               576 	mov	(_val + 1),a
   0156 33                  577 	rlc	a
   0157 95 E0               578 	subb	a,acc
   0159 F5*06               579 	mov	(_val + 2),a
   015B F5*07               580 	mov	(_val + 3),a
   015D                     581 00120$:
                            582 ;	printfl.c:180: if (radix)
   015D E5*00               583 	mov	a,_radix
   015F 60 3E               584 	jz	00125$
                            585 ;	printfl.c:185: _ltoa (val, buffer, radix);
   0161 AB*00               586 	mov	r3,_radix
   0163 C0 02               587 	push	ar2
   0165 C0 03               588 	push	ar3
   0167 74r00               589 	mov	a,#_printf_small_buffer_4_8
   0169 C0 E0               590 	push	acc
   016B 74s00               591 	mov	a,#(_printf_small_buffer_4_8 >> 8)
   016D C0 E0               592 	push	acc
   016F 74 40               593 	mov	a,#0x40
   0171 C0 E0               594 	push	acc
   0173 85*04 82            595 	mov	dpl,_val
   0176 85*05 83            596 	mov	dph,(_val + 1)
   0179 85*06 F0            597 	mov	b,(_val + 2)
   017C E5*07               598 	mov	a,(_val + 3)
   017E 12s00r00            599 	lcall	__ltoa
   0181 E5 81               600 	mov	a,sp
   0183 24 FC               601 	add	a,#0xfc
   0185 F5 81               602 	mov	sp,a
   0187 D0 02               603 	pop	ar2
                            604 ;	printfl.c:186: stri = buffer;
                            605 ;	printfl.c:187: while (*stri)
   0189 78r00               606 	mov	r0,#_printf_small_buffer_4_8
   018B                     607 00121$:
   018B E6                  608 	mov	a,@r0
   018C FB                  609 	mov	r3,a
   018D 60 25               610 	jz	00132$
                            611 ;	printfl.c:189: putchar (*stri);
   018F 8B 82               612 	mov	dpl,r3
   0191 C0 02               613 	push	ar2
   0193 C0 00               614 	push	ar0
   0195 12s00r00            615 	lcall	_putchar
   0198 D0 00               616 	pop	ar0
   019A D0 02               617 	pop	ar2
                            618 ;	printfl.c:190: stri++;
   019C 08                  619 	inc	r0
   019D 80 EC               620 	sjmp	00121$
   019F                     621 00125$:
                            622 ;	printfl.c:195: putchar((char)val);
   019F 85*04 82            623 	mov	dpl,_val
   01A2 C0 02               624 	push	ar2
   01A4 12s00r00            625 	lcall	_putchar
   01A7 D0 02               626 	pop	ar2
   01A9 80 09               627 	sjmp	00132$
   01AB                     628 00128$:
                            629 ;	printfl.c:198: putchar(*fmt);
   01AB 8E 82               630 	mov	dpl,r6
   01AD C0 02               631 	push	ar2
   01AF 12s00r00            632 	lcall	_putchar
   01B2 D0 02               633 	pop	ar2
   01B4                     634 00132$:
                            635 ;	printfl.c:131: for (; *fmt ; fmt++ ) {
   01B4 E5*00               636 	mov	a,_bp
   01B6 24 FB               637 	add	a,#0xfb
   01B8 F8                  638 	mov	r0,a
   01B9 06                  639 	inc	@r0
   01BA B6 00 02            640 	cjne	@r0,#0x00,00173$
   01BD 08                  641 	inc	r0
   01BE 06                  642 	inc	@r0
   01BF                     643 00173$:
   01BF 02s00r0A            644 	ljmp	00130$
   01C2                     645 00134$:
   01C2 D0*00               646 	pop	_bp
   01C4 22                  647 	ret
                            648 	.area CSEG    (CODE)
                            649 	.area CONST   (CODE)
                            650 	.area XINIT   (CODE)
                            651 	.area CABS    (ABS,CODE)
