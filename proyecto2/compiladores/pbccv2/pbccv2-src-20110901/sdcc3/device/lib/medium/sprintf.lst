                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:27 2015
                              5 ;--------------------------------------------------------
                              6 	.module sprintf
                              7 	.optsdcc -mmcs51 --model-medium
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _vsprintf_PARM_3
                             13 	.globl _vsprintf_PARM_2
                             14 	.globl _vsprintf
                             15 	.globl _sprintf
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 	.area RSEG    (ABS,DATA)
   0000                      20 	.org 0x0000
                             21 ;--------------------------------------------------------
                             22 ; special function bits
                             23 ;--------------------------------------------------------
                             24 	.area RSEG    (ABS,DATA)
   0000                      25 	.org 0x0000
                             26 ;--------------------------------------------------------
                             27 ; overlayable register banks
                             28 ;--------------------------------------------------------
                             29 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      30 	.ds 8
                             31 ;--------------------------------------------------------
                             32 ; internal ram data
                             33 ;--------------------------------------------------------
                             34 	.area DSEG    (DATA)
                             35 ;--------------------------------------------------------
                             36 ; overlayable items in internal ram 
                             37 ;--------------------------------------------------------
                             38 	.area OSEG    (OVR,DATA)
                             39 ;--------------------------------------------------------
                             40 ; indirectly addressable internal ram data
                             41 ;--------------------------------------------------------
                             42 	.area ISEG    (DATA)
                             43 ;--------------------------------------------------------
                             44 ; absolute internal ram data
                             45 ;--------------------------------------------------------
                             46 	.area IABS    (ABS,DATA)
                             47 	.area IABS    (ABS,DATA)
                             48 ;--------------------------------------------------------
                             49 ; bit data
                             50 ;--------------------------------------------------------
                             51 	.area BSEG    (BIT)
                             52 ;--------------------------------------------------------
                             53 ; paged external ram data
                             54 ;--------------------------------------------------------
                             55 	.area PSEG    (PAG,XDATA)
   0000                      56 _vsprintf_PARM_2:
   0000                      57 	.ds 3
   0003                      58 _vsprintf_PARM_3:
   0003                      59 	.ds 1
   0004                      60 _vsprintf_buf_1_1:
   0004                      61 	.ds 3
                             62 ;--------------------------------------------------------
                             63 ; external ram data
                             64 ;--------------------------------------------------------
                             65 	.area XSEG    (XDATA)
                             66 ;--------------------------------------------------------
                             67 ; absolute external ram data
                             68 ;--------------------------------------------------------
                             69 	.area XABS    (ABS,XDATA)
                             70 ;--------------------------------------------------------
                             71 ; external initialized ram data
                             72 ;--------------------------------------------------------
                             73 	.area XISEG   (XDATA)
                             74 	.area HOME    (CODE)
                             75 	.area GSINIT0 (CODE)
                             76 	.area GSINIT1 (CODE)
                             77 	.area GSINIT2 (CODE)
                             78 	.area GSINIT3 (CODE)
                             79 	.area GSINIT4 (CODE)
                             80 	.area GSINIT5 (CODE)
                             81 	.area GSINIT  (CODE)
                             82 	.area GSFINAL (CODE)
                             83 	.area CSEG    (CODE)
                             84 ;--------------------------------------------------------
                             85 ; global & static initialisations
                             86 ;--------------------------------------------------------
                             87 	.area HOME    (CODE)
                             88 	.area GSINIT  (CODE)
                             89 	.area GSFINAL (CODE)
                             90 	.area GSINIT  (CODE)
                             91 ;--------------------------------------------------------
                             92 ; Home
                             93 ;--------------------------------------------------------
                             94 	.area HOME    (CODE)
                             95 	.area HOME    (CODE)
                             96 ;--------------------------------------------------------
                             97 ; code
                             98 ;--------------------------------------------------------
                             99 	.area CSEG    (CODE)
                            100 ;------------------------------------------------------------
                            101 ;Allocation info for local variables in function 'put_char_to_string'
                            102 ;------------------------------------------------------------
                            103 ;p                         Allocated to stack - offset -5
                            104 ;c                         Allocated to stack - offset 1
                            105 ;buf                       Allocated to registers 
                            106 ;------------------------------------------------------------
                            107 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                            108 ;	-----------------------------------------
                            109 ;	 function put_char_to_string
                            110 ;	-----------------------------------------
   0000                     111 _put_char_to_string:
                    0002    112 	ar2 = 0x02
                    0003    113 	ar3 = 0x03
                    0004    114 	ar4 = 0x04
                    0005    115 	ar5 = 0x05
                    0006    116 	ar6 = 0x06
                    0007    117 	ar7 = 0x07
                    0000    118 	ar0 = 0x00
                    0001    119 	ar1 = 0x01
   0000 C0*00               120 	push	_bp
   0002 85 81*00            121 	mov	_bp,sp
   0005 C0 82               122 	push	dpl
                            123 ;	sprintf.c:36: char **buf = (char **)p;
                            124 ;	sprintf.c:37: *(*buf)++ = c;
   0007 E5*00               125 	mov	a,_bp
   0009 24 FB               126 	add	a,#0xfb
   000B F8                  127 	mov	r0,a
   000C 86 82               128 	mov	dpl,@r0
   000E 08                  129 	inc	r0
   000F 86 83               130 	mov	dph,@r0
   0011 08                  131 	inc	r0
   0012 86 F0               132 	mov	b,@r0
   0014 12s00r00            133 	lcall	__gptrget
   0017 FE                  134 	mov	r6,a
   0018 A3                  135 	inc	dptr
   0019 12s00r00            136 	lcall	__gptrget
   001C FF                  137 	mov	r7,a
   001D A3                  138 	inc	dptr
   001E 12s00r00            139 	lcall	__gptrget
   0021 FA                  140 	mov	r2,a
   0022 74 01               141 	mov	a,#0x01
   0024 2E                  142 	add	a,r6
   0025 FB                  143 	mov	r3,a
   0026 E4                  144 	clr	a
   0027 3F                  145 	addc	a,r7
   0028 FC                  146 	mov	r4,a
   0029 8A 05               147 	mov	ar5,r2
   002B E5*00               148 	mov	a,_bp
   002D 24 FB               149 	add	a,#0xfb
   002F F8                  150 	mov	r0,a
   0030 86 82               151 	mov	dpl,@r0
   0032 08                  152 	inc	r0
   0033 86 83               153 	mov	dph,@r0
   0035 08                  154 	inc	r0
   0036 86 F0               155 	mov	b,@r0
   0038 EB                  156 	mov	a,r3
   0039 12s00r00            157 	lcall	__gptrput
   003C A3                  158 	inc	dptr
   003D EC                  159 	mov	a,r4
   003E 12s00r00            160 	lcall	__gptrput
   0041 A3                  161 	inc	dptr
   0042 ED                  162 	mov	a,r5
   0043 12s00r00            163 	lcall	__gptrput
   0046 8E 82               164 	mov	dpl,r6
   0048 8F 83               165 	mov	dph,r7
   004A 8A F0               166 	mov	b,r2
   004C A8*00               167 	mov	r0,_bp
   004E 08                  168 	inc	r0
   004F E6                  169 	mov	a,@r0
   0050 12s00r00            170 	lcall	__gptrput
   0053 85*00 81            171 	mov	sp,_bp
   0056 D0*00               172 	pop	_bp
   0058 22                  173 	ret
                            174 ;------------------------------------------------------------
                            175 ;Allocation info for local variables in function 'vsprintf'
                            176 ;------------------------------------------------------------
                            177 ;------------------------------------------------------------
                            178 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                            179 ;	-----------------------------------------
                            180 ;	 function vsprintf
                            181 ;	-----------------------------------------
   0059                     182 _vsprintf:
   0059 AA F0               183 	mov	r2,b
   005B AB 83               184 	mov	r3,dph
   005D E5 82               185 	mov	a,dpl
   005F 78r04               186 	mov	r0,#_vsprintf_buf_1_1
   0061 F2                  187 	movx	@r0,a
   0062 08                  188 	inc	r0
   0063 EB                  189 	mov	a,r3
   0064 F2                  190 	movx	@r0,a
   0065 08                  191 	inc	r0
   0066 EA                  192 	mov	a,r2
   0067 F2                  193 	movx	@r0,a
                            194 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
   0068 78r00               195 	mov	r0,#__print_format_PARM_2
   006A 74r04               196 	mov	a,#_vsprintf_buf_1_1
   006C F2                  197 	movx	@r0,a
   006D 08                  198 	inc	r0
   006E E4                  199 	clr	a
   006F F2                  200 	movx	@r0,a
   0070 08                  201 	inc	r0
   0071 74 60               202 	mov	a,#0x60
   0073 F2                  203 	movx	@r0,a
   0074 78r00               204 	mov	r0,#_vsprintf_PARM_2
   0076 79r00               205 	mov	r1,#__print_format_PARM_3
   0078 E2                  206 	movx	a,@r0
   0079 F3                  207 	movx	@r1,a
   007A 08                  208 	inc	r0
   007B E2                  209 	movx	a,@r0
   007C 09                  210 	inc	r1
   007D F3                  211 	movx	@r1,a
   007E 08                  212 	inc	r0
   007F E2                  213 	movx	a,@r0
   0080 09                  214 	inc	r1
   0081 F3                  215 	movx	@r1,a
   0082 78r03               216 	mov	r0,#_vsprintf_PARM_3
   0084 79r00               217 	mov	r1,#__print_format_PARM_4
   0086 E2                  218 	movx	a,@r0
   0087 F3                  219 	movx	@r1,a
   0088 90s00r00            220 	mov	dptr,#_put_char_to_string
   008B 12s00r00            221 	lcall	__print_format
   008E AA 82               222 	mov	r2,dpl
   0090 AB 83               223 	mov	r3,dph
                            224 ;	sprintf.c:45: *buf = 0;
   0092 78r04               225 	mov	r0,#_vsprintf_buf_1_1
   0094 E2                  226 	movx	a,@r0
   0095 FC                  227 	mov	r4,a
   0096 08                  228 	inc	r0
   0097 E2                  229 	movx	a,@r0
   0098 FD                  230 	mov	r5,a
   0099 08                  231 	inc	r0
   009A E2                  232 	movx	a,@r0
   009B FE                  233 	mov	r6,a
   009C 8C 82               234 	mov	dpl,r4
   009E 8D 83               235 	mov	dph,r5
   00A0 8E F0               236 	mov	b,r6
   00A2 E4                  237 	clr	a
   00A3 12s00r00            238 	lcall	__gptrput
                            239 ;	sprintf.c:46: return i;
   00A6 8A 82               240 	mov	dpl,r2
   00A8 8B 83               241 	mov	dph,r3
   00AA 22                  242 	ret
                            243 ;------------------------------------------------------------
                            244 ;Allocation info for local variables in function 'sprintf'
                            245 ;------------------------------------------------------------
                            246 ;buf                       Allocated to stack - offset -5
                            247 ;format                    Allocated to stack - offset -8
                            248 ;arg                       Allocated to registers r2 
                            249 ;i                         Allocated to registers r2 r3 
                            250 ;------------------------------------------------------------
                            251 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                            252 ;	-----------------------------------------
                            253 ;	 function sprintf
                            254 ;	-----------------------------------------
   00AB                     255 _sprintf:
   00AB C0*00               256 	push	_bp
   00AD 85 81*00            257 	mov	_bp,sp
                            258 ;	sprintf.c:55: va_start (arg, format);
   00B0 E5*00               259 	mov	a,_bp
   00B2 24 F8               260 	add	a,#0xf8
   00B4 FA                  261 	mov	r2,a
                            262 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
   00B5 E5*00               263 	mov	a,_bp
   00B7 24 FB               264 	add	a,#0xfb
   00B9 78r00               265 	mov	r0,#__print_format_PARM_2
   00BB F2                  266 	movx	@r0,a
   00BC 08                  267 	inc	r0
   00BD E4                  268 	clr	a
   00BE F2                  269 	movx	@r0,a
   00BF 08                  270 	inc	r0
   00C0 74 40               271 	mov	a,#0x40
   00C2 F2                  272 	movx	@r0,a
   00C3 E5*00               273 	mov	a,_bp
   00C5 24 F8               274 	add	a,#0xf8
   00C7 F8                  275 	mov	r0,a
   00C8 79r00               276 	mov	r1,#__print_format_PARM_3
   00CA E6                  277 	mov	a,@r0
   00CB F3                  278 	movx	@r1,a
   00CC 08                  279 	inc	r0
   00CD 09                  280 	inc	r1
   00CE E6                  281 	mov	a,@r0
   00CF F3                  282 	movx	@r1,a
   00D0 08                  283 	inc	r0
   00D1 09                  284 	inc	r1
   00D2 E6                  285 	mov	a,@r0
   00D3 F3                  286 	movx	@r1,a
   00D4 78r00               287 	mov	r0,#__print_format_PARM_4
   00D6 EA                  288 	mov	a,r2
   00D7 F2                  289 	movx	@r0,a
   00D8 90s00r00            290 	mov	dptr,#_put_char_to_string
   00DB 12s00r00            291 	lcall	__print_format
   00DE AA 82               292 	mov	r2,dpl
   00E0 AB 83               293 	mov	r3,dph
                            294 ;	sprintf.c:57: *buf = 0;
   00E2 E5*00               295 	mov	a,_bp
   00E4 24 FB               296 	add	a,#0xfb
   00E6 F8                  297 	mov	r0,a
   00E7 86 04               298 	mov	ar4,@r0
   00E9 08                  299 	inc	r0
   00EA 86 05               300 	mov	ar5,@r0
   00EC 08                  301 	inc	r0
   00ED 86 06               302 	mov	ar6,@r0
   00EF 8C 82               303 	mov	dpl,r4
   00F1 8D 83               304 	mov	dph,r5
   00F3 8E F0               305 	mov	b,r6
   00F5 E4                  306 	clr	a
   00F6 12s00r00            307 	lcall	__gptrput
                            308 ;	sprintf.c:60: return i;
   00F9 8A 82               309 	mov	dpl,r2
   00FB 8B 83               310 	mov	dph,r3
   00FD D0*00               311 	pop	_bp
   00FF 22                  312 	ret
                            313 	.area CSEG    (CODE)
                            314 	.area CONST   (CODE)
                            315 	.area XINIT   (CODE)
                            316 	.area CABS    (ABS,CODE)
