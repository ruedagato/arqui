                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:19 2015
                              5 ;--------------------------------------------------------
                              6 	.module ceilf
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _ceilf
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; special function bits
                             36 ;--------------------------------------------------------
                             37 ;--------------------------------------------------------
                             38 ; overlayable register banks
                             39 ;--------------------------------------------------------
                             40 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      41 	.ds 8
                             42 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                      43 	.ds 8
                             44 ;--------------------------------------------------------
                             45 ; internal ram data
                             46 ;--------------------------------------------------------
                             47 	.area DSEG    (DATA)
                             48 ;--------------------------------------------------------
                             49 ; overlayable items in internal ram 
                             50 ;--------------------------------------------------------
                             51 	.area OSEG    (OVR,DATA)
                             52 ;--------------------------------------------------------
                             53 ; indirectly addressable internal ram data
                             54 ;--------------------------------------------------------
                             55 	.area ISEG    (DATA)
                             56 ;--------------------------------------------------------
                             57 ; absolute internal ram data
                             58 ;--------------------------------------------------------
                             59 	.area IABS    (ABS,DATA)
                             60 	.area IABS    (ABS,DATA)
                             61 ;--------------------------------------------------------
                             62 ; bit data
                             63 ;--------------------------------------------------------
                             64 	.area BSEG    (BIT)
                             65 ;--------------------------------------------------------
                             66 ; paged external ram data
                             67 ;--------------------------------------------------------
                             68 	.area PSEG    (PAG,XDATA)
                             69 ;--------------------------------------------------------
                             70 ; external ram data
                             71 ;--------------------------------------------------------
                             72 	.area XSEG    (XDATA)
                             73 ;--------------------------------------------------------
                             74 ; absolute external ram data
                             75 ;--------------------------------------------------------
                             76 	.area XABS    (ABS,XDATA)
                             77 ;--------------------------------------------------------
                             78 ; external initialized ram data
                             79 ;--------------------------------------------------------
                             80 	.area XISEG   (XDATA)
                             81 ;--------------------------------------------------------
                             82 ; global & static initialisations
                             83 ;--------------------------------------------------------
                             84 	.area HOME    (CODE)
                             85 	.area GSINIT  (CODE)
                             86 	.area GSFINAL (CODE)
                             87 	.area GSINIT  (CODE)
                             88 ;--------------------------------------------------------
                             89 ; Home
                             90 ;--------------------------------------------------------
                             91 	.area HOME    (CODE)
                             92 	.area HOME    (CODE)
                             93 ;--------------------------------------------------------
                             94 ; code
                             95 ;--------------------------------------------------------
                             96 	.area CSEG    (CODE)
                             97 ;------------------------------------------------------------
                             98 ;Allocation info for local variables in function 'ceilf'
                             99 ;------------------------------------------------------------
                            100 ;x                         Allocated to stack - offset 1
                            101 ;r                         Allocated to registers r6 r7 r0 r1 
                            102 ;------------------------------------------------------------
                            103 ;	ceilf.c:33: float ceilf(float x) _FLOAT_FUNC_REENTRANT
                            104 ;	-----------------------------------------
                            105 ;	 function ceilf
                            106 ;	-----------------------------------------
   0000                     107 _ceilf:
                    0002    108 	ar2 = 0x02
                    0003    109 	ar3 = 0x03
                    0004    110 	ar4 = 0x04
                    0005    111 	ar5 = 0x05
                    0006    112 	ar6 = 0x06
                    0007    113 	ar7 = 0x07
                    0000    114 	ar0 = 0x00
                    0001    115 	ar1 = 0x01
   0000 C0*00               116 	push	_bpx
   0002 C0*01               117 	push	_bpx+1
   0004 85 81*00            118 	mov	_bpx,sp
   0007 85 9B*01            119 	mov	_bpx+1,esp
   000A 53*01 03            120 	anl	_bpx+1,#3
   000D 43*01 DC            121 	orl	_bpx+1,#0xDC
   0010 C0 E0               122 	push	acc
   0012 C0 E0               123 	push	acc
   0014 C0 E0               124 	push	acc
   0016 C0 E0               125 	push	acc
   0018 75 95 FF            126 	mov	dpx1,#0xFF
   001B 85*01 85            127 	mov	dph1,_bpx+1
   001E 85*00 84            128 	mov	dpl1,_bpx
   0021 75 86 01            129 	mov	dps,#1
   0024 A3                  130 	inc	dptr
   0025 75 86 01            131 	mov	dps, #1
   0028 E5 82               132 	mov	a,dpl
   002A F0                  133 	movx	@dptr,a
   002B A3                  134 	inc	dptr
   002C E5 83               135 	mov	a,dph
   002E F0                  136 	movx	@dptr,a
   002F A3                  137 	inc	dptr
   0030 E5 93               138 	mov	a,dpx
   0032 F0                  139 	movx	@dptr,a
   0033 A3                  140 	inc	dptr
   0034 E5 F0               141 	mov	a,b
   0036 F0                  142 	movx	@dptr,a
   0037 75 86 00            143 	mov	dps,#0
                            144 ;	ceilf.c:36: r=x;
   003A 75 95 FF            145 	mov	dpx1,#0xFF
   003D 85*01 85            146 	mov	dph1,_bpx+1
   0040 85*00 84            147 	mov	dpl1,_bpx
   0043 75 86 01            148 	mov	dps,#1
   0046 A3                  149 	inc	dptr
   0047 75 86 01            150 	mov	dps, #1
   004A E0                  151 	movx	a,@dptr
   004B F5 82               152 	mov	dpl,a
   004D A3                  153 	inc	dptr
   004E E0                  154 	movx	a,@dptr
   004F F5 83               155 	mov	dph,a
   0051 A3                  156 	inc	dptr
   0052 E0                  157 	movx	a,@dptr
   0053 F5 93               158 	mov	dpx,a
   0055 A3                  159 	inc	dptr
   0056 E0                  160 	movx	a,@dptr
   0057 F5 F0               161 	mov	b,a
   0059 75 86 00            162 	mov	dps,#0
   005C 12s00r00r00         163 	lcall	___fs2slong
   0060 AE 82               164 	mov	r6,dpl
   0062 AF 83               165 	mov	r7,dph
   0064 A8 93               166 	mov	r0,dpx
   0066 A9 F0               167 	mov	r1,b
                            168 ;	genAssign: resultIsFar = TRUE
                            169 ;	ceilf.c:37: if (r<0)
   0068 E9                  170 	mov	a,r1
   0069 30 E7 10            171 	jnb  acc.7,00102$
   006C                     172 00110$:
                            173 ;	ceilf.c:38: return r;
   006C 8E 82               174 	mov	dpl,r6
   006E 8F 83               175 	mov	dph,r7
   0070 88 93               176 	mov	dpx,r0
   0072 89 F0               177 	mov	b,r1
   0074 12s00r00r00         178 	lcall	___slong2fs
   0078 02s00r01r08         179 	ljmp	00104$
   007C                     180 00102$:
                            181 ;	ceilf.c:40: return (r+((r<x)?1:0));
   007C C0 06               182 	push	ar6
   007E C0 07               183 	push	ar7
   0080 C0 00               184 	push	ar0
   0082 C0 01               185 	push	ar1
   0084 8E 82               186 	mov	dpl,r6
   0086 8F 83               187 	mov	dph,r7
   0088 88 93               188 	mov	dpx,r0
   008A 89 F0               189 	mov	b,r1
   008C 12s00r00r00         190 	lcall	___slong2fs
   0090 AA 82               191 	mov	r2,dpl
   0092 AB 83               192 	mov	r3,dph
   0094 AC 93               193 	mov	r4,dpx
   0096 AD F0               194 	mov	r5,b
   0098 D0 01               195 	pop	ar1
   009A D0 00               196 	pop	ar0
   009C D0 07               197 	pop	ar7
   009E D0 06               198 	pop	ar6
   00A0 75 93 FF            199 	mov	dpx,#0xFF
   00A3 85*01 83            200 	mov	dph,_bpx+1
   00A6 85*00 82            201 	mov	dpl,_bpx
   00A9 A3                  202 	inc	dptr
                            203 ;	genAssign: resultIsFar = TRUE
   00AA 75 86 21            204 	mov	dps,#0x21
   00AD 90s00r00r00         205 	mov	dptr,#___fslt_PARM_2
   00B1 E0                  206 	movx	a,@dptr
   00B2 F0                  207 	movx	@dptr,a
   00B3 A3                  208 	inc	dptr
   00B4 A3                  209 	inc	dptr
   00B5 E0                  210 	movx	a,@dptr
   00B6 F0                  211 	movx	@dptr,a
   00B7 A3                  212 	inc	dptr
   00B8 A3                  213 	inc	dptr
   00B9 E0                  214 	movx	a,@dptr
   00BA F0                  215 	movx	@dptr,a
   00BB A3                  216 	inc	dptr
   00BC A3                  217 	inc	dptr
   00BD E0                  218 	movx	a,@dptr
   00BE F0                  219 	movx	@dptr,a
   00BF 75 86 00            220 	mov	dps,#0
   00C2 C0 06               221 	push	ar6
   00C4 C0 07               222 	push	ar7
   00C6 C0 00               223 	push	ar0
   00C8 C0 01               224 	push	ar1
   00CA 8A 82               225 	mov	dpl,r2
   00CC 8B 83               226 	mov	dph,r3
   00CE 8C 93               227 	mov	dpx,r4
   00D0 8D F0               228 	mov	b,r5
   00D2 12s00r00r00         229 	lcall	___fslt
   00D6 D0 01               230 	pop	ar1
   00D8 D0 00               231 	pop	ar0
   00DA D0 07               232 	pop	ar7
   00DC D0 06               233 	pop	ar6
   00DE E5 82               234 	mov	a,dpl
   00E0 60 04               235 	jz  00106$
   00E2                     236 00111$:
                            237 ;	genAssign: resultIsFar = FALSE
   00E2 7A 01               238 	mov	r2,#0x01
   00E4 80 02               239 	sjmp 00107$
   00E6                     240 00106$:
                            241 ;	genAssign: resultIsFar = FALSE
   00E6 7A 00               242 	mov	r2,#0x00
   00E8                     243 00107$:
   00E8 7B 00               244 	mov	r3,#0
   00EA EB                  245 	mov	a,r3
   00EB 33                  246 	rlc	a
   00EC 95 E0               247 	subb	a,acc
   00EE FC                  248 	mov	r4,a
   00EF FD                  249 	mov	r5,a
   00F0 EA                  250 	mov	a,r2
   00F1 2E                  251 	add	a,r6
   00F2 FE                  252 	mov	r6,a
   00F3 EB                  253 	mov	a,r3
   00F4 3F                  254 	addc	a,r7
   00F5 FF                  255 	mov	r7,a
   00F6 EC                  256 	mov	a,r4
   00F7 38                  257 	addc	a,r0
   00F8 F8                  258 	mov	r0,a
   00F9 ED                  259 	mov	a,r5
   00FA 39                  260 	addc	a,r1
   00FB F9                  261 	mov	r1,a
   00FC 8E 82               262 	mov	dpl,r6
   00FE 8F 83               263 	mov	dph,r7
   0100 88 93               264 	mov	dpx,r0
   0102 89 F0               265 	mov	b,r1
   0104 12s00r00r00         266 	lcall	___slong2fs
   0108                     267 00104$:
   0108 85*00 81            268 	mov	sp,_bpx
   010B 85*01 9B            269 	mov	esp,_bpx+1
   010E D0*01               270 	pop	_bpx+1
   0110 D0*00               271 	pop	_bpx
   0112 22                  272 	ret
                            273 	.area CSEG    (CODE)
                            274 	.area CONST   (CODE)
                            275 	.area XINIT   (CODE)
                            276 	.area CABS    (ABS,CODE)
