                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:24 2015
                              5 ;--------------------------------------------------------
                              6 	.module _memmove
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _memmove_PARM_3
                             13 	.globl _memmove_PARM_2
                             14 	.globl _memmove
                             15 ;--------------------------------------------------------
                             16 ; special function registers
                             17 ;--------------------------------------------------------
                             18 	.area RSEG    (ABS,DATA)
   0000                      19 	.org 0x0000
                             20 ;--------------------------------------------------------
                             21 ; special function bits
                             22 ;--------------------------------------------------------
                             23 	.area RSEG    (ABS,DATA)
   0000                      24 	.org 0x0000
                             25 ;--------------------------------------------------------
                             26 ; overlayable register banks
                             27 ;--------------------------------------------------------
                             28 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      29 	.ds 8
                             30 ;--------------------------------------------------------
                             31 ; internal ram data
                             32 ;--------------------------------------------------------
                             33 	.area DSEG    (DATA)
                             34 ;--------------------------------------------------------
                             35 ; overlayable items in internal ram 
                             36 ;--------------------------------------------------------
                             37 	.area	OSEG    (OVR,DATA)
   0000                      38 _memmove_PARM_2::
   0000                      39 	.ds 3
   0003                      40 _memmove_PARM_3::
   0003                      41 	.ds 2
   0005                      42 _memmove_ret_1_1::
   0005                      43 	.ds 3
   0008                      44 _memmove_d_1_1::
   0008                      45 	.ds 3
   000B                      46 _memmove_s_1_1::
   000B                      47 	.ds 3
   000E                      48 _memmove_sloc0_1_0::
   000E                      49 	.ds 2
   0010                      50 _memmove_sloc1_1_0::
   0010                      51 	.ds 3
                             52 ;--------------------------------------------------------
                             53 ; indirectly addressable internal ram data
                             54 ;--------------------------------------------------------
                             55 	.area ISEG    (DATA)
                             56 ;--------------------------------------------------------
                             57 ; absolute internal ram data
                             58 ;--------------------------------------------------------
                             59 	.area IABS    (ABS,DATA)
                             60 	.area IABS    (ABS,DATA)
                             61 ;--------------------------------------------------------
                             62 ; bit data
                             63 ;--------------------------------------------------------
                             64 	.area BSEG    (BIT)
                             65 ;--------------------------------------------------------
                             66 ; paged external ram data
                             67 ;--------------------------------------------------------
                             68 	.area PSEG    (PAG,XDATA)
                             69 ;--------------------------------------------------------
                             70 ; external ram data
                             71 ;--------------------------------------------------------
                             72 	.area XSEG    (XDATA)
                             73 ;--------------------------------------------------------
                             74 ; absolute external ram data
                             75 ;--------------------------------------------------------
                             76 	.area XABS    (ABS,XDATA)
                             77 ;--------------------------------------------------------
                             78 ; external initialized ram data
                             79 ;--------------------------------------------------------
                             80 	.area XISEG   (XDATA)
                             81 	.area HOME    (CODE)
                             82 	.area GSINIT0 (CODE)
                             83 	.area GSINIT1 (CODE)
                             84 	.area GSINIT2 (CODE)
                             85 	.area GSINIT3 (CODE)
                             86 	.area GSINIT4 (CODE)
                             87 	.area GSINIT5 (CODE)
                             88 	.area GSINIT  (CODE)
                             89 	.area GSFINAL (CODE)
                             90 	.area CSEG    (CODE)
                             91 ;--------------------------------------------------------
                             92 ; global & static initialisations
                             93 ;--------------------------------------------------------
                             94 	.area HOME    (CODE)
                             95 	.area GSINIT  (CODE)
                             96 	.area GSFINAL (CODE)
                             97 	.area GSINIT  (CODE)
                             98 ;--------------------------------------------------------
                             99 ; Home
                            100 ;--------------------------------------------------------
                            101 	.area HOME    (CODE)
                            102 	.area HOME    (CODE)
                            103 ;--------------------------------------------------------
                            104 ; code
                            105 ;--------------------------------------------------------
                            106 	.area CSEG    (CODE)
                            107 ;------------------------------------------------------------
                            108 ;Allocation info for local variables in function 'memmove'
                            109 ;------------------------------------------------------------
                            110 ;src                       Allocated with name '_memmove_PARM_2'
                            111 ;acount                    Allocated with name '_memmove_PARM_3'
                            112 ;dst                       Allocated to registers r2 r3 r4 
                            113 ;ret                       Allocated with name '_memmove_ret_1_1'
                            114 ;d                         Allocated with name '_memmove_d_1_1'
                            115 ;s                         Allocated with name '_memmove_s_1_1'
                            116 ;sloc0                     Allocated with name '_memmove_sloc0_1_0'
                            117 ;sloc1                     Allocated with name '_memmove_sloc1_1_0'
                            118 ;------------------------------------------------------------
                            119 ;	_memmove.c:39: void * memmove (
                            120 ;	-----------------------------------------
                            121 ;	 function memmove
                            122 ;	-----------------------------------------
   0000                     123 _memmove:
                    0002    124 	ar2 = 0x02
                    0003    125 	ar3 = 0x03
                    0004    126 	ar4 = 0x04
                    0005    127 	ar5 = 0x05
                    0006    128 	ar6 = 0x06
                    0007    129 	ar7 = 0x07
                    0000    130 	ar0 = 0x00
                    0001    131 	ar1 = 0x01
   0000 AA 82               132 	mov	r2,dpl
   0002 AB 83               133 	mov	r3,dph
   0004 AC F0               134 	mov	r4,b
                            135 ;	_memmove.c:45: void * ret = dst;
   0006 8A*05               136 	mov	_memmove_ret_1_1,r2
   0008 8B*06               137 	mov	(_memmove_ret_1_1 + 1),r3
   000A 8C*07               138 	mov	(_memmove_ret_1_1 + 2),r4
                            139 ;	_memmove.c:49: if (((int)src < (int)dst) && ((((int)src)+acount) > (int)dst)) {
   000C A8*00               140 	mov	r0,_memmove_PARM_2
   000E A9*01               141 	mov	r1,(_memmove_PARM_2 + 1)
   0010 8A*0E               142 	mov	_memmove_sloc0_1_0,r2
   0012 8B*0F               143 	mov	(_memmove_sloc0_1_0 + 1),r3
   0014 C3                  144 	clr	c
   0015 E8                  145 	mov	a,r0
   0016 95*0E               146 	subb	a,_memmove_sloc0_1_0
   0018 E9                  147 	mov	a,r1
   0019 64 80               148 	xrl	a,#0x80
   001B 85*0F F0            149 	mov	b,(_memmove_sloc0_1_0 + 1)
   001E 63 F0 80            150 	xrl	b,#0x80
   0021 95 F0               151 	subb	a,b
   0023 40 03               152 	jc	00121$
   0025 02s00rAC            153 	ljmp	00108$
   0028                     154 00121$:
   0028 E5*03               155 	mov	a,_memmove_PARM_3
   002A 28                  156 	add	a,r0
   002B F8                  157 	mov	r0,a
   002C E5*04               158 	mov	a,(_memmove_PARM_3 + 1)
   002E 39                  159 	addc	a,r1
   002F F9                  160 	mov	r1,a
   0030 AD*0E               161 	mov	r5,_memmove_sloc0_1_0
   0032 AE*0F               162 	mov	r6,(_memmove_sloc0_1_0 + 1)
   0034 C3                  163 	clr	c
   0035 ED                  164 	mov	a,r5
   0036 98                  165 	subb	a,r0
   0037 EE                  166 	mov	a,r6
   0038 99                  167 	subb	a,r1
   0039 50 71               168 	jnc	00108$
                            169 ;	_memmove.c:53: d = ((char *)dst)+acount-1;
   003B E5*03               170 	mov	a,_memmove_PARM_3
   003D 2A                  171 	add	a,r2
   003E FD                  172 	mov	r5,a
   003F E5*04               173 	mov	a,(_memmove_PARM_3 + 1)
   0041 3B                  174 	addc	a,r3
   0042 FE                  175 	mov	r6,a
   0043 8C 07               176 	mov	ar7,r4
   0045 ED                  177 	mov	a,r5
   0046 24 FF               178 	add	a,#0xff
   0048 F5*08               179 	mov	_memmove_d_1_1,a
   004A EE                  180 	mov	a,r6
   004B 34 FF               181 	addc	a,#0xff
   004D F5*09               182 	mov	(_memmove_d_1_1 + 1),a
   004F 8F*0A               183 	mov	(_memmove_d_1_1 + 2),r7
                            184 ;	_memmove.c:54: s = ((char *)src)+acount-1;
   0051 E5*03               185 	mov	a,_memmove_PARM_3
   0053 25*00               186 	add	a,_memmove_PARM_2
   0055 F8                  187 	mov	r0,a
   0056 E5*04               188 	mov	a,(_memmove_PARM_3 + 1)
   0058 35*01               189 	addc	a,(_memmove_PARM_2 + 1)
   005A F9                  190 	mov	r1,a
   005B AD*02               191 	mov	r5,(_memmove_PARM_2 + 2)
   005D E8                  192 	mov	a,r0
   005E 24 FF               193 	add	a,#0xff
   0060 FF                  194 	mov	r7,a
   0061 E9                  195 	mov	a,r1
   0062 34 FF               196 	addc	a,#0xff
   0064 FE                  197 	mov	r6,a
                            198 ;	_memmove.c:55: while (acount--) {
   0065 85*08*10            199 	mov	_memmove_sloc1_1_0,_memmove_d_1_1
   0068 85*09*11            200 	mov	(_memmove_sloc1_1_0 + 1),(_memmove_d_1_1 + 1)
   006B 85*0A*12            201 	mov	(_memmove_sloc1_1_0 + 2),(_memmove_d_1_1 + 2)
   006E 85*03*0E            202 	mov	_memmove_sloc0_1_0,_memmove_PARM_3
   0071 85*04*0F            203 	mov	(_memmove_sloc0_1_0 + 1),(_memmove_PARM_3 + 1)
   0074                     204 00101$:
   0074 A8*0E               205 	mov	r0,_memmove_sloc0_1_0
   0076 A9*0F               206 	mov	r1,(_memmove_sloc0_1_0 + 1)
   0078 15*0E               207 	dec	_memmove_sloc0_1_0
   007A 74 FF               208 	mov	a,#0xff
   007C B5*0E 02            209 	cjne	a,_memmove_sloc0_1_0,00123$
   007F 15*0F               210 	dec	(_memmove_sloc0_1_0 + 1)
   0081                     211 00123$:
   0081 E8                  212 	mov	a,r0
   0082 49                  213 	orl	a,r1
   0083 60 69               214 	jz	00109$
                            215 ;	_memmove.c:56: *d-- = *s--;
   0085 8F 82               216 	mov	dpl,r7
   0087 8E 83               217 	mov	dph,r6
   0089 8D F0               218 	mov	b,r5
   008B 12s00r00            219 	lcall	__gptrget
   008E F8                  220 	mov	r0,a
   008F 1F                  221 	dec	r7
   0090 BF FF 01            222 	cjne	r7,#0xff,00125$
   0093 1E                  223 	dec	r6
   0094                     224 00125$:
   0094 85*10 82            225 	mov	dpl,_memmove_sloc1_1_0
   0097 85*11 83            226 	mov	dph,(_memmove_sloc1_1_0 + 1)
   009A 85*12 F0            227 	mov	b,(_memmove_sloc1_1_0 + 2)
   009D E8                  228 	mov	a,r0
   009E 12s00r00            229 	lcall	__gptrput
   00A1 15*10               230 	dec	_memmove_sloc1_1_0
   00A3 74 FF               231 	mov	a,#0xff
   00A5 B5*10 CC            232 	cjne	a,_memmove_sloc1_1_0,00101$
   00A8 15*11               233 	dec	(_memmove_sloc1_1_0 + 1)
   00AA 80 C8               234 	sjmp	00101$
   00AC                     235 00108$:
                            236 ;	_memmove.c:64: s = src;
   00AC AD*00               237 	mov	r5,_memmove_PARM_2
   00AE AE*01               238 	mov	r6,(_memmove_PARM_2 + 1)
   00B0 AF*02               239 	mov	r7,(_memmove_PARM_2 + 2)
                            240 ;	_memmove.c:65: while (acount--) {
   00B2 8D*0B               241 	mov	_memmove_s_1_1,r5
   00B4 8E*0C               242 	mov	(_memmove_s_1_1 + 1),r6
   00B6 8F*0D               243 	mov	(_memmove_s_1_1 + 2),r7
   00B8 A8*03               244 	mov	r0,_memmove_PARM_3
   00BA A9*04               245 	mov	r1,(_memmove_PARM_3 + 1)
   00BC                     246 00104$:
   00BC 88 05               247 	mov	ar5,r0
   00BE 89 06               248 	mov	ar6,r1
   00C0 18                  249 	dec	r0
   00C1 B8 FF 01            250 	cjne	r0,#0xff,00126$
   00C4 19                  251 	dec	r1
   00C5                     252 00126$:
   00C5 ED                  253 	mov	a,r5
   00C6 4E                  254 	orl	a,r6
   00C7 60 25               255 	jz	00109$
                            256 ;	_memmove.c:66: *d++ = *s++;
   00C9 85*0B 82            257 	mov	dpl,_memmove_s_1_1
   00CC 85*0C 83            258 	mov	dph,(_memmove_s_1_1 + 1)
   00CF 85*0D F0            259 	mov	b,(_memmove_s_1_1 + 2)
   00D2 12s00r00            260 	lcall	__gptrget
   00D5 FD                  261 	mov	r5,a
   00D6 A3                  262 	inc	dptr
   00D7 85 82*0B            263 	mov	_memmove_s_1_1,dpl
   00DA 85 83*0C            264 	mov	(_memmove_s_1_1 + 1),dph
   00DD 8A 82               265 	mov	dpl,r2
   00DF 8B 83               266 	mov	dph,r3
   00E1 8C F0               267 	mov	b,r4
   00E3 ED                  268 	mov	a,r5
   00E4 12s00r00            269 	lcall	__gptrput
   00E7 A3                  270 	inc	dptr
   00E8 AA 82               271 	mov	r2,dpl
   00EA AB 83               272 	mov	r3,dph
   00EC 80 CE               273 	sjmp	00104$
   00EE                     274 00109$:
                            275 ;	_memmove.c:70: return(ret);
   00EE 85*05 82            276 	mov	dpl,_memmove_ret_1_1
   00F1 85*06 83            277 	mov	dph,(_memmove_ret_1_1 + 1)
   00F4 85*07 F0            278 	mov	b,(_memmove_ret_1_1 + 2)
   00F7 22                  279 	ret
                            280 	.area CSEG    (CODE)
                            281 	.area CONST   (CODE)
                            282 	.area XINIT   (CODE)
                            283 	.area CABS    (ABS,CODE)
