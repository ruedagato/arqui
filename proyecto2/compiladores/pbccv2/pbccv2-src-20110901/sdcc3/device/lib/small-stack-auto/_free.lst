                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:31 2015
                              5 ;--------------------------------------------------------
                              6 	.module _free
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __sdcc_find_memheader
                             13 	.globl __sdcc_prev_memheader
                             14 	.globl _free
                             15 ;--------------------------------------------------------
                             16 ; special function registers
                             17 ;--------------------------------------------------------
                             18 	.area RSEG    (ABS,DATA)
   0000                      19 	.org 0x0000
                             20 ;--------------------------------------------------------
                             21 ; special function bits
                             22 ;--------------------------------------------------------
                             23 	.area RSEG    (ABS,DATA)
   0000                      24 	.org 0x0000
                             25 ;--------------------------------------------------------
                             26 ; overlayable register banks
                             27 ;--------------------------------------------------------
                             28 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      29 	.ds 8
                             30 ;--------------------------------------------------------
                             31 ; internal ram data
                             32 ;--------------------------------------------------------
                             33 	.area DSEG    (DATA)
   0000                      34 __sdcc_prev_memheader::
   0000                      35 	.ds 2
                             36 ;--------------------------------------------------------
                             37 ; overlayable items in internal ram 
                             38 ;--------------------------------------------------------
                             39 	.area OSEG    (OVR,DATA)
                             40 ;--------------------------------------------------------
                             41 ; indirectly addressable internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area ISEG    (DATA)
                             44 ;--------------------------------------------------------
                             45 ; absolute internal ram data
                             46 ;--------------------------------------------------------
                             47 	.area IABS    (ABS,DATA)
                             48 	.area IABS    (ABS,DATA)
                             49 ;--------------------------------------------------------
                             50 ; bit data
                             51 ;--------------------------------------------------------
                             52 	.area BSEG    (BIT)
                             53 ;--------------------------------------------------------
                             54 ; paged external ram data
                             55 ;--------------------------------------------------------
                             56 	.area PSEG    (PAG,XDATA)
                             57 ;--------------------------------------------------------
                             58 ; external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XSEG    (XDATA)
                             61 ;--------------------------------------------------------
                             62 ; absolute external ram data
                             63 ;--------------------------------------------------------
                             64 	.area XABS    (ABS,XDATA)
                             65 ;--------------------------------------------------------
                             66 ; external initialized ram data
                             67 ;--------------------------------------------------------
                             68 	.area XISEG   (XDATA)
                             69 	.area HOME    (CODE)
                             70 	.area GSINIT0 (CODE)
                             71 	.area GSINIT1 (CODE)
                             72 	.area GSINIT2 (CODE)
                             73 	.area GSINIT3 (CODE)
                             74 	.area GSINIT4 (CODE)
                             75 	.area GSINIT5 (CODE)
                             76 	.area GSINIT  (CODE)
                             77 	.area GSFINAL (CODE)
                             78 	.area CSEG    (CODE)
                             79 ;--------------------------------------------------------
                             80 ; global & static initialisations
                             81 ;--------------------------------------------------------
                             82 	.area HOME    (CODE)
                             83 	.area GSINIT  (CODE)
                             84 	.area GSFINAL (CODE)
                             85 	.area GSINIT  (CODE)
                             86 ;--------------------------------------------------------
                             87 ; Home
                             88 ;--------------------------------------------------------
                             89 	.area HOME    (CODE)
                             90 	.area HOME    (CODE)
                             91 ;--------------------------------------------------------
                             92 ; code
                             93 ;--------------------------------------------------------
                             94 	.area CSEG    (CODE)
                             95 ;------------------------------------------------------------
                             96 ;Allocation info for local variables in function '_sdcc_find_memheader'
                             97 ;------------------------------------------------------------
                             98 ;p                         Allocated to registers r2 r3 
                             99 ;pthis                     Allocated to registers r2 r3 
                            100 ;cur_header                Allocated to registers r4 r5 
                            101 ;------------------------------------------------------------
                            102 ;	_free.c:129: MEMHEADER __xdata * _sdcc_find_memheader(void __xdata * p)
                            103 ;	-----------------------------------------
                            104 ;	 function _sdcc_find_memheader
                            105 ;	-----------------------------------------
   0000                     106 __sdcc_find_memheader:
                    0002    107 	ar2 = 0x02
                    0003    108 	ar3 = 0x03
                    0004    109 	ar4 = 0x04
                    0005    110 	ar5 = 0x05
                    0006    111 	ar6 = 0x06
                    0007    112 	ar7 = 0x07
                    0000    113 	ar0 = 0x00
                    0001    114 	ar1 = 0x01
   0000 AA 82               115 	mov	r2,dpl
   0002 AB 83               116 	mov	r3,dph
                            117 ;	_free.c:134: if (!p)
   0004 EA                  118 	mov	a,r2
   0005 4B                  119 	orl	a,r3
   0006 70 04               120 	jnz	00102$
                            121 ;	_free.c:135: return NULL;
   0008 90 00 00            122 	mov	dptr,#0x0000
   000B 22                  123 	ret
   000C                     124 00102$:
                            125 ;	_free.c:137: pthis -= 1; //to start of header
   000C EA                  126 	mov	a,r2
   000D 24 FC               127 	add	a,#0xfc
   000F FA                  128 	mov	r2,a
   0010 EB                  129 	mov	a,r3
   0011 34 FF               130 	addc	a,#0xff
   0013 FB                  131 	mov	r3,a
                            132 ;	_free.c:138: cur_header = _sdcc_first_memheader;
   0014 AC*00               133 	mov	r4,__sdcc_first_memheader
   0016 AD*01               134 	mov	r5,(__sdcc_first_memheader + 1)
                            135 ;	_free.c:139: _sdcc_prev_memheader = NULL;
   0018 E4                  136 	clr	a
   0019 F5*00               137 	mov	__sdcc_prev_memheader,a
   001B F5*01               138 	mov	(__sdcc_prev_memheader + 1),a
                            139 ;	_free.c:140: while (cur_header && pthis != cur_header)
   001D                     140 00104$:
   001D EC                  141 	mov	a,r4
   001E 4D                  142 	orl	a,r5
   001F 60 19               143 	jz	00106$
   0021 EA                  144 	mov	a,r2
   0022 B5 04 06            145 	cjne	a,ar4,00115$
   0025 EB                  146 	mov	a,r3
   0026 B5 05 02            147 	cjne	a,ar5,00115$
   0029 80 0F               148 	sjmp	00106$
   002B                     149 00115$:
                            150 ;	_free.c:142: _sdcc_prev_memheader = cur_header;
   002B 8C*00               151 	mov	__sdcc_prev_memheader,r4
   002D 8D*01               152 	mov	(__sdcc_prev_memheader + 1),r5
                            153 ;	_free.c:143: cur_header = cur_header->next;
   002F 8C 82               154 	mov	dpl,r4
   0031 8D 83               155 	mov	dph,r5
   0033 E0                  156 	movx	a,@dptr
   0034 FC                  157 	mov	r4,a
   0035 A3                  158 	inc	dptr
   0036 E0                  159 	movx	a,@dptr
   0037 FD                  160 	mov	r5,a
   0038 80 E3               161 	sjmp	00104$
   003A                     162 00106$:
                            163 ;	_free.c:145: return (cur_header);
   003A 8C 82               164 	mov	dpl,r4
   003C 8D 83               165 	mov	dph,r5
   003E 22                  166 	ret
                            167 ;------------------------------------------------------------
                            168 ;Allocation info for local variables in function 'free'
                            169 ;------------------------------------------------------------
                            170 ;p                         Allocated to registers r2 r3 r4 
                            171 ;pthis                     Allocated to registers r2 r3 
                            172 ;------------------------------------------------------------
                            173 ;	_free.c:148: void free (void * p)
                            174 ;	-----------------------------------------
                            175 ;	 function free
                            176 ;	-----------------------------------------
   003F                     177 _free:
   003F AA 82               178 	mov	r2,dpl
   0041 AB 83               179 	mov	r3,dph
   0043 AC F0               180 	mov	r4,b
                            181 ;	_free.c:166: }
   0045 D3                  182 	setb	c
   0046 10 AF 01            183 	jbc	ea,00110$
   0049 C3                  184 	clr	c
   004A                     185 00110$:
   004A C0 D0               186 	push	psw
                            187 ;	_free.c:154: pthis = _sdcc_find_memheader(p);
   004C 8A 82               188 	mov	dpl,r2
   004E 8B 83               189 	mov	dph,r3
   0050 12s00r00            190 	lcall	__sdcc_find_memheader
   0053 AA 82               191 	mov	r2,dpl
   0055 AB 83               192 	mov	r3,dph
                            193 ;	_free.c:155: if (pthis) //For allocated pointers only!
   0057 EA                  194 	mov	a,r2
   0058 4B                  195 	orl	a,r3
   0059 60 28               196 	jz	00105$
                            197 ;	_free.c:157: if (!_sdcc_prev_memheader)
   005B E5*00               198 	mov	a,__sdcc_prev_memheader
   005D 45*01               199 	orl	a,(__sdcc_prev_memheader + 1)
   005F 70 0C               200 	jnz	00102$
                            201 ;	_free.c:159: pthis->len = 0;
   0061 8A 82               202 	mov	dpl,r2
   0063 8B 83               203 	mov	dph,r3
   0065 A3                  204 	inc	dptr
   0066 A3                  205 	inc	dptr
   0067 E4                  206 	clr	a
   0068 F0                  207 	movx	@dptr,a
   0069 A3                  208 	inc	dptr
   006A F0                  209 	movx	@dptr,a
   006B 80 16               210 	sjmp	00105$
   006D                     211 00102$:
                            212 ;	_free.c:163: _sdcc_prev_memheader->next = pthis->next;
   006D AC*00               213 	mov	r4,__sdcc_prev_memheader
   006F AD*01               214 	mov	r5,(__sdcc_prev_memheader + 1)
   0071 8A 82               215 	mov	dpl,r2
   0073 8B 83               216 	mov	dph,r3
   0075 E0                  217 	movx	a,@dptr
   0076 FA                  218 	mov	r2,a
   0077 A3                  219 	inc	dptr
   0078 E0                  220 	movx	a,@dptr
   0079 FB                  221 	mov	r3,a
   007A 8C 82               222 	mov	dpl,r4
   007C 8D 83               223 	mov	dph,r5
   007E EA                  224 	mov	a,r2
   007F F0                  225 	movx	@dptr,a
   0080 A3                  226 	inc	dptr
   0081 EB                  227 	mov	a,r3
   0082 F0                  228 	movx	@dptr,a
   0083                     229 00105$:
   0083 D0 D0               230 	pop	psw
   0085 92 AF               231 	mov	ea,c
   0087 22                  232 	ret
                            233 	.area CSEG    (CODE)
                            234 	.area CONST   (CODE)
                            235 	.area XINIT   (CODE)
                            236 	.area CABS    (ABS,CODE)
