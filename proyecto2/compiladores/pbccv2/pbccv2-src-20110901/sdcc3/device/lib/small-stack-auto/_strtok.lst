                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:31 2015
                              5 ;--------------------------------------------------------
                              6 	.module _strtok
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _strtok
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
   0000                      32 _strtok_s_1_1:
   0000                      33 	.ds 3
                             34 ;--------------------------------------------------------
                             35 ; overlayable items in internal ram 
                             36 ;--------------------------------------------------------
                             37 	.area OSEG    (OVR,DATA)
                             38 ;--------------------------------------------------------
                             39 ; indirectly addressable internal ram data
                             40 ;--------------------------------------------------------
                             41 	.area ISEG    (DATA)
                             42 ;--------------------------------------------------------
                             43 ; absolute internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area IABS    (ABS,DATA)
                             46 	.area IABS    (ABS,DATA)
                             47 ;--------------------------------------------------------
                             48 ; bit data
                             49 ;--------------------------------------------------------
                             50 	.area BSEG    (BIT)
                             51 ;--------------------------------------------------------
                             52 ; paged external ram data
                             53 ;--------------------------------------------------------
                             54 	.area PSEG    (PAG,XDATA)
                             55 ;--------------------------------------------------------
                             56 ; external ram data
                             57 ;--------------------------------------------------------
                             58 	.area XSEG    (XDATA)
                             59 ;--------------------------------------------------------
                             60 ; absolute external ram data
                             61 ;--------------------------------------------------------
                             62 	.area XABS    (ABS,XDATA)
                             63 ;--------------------------------------------------------
                             64 ; external initialized ram data
                             65 ;--------------------------------------------------------
                             66 	.area XISEG   (XDATA)
                             67 	.area HOME    (CODE)
                             68 	.area GSINIT0 (CODE)
                             69 	.area GSINIT1 (CODE)
                             70 	.area GSINIT2 (CODE)
                             71 	.area GSINIT3 (CODE)
                             72 	.area GSINIT4 (CODE)
                             73 	.area GSINIT5 (CODE)
                             74 	.area GSINIT  (CODE)
                             75 	.area GSFINAL (CODE)
                             76 	.area CSEG    (CODE)
                             77 ;--------------------------------------------------------
                             78 ; global & static initialisations
                             79 ;--------------------------------------------------------
                             80 	.area HOME    (CODE)
                             81 	.area GSINIT  (CODE)
                             82 	.area GSFINAL (CODE)
                             83 	.area GSINIT  (CODE)
                             84 ;--------------------------------------------------------
                             85 ; Home
                             86 ;--------------------------------------------------------
                             87 	.area HOME    (CODE)
                             88 	.area HOME    (CODE)
                             89 ;--------------------------------------------------------
                             90 ; code
                             91 ;--------------------------------------------------------
                             92 	.area CSEG    (CODE)
                             93 ;------------------------------------------------------------
                             94 ;Allocation info for local variables in function 'strtok'
                             95 ;------------------------------------------------------------
                             96 ;control                   Allocated to stack - offset -5
                             97 ;str                       Allocated to registers r2 r3 r4 
                             98 ;s1                        Allocated to registers r2 r3 r4 
                             99 ;s                         Allocated with name '_strtok_s_1_1'
                            100 ;------------------------------------------------------------
                            101 ;	_strtok.c:36: char * strtok (
                            102 ;	-----------------------------------------
                            103 ;	 function strtok
                            104 ;	-----------------------------------------
   0000                     105 _strtok:
                    0002    106 	ar2 = 0x02
                    0003    107 	ar3 = 0x03
                    0004    108 	ar4 = 0x04
                    0005    109 	ar5 = 0x05
                    0006    110 	ar6 = 0x06
                    0007    111 	ar7 = 0x07
                    0000    112 	ar0 = 0x00
                    0001    113 	ar1 = 0x01
   0000 C0*00               114 	push	_bp
   0002 85 81*00            115 	mov	_bp,sp
   0005 AA 82               116 	mov	r2,dpl
   0007 AB 83               117 	mov	r3,dph
   0009 AC F0               118 	mov	r4,b
                            119 ;	_strtok.c:43: if ( str )
   000B EA                  120 	mov	a,r2
   000C 4B                  121 	orl	a,r3
   000D 4C                  122 	orl	a,r4
   000E 60 06               123 	jz	00102$
                            124 ;	_strtok.c:44: s = str ;
   0010 8A*00               125 	mov	_strtok_s_1_1,r2
   0012 8B*01               126 	mov	(_strtok_s_1_1 + 1),r3
   0014 8C*02               127 	mov	(_strtok_s_1_1 + 2),r4
   0016                     128 00102$:
                            129 ;	_strtok.c:45: if ( !s )
   0016 E5*00               130 	mov	a,_strtok_s_1_1
   0018 45*01               131 	orl	a,(_strtok_s_1_1 + 1)
   001A 45*02               132 	orl	a,(_strtok_s_1_1 + 2)
                            133 ;	_strtok.c:46: return NULL;
   001C 70 08               134 	jnz	00108$
   001E 90 00 00            135 	mov	dptr,#0x0000
   0021 F5 F0               136 	mov	b,a
   0023 02s01r0C            137 	ljmp	00119$
                            138 ;	_strtok.c:48: while (*s) {
   0026                     139 00108$:
   0026 AA*00               140 	mov	r2,_strtok_s_1_1
   0028 AB*01               141 	mov	r3,(_strtok_s_1_1 + 1)
   002A AC*02               142 	mov	r4,(_strtok_s_1_1 + 2)
   002C 8A 82               143 	mov	dpl,r2
   002E 8B 83               144 	mov	dph,r3
   0030 8C F0               145 	mov	b,r4
   0032 12s00r00            146 	lcall	__gptrget
   0035 60 39               147 	jz	00110$
                            148 ;	_strtok.c:49: if (strchr(control,*s))
   0037 AA*00               149 	mov	r2,_strtok_s_1_1
   0039 AB*01               150 	mov	r3,(_strtok_s_1_1 + 1)
   003B AC*02               151 	mov	r4,(_strtok_s_1_1 + 2)
   003D 8A 82               152 	mov	dpl,r2
   003F 8B 83               153 	mov	dph,r3
   0041 8C F0               154 	mov	b,r4
   0043 12s00r00            155 	lcall	__gptrget
   0046 FA                  156 	mov	r2,a
   0047 C0 02               157 	push	ar2
   0049 E5*00               158 	mov	a,_bp
   004B 24 FB               159 	add	a,#0xfb
   004D F8                  160 	mov	r0,a
   004E 86 82               161 	mov	dpl,@r0
   0050 08                  162 	inc	r0
   0051 86 83               163 	mov	dph,@r0
   0053 08                  164 	inc	r0
   0054 86 F0               165 	mov	b,@r0
   0056 12s00r00            166 	lcall	_strchr
   0059 AA 82               167 	mov	r2,dpl
   005B AB 83               168 	mov	r3,dph
   005D AC F0               169 	mov	r4,b
   005F 15 81               170 	dec	sp
   0061 EA                  171 	mov	a,r2
   0062 4B                  172 	orl	a,r3
   0063 4C                  173 	orl	a,r4
   0064 60 0A               174 	jz	00110$
                            175 ;	_strtok.c:50: s++;
   0066 05*00               176 	inc	_strtok_s_1_1
   0068 E4                  177 	clr	a
                            178 ;	_strtok.c:52: break;
   0069 B5*00 BA            179 	cjne	a,_strtok_s_1_1,00108$
   006C 05*01               180 	inc	(_strtok_s_1_1 + 1)
   006E 80 B6               181 	sjmp	00108$
   0070                     182 00110$:
                            183 ;	_strtok.c:55: s1 = s ;
   0070 AA*00               184 	mov	r2,_strtok_s_1_1
   0072 AB*01               185 	mov	r3,(_strtok_s_1_1 + 1)
   0074 AC*02               186 	mov	r4,(_strtok_s_1_1 + 2)
                            187 ;	_strtok.c:57: while (*s) {
   0076                     188 00113$:
   0076 AD*00               189 	mov	r5,_strtok_s_1_1
   0078 AE*01               190 	mov	r6,(_strtok_s_1_1 + 1)
   007A AF*02               191 	mov	r7,(_strtok_s_1_1 + 2)
   007C 8D 82               192 	mov	dpl,r5
   007E 8E 83               193 	mov	dph,r6
   0080 8F F0               194 	mov	b,r7
   0082 12s00r00            195 	lcall	__gptrget
   0085 60 65               196 	jz	00115$
                            197 ;	_strtok.c:58: if (strchr(control,*s)) {
   0087 AD*00               198 	mov	r5,_strtok_s_1_1
   0089 AE*01               199 	mov	r6,(_strtok_s_1_1 + 1)
   008B AF*02               200 	mov	r7,(_strtok_s_1_1 + 2)
   008D 8D 82               201 	mov	dpl,r5
   008F 8E 83               202 	mov	dph,r6
   0091 8F F0               203 	mov	b,r7
   0093 12s00r00            204 	lcall	__gptrget
   0096 FD                  205 	mov	r5,a
   0097 C0 02               206 	push	ar2
   0099 C0 03               207 	push	ar3
   009B C0 04               208 	push	ar4
   009D C0 05               209 	push	ar5
   009F E5*00               210 	mov	a,_bp
   00A1 24 FB               211 	add	a,#0xfb
   00A3 F8                  212 	mov	r0,a
   00A4 86 82               213 	mov	dpl,@r0
   00A6 08                  214 	inc	r0
   00A7 86 83               215 	mov	dph,@r0
   00A9 08                  216 	inc	r0
   00AA 86 F0               217 	mov	b,@r0
   00AC 12s00r00            218 	lcall	_strchr
   00AF AD 82               219 	mov	r5,dpl
   00B1 AE 83               220 	mov	r6,dph
   00B3 AF F0               221 	mov	r7,b
   00B5 15 81               222 	dec	sp
   00B7 D0 04               223 	pop	ar4
   00B9 D0 03               224 	pop	ar3
   00BB D0 02               225 	pop	ar2
   00BD ED                  226 	mov	a,r5
   00BE 4E                  227 	orl	a,r6
   00BF 4F                  228 	orl	a,r7
   00C0 60 20               229 	jz	00112$
                            230 ;	_strtok.c:59: *s++ = '\0';
   00C2 AD*00               231 	mov	r5,_strtok_s_1_1
   00C4 AE*01               232 	mov	r6,(_strtok_s_1_1 + 1)
   00C6 AF*02               233 	mov	r7,(_strtok_s_1_1 + 2)
   00C8 8D 82               234 	mov	dpl,r5
   00CA 8E 83               235 	mov	dph,r6
   00CC 8F F0               236 	mov	b,r7
   00CE E4                  237 	clr	a
   00CF 12s00r00            238 	lcall	__gptrput
   00D2 05*00               239 	inc	_strtok_s_1_1
   00D4 E4                  240 	clr	a
   00D5 B5*00 02            241 	cjne	a,_strtok_s_1_1,00137$
   00D8 05*01               242 	inc	(_strtok_s_1_1 + 1)
   00DA                     243 00137$:
                            244 ;	_strtok.c:60: return s1 ;
   00DA 8A 82               245 	mov	dpl,r2
   00DC 8B 83               246 	mov	dph,r3
   00DE 8C F0               247 	mov	b,r4
   00E0 80 2A               248 	sjmp	00119$
   00E2                     249 00112$:
                            250 ;	_strtok.c:62: s++ ;
   00E2 05*00               251 	inc	_strtok_s_1_1
   00E4 E4                  252 	clr	a
   00E5 B5*00 8E            253 	cjne	a,_strtok_s_1_1,00113$
   00E8 05*01               254 	inc	(_strtok_s_1_1 + 1)
   00EA 80 8A               255 	sjmp	00113$
   00EC                     256 00115$:
                            257 ;	_strtok.c:65: s = NULL;
   00EC E4                  258 	clr	a
   00ED F5*00               259 	mov	_strtok_s_1_1,a
   00EF F5*01               260 	mov	(_strtok_s_1_1 + 1),a
   00F1 F5*02               261 	mov	(_strtok_s_1_1 + 2),a
                            262 ;	_strtok.c:67: if (*s1)
   00F3 8A 82               263 	mov	dpl,r2
   00F5 8B 83               264 	mov	dph,r3
   00F7 8C F0               265 	mov	b,r4
   00F9 12s00r00            266 	lcall	__gptrget
   00FC 60 08               267 	jz	00117$
                            268 ;	_strtok.c:68: return s1;
   00FE 8A 82               269 	mov	dpl,r2
   0100 8B 83               270 	mov	dph,r3
   0102 8C F0               271 	mov	b,r4
   0104 80 06               272 	sjmp	00119$
   0106                     273 00117$:
                            274 ;	_strtok.c:70: return NULL;
   0106 90 00 00            275 	mov	dptr,#0x0000
   0109 75 F0 00            276 	mov	b,#0x00
   010C                     277 00119$:
   010C D0*00               278 	pop	_bp
   010E 22                  279 	ret
                            280 	.area CSEG    (CODE)
                            281 	.area CONST   (CODE)
                            282 	.area XINIT   (CODE)
                            283 	.area CABS    (ABS,CODE)
