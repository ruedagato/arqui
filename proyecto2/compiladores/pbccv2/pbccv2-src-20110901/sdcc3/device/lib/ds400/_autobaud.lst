                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:20 2015
                              5 ;--------------------------------------------------------
                              6 	.module _autobaud
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _autobaud
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                    0080     34 _P0	=	0x0080
                    0081     35 _SP	=	0x0081
                    0082     36 _DPL	=	0x0082
                    0083     37 _DPH	=	0x0083
                    0087     38 _PCON	=	0x0087
                    0088     39 _TCON	=	0x0088
                    0089     40 _TMOD	=	0x0089
                    008A     41 _TL0	=	0x008a
                    008B     42 _TL1	=	0x008b
                    008C     43 _TH0	=	0x008c
                    008D     44 _TH1	=	0x008d
                    0090     45 _P1	=	0x0090
                    0098     46 _SCON	=	0x0098
                    0099     47 _SBUF	=	0x0099
                    00A0     48 _P2	=	0x00a0
                    00A8     49 _IE	=	0x00a8
                    00B0     50 _P3	=	0x00b0
                    00B8     51 _IP	=	0x00b8
                    00D0     52 _PSW	=	0x00d0
                    00E0     53 _ACC	=	0x00e0
                    00F0     54 _B	=	0x00f0
                             55 ;--------------------------------------------------------
                             56 ; special function bits
                             57 ;--------------------------------------------------------
                    0080     58 _P0_0	=	0x0080
                    0081     59 _P0_1	=	0x0081
                    0082     60 _P0_2	=	0x0082
                    0083     61 _P0_3	=	0x0083
                    0084     62 _P0_4	=	0x0084
                    0085     63 _P0_5	=	0x0085
                    0086     64 _P0_6	=	0x0086
                    0087     65 _P0_7	=	0x0087
                    0088     66 _IT0	=	0x0088
                    0089     67 _IE0	=	0x0089
                    008A     68 _IT1	=	0x008a
                    008B     69 _IE1	=	0x008b
                    008C     70 _TR0	=	0x008c
                    008D     71 _TF0	=	0x008d
                    008E     72 _TR1	=	0x008e
                    008F     73 _TF1	=	0x008f
                    0090     74 _P1_0	=	0x0090
                    0091     75 _P1_1	=	0x0091
                    0092     76 _P1_2	=	0x0092
                    0093     77 _P1_3	=	0x0093
                    0094     78 _P1_4	=	0x0094
                    0095     79 _P1_5	=	0x0095
                    0096     80 _P1_6	=	0x0096
                    0097     81 _P1_7	=	0x0097
                    0098     82 _RI	=	0x0098
                    0099     83 _TI	=	0x0099
                    009A     84 _RB8	=	0x009a
                    009B     85 _TB8	=	0x009b
                    009C     86 _REN	=	0x009c
                    009D     87 _SM2	=	0x009d
                    009E     88 _SM1	=	0x009e
                    009F     89 _SM0	=	0x009f
                    00A0     90 _P2_0	=	0x00a0
                    00A1     91 _P2_1	=	0x00a1
                    00A2     92 _P2_2	=	0x00a2
                    00A3     93 _P2_3	=	0x00a3
                    00A4     94 _P2_4	=	0x00a4
                    00A5     95 _P2_5	=	0x00a5
                    00A6     96 _P2_6	=	0x00a6
                    00A7     97 _P2_7	=	0x00a7
                    00A8     98 _EX0	=	0x00a8
                    00A9     99 _ET0	=	0x00a9
                    00AA    100 _EX1	=	0x00aa
                    00AB    101 _ET1	=	0x00ab
                    00AC    102 _ES	=	0x00ac
                    00AF    103 _EA	=	0x00af
                    00B0    104 _P3_0	=	0x00b0
                    00B1    105 _P3_1	=	0x00b1
                    00B2    106 _P3_2	=	0x00b2
                    00B3    107 _P3_3	=	0x00b3
                    00B4    108 _P3_4	=	0x00b4
                    00B5    109 _P3_5	=	0x00b5
                    00B6    110 _P3_6	=	0x00b6
                    00B7    111 _P3_7	=	0x00b7
                    00B0    112 _RXD	=	0x00b0
                    00B1    113 _TXD	=	0x00b1
                    00B2    114 _INT0	=	0x00b2
                    00B3    115 _INT1	=	0x00b3
                    00B4    116 _T0	=	0x00b4
                    00B5    117 _T1	=	0x00b5
                    00B6    118 _WR	=	0x00b6
                    00B7    119 _RD	=	0x00b7
                    00B8    120 _PX0	=	0x00b8
                    00B9    121 _PT0	=	0x00b9
                    00BA    122 _PX1	=	0x00ba
                    00BB    123 _PT1	=	0x00bb
                    00BC    124 _PS	=	0x00bc
                    00D0    125 _P	=	0x00d0
                    00D1    126 _F1	=	0x00d1
                    00D2    127 _OV	=	0x00d2
                    00D3    128 _RS0	=	0x00d3
                    00D4    129 _RS1	=	0x00d4
                    00D5    130 _F0	=	0x00d5
                    00D6    131 _AC	=	0x00d6
                    00D7    132 _CY	=	0x00d7
                            133 ;--------------------------------------------------------
                            134 ; overlayable register banks
                            135 ;--------------------------------------------------------
                            136 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     137 	.ds 8
                            138 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                     139 	.ds 8
                            140 ;--------------------------------------------------------
                            141 ; internal ram data
                            142 ;--------------------------------------------------------
                            143 	.area DSEG    (DATA)
                            144 ;--------------------------------------------------------
                            145 ; overlayable items in internal ram 
                            146 ;--------------------------------------------------------
                            147 	.area OSEG    (OVR,DATA)
                            148 ;--------------------------------------------------------
                            149 ; indirectly addressable internal ram data
                            150 ;--------------------------------------------------------
                            151 	.area ISEG    (DATA)
                            152 ;--------------------------------------------------------
                            153 ; absolute internal ram data
                            154 ;--------------------------------------------------------
                            155 	.area IABS    (ABS,DATA)
                            156 	.area IABS    (ABS,DATA)
                            157 ;--------------------------------------------------------
                            158 ; bit data
                            159 ;--------------------------------------------------------
                            160 	.area BSEG    (BIT)
                            161 ;--------------------------------------------------------
                            162 ; paged external ram data
                            163 ;--------------------------------------------------------
                            164 	.area PSEG    (PAG,XDATA)
                            165 ;--------------------------------------------------------
                            166 ; external ram data
                            167 ;--------------------------------------------------------
                            168 	.area XSEG    (XDATA)
                            169 ;--------------------------------------------------------
                            170 ; absolute external ram data
                            171 ;--------------------------------------------------------
                            172 	.area XABS    (ABS,XDATA)
                            173 ;--------------------------------------------------------
                            174 ; external initialized ram data
                            175 ;--------------------------------------------------------
                            176 	.area XISEG   (XDATA)
                            177 ;--------------------------------------------------------
                            178 ; global & static initialisations
                            179 ;--------------------------------------------------------
                            180 	.area HOME    (CODE)
                            181 	.area GSINIT  (CODE)
                            182 	.area GSFINAL (CODE)
                            183 	.area GSINIT  (CODE)
                            184 ;--------------------------------------------------------
                            185 ; Home
                            186 ;--------------------------------------------------------
                            187 	.area HOME    (CODE)
                            188 	.area HOME    (CODE)
                            189 ;--------------------------------------------------------
                            190 ; code
                            191 ;--------------------------------------------------------
                            192 	.area CSEG    (CODE)
                            193 ;------------------------------------------------------------
                            194 ;Allocation info for local variables in function 'autobaud'
                            195 ;------------------------------------------------------------
                            196 ;------------------------------------------------------------
                            197 ;	_autobaud.c:57: void autobaud ()
                            198 ;	-----------------------------------------
                            199 ;	 function autobaud
                            200 ;	-----------------------------------------
   0000                     201 _autobaud:
                    0002    202 	ar2 = 0x02
                    0003    203 	ar3 = 0x03
                    0004    204 	ar4 = 0x04
                    0005    205 	ar5 = 0x05
                    0006    206 	ar6 = 0x06
                    0007    207 	ar7 = 0x07
                    0000    208 	ar0 = 0x00
                    0001    209 	ar1 = 0x01
                            210 ;	_autobaud.c:61: TMOD=0x11;
                            211 ;	genAssign: resultIsFar = FALSE
   0000 75 89 11            212 	mov	_TMOD,#0x11
                            213 ;	_autobaud.c:62: TCON = 0;
                            214 ;	genAssign: resultIsFar = FALSE
   0003 75 88 00            215 	mov	_TCON,#0x00
                            216 ;	_autobaud.c:63: TH1 = TL1 = 0;
                            217 ;	genAssign: resultIsFar = FALSE
   0006 75 8B 00            218 	mov	_TL1,#0x00
                            219 ;	genAssign: resultIsFar = FALSE
   0009 75 8D 00            220 	mov	_TH1,#0x00
                            221 ;	_autobaud.c:67: while(RXD) ; 
   000C                     222 00102$:
   000C 20 B0 FD            223 	jb   _RXD,00102$
   000F                     224 00142$:
                            225 ;	_autobaud.c:71: if (RXD) goto autobaud2;
   000F 20 B0 FA            226 	jb   _RXD,00102$
   0012                     227 00143$:
                            228 ;	_autobaud.c:72: if (RXD) goto autobaud2;
   0012 20 B0 F7            229 	jb   _RXD,00102$
   0015                     230 00144$:
                            231 ;	_autobaud.c:73: if (RXD) goto autobaud2;
   0015 20 B0 F4            232 	jb   _RXD,00102$
   0018                     233 00145$:
                            234 ;	_autobaud.c:74: if (RXD) goto autobaud2;
   0018 20 B0 F1            235 	jb   _RXD,00102$
   001B                     236 00146$:
                            237 ;	_autobaud.c:77: while (!RXD);
   001B                     238 00113$:
   001B 30 B0 FD            239 	jnb  _RXD,00113$
   001E                     240 00147$:
                            241 ;	_autobaud.c:78: TR1 = 1; /* start the timer */
                            242 ;	genAssign: resultIsFar = FALSE
   001E D2 8E               243 	setb	_TR1
                            244 ;	_autobaud.c:79: while (RXD);             // wait for bit #1 to begin
   0020                     245 00116$:
   0020 20 B0 FD            246 	jb   _RXD,00116$
   0023                     247 00148$:
                            248 ;	_autobaud.c:80: while(!RXD);             // wait for bit #2 to begin
   0023                     249 00119$:
   0023 30 B0 FD            250 	jnb  _RXD,00119$
   0026                     251 00149$:
                            252 ;	_autobaud.c:81: while(RXD);              // wait for bit #4 to begin
   0026                     253 00122$:
   0026 20 B0 FD            254 	jb   _RXD,00122$
   0029                     255 00150$:
                            256 ;	_autobaud.c:82: while (!RXD);            // wait for stop bit to begin
   0029                     257 00125$:
   0029 30 B0 FD            258 	jnb  _RXD,00125$
   002C                     259 00151$:
                            260 ;	_autobaud.c:83: TR1 = 0;                 // stop timing
                            261 ;	genAssign: resultIsFar = FALSE
   002C C2 8E               262 	clr	_TR1
                            263 ;	_autobaud.c:86: TH1 = (TH1 << 1) | (TL1 >> 7);
   002E E5 8D               264 	mov	a,_TH1
   0030 25 E0               265 	add	a,acc
   0032 FA                  266 	mov	r2,a
   0033 E5 8B               267 	mov	a,_TL1
   0035 23                  268 	rl	a
   0036 54 01               269 	anl	a,#0x01
   0038 FB                  270 	mov  r3,a
   0039 4A                  271 	orl	a,r2
                            272 ;	_autobaud.c:89: TH1 = (TH1 << 1) | ((TL1 >> 6) & 0x01);
   003A F5 8D               273 	mov  _TH1,a
   003C 25 E0               274 	add	a,acc
   003E FA                  275 	mov	r2,a
   003F E5 8B               276 	mov	a,_TL1
   0041 23                  277 	rl	a
   0042 23                  278 	rl	a
   0043 54 01               279 	anl  a,#(0x03 & 0x01)
   0045 FB                  280 	mov  r3,a
   0046 4A                  281 	orl	a,r2
                            282 ;	_autobaud.c:92: TH1 = ~TH1;
   0047 F4                  283 	cpl  a
                            284 ;	_autobaud.c:95: TH1++ ;
   0048 04                  285 	inc  a
   0049 F5 8D               286 	mov  _TH1,a
                            287 ;	_autobaud.c:97: TL1 = TH1;
                            288 ;	genAssign: resultIsFar = FALSE
   004B 85 8D 8B            289 	mov	_TL1,_TH1
                            290 ;	_autobaud.c:98: TMOD =  0x21     ;      // set timer #1 for 8 bit auto-reload
                            291 ;	genAssign: resultIsFar = FALSE
   004E 75 89 21            292 	mov	_TMOD,#0x21
                            293 ;	_autobaud.c:99: PCON =  0x80     ;      // configure built-in uart
                            294 ;	genAssign: resultIsFar = FALSE
   0051 75 87 80            295 	mov	_PCON,#0x80
                            296 ;	_autobaud.c:100: SCON =  0x52     ;
                            297 ;	genAssign: resultIsFar = FALSE
   0054 75 98 52            298 	mov	_SCON,#0x52
   0057                     299 00128$:
   0057 22                  300 	ret
                            301 	.area CSEG    (CODE)
                            302 	.area CONST   (CODE)
                            303 	.area XINIT   (CODE)
                            304 	.area CABS    (ABS,CODE)
