                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:20 2015
                              5 ;--------------------------------------------------------
                              6 	.module _free
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl __sdcc_find_memheader
                             31 	.globl __sdcc_prev_memheader
                             32 	.globl _free
                             33 ;--------------------------------------------------------
                             34 ; special function registers
                             35 ;--------------------------------------------------------
                             36 ;--------------------------------------------------------
                             37 ; special function bits
                             38 ;--------------------------------------------------------
                             39 ;--------------------------------------------------------
                             40 ; overlayable register banks
                             41 ;--------------------------------------------------------
                             42 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      43 	.ds 8
                             44 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                      45 	.ds 8
                             46 ;--------------------------------------------------------
                             47 ; internal ram data
                             48 ;--------------------------------------------------------
                             49 	.area DSEG    (DATA)
                             50 ;--------------------------------------------------------
                             51 ; overlayable items in internal ram 
                             52 ;--------------------------------------------------------
                             53 	.area OSEG    (OVR,DATA)
                             54 ;--------------------------------------------------------
                             55 ; indirectly addressable internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area ISEG    (DATA)
                             58 ;--------------------------------------------------------
                             59 ; absolute internal ram data
                             60 ;--------------------------------------------------------
                             61 	.area IABS    (ABS,DATA)
                             62 	.area IABS    (ABS,DATA)
                             63 ;--------------------------------------------------------
                             64 ; bit data
                             65 ;--------------------------------------------------------
                             66 	.area BSEG    (BIT)
                             67 ;--------------------------------------------------------
                             68 ; paged external ram data
                             69 ;--------------------------------------------------------
                             70 	.area PSEG    (PAG,XDATA)
                             71 ;--------------------------------------------------------
                             72 ; external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XSEG    (XDATA)
   0000                      75 __sdcc_prev_memheader::
   0000                      76 	.ds 3
                             77 ;--------------------------------------------------------
                             78 ; absolute external ram data
                             79 ;--------------------------------------------------------
                             80 	.area XABS    (ABS,XDATA)
                             81 ;--------------------------------------------------------
                             82 ; external initialized ram data
                             83 ;--------------------------------------------------------
                             84 	.area XISEG   (XDATA)
                             85 ;--------------------------------------------------------
                             86 ; global & static initialisations
                             87 ;--------------------------------------------------------
                             88 	.area HOME    (CODE)
                             89 	.area GSINIT  (CODE)
                             90 	.area GSFINAL (CODE)
                             91 	.area GSINIT  (CODE)
                             92 ;--------------------------------------------------------
                             93 ; Home
                             94 ;--------------------------------------------------------
                             95 	.area HOME    (CODE)
                             96 	.area HOME    (CODE)
                             97 ;--------------------------------------------------------
                             98 ; code
                             99 ;--------------------------------------------------------
                            100 	.area CSEG    (CODE)
                            101 ;------------------------------------------------------------
                            102 ;Allocation info for local variables in function '_sdcc_find_memheader'
                            103 ;------------------------------------------------------------
                            104 ;p                         Allocated to registers r2 r3 r4 
                            105 ;pthis                     Allocated to registers r2 r3 r4 
                            106 ;cur_header                Allocated to registers r5 r6 r7 
                            107 ;------------------------------------------------------------
                            108 ;	_free.c:129: MEMHEADER __xdata * _sdcc_find_memheader(void __xdata * p)
                            109 ;	-----------------------------------------
                            110 ;	 function _sdcc_find_memheader
                            111 ;	-----------------------------------------
   0000                     112 __sdcc_find_memheader:
                    0002    113 	ar2 = 0x02
                    0003    114 	ar3 = 0x03
                    0004    115 	ar4 = 0x04
                    0005    116 	ar5 = 0x05
                    0006    117 	ar6 = 0x06
                    0007    118 	ar7 = 0x07
                    0000    119 	ar0 = 0x00
                    0001    120 	ar1 = 0x01
   0000 85 82 84            121 	mov	dpl1,dpl
   0003 85 83 85            122 	mov	dph1,dph
   0006 85 93 95            123 	mov	dpx1,dpx
                            124 ;	_free.c:134: if (!p)
   0009 E5 84               125 	mov	a,dpl1
   000B 45 85               126 	orl	a,dph1
   000D 45 95               127 	orl	a,dpx1
   000F 70 08               128 	jnz  00102$
   0011                     129 00113$:
                            130 ;	_free.c:135: return NULL;
   0011 90 00 00 00         131 	mov  dptr,#0x0000
   0015 02s00r00rA7         132 	ljmp	00107$
   0019                     133 00102$:
                            134 ;	_free.c:137: pthis -= 1; //to start of header
   0019 E5 84               135 	mov	a,dpl1
   001B 24 FB               136 	add	a,#0xFB
   001D FA                  137 	mov	r2,a
   001E E5 85               138 	mov	a,dph1
   0020 34 FF               139 	addc	a,#0xFF
   0022 FB                  140 	mov	r3,a
   0023 E5 95               141 	mov	a,dpx1
   0025 34 FF               142 	addc	a,#0xFF
   0027 FC                  143 	mov	r4,a
                            144 ;	genAssign: resultIsFar = TRUE
                            145 ;	_free.c:138: cur_header = _sdcc_first_memheader;
   0028 90s00r00r00         146 	mov	dptr,#__sdcc_first_memheader
                            147 ;	genAssign: resultIsFar = FALSE
   002C E0                  148 	movx	a,@dptr
   002D FD                  149 	mov	r5,a
   002E A3                  150 	inc	dptr
   002F E0                  151 	movx	a,@dptr
   0030 FE                  152 	mov	r6,a
   0031 A3                  153 	inc	dptr
   0032 E0                  154 	movx	a,@dptr
   0033 FF                  155 	mov	r7,a
                            156 ;	genAssign: resultIsFar = TRUE
   0034 8D 84               157 	mov	dpl1,r5
   0036 8E 85               158 	mov	dph1,r6
   0038 8F 95               159 	mov	dpx1,r7
                            160 ;	_free.c:139: _sdcc_prev_memheader = NULL;
                            161 ;	genAssign: resultIsFar = TRUE
   003A 90s00r00r00         162 	mov	dptr,#__sdcc_prev_memheader
   003E E4                  163 	clr	a
   003F F0                  164 	movx	@dptr,a
   0040 A3                  165 	inc	dptr
   0041 F0                  166 	movx	@dptr,a
   0042 A3                  167 	inc	dptr
   0043 F0                  168 	movx	@dptr,a
                            169 ;	_free.c:140: while (cur_header && pthis != cur_header)
   0044                     170 00104$:
   0044 E5 84               171 	mov	a,dpl1
   0046 45 85               172 	orl	a,dph1
   0048 45 95               173 	orl	a,dpx1
   004A 60 52               174 	jz  00106$
   004C                     175 00114$:
   004C 8A F0               176 	mov	b,r2
   004E E5 84               177 	mov	a,dpl1
   0050 B5 F0 10            178 	cjne	a,b,00115$
   0053 8B F0               179 	mov	b,r3
   0055 E5 85               180 	mov	a,dph1
   0057 B5 F0 09            181 	cjne	a,b,00115$
   005A 8C F0               182 	mov	b,r4
   005C E5 95               183 	mov	a,dpx1
   005E B5 F0 02            184 	cjne	a,b,00115$
   0061 80 3B               185 	sjmp 00106$
   0063                     186 00115$:
                            187 ;	_free.c:142: _sdcc_prev_memheader = cur_header;
   0063 C0 02               188 	push	ar2
   0065 C0 03               189 	push	ar3
   0067 C0 04               190 	push	ar4
                            191 ;	genAssign: resultIsFar = TRUE
   0069 90s00r00r00         192 	mov	dptr,#__sdcc_prev_memheader
   006D E5 84               193 	mov	a,dpl1
   006F F0                  194 	movx	@dptr,a
   0070 A3                  195 	inc	dptr
   0071 E5 85               196 	mov	a,dph1
   0073 F0                  197 	movx	@dptr,a
   0074 A3                  198 	inc	dptr
   0075 E5 95               199 	mov	a,dpx1
   0077 F0                  200 	movx	@dptr,a
                            201 ;	_free.c:143: cur_header = cur_header->next;
   0078 05 86               202 	inc	dps
   007A E0                  203 	movx	a,@dptr
   007B A3                  204 	inc	dptr
   007C F8                  205 	mov	r0,a
   007D E0                  206 	movx	a,@dptr
   007E A3                  207 	inc	dptr
   007F F9                  208 	mov	r1,a
   0080 E0                  209 	movx	a,@dptr
   0081 FA                  210 	mov	r2,a
   0082 75 86 01            211 	mov     dps, #1
   0085 12s00r00r00         212 	lcall	__decdptr
   0089 12s00r00r00         213 	lcall	__decdptr
   008D 75 86 00            214 	mov	dps,#0
                            215 ;	genAssign: resultIsFar = TRUE
   0090 88 84               216 	mov	dpl1,r0
   0092 89 85               217 	mov	dph1,r1
   0094 8A 95               218 	mov	dpx1,r2
   0096 D0 04               219 	pop	ar4
   0098 D0 03               220 	pop	ar3
   009A D0 02               221 	pop	ar2
   009C 80 A6               222 	sjmp 00104$
   009E                     223 00106$:
                            224 ;	_free.c:145: return (cur_header);
   009E 85 84 82            225 	mov	dpl,dpl1
   00A1 85 85 83            226 	mov	dph,dph1
   00A4 85 95 93            227 	mov	dpx,dpx1
   00A7                     228 00107$:
   00A7 22                  229 	ret
                            230 ;------------------------------------------------------------
                            231 ;Allocation info for local variables in function 'free'
                            232 ;------------------------------------------------------------
                            233 ;p                         Allocated to registers 
                            234 ;pthis                     Allocated to registers r2 r3 r4 
                            235 ;------------------------------------------------------------
                            236 ;	_free.c:148: void free (void * p)
                            237 ;	-----------------------------------------
                            238 ;	 function free
                            239 ;	-----------------------------------------
   00A8                     240 _free:
                            241 ;	_free.c:154: pthis = _sdcc_find_memheader(p);
   00A8 AA 82               242 	mov     r2,dpl
   00AA AB 83               243 	mov     r3,dph
   00AC AC 93               244 	mov     r4,dpx
   00AE AD F0               245 	mov     r5,b
   00B0 12s00r00r00         246 	lcall	__sdcc_find_memheader
   00B4 AA 82               247 	mov	r2,dpl
   00B6 AB 83               248 	mov	r3,dph
   00B8 AC 93               249 	mov	r4,dpx
                            250 ;	genAssign: resultIsFar = FALSE
   00BA 8A 84               251 	mov	dpl1,r2
   00BC 8B 85               252 	mov	dph1,r3
   00BE 8C 95               253 	mov	dpx1,r4
                            254 ;	_free.c:155: if (pthis) //For allocated pointers only!
   00C0 E5 84               255 	mov	a,dpl1
   00C2 45 85               256 	orl	a,dph1
   00C4 45 95               257 	orl	a,dpx1
   00C6 60 3E               258 	jz  00106$
   00C8                     259 00110$:
                            260 ;	_free.c:157: if (!_sdcc_prev_memheader)
   00C8 90s00r00r00         261 	mov	dptr,#__sdcc_prev_memheader
                            262 ;	genAssign: resultIsFar = FALSE
   00CC E0                  263 	movx	a,@dptr
   00CD FD                  264 	mov	r5,a
   00CE A3                  265 	inc	dptr
   00CF E0                  266 	movx	a,@dptr
   00D0 FE                  267 	mov	r6,a
   00D1 A3                  268 	inc	dptr
   00D2 E0                  269 	movx	a,@dptr
   00D3 FF                  270 	mov	r7,a
   00D4 ED                  271 	mov	a,r5
   00D5 4E                  272 	orl	a,r6
   00D6 4F                  273 	orl	a,r7
   00D7 70 12               274 	jnz  00102$
   00D9                     275 00111$:
                            276 ;	_free.c:159: pthis->len = 0;
   00D9 85 95 93            277 	mov	dpx,dpx1
   00DC 85 85 83            278 	mov	dph,dph1
   00DF 85 84 82            279 	mov	dpl,dpl1
   00E2 A3                  280 	inc	dptr
   00E3 A3                  281 	inc	dptr
   00E4 A3                  282 	inc	dptr
   00E5 E4                  283 	clr  a
   00E6 F0                  284 	movx @dptr,a
   00E7 A3                  285 	inc  dptr
   00E8 F0                  286 	movx @dptr,a
   00E9 80 1B               287 	sjmp 00106$
   00EB                     288 00102$:
                            289 ;	_free.c:163: _sdcc_prev_memheader->next = pthis->next;
   00EB 05 86               290 	inc	dps
   00ED E0                  291 	movx	a,@dptr
   00EE A3                  292 	inc	dptr
   00EF FA                  293 	mov	r2,a
   00F0 E0                  294 	movx	a,@dptr
   00F1 A3                  295 	inc	dptr
   00F2 FB                  296 	mov	r3,a
   00F3 E0                  297 	movx	a,@dptr
   00F4 FC                  298 	mov	r4,a
   00F5 75 86 00            299 	mov	dps,#0
   00F8 8D 82               300 	mov	dpl,r5
   00FA 8E 83               301 	mov	dph,r6
   00FC 8F 93               302 	mov	dpx,r7
   00FE EA                  303 	mov	a,r2
   00FF F0                  304 	movx	@dptr,a
   0100 A3                  305 	inc	dptr
   0101 EB                  306 	mov	a,r3
   0102 F0                  307 	movx	@dptr,a
   0103 A3                  308 	inc	dptr
   0104 EC                  309 	mov	a,r4
   0105 F0                  310 	movx	@dptr,a
   0106                     311 00106$:
   0106 22                  312 	ret
                            313 	.area CSEG    (CODE)
                            314 	.area CONST   (CODE)
                            315 	.area XINIT   (CODE)
                            316 	.area CABS    (ABS,CODE)
