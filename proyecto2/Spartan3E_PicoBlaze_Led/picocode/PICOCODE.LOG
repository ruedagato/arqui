KCPSM3 Assembler log file for program 'picocode.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
19Oct2015-25:39:22

 Addr Code

 000                                 ; *
 000                                 ; * picocode.psm -  LED Control
 000                                 ; *
 000                                 ; *      ___       _         _   _       _ ___ _ _ ___
 000                                 ; * | __._ _ _| |_ ___ _| |_| |___ _| | . | \ |_ _|
 000                                 ; * | _>| ' ' | . / ._/ . / . / ._/ . |   |   || |
 000                                 ; * |___|_|_|_|___\___\___\___\___\___|_|_|_\_||_|
 000                                 ; *
 000                                 ; *
 000                                 ; *  Created on : 20/07/2015
 000                                 ; *      Author : Ernesto Andres Rincon Cruz
 000                                 ; *      Web  : www.embeddedant.org
 000                                 ; *    Device : XC3S700AN - 4FGG484
 000                                 ; *    Board  : Spartan-3AN Starter Kit.
 000                                 ; *
 000                                 ; *  Based on Ken Chapman code v1.00 - 4th January 2006
 000                                 ; *      Revision History:
 000                                 ; *   Rev 1.0.0 - (ErnestoARC) First release 16/08/2015.
 000                                 ; *
 000                                 ;//////////////////////////////////////////////////////////////////////////////////
 000                                 ; Use CONSTANT declarations to define output port addresses
 000                                 CONSTANT PORT_A, 00              ;
 000                                 ;;============================================================================
 000                                 ;;
 000                                 ;;============================================================================
 000                                 ADDRESS 000                      ; Programs always start at reset vector 0
 000  3C000                          DISABLE INTERRUPT                ; If using interrupts, be sure to enable the INTERRUPT input
 001                                 ;;============================================================================
 001                                 ;;
 001                                 ;;============================================================================
 001  00F3F                          LOAD sF, 3F
 002  34003                          JUMP __sdcc_program_startup[003]
 003                                 ;--------------------------------------------------------
 003                                 ; Home
 003                                 ;--------------------------------------------------------
 003         __sdcc_program_startup: 
 003  30005                          CALL _main[005]
 004                                 ; return from main will lock up
 004                    __sdcc_loop: 
 004  34004                          JUMP __sdcc_loop[004]
 005                                 ;--------------------------------------------------------
 005                                 ; code
 005                                 ;--------------------------------------------------------
 005                                 ; programa.c:21: void main()
 005                          _main: 
 005                                 ; programa.c:23: char cont_led = 2;
 005  00002                          LOAD s0, 02
 006                                 ; programa.c:25: unsigned char cont_nivel = 0;
 006  00100                          LOAD s1, 00
 007                                 ; programa.c:26: led_off();
 007  2F0F0                          STORE s0, (sF)
 008  1CF01                          SUB sF, 01
 009  2F1F0                          STORE s1, (sF)
 00A  1CF01                          SUB sF, 01
 00B  3005A                          CALL _led_off[05A]
 00C  18F01                          ADD sF, 01
 00D  071F0                          FETCH s1, (sF)
 00E  18F01                          ADD sF, 01
 00F  070F0                          FETCH s0, (sF)
 010                                 ; programa.c:27: delay_ms(2000);
 010  2F0F0                          STORE s0, (sF)
 011  1CF01                          SUB sF, 01
 012  2F1F0                          STORE s1, (sF)
 013  1CF01                          SUB sF, 01
 014  00BD0                          LOAD sB, D0
 015  00C07                          LOAD sC, 07
 016  30065                          CALL _delay_ms[065]
 017  18F01                          ADD sF, 01
 018  071F0                          FETCH s1, (sF)
 019  18F01                          ADD sF, 01
 01A  070F0                          FETCH s0, (sF)
 01B                                 ; programa.c:30: __endasm;
 01B  00700                          LOAD s7, 00
 01C                                 ; programa.c:31: while(1)
 01C                        _L00108: 
 01C                                 ; programa.c:33: if (cont_led == 1)
 01C  14001                          COMPARE s0, 01
 01D  35427                          JUMP NZ, _L00102[027]
 01E                                 ; programa.c:34: led_on();
 01E  2F0F0                          STORE s0, (sF)
 01F  1CF01                          SUB sF, 01
 020  2F1F0                          STORE s1, (sF)
 021  1CF01                          SUB sF, 01
 022  30057                          CALL _led_on[057]
 023  18F01                          ADD sF, 01
 024  071F0                          FETCH s1, (sF)
 025  18F01                          ADD sF, 01
 026  070F0                          FETCH s0, (sF)
 027                        _L00102: 
 027                                 ; programa.c:35: if (cont_led == 0)
 027  14000                          COMPARE s0, 00
 028  3502A                          JUMP Z, _LC00134[02A]
 029  34033                          JUMP _L00104[033]
 02A                       _LC00134: 
 02A                                 ; programa.c:37: led_off();
 02A  2F0F0                          STORE s0, (sF)
 02B  1CF01                          SUB sF, 01
 02C  2F1F0                          STORE s1, (sF)
 02D  1CF01                          SUB sF, 01
 02E  3005A                          CALL _led_off[05A]
 02F  18F01                          ADD sF, 01
 030  071F0                          FETCH s1, (sF)
 031  18F01                          ADD sF, 01
 032                                 ; programa.c:38: cont_led = 2;
 032  00002                          LOAD s0, 02
 033                        _L00104: 
 033                                 ; programa.c:40: if (cont_nivel == nivel)
 033  14102                          COMPARE s1, 02
 034  3543F                          JUMP NZ, _L00106[03F]
 035                                 ; programa.c:42: saltar();
 035  2F0F0                          STORE s0, (sF)
 036  1CF01                          SUB sF, 01
 037  2F1F0                          STORE s1, (sF)
 038  1CF01                          SUB sF, 01
 039  3004B                          CALL _saltar[04B]
 03A  18F01                          ADD sF, 01
 03B  071F0                          FETCH s1, (sF)
 03C  18F01                          ADD sF, 01
 03D  070F0                          FETCH s0, (sF)
 03E                                 ; programa.c:43: cont_nivel = 0;
 03E  00100                          LOAD s1, 00
 03F                        _L00106: 
 03F                                 ; programa.c:45: cont_nivel ++;
 03F  18101                          ADD s1, 01
 040                                 ; programa.c:46: cont_led --;
 040  1C001                          SUB s0, 01
 041                                 ; programa.c:47: delay();
 041  2F0F0                          STORE s0, (sF)
 042  1CF01                          SUB sF, 01
 043  2F1F0                          STORE s1, (sF)
 044  1CF01                          SUB sF, 01
 045  3005D                          CALL _delay[05D]
 046  18F01                          ADD sF, 01
 047  071F0                          FETCH s1, (sF)
 048  18F01                          ADD sF, 01
 049  070F0                          FETCH s0, (sF)
 04A  3401C                          JUMP _L00108[01C]
 04B                                 ; programa.c:51: void saltar()
 04B                        _saltar: 
 04B                                 ; programa.c:56: __endasm;
 04B  0E702                          XOR s7, 02
 04C  2C700                          OUTPUT s7, 00
 04D                                 ; programa.c:57: delay();
 04D  3005D                          CALL _delay[05D]
 04E                                 ; programa.c:61: __endasm;
 04E  0E702                          XOR s7, 02
 04F  2C700                          OUTPUT s7, 00
 050  2A000                          RETURN
 051                                 ; programa.c:64: void cam()
 051                           _cam: 
 051                                 ; programa.c:69: __endasm;
 051  0E704                          XOR s7, 04
 052  2C700                          OUTPUT s7, 00
 053                                 ; programa.c:70: delay();
 053  3005D                          CALL _delay[05D]
 054                                 ; programa.c:74: __endasm;
 054  0E704                          XOR s7, 04
 055  2C700                          OUTPUT s7, 00
 056  2A000                          RETURN
 057                                 ; programa.c:77: void led_on()
 057                        _led_on: 
 057                                 ; programa.c:82: __endasm;
 057  0E701                          XOR s7, 01
 058  2C700                          OUTPUT s7, 00
 059  2A000                          RETURN
 05A                                 ; programa.c:85: void led_off()
 05A                       _led_off: 
 05A                                 ; programa.c:90: __endasm;
 05A  0E701                          XOR s7, 01
 05B  2C700                          OUTPUT s7, 00
 05C  2A000                          RETURN
 05D                                 ; programa.c:94: void delay()
 05D                         _delay: 
 05D                                 ; programa.c:108: __endasm;
 05D                                 CONSTANT DELAY_LOOP2, 30         ; Loop delay
 05D  00100                          LOAD s1, 00
 05E                          _rpt2: 
 05E  18101                          ADD s1, 01
 05F  00000                          LOAD s0, 00
 060                          _rpt1: 
 060  18001                          ADD s0, 01
 061  35460                          JUMP NZ, _rpt1[060]
 062  14130                          COMPARE s1, DELAY_LOOP2[30]
 063  3545E                          JUMP NZ, _rpt2[05E]
 064  2A000                          RETURN
 065                                 ; programa.c:111: void delay_ms(int n)
 065                      _delay_ms: 
 065  010B0                          LOAD s0, sB
 066  011C0                          LOAD s1, sC
 067                                 ; programa.c:114: while(valor!=0)
 067                        _L00126: 
 067  01200                          LOAD s2, s0
 068  0D210                          OR s2, s1
 069  14200                          COMPARE s2, 00
 06A  3546C                          JUMP NZ, _LC00135[06C]
 06B  34078                          JUMP _L00133[078]
 06C                       _LC00135: 
 06C                                 ; programa.c:116: valor = valor - 1;
 06C  1C001                          SUB s0, 01
 06D  1E100                          SUBCY s1, 00
 06E                                 ; programa.c:117: delay();
 06E  2F0F0                          STORE s0, (sF)
 06F  1CF01                          SUB sF, 01
 070  2F1F0                          STORE s1, (sF)
 071  1CF01                          SUB sF, 01
 072  3005D                          CALL _delay[05D]
 073  18F01                          ADD sF, 01
 074  071F0                          FETCH s1, (sF)
 075  18F01                          ADD sF, 01
 076  070F0                          FETCH s0, (sF)
 077  34067                          JUMP _L00126[067]
 078                        _L00133: 
 078  2A000                          RETURN
 079  2A000                          RETURN
 07A                                 ;;============================================================================
 07A                                 ; Delay routine (~0.5s.)
 07A                                 ;;============================================================================
 07A                                 ; PicoBlaze requires 2 clocks per instruction
 07A                                 ; 2 + (4 + (4 + 4*256 + 4) * 256 + 4)*DELAY_LOOP + 2 =
 07A                                 ; 500ms = (4 + 264200*DELAY_LOOP )*(1/50MHz)
 07A                                 ; DELAY_LOOP = 0x5E
 07A                                 ; Use CONSTANT declarations to time delay refinition
 07A                                 CONSTANT DELAY_LOOP, 5E          ; Loop delay
 07A                          delay: 
 07A  00200                          LOAD s2, 00                      ; 2
 07B  18201                    rpt3: ADD s2, 01                       ; 2---------------------------------------------|
 07C                                 ;  ---------------------------------------------|
 07C  00100                          LOAD s1, 00                      ; 2---------------------------------------------|
 07D  18101                    rpt2: ADD s1, 01                       ; 2-------------------------------------|
 07E                                 ;  -------------------------------------|
 07E  00000                          LOAD s0, 00                      ; 2-------------------------------------|
 07F  18001                    rpt1: ADD s0, 01                       ; 2 ---------------|
 080  3547F                          JUMP NZ, rpt1[07F]               ; 2 ----------4*256|
 081                                 ;  -------------------------------------|
 081  14100                          COMPARE s1, 00                   ; 2-------------------------------------|
 082  3547D                          JUMP NZ, rpt2[07D]               ; 2----------------(4 + 4*256 + 4) * DELAY_LOOP|
 083  1425E                          COMPARE s2, DELAY_LOOP[5E]       ; 2---------------------------------------------|
 084  3547B                          JUMP NZ, rpt3[07B]               ; 2---(4 + (4 + 4*256 + 4) * 256 + 4)*DELAY_LOOP|
 085  2A000                          RETURN                           ; 2
 086                                 ;;============================================================================
 086                                 ;; An Interrupt Service Routine (ISR) is required if using interrupts
 086                                 ;; Interrupts are automatically disabled when an interrupt is recognized
 086                                 ;; Never re-enable interrupts during the ISR
 086                                 ;; Use RETURNI DISABLE to leave interrupts disabled
 086                                 ;;============================================================================
 086                            ISR: 
 086                                 ; <<< your interrupt code here >>>
 086  38001                          RETURNI ENABLE                   ; Return from interrupt service routine
 087                                 ;;============================================================================
 087                                 ;; Interrupt service routine vector.
 087                                 ;;============================================================================
 3FF                                 ADDRESS 3FF                      ; Interrupt vector is located at highest instruction address
 3FF  34086                          JUMP ISR[086]                    ; Jump to interrupt service routine, ISR
 3FF                                 ;;============================================================================
 3FF                                 ;;
 3FF                                 ;;============================================================================
