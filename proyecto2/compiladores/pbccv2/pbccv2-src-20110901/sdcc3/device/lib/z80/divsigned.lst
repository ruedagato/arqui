                              1 ;--------------------------------------------------------------------------
                              2 ;  divsigned.s
                              3 ;
                              4 ;  Copyright (C) 2000-2010, Michael Hope, Philipp Klaus Krause
                              5 ;
                              6 ;  This library is free software; you can redistribute it and/or modify it
                              7 ;  under the terms of the GNU General Public License as published by the
                              8 ;  Free Software Foundation; either version 2.1, or (at your option) any
                              9 ;  later version.
                             10 ;
                             11 ;  This library is distributed in the hope that it will be useful,
                             12 ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                             13 ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                             14 ;  GNU General Public License for more details.
                             15 ;
                             16 ;  You should have received a copy of the GNU General Public License 
                             17 ;  along with this library; see the file COPYING. If not, write to the
                             18 ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                             19 ;   MA 02110-1301, USA.
                             20 ;
                             21 ;  As a special exception, if you link this library with other files,
                             22 ;  some of which are compiled with SDCC, to produce an executable,
                             23 ;  this library does not by itself cause the resulting executable to
                             24 ;  be covered by the GNU General Public License. This exception does
                             25 ;  not however invalidate any other reasons why the executable file
                             26 ;   might be covered by the GNU General Public License.
                             27 ;--------------------------------------------------------------------------
                             28 
                             29         .area   _CODE
                             30 
   0000                      31 __divsint_rrx_s::
   0000 F1                   32         pop     af
   0001 E1                   33         pop     hl
   0002 D1                   34         pop     de
   0003 D5                   35         push    de
   0004 E5                   36         push    hl
   0005 F5                   37         push    af
                             38 
   0006 C3r18s00             39         jp      __div16
                             40 
   0009                      41 __divschar_rrx_s::
   0009 21 03 00             42         ld      hl, #2+1
   000C 39                   43         add     hl, sp
                             44 
   000D 5E                   45         ld      e, (hl)
   000E 2B                   46         dec     hl
   000F 6E                   47         ld      l, (hl)
                             48 
                             49         ;; Fall through
   0010                      50 __divschar_rrx_hds::
   0010                      51 __div8::
   0010 7D                   52         ld      a, l            ; Sign extend
   0011 07                   53         rlca
   0012 9F                   54         sbc     a
   0013 67                   55         ld      h, a
   0014                      56 __div_signexte::
   0014 7B                   57         ld      a, e            ; Sign extend
   0015 07                   58         rlca
   0016 9F                   59         sbc     a
   0017 57                   60         ld      d, a
                             61         ; Fall through to __div16
                             62 
                             63         ;; signed 16-bit division
                             64         ;;
                             65         ;; Entry conditions
                             66         ;;   HL = dividend
                             67         ;;   DE = divisor
                             68         ;;
                             69         ;; Exit conditions
                             70         ;;   HL = quotient
                             71         ;;   DE = remainder
                             72         ;;
                             73         ;; Register used: AF,B,DE,HL
   0018                      74 __divsint_rrx_hds::
   0018                      75 __div16::
                             76         ;; Determine sign of quotient by xor-ing high bytes of dividend
                             77         ;;  and divisor. Quotient is positive if signs are the same, negative
                             78         ;;  if signs are different
                             79         ;; Remainder has same sign as dividend
   0018 7C                   80         ld      a, h            ; Get high byte of dividend
   0019 AA                   81         xor     d               ; Xor with high byte of divisor
   001A 17                   82         rla                     ; Sign of quotient goes into the carry
   001B 7C                   83         ld      a, h            ; Get high byte of dividend
   001C F5                   84         push    af              ; Save sign of both quotient and reminder
                             85 
                             86         ; Take absolute value of dividend
   001D 17                   87         rla
   001E 30 06                88         jr      NC, .chkde      ; Jump if dividend is positive
   0020 97                   89         sub     a, a            ; Substract dividend from 0
   0021 95                   90         sub     a, l
   0022 6F                   91         ld      l, a
   0023 9F                   92         sbc     a, a            ; Propagate borrow (A=0xFF if borrow)
   0024 94                   93         sub     a, h
   0025 67                   94         ld      h, a
                             95 
                             96         ; Take absolute value of divisor
   0026                      97 .chkde:
   0026 CB 7A                98         bit     7, d
   0028 28 06                99         jr      Z, .dodiv       ; Jump if divisor is positive
   002A 97                  100         sub     a, a            ; Subtract divisor from 0
   002B 93                  101         sub     a, e
   002C 5F                  102         ld      e, a
   002D 9F                  103         sbc     a, a            ; Propagate borrow (A=0xFF if borrow)
   002E 92                  104         sub     a, d
   002F 57                  105         ld      d, a
                            106 
                            107         ; Divide absolute values
   0030                     108 .dodiv:
   0030 CDr00s00            109         call    __divu16
                            110 
   0033                     111 .fix_quotient:
                            112         ; Negate quotient if it is negative
   0033 F1                  113         pop     af              ; recover sign of quotient
   0034 D0                  114         ret	NC		; Jump if quotient is positive
   0035 47                  115         ld      b, a
   0036 97                  116         sub     a, a            ; Subtract quotient from 0
   0037 95                  117         sub     a, l
   0038 6F                  118         ld      l, a
   0039 9F                  119         sbc     a, a            ; Propagate borrow (A=0xFF if borrow)
   003A 94                  120         sub     a, h
   003B 67                  121         ld      h, a
   003C 78                  122         ld      a, b
   003D C9                  123 	ret
                            124 
   003E                     125 __get_remainder::
                            126         ; Negate remainder if it is negative and move it into hl
   003E 17                  127         rla
   003F EB                  128 	ex	de, hl
   0040 D0                  129         ret     NC              ; Return if remainder is positive
   0041 97                  130         sub     a, a            ; Subtract remainder from 0
   0042 95                  131         sub     a, l
   0043 6F                  132         ld      l, a
   0044 9F                  133         sbc     a, a             ; Propagate remainder (A=0xFF if borrow)
   0045 94                  134         sub     a, h
   0046 67                  135         ld      h, a
   0047 C9                  136         ret
                            137 
