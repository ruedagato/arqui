                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:31 2015
                              5 ;--------------------------------------------------------
                              6 	.module _memcmp
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _memcmp
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in internal ram 
                             34 ;--------------------------------------------------------
                             35 	.area OSEG    (OVR,DATA)
                             36 ;--------------------------------------------------------
                             37 ; indirectly addressable internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area ISEG    (DATA)
                             40 ;--------------------------------------------------------
                             41 ; absolute internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area IABS    (ABS,DATA)
                             44 	.area IABS    (ABS,DATA)
                             45 ;--------------------------------------------------------
                             46 ; bit data
                             47 ;--------------------------------------------------------
                             48 	.area BSEG    (BIT)
                             49 ;--------------------------------------------------------
                             50 ; paged external ram data
                             51 ;--------------------------------------------------------
                             52 	.area PSEG    (PAG,XDATA)
                             53 ;--------------------------------------------------------
                             54 ; external ram data
                             55 ;--------------------------------------------------------
                             56 	.area XSEG    (XDATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XABS    (ABS,XDATA)
                             61 ;--------------------------------------------------------
                             62 ; external initialized ram data
                             63 ;--------------------------------------------------------
                             64 	.area XISEG   (XDATA)
                             65 	.area HOME    (CODE)
                             66 	.area GSINIT0 (CODE)
                             67 	.area GSINIT1 (CODE)
                             68 	.area GSINIT2 (CODE)
                             69 	.area GSINIT3 (CODE)
                             70 	.area GSINIT4 (CODE)
                             71 	.area GSINIT5 (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area CSEG    (CODE)
                             75 ;--------------------------------------------------------
                             76 ; global & static initialisations
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT  (CODE)
                             80 	.area GSFINAL (CODE)
                             81 	.area GSINIT  (CODE)
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area HOME    (CODE)
                             86 	.area HOME    (CODE)
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area CSEG    (CODE)
                             91 ;------------------------------------------------------------
                             92 ;Allocation info for local variables in function 'memcmp'
                             93 ;------------------------------------------------------------
                             94 ;buf2                      Allocated to stack - offset -5
                             95 ;count                     Allocated to stack - offset -7
                             96 ;buf1                      Allocated to stack - offset 1
                             97 ;------------------------------------------------------------
                             98 ;	_memcmp.c:31: int memcmp (
                             99 ;	-----------------------------------------
                            100 ;	 function memcmp
                            101 ;	-----------------------------------------
   0000                     102 _memcmp:
                    0002    103 	ar2 = 0x02
                    0003    104 	ar3 = 0x03
                    0004    105 	ar4 = 0x04
                    0005    106 	ar5 = 0x05
                    0006    107 	ar6 = 0x06
                    0007    108 	ar7 = 0x07
                    0000    109 	ar0 = 0x00
                    0001    110 	ar1 = 0x01
   0000 C0*00               111 	push	_bp
   0002 85 81*00            112 	mov	_bp,sp
   0005 C0 82               113 	push	dpl
   0007 C0 83               114 	push	dph
   0009 C0 F0               115 	push	b
                            116 ;	_memcmp.c:37: if (!count)
   000B E5*00               117 	mov	a,_bp
   000D 24 F9               118 	add	a,#0xf9
   000F F8                  119 	mov	r0,a
   0010 E6                  120 	mov	a,@r0
   0011 08                  121 	inc	r0
   0012 46                  122 	orl	a,@r0
   0013 70 06               123 	jnz	00112$
                            124 ;	_memcmp.c:38: return(0);
   0015 90 00 00            125 	mov	dptr,#0x0000
   0018 02s00rB6            126 	ljmp	00107$
                            127 ;	_memcmp.c:40: while ( --count && *((char *)buf1) == *((char *)buf2) ) {
   001B                     128 00112$:
   001B E5*00               129 	mov	a,_bp
   001D 24 F9               130 	add	a,#0xf9
   001F F8                  131 	mov	r0,a
   0020 86 05               132 	mov	ar5,@r0
   0022 08                  133 	inc	r0
   0023 86 06               134 	mov	ar6,@r0
   0025                     135 00104$:
   0025 1D                  136 	dec	r5
   0026 BD FF 01            137 	cjne	r5,#0xff,00115$
   0029 1E                  138 	dec	r6
   002A                     139 00115$:
   002A ED                  140 	mov	a,r5
   002B 4E                  141 	orl	a,r6
   002C 60 55               142 	jz	00106$
   002E C0 05               143 	push	ar5
   0030 C0 06               144 	push	ar6
   0032 A8*00               145 	mov	r0,_bp
   0034 08                  146 	inc	r0
   0035 86 82               147 	mov	dpl,@r0
   0037 08                  148 	inc	r0
   0038 86 83               149 	mov	dph,@r0
   003A 08                  150 	inc	r0
   003B 86 F0               151 	mov	b,@r0
   003D 12s00r00            152 	lcall	__gptrget
   0040 FF                  153 	mov	r7,a
   0041 E5*00               154 	mov	a,_bp
   0043 24 FB               155 	add	a,#0xfb
   0045 F8                  156 	mov	r0,a
   0046 86 02               157 	mov	ar2,@r0
   0048 08                  158 	inc	r0
   0049 86 03               159 	mov	ar3,@r0
   004B 08                  160 	inc	r0
   004C 86 04               161 	mov	ar4,@r0
   004E 8A 82               162 	mov	dpl,r2
   0050 8B 83               163 	mov	dph,r3
   0052 8C F0               164 	mov	b,r4
   0054 12s00r00            165 	lcall	__gptrget
   0057 FD                  166 	mov	r5,a
   0058 EF                  167 	mov	a,r7
   0059 B5 05 02            168 	cjne	a,ar5,00117$
   005C 80 06               169 	sjmp	00118$
   005E                     170 00117$:
   005E D0 06               171 	pop	ar6
   0060 D0 05               172 	pop	ar5
   0062 80 1F               173 	sjmp	00106$
   0064                     174 00118$:
   0064 D0 06               175 	pop	ar6
   0066 D0 05               176 	pop	ar5
                            177 ;	_memcmp.c:41: buf1 = (char *)buf1 + 1;
   0068 A8*00               178 	mov	r0,_bp
   006A 08                  179 	inc	r0
   006B 06                  180 	inc	@r0
   006C B6 00 02            181 	cjne	@r0,#0x00,00119$
   006F 08                  182 	inc	r0
   0070 06                  183 	inc	@r0
   0071                     184 00119$:
                            185 ;	_memcmp.c:42: buf2 = (char *)buf2 + 1;
   0071 E5*00               186 	mov	a,_bp
   0073 24 FB               187 	add	a,#0xfb
   0075 F8                  188 	mov	r0,a
   0076 74 01               189 	mov	a,#0x01
   0078 2A                  190 	add	a,r2
   0079 F6                  191 	mov	@r0,a
   007A E4                  192 	clr	a
   007B 3B                  193 	addc	a,r3
   007C 08                  194 	inc	r0
   007D F6                  195 	mov	@r0,a
   007E 08                  196 	inc	r0
   007F A6 04               197 	mov	@r0,ar4
   0081 80 A2               198 	sjmp	00104$
   0083                     199 00106$:
                            200 ;	_memcmp.c:45: return( *((unsigned char *)buf1) - *((unsigned char *)buf2) );
   0083 A8*00               201 	mov	r0,_bp
   0085 08                  202 	inc	r0
   0086 86 82               203 	mov	dpl,@r0
   0088 08                  204 	inc	r0
   0089 86 83               205 	mov	dph,@r0
   008B 08                  206 	inc	r0
   008C 86 F0               207 	mov	b,@r0
   008E 12s00r00            208 	lcall	__gptrget
   0091 FA                  209 	mov	r2,a
   0092 7B 00               210 	mov	r3,#0x00
   0094 E5*00               211 	mov	a,_bp
   0096 24 FB               212 	add	a,#0xfb
   0098 F8                  213 	mov	r0,a
   0099 86 04               214 	mov	ar4,@r0
   009B 08                  215 	inc	r0
   009C 86 05               216 	mov	ar5,@r0
   009E 08                  217 	inc	r0
   009F 86 06               218 	mov	ar6,@r0
   00A1 8C 82               219 	mov	dpl,r4
   00A3 8D 83               220 	mov	dph,r5
   00A5 8E F0               221 	mov	b,r6
   00A7 12s00r00            222 	lcall	__gptrget
   00AA FC                  223 	mov	r4,a
   00AB 7D 00               224 	mov	r5,#0x00
   00AD EA                  225 	mov	a,r2
   00AE C3                  226 	clr	c
   00AF 9C                  227 	subb	a,r4
   00B0 F5 82               228 	mov	dpl,a
   00B2 EB                  229 	mov	a,r3
   00B3 9D                  230 	subb	a,r5
   00B4 F5 83               231 	mov	dph,a
   00B6                     232 00107$:
   00B6 85*00 81            233 	mov	sp,_bp
   00B9 D0*00               234 	pop	_bp
   00BB 22                  235 	ret
                            236 	.area CSEG    (CODE)
                            237 	.area CONST   (CODE)
                            238 	.area XINIT   (CODE)
                            239 	.area CABS    (ABS,CODE)
