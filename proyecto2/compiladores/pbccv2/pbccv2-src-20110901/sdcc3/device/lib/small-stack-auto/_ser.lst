                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:32 2015
                              5 ;--------------------------------------------------------
                              6 	.module _ser
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _TF2
                             13 	.globl _EXF2
                             14 	.globl _RCLK
                             15 	.globl _TCLK
                             16 	.globl _EXEN2
                             17 	.globl _TR2
                             18 	.globl _C_T2
                             19 	.globl _CP_RL2
                             20 	.globl _T2CON_7
                             21 	.globl _T2CON_6
                             22 	.globl _T2CON_5
                             23 	.globl _T2CON_4
                             24 	.globl _T2CON_3
                             25 	.globl _T2CON_2
                             26 	.globl _T2CON_1
                             27 	.globl _T2CON_0
                             28 	.globl _PT2
                             29 	.globl _ET2
                             30 	.globl _CY
                             31 	.globl _AC
                             32 	.globl _F0
                             33 	.globl _RS1
                             34 	.globl _RS0
                             35 	.globl _OV
                             36 	.globl _F1
                             37 	.globl _P
                             38 	.globl _PS
                             39 	.globl _PT1
                             40 	.globl _PX1
                             41 	.globl _PT0
                             42 	.globl _PX0
                             43 	.globl _RD
                             44 	.globl _WR
                             45 	.globl _T1
                             46 	.globl _T0
                             47 	.globl _INT1
                             48 	.globl _INT0
                             49 	.globl _TXD
                             50 	.globl _RXD
                             51 	.globl _P3_7
                             52 	.globl _P3_6
                             53 	.globl _P3_5
                             54 	.globl _P3_4
                             55 	.globl _P3_3
                             56 	.globl _P3_2
                             57 	.globl _P3_1
                             58 	.globl _P3_0
                             59 	.globl _EA
                             60 	.globl _ES
                             61 	.globl _ET1
                             62 	.globl _EX1
                             63 	.globl _ET0
                             64 	.globl _EX0
                             65 	.globl _P2_7
                             66 	.globl _P2_6
                             67 	.globl _P2_5
                             68 	.globl _P2_4
                             69 	.globl _P2_3
                             70 	.globl _P2_2
                             71 	.globl _P2_1
                             72 	.globl _P2_0
                             73 	.globl _SM0
                             74 	.globl _SM1
                             75 	.globl _SM2
                             76 	.globl _REN
                             77 	.globl _TB8
                             78 	.globl _RB8
                             79 	.globl _TI
                             80 	.globl _RI
                             81 	.globl _P1_7
                             82 	.globl _P1_6
                             83 	.globl _P1_5
                             84 	.globl _P1_4
                             85 	.globl _P1_3
                             86 	.globl _P1_2
                             87 	.globl _P1_1
                             88 	.globl _P1_0
                             89 	.globl _TF1
                             90 	.globl _TR1
                             91 	.globl _TF0
                             92 	.globl _TR0
                             93 	.globl _IE1
                             94 	.globl _IT1
                             95 	.globl _IE0
                             96 	.globl _IT0
                             97 	.globl _P0_7
                             98 	.globl _P0_6
                             99 	.globl _P0_5
                            100 	.globl _P0_4
                            101 	.globl _P0_3
                            102 	.globl _P0_2
                            103 	.globl _P0_1
                            104 	.globl _P0_0
                            105 	.globl _TH2
                            106 	.globl _TL2
                            107 	.globl _RCAP2H
                            108 	.globl _RCAP2L
                            109 	.globl _T2CON
                            110 	.globl _B
                            111 	.globl _ACC
                            112 	.globl _PSW
                            113 	.globl _IP
                            114 	.globl _P3
                            115 	.globl _IE
                            116 	.globl _P2
                            117 	.globl _SBUF
                            118 	.globl _SCON
                            119 	.globl _P1
                            120 	.globl _TH1
                            121 	.globl _TH0
                            122 	.globl _TL1
                            123 	.globl _TL0
                            124 	.globl _TMOD
                            125 	.globl _TCON
                            126 	.globl _PCON
                            127 	.globl _DPH
                            128 	.globl _DPL
                            129 	.globl _SP
                            130 	.globl _P0
                            131 	.globl _ser_rxBuffer
                            132 	.globl _ser_txBuffer
                            133 	.globl _ser_rxIndexOut
                            134 	.globl _ser_rxIndexIn
                            135 	.globl _ser_txIndexOut
                            136 	.globl _ser_txIndexIn
                            137 	.globl _ser_init
                            138 	.globl _ser_interrupt_handler
                            139 	.globl _ser_putc
                            140 	.globl _ser_getc
                            141 	.globl _ser_printString
                            142 	.globl _ser_charAvail
                            143 ;--------------------------------------------------------
                            144 ; special function registers
                            145 ;--------------------------------------------------------
                            146 	.area RSEG    (ABS,DATA)
   0000                     147 	.org 0x0000
                    0080    148 _P0	=	0x0080
                    0081    149 _SP	=	0x0081
                    0082    150 _DPL	=	0x0082
                    0083    151 _DPH	=	0x0083
                    0087    152 _PCON	=	0x0087
                    0088    153 _TCON	=	0x0088
                    0089    154 _TMOD	=	0x0089
                    008A    155 _TL0	=	0x008a
                    008B    156 _TL1	=	0x008b
                    008C    157 _TH0	=	0x008c
                    008D    158 _TH1	=	0x008d
                    0090    159 _P1	=	0x0090
                    0098    160 _SCON	=	0x0098
                    0099    161 _SBUF	=	0x0099
                    00A0    162 _P2	=	0x00a0
                    00A8    163 _IE	=	0x00a8
                    00B0    164 _P3	=	0x00b0
                    00B8    165 _IP	=	0x00b8
                    00D0    166 _PSW	=	0x00d0
                    00E0    167 _ACC	=	0x00e0
                    00F0    168 _B	=	0x00f0
                    00C8    169 _T2CON	=	0x00c8
                    00CA    170 _RCAP2L	=	0x00ca
                    00CB    171 _RCAP2H	=	0x00cb
                    00CC    172 _TL2	=	0x00cc
                    00CD    173 _TH2	=	0x00cd
                            174 ;--------------------------------------------------------
                            175 ; special function bits
                            176 ;--------------------------------------------------------
                            177 	.area RSEG    (ABS,DATA)
   0000                     178 	.org 0x0000
                    0080    179 _P0_0	=	0x0080
                    0081    180 _P0_1	=	0x0081
                    0082    181 _P0_2	=	0x0082
                    0083    182 _P0_3	=	0x0083
                    0084    183 _P0_4	=	0x0084
                    0085    184 _P0_5	=	0x0085
                    0086    185 _P0_6	=	0x0086
                    0087    186 _P0_7	=	0x0087
                    0088    187 _IT0	=	0x0088
                    0089    188 _IE0	=	0x0089
                    008A    189 _IT1	=	0x008a
                    008B    190 _IE1	=	0x008b
                    008C    191 _TR0	=	0x008c
                    008D    192 _TF0	=	0x008d
                    008E    193 _TR1	=	0x008e
                    008F    194 _TF1	=	0x008f
                    0090    195 _P1_0	=	0x0090
                    0091    196 _P1_1	=	0x0091
                    0092    197 _P1_2	=	0x0092
                    0093    198 _P1_3	=	0x0093
                    0094    199 _P1_4	=	0x0094
                    0095    200 _P1_5	=	0x0095
                    0096    201 _P1_6	=	0x0096
                    0097    202 _P1_7	=	0x0097
                    0098    203 _RI	=	0x0098
                    0099    204 _TI	=	0x0099
                    009A    205 _RB8	=	0x009a
                    009B    206 _TB8	=	0x009b
                    009C    207 _REN	=	0x009c
                    009D    208 _SM2	=	0x009d
                    009E    209 _SM1	=	0x009e
                    009F    210 _SM0	=	0x009f
                    00A0    211 _P2_0	=	0x00a0
                    00A1    212 _P2_1	=	0x00a1
                    00A2    213 _P2_2	=	0x00a2
                    00A3    214 _P2_3	=	0x00a3
                    00A4    215 _P2_4	=	0x00a4
                    00A5    216 _P2_5	=	0x00a5
                    00A6    217 _P2_6	=	0x00a6
                    00A7    218 _P2_7	=	0x00a7
                    00A8    219 _EX0	=	0x00a8
                    00A9    220 _ET0	=	0x00a9
                    00AA    221 _EX1	=	0x00aa
                    00AB    222 _ET1	=	0x00ab
                    00AC    223 _ES	=	0x00ac
                    00AF    224 _EA	=	0x00af
                    00B0    225 _P3_0	=	0x00b0
                    00B1    226 _P3_1	=	0x00b1
                    00B2    227 _P3_2	=	0x00b2
                    00B3    228 _P3_3	=	0x00b3
                    00B4    229 _P3_4	=	0x00b4
                    00B5    230 _P3_5	=	0x00b5
                    00B6    231 _P3_6	=	0x00b6
                    00B7    232 _P3_7	=	0x00b7
                    00B0    233 _RXD	=	0x00b0
                    00B1    234 _TXD	=	0x00b1
                    00B2    235 _INT0	=	0x00b2
                    00B3    236 _INT1	=	0x00b3
                    00B4    237 _T0	=	0x00b4
                    00B5    238 _T1	=	0x00b5
                    00B6    239 _WR	=	0x00b6
                    00B7    240 _RD	=	0x00b7
                    00B8    241 _PX0	=	0x00b8
                    00B9    242 _PT0	=	0x00b9
                    00BA    243 _PX1	=	0x00ba
                    00BB    244 _PT1	=	0x00bb
                    00BC    245 _PS	=	0x00bc
                    00D0    246 _P	=	0x00d0
                    00D1    247 _F1	=	0x00d1
                    00D2    248 _OV	=	0x00d2
                    00D3    249 _RS0	=	0x00d3
                    00D4    250 _RS1	=	0x00d4
                    00D5    251 _F0	=	0x00d5
                    00D6    252 _AC	=	0x00d6
                    00D7    253 _CY	=	0x00d7
                    00AD    254 _ET2	=	0x00ad
                    00BD    255 _PT2	=	0x00bd
                    00C8    256 _T2CON_0	=	0x00c8
                    00C9    257 _T2CON_1	=	0x00c9
                    00CA    258 _T2CON_2	=	0x00ca
                    00CB    259 _T2CON_3	=	0x00cb
                    00CC    260 _T2CON_4	=	0x00cc
                    00CD    261 _T2CON_5	=	0x00cd
                    00CE    262 _T2CON_6	=	0x00ce
                    00CF    263 _T2CON_7	=	0x00cf
                    00C8    264 _CP_RL2	=	0x00c8
                    00C9    265 _C_T2	=	0x00c9
                    00CA    266 _TR2	=	0x00ca
                    00CB    267 _EXEN2	=	0x00cb
                    00CC    268 _TCLK	=	0x00cc
                    00CD    269 _RCLK	=	0x00cd
                    00CE    270 _EXF2	=	0x00ce
                    00CF    271 _TF2	=	0x00cf
                            272 ;--------------------------------------------------------
                            273 ; overlayable register banks
                            274 ;--------------------------------------------------------
                            275 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     276 	.ds 8
                            277 	.area REG_BANK_1	(REL,OVR,DATA)
   0000                     278 	.ds 8
                            279 ;--------------------------------------------------------
                            280 ; internal ram data
                            281 ;--------------------------------------------------------
                            282 	.area DSEG    (DATA)
                            283 ;--------------------------------------------------------
                            284 ; overlayable items in internal ram 
                            285 ;--------------------------------------------------------
                            286 	.area OSEG    (OVR,DATA)
                            287 ;--------------------------------------------------------
                            288 ; indirectly addressable internal ram data
                            289 ;--------------------------------------------------------
                            290 	.area ISEG    (DATA)
                            291 ;--------------------------------------------------------
                            292 ; absolute internal ram data
                            293 ;--------------------------------------------------------
                            294 	.area IABS    (ABS,DATA)
                            295 	.area IABS    (ABS,DATA)
                            296 ;--------------------------------------------------------
                            297 ; bit data
                            298 ;--------------------------------------------------------
                            299 	.area BSEG    (BIT)
   0000                     300 _ser_txBusy:
   0000                     301 	.ds 1
                            302 ;--------------------------------------------------------
                            303 ; paged external ram data
                            304 ;--------------------------------------------------------
                            305 	.area PSEG    (PAG,XDATA)
                            306 ;--------------------------------------------------------
                            307 ; external ram data
                            308 ;--------------------------------------------------------
                            309 	.area XSEG    (XDATA)
   0000                     310 _ser_txIndexIn::
   0000                     311 	.ds 1
   0001                     312 _ser_txIndexOut::
   0001                     313 	.ds 1
   0002                     314 _ser_rxIndexIn::
   0002                     315 	.ds 1
   0003                     316 _ser_rxIndexOut::
   0003                     317 	.ds 1
   0004                     318 _ser_txBuffer::
   0004                     319 	.ds 256
   0104                     320 _ser_rxBuffer::
   0104                     321 	.ds 256
                            322 ;--------------------------------------------------------
                            323 ; absolute external ram data
                            324 ;--------------------------------------------------------
                            325 	.area XABS    (ABS,XDATA)
                            326 ;--------------------------------------------------------
                            327 ; external initialized ram data
                            328 ;--------------------------------------------------------
                            329 	.area XISEG   (XDATA)
                            330 	.area HOME    (CODE)
                            331 	.area GSINIT0 (CODE)
                            332 	.area GSINIT1 (CODE)
                            333 	.area GSINIT2 (CODE)
                            334 	.area GSINIT3 (CODE)
                            335 	.area GSINIT4 (CODE)
                            336 	.area GSINIT5 (CODE)
                            337 	.area GSINIT  (CODE)
                            338 	.area GSFINAL (CODE)
                            339 	.area CSEG    (CODE)
                            340 ;--------------------------------------------------------
                            341 ; global & static initialisations
                            342 ;--------------------------------------------------------
                            343 	.area HOME    (CODE)
                            344 	.area GSINIT  (CODE)
                            345 	.area GSFINAL (CODE)
                            346 	.area GSINIT  (CODE)
                            347 ;--------------------------------------------------------
                            348 ; Home
                            349 ;--------------------------------------------------------
                            350 	.area HOME    (CODE)
                            351 	.area HOME    (CODE)
                            352 ;--------------------------------------------------------
                            353 ; code
                            354 ;--------------------------------------------------------
                            355 	.area CSEG    (CODE)
                            356 ;------------------------------------------------------------
                            357 ;Allocation info for local variables in function 'ser_init'
                            358 ;------------------------------------------------------------
                            359 ;------------------------------------------------------------
                            360 ;	_ser.c:76: ser_init(void)
                            361 ;	-----------------------------------------
                            362 ;	 function ser_init
                            363 ;	-----------------------------------------
   0000                     364 _ser_init:
                    0002    365 	ar2 = 0x02
                    0003    366 	ar3 = 0x03
                    0004    367 	ar4 = 0x04
                    0005    368 	ar5 = 0x05
                    0006    369 	ar6 = 0x06
                    0007    370 	ar7 = 0x07
                    0000    371 	ar0 = 0x00
                    0001    372 	ar1 = 0x01
                            373 ;	_ser.c:78: ES = 0;
   0000 C2 AC               374 	clr	_ES
                            375 ;	_ser.c:80: ser_txBusy     = 0;
   0002 C2*00               376 	clr	_ser_txBusy
                            377 ;	_ser.c:82: ser_txIndexIn  = 0;
   0004 90s00r00            378 	mov	dptr,#_ser_txIndexIn
                            379 ;	_ser.c:83: ser_txIndexOut = 0;
                            380 ;	_ser.c:84: ser_rxIndexIn  = 0;
                            381 ;	_ser.c:85: ser_rxIndexOut = 0;
   0007 E4                  382 	clr	a
   0008 F0                  383 	movx	@dptr,a
   0009 90s00r01            384 	mov	dptr,#_ser_txIndexOut
   000C F0                  385 	movx	@dptr,a
   000D 90s00r02            386 	mov	dptr,#_ser_rxIndexIn
   0010 F0                  387 	movx	@dptr,a
   0011 90s00r03            388 	mov	dptr,#_ser_rxIndexOut
   0014 F0                  389 	movx	@dptr,a
                            390 ;	_ser.c:87: T2CON = 0x30;
   0015 75 C8 30            391 	mov	_T2CON,#0x30
                            392 ;	_ser.c:90: RCAP2H = 0xFF;
   0018 75 CB FF            393 	mov	_RCAP2H,#0xFF
                            394 ;	_ser.c:91: RCAP2L = 0xDD;
   001B 75 CA DD            395 	mov	_RCAP2L,#0xDD
                            396 ;	_ser.c:94: T2CON = 0x34;
   001E 75 C8 34            397 	mov	_T2CON,#0x34
                            398 ;	_ser.c:96: SCON = 0x50;
   0021 75 98 50            399 	mov	_SCON,#0x50
                            400 ;	_ser.c:98: if (TI) {
                            401 ;	_ser.c:99: TI = 0;
   0024 10 99 02            402 	jbc	_TI,00109$
   0027 80 00               403 	sjmp	00102$
   0029                     404 00109$:
   0029                     405 00102$:
                            406 ;	_ser.c:101: if (RI) {
                            407 ;	_ser.c:102: RI = 0;
   0029 10 98 02            408 	jbc	_RI,00110$
   002C 80 00               409 	sjmp	00104$
   002E                     410 00110$:
   002E                     411 00104$:
                            412 ;	_ser.c:105: ES=1;  
   002E D2 AC               413 	setb	_ES
   0030 22                  414 	ret
                            415 ;------------------------------------------------------------
                            416 ;Allocation info for local variables in function 'ser_interrupt_handler'
                            417 ;------------------------------------------------------------
                            418 ;------------------------------------------------------------
                            419 ;	_ser.c:109: ser_interrupt_handler(void) __interrupt 4 __using 1
                            420 ;	-----------------------------------------
                            421 ;	 function ser_interrupt_handler
                            422 ;	-----------------------------------------
   0031                     423 _ser_interrupt_handler:
                    000A    424 	ar2 = 0x0a
                    000B    425 	ar3 = 0x0b
                    000C    426 	ar4 = 0x0c
                    000D    427 	ar5 = 0x0d
                    000E    428 	ar6 = 0x0e
                    000F    429 	ar7 = 0x0f
                    0008    430 	ar0 = 0x08
                    0009    431 	ar1 = 0x09
   0031 C0 E0               432 	push	acc
   0033 C0 82               433 	push	dpl
   0035 C0 83               434 	push	dph
   0037 C0 D0               435 	push	psw
   0039 75 D0 08            436 	mov	psw,#0x08
                            437 ;	_ser.c:111: ES=0;
   003C C2 AC               438 	clr	_ES
                            439 ;	_ser.c:113: if (RI) {
                            440 ;	_ser.c:114: RI = 0;
   003E 10 98 02            441 	jbc	_RI,00113$
   0041 80 17               442 	sjmp	00102$
   0043                     443 00113$:
                            444 ;	_ser.c:115: ser_rxBuffer[ser_rxIndexIn++] = SBUF;
   0043 90s00r02            445 	mov	dptr,#_ser_rxIndexIn
   0046 E0                  446 	movx	a,@dptr
   0047 FA                  447 	mov	r2,a
   0048 90s00r02            448 	mov	dptr,#_ser_rxIndexIn
   004B 04                  449 	inc	a
   004C F0                  450 	movx	@dptr,a
   004D EA                  451 	mov	a,r2
   004E 24r04               452 	add	a,#_ser_rxBuffer
   0050 F5 82               453 	mov	dpl,a
   0052 E4                  454 	clr	a
   0053 34s01               455 	addc	a,#(_ser_rxBuffer >> 8)
   0055 F5 83               456 	mov	dph,a
   0057 E5 99               457 	mov	a,_SBUF
   0059 F0                  458 	movx	@dptr,a
   005A                     459 00102$:
                            460 ;	_ser.c:118: if (TI) {
                            461 ;	_ser.c:119: TI = 0;
   005A 10 99 02            462 	jbc	_TI,00114$
   005D 80 25               463 	sjmp	00107$
   005F                     464 00114$:
                            465 ;	_ser.c:120: if (ser_txIndexIn == ser_txIndexOut) {
   005F 90s00r00            466 	mov	dptr,#_ser_txIndexIn
   0062 E0                  467 	movx	a,@dptr
   0063 FA                  468 	mov	r2,a
   0064 90s00r01            469 	mov	dptr,#_ser_txIndexOut
   0067 E0                  470 	movx	a,@dptr
   0068 FB                  471 	mov	r3,a
   0069 EA                  472 	mov	a,r2
   006A B5 0B 04            473 	cjne	a,ar3,00104$
                            474 ;	_ser.c:121: ser_txBusy = 0;
   006D C2*00               475 	clr	_ser_txBusy
   006F 80 13               476 	sjmp	00107$
   0071                     477 00104$:
                            478 ;	_ser.c:124: SBUF = ser_txBuffer[ser_txIndexOut++];
   0071 90s00r01            479 	mov	dptr,#_ser_txIndexOut
   0074 EB                  480 	mov	a,r3
   0075 04                  481 	inc	a
   0076 F0                  482 	movx	@dptr,a
   0077 EB                  483 	mov	a,r3
   0078 24r04               484 	add	a,#_ser_txBuffer
   007A F5 82               485 	mov	dpl,a
   007C E4                  486 	clr	a
   007D 34s00               487 	addc	a,#(_ser_txBuffer >> 8)
   007F F5 83               488 	mov	dph,a
   0081 E0                  489 	movx	a,@dptr
   0082 F5 99               490 	mov	_SBUF,a
   0084                     491 00107$:
                            492 ;	_ser.c:128: ES=1;
   0084 D2 AC               493 	setb	_ES
   0086 D0 D0               494 	pop	psw
   0088 D0 83               495 	pop	dph
   008A D0 82               496 	pop	dpl
   008C D0 E0               497 	pop	acc
   008E 32                  498 	reti
                            499 ;	eliminated unneeded push/pop b
                            500 ;------------------------------------------------------------
                            501 ;Allocation info for local variables in function 'ser_putc'
                            502 ;------------------------------------------------------------
                            503 ;c                         Allocated to registers r2 
                            504 ;------------------------------------------------------------
                            505 ;	_ser.c:132: ser_putc(unsigned char c)
                            506 ;	-----------------------------------------
                            507 ;	 function ser_putc
                            508 ;	-----------------------------------------
   008F                     509 _ser_putc:
                    0002    510 	ar2 = 0x02
                    0003    511 	ar3 = 0x03
                    0004    512 	ar4 = 0x04
                    0005    513 	ar5 = 0x05
                    0006    514 	ar6 = 0x06
                    0007    515 	ar7 = 0x07
                    0000    516 	ar0 = 0x00
                    0001    517 	ar1 = 0x01
   008F AA 82               518 	mov	r2,dpl
                            519 ;	_ser.c:134: ES=0;
   0091 C2 AC               520 	clr	_ES
                            521 ;	_ser.c:136: if (ser_txBusy) {
   0093 30*00 18            522 	jnb	_ser_txBusy,00102$
                            523 ;	_ser.c:137: ser_txBuffer[ser_txIndexIn++] = c;
   0096 90s00r00            524 	mov	dptr,#_ser_txIndexIn
   0099 E0                  525 	movx	a,@dptr
   009A FB                  526 	mov	r3,a
   009B 90s00r00            527 	mov	dptr,#_ser_txIndexIn
   009E 04                  528 	inc	a
   009F F0                  529 	movx	@dptr,a
   00A0 EB                  530 	mov	a,r3
   00A1 24r04               531 	add	a,#_ser_txBuffer
   00A3 F5 82               532 	mov	dpl,a
   00A5 E4                  533 	clr	a
   00A6 34s00               534 	addc	a,#(_ser_txBuffer >> 8)
   00A8 F5 83               535 	mov	dph,a
   00AA EA                  536 	mov	a,r2
   00AB F0                  537 	movx	@dptr,a
   00AC 80 04               538 	sjmp	00103$
   00AE                     539 00102$:
                            540 ;	_ser.c:140: ser_txBusy = 1;
   00AE D2*00               541 	setb	_ser_txBusy
                            542 ;	_ser.c:141: SBUF = c;
   00B0 8A 99               543 	mov	_SBUF,r2
   00B2                     544 00103$:
                            545 ;	_ser.c:144: ES=1;
   00B2 D2 AC               546 	setb	_ES
   00B4 22                  547 	ret
                            548 ;------------------------------------------------------------
                            549 ;Allocation info for local variables in function 'ser_getc'
                            550 ;------------------------------------------------------------
                            551 ;tmp                       Allocated to registers r2 
                            552 ;------------------------------------------------------------
                            553 ;	_ser.c:148: ser_getc(void)
                            554 ;	-----------------------------------------
                            555 ;	 function ser_getc
                            556 ;	-----------------------------------------
   00B5                     557 _ser_getc:
                            558 ;	_ser.c:153: if (ser_rxIndexIn != ser_rxIndexOut) {
   00B5 90s00r02            559 	mov	dptr,#_ser_rxIndexIn
   00B8 E0                  560 	movx	a,@dptr
   00B9 FA                  561 	mov	r2,a
   00BA 90s00r03            562 	mov	dptr,#_ser_rxIndexOut
   00BD E0                  563 	movx	a,@dptr
   00BE FB                  564 	mov	r3,a
   00BF EA                  565 	mov	a,r2
   00C0 B5 03 02            566 	cjne	a,ar3,00107$
   00C3 80 14               567 	sjmp	00102$
   00C5                     568 00107$:
                            569 ;	_ser.c:154: tmp = ser_rxBuffer[ser_rxIndexOut++];
   00C5 90s00r03            570 	mov	dptr,#_ser_rxIndexOut
   00C8 EB                  571 	mov	a,r3
   00C9 04                  572 	inc	a
   00CA F0                  573 	movx	@dptr,a
   00CB EB                  574 	mov	a,r3
   00CC 24r04               575 	add	a,#_ser_rxBuffer
   00CE F5 82               576 	mov	dpl,a
   00D0 E4                  577 	clr	a
   00D1 34s01               578 	addc	a,#(_ser_rxBuffer >> 8)
   00D3 F5 83               579 	mov	dph,a
   00D5 E0                  580 	movx	a,@dptr
   00D6 FA                  581 	mov	r2,a
   00D7 80 02               582 	sjmp	00103$
   00D9                     583 00102$:
                            584 ;	_ser.c:157: tmp = 0;
   00D9 7A 00               585 	mov	r2,#0x00
   00DB                     586 00103$:
                            587 ;	_ser.c:161: return(tmp);
   00DB 8A 82               588 	mov	dpl,r2
   00DD 22                  589 	ret
                            590 ;------------------------------------------------------------
                            591 ;Allocation info for local variables in function 'ser_printString'
                            592 ;------------------------------------------------------------
                            593 ;String                    Allocated to registers r2 r3 r4 
                            594 ;------------------------------------------------------------
                            595 ;	_ser.c:165: ser_printString(char *String)
                            596 ;	-----------------------------------------
                            597 ;	 function ser_printString
                            598 ;	-----------------------------------------
   00DE                     599 _ser_printString:
   00DE AA 82               600 	mov	r2,dpl
   00E0 AB 83               601 	mov	r3,dph
   00E2 AC F0               602 	mov	r4,b
                            603 ;	_ser.c:167: while (*String) {
   00E4                     604 00101$:
   00E4 8A 82               605 	mov	dpl,r2
   00E6 8B 83               606 	mov	dph,r3
   00E8 8C F0               607 	mov	b,r4
   00EA 12s00r00            608 	lcall	__gptrget
   00ED FD                  609 	mov	r5,a
   00EE 60 18               610 	jz	00104$
                            611 ;	_ser.c:168: ser_putc(*String++);
   00F0 0A                  612 	inc	r2
   00F1 BA 00 01            613 	cjne	r2,#0x00,00110$
   00F4 0B                  614 	inc	r3
   00F5                     615 00110$:
   00F5 8D 82               616 	mov	dpl,r5
   00F7 C0 02               617 	push	ar2
   00F9 C0 03               618 	push	ar3
   00FB C0 04               619 	push	ar4
   00FD 12s00r8F            620 	lcall	_ser_putc
   0100 D0 04               621 	pop	ar4
   0102 D0 03               622 	pop	ar3
   0104 D0 02               623 	pop	ar2
   0106 80 DC               624 	sjmp	00101$
   0108                     625 00104$:
   0108 22                  626 	ret
                            627 ;------------------------------------------------------------
                            628 ;Allocation info for local variables in function 'ser_charAvail'
                            629 ;------------------------------------------------------------
                            630 ;ret                       Allocated to registers r2 
                            631 ;------------------------------------------------------------
                            632 ;	_ser.c:173: ser_charAvail(void)
                            633 ;	-----------------------------------------
                            634 ;	 function ser_charAvail
                            635 ;	-----------------------------------------
   0109                     636 _ser_charAvail:
                            637 ;	_ser.c:175: char ret = 0;
   0109 7A 00               638 	mov	r2,#0x00
                            639 ;	_ser.c:177: if (ser_rxIndexIn != ser_rxIndexOut) {
   010B 90s00r02            640 	mov	dptr,#_ser_rxIndexIn
   010E E0                  641 	movx	a,@dptr
   010F FB                  642 	mov	r3,a
   0110 90s00r03            643 	mov	dptr,#_ser_rxIndexOut
   0113 E0                  644 	movx	a,@dptr
   0114 FC                  645 	mov	r4,a
   0115 EB                  646 	mov	a,r3
   0116 B5 04 02            647 	cjne	a,ar4,00106$
   0119 80 02               648 	sjmp	00102$
   011B                     649 00106$:
                            650 ;	_ser.c:178: ret = 1;
   011B 7A 01               651 	mov	r2,#0x01
   011D                     652 00102$:
                            653 ;	_ser.c:181: return(ret);
   011D 8A 82               654 	mov	dpl,r2
   011F 22                  655 	ret
                            656 	.area CSEG    (CODE)
                            657 	.area CONST   (CODE)
                            658 	.area XINIT   (CODE)
                            659 	.area CABS    (ABS,CODE)
