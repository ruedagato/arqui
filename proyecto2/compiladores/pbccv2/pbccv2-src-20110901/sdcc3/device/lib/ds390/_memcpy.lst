                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:17 2015
                              5 ;--------------------------------------------------------
                              6 	.module _memcpy
                              7 	.optsdcc -mds390 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _memcpy_PARM_3
                             31 	.globl _memcpy_PARM_2
                             32 	.globl _memcpy
                             33 ;--------------------------------------------------------
                             34 ; special function registers
                             35 ;--------------------------------------------------------
                             36 ;--------------------------------------------------------
                             37 ; special function bits
                             38 ;--------------------------------------------------------
                             39 ;--------------------------------------------------------
                             40 ; overlayable register banks
                             41 ;--------------------------------------------------------
                             42 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      43 	.ds 8
                             44 ;--------------------------------------------------------
                             45 ; internal ram data
                             46 ;--------------------------------------------------------
                             47 	.area DSEG    (DATA)
                             48 ;--------------------------------------------------------
                             49 ; overlayable items in internal ram 
                             50 ;--------------------------------------------------------
                             51 	.area OSEG    (OVR,DATA)
                             52 ;--------------------------------------------------------
                             53 ; indirectly addressable internal ram data
                             54 ;--------------------------------------------------------
                             55 	.area ISEG    (DATA)
                             56 ;--------------------------------------------------------
                             57 ; absolute internal ram data
                             58 ;--------------------------------------------------------
                             59 	.area IABS    (ABS,DATA)
                             60 	.area IABS    (ABS,DATA)
                             61 ;--------------------------------------------------------
                             62 ; bit data
                             63 ;--------------------------------------------------------
                             64 	.area BSEG    (BIT)
                             65 ;--------------------------------------------------------
                             66 ; paged external ram data
                             67 ;--------------------------------------------------------
                             68 	.area PSEG    (PAG,XDATA)
                             69 ;--------------------------------------------------------
                             70 ; external ram data
                             71 ;--------------------------------------------------------
                             72 	.area XSEG    (XDATA)
   0000                      73 _memcpy_PARM_2:
   0000                      74 	.ds 4
   0004                      75 _memcpy_PARM_3:
   0004                      76 	.ds 2
   0006                      77 _memcpy_ret_1_1:
   0006                      78 	.ds 4
   000A                      79 _memcpy_sloc0_1_0:
   000A                      80 	.ds 4
                             81 ;--------------------------------------------------------
                             82 ; absolute external ram data
                             83 ;--------------------------------------------------------
                             84 	.area XABS    (ABS,XDATA)
                             85 ;--------------------------------------------------------
                             86 ; external initialized ram data
                             87 ;--------------------------------------------------------
                             88 	.area XISEG   (XDATA)
                             89 ;--------------------------------------------------------
                             90 ; global & static initialisations
                             91 ;--------------------------------------------------------
                             92 	.area HOME    (CODE)
                             93 	.area GSINIT  (CODE)
                             94 	.area GSFINAL (CODE)
                             95 	.area GSINIT  (CODE)
                             96 ;--------------------------------------------------------
                             97 ; Home
                             98 ;--------------------------------------------------------
                             99 	.area HOME    (CODE)
                            100 	.area HOME    (CODE)
                            101 ;--------------------------------------------------------
                            102 ; code
                            103 ;--------------------------------------------------------
                            104 	.area CSEG    (CODE)
                            105 ;------------------------------------------------------------
                            106 ;Allocation info for local variables in function 'memcpy'
                            107 ;------------------------------------------------------------
                            108 ;src                       Allocated with name '_memcpy_PARM_2'
                            109 ;acount                    Allocated with name '_memcpy_PARM_3'
                            110 ;dst                       Allocated to registers r6 r7 r0 r1 
                            111 ;ret                       Allocated with name '_memcpy_ret_1_1'
                            112 ;d                         Allocated to registers 
                            113 ;s                         Allocated to registers r2 r3 r4 r5 
                            114 ;sloc0                     Allocated with name '_memcpy_sloc0_1_0'
                            115 ;sloc1                     Allocated with name '_memcpy_sloc1_1_0'
                            116 ;------------------------------------------------------------
                            117 ;	_memcpy.c:36: void * memcpy (
                            118 ;	-----------------------------------------
                            119 ;	 function memcpy
                            120 ;	-----------------------------------------
   0000                     121 _memcpy:
                    0002    122 	ar2 = 0x02
                    0003    123 	ar3 = 0x03
                    0004    124 	ar4 = 0x04
                    0005    125 	ar5 = 0x05
                    0006    126 	ar6 = 0x06
                    0007    127 	ar7 = 0x07
                    0000    128 	ar0 = 0x00
                    0001    129 	ar1 = 0x01
   0000 AE 82               130 	mov	r6,dpl
   0002 AF 83               131 	mov	r7,dph
   0004 A8 93               132 	mov	r0,dpx
   0006 A9 F0               133 	mov	r1,b
                            134 ;	_memcpy.c:42: void * ret = dst;
                            135 ;	genAssign: resultIsFar = TRUE
   0008 90s00r00r06         136 	mov	dptr,#_memcpy_ret_1_1
   000C EE                  137 	mov	a,r6
   000D F0                  138 	movx	@dptr,a
   000E A3                  139 	inc	dptr
   000F EF                  140 	mov	a,r7
   0010 F0                  141 	movx	@dptr,a
   0011 A3                  142 	inc	dptr
   0012 E8                  143 	mov	a,r0
   0013 F0                  144 	movx	@dptr,a
   0014 A3                  145 	inc	dptr
   0015 E9                  146 	mov	a,r1
   0016 F0                  147 	movx	@dptr,a
                            148 ;	_memcpy.c:44: char * s = src;
   0017 90s00r00r00         149 	mov	dptr,#_memcpy_PARM_2
                            150 ;	genAssign: resultIsFar = FALSE
   001B E0                  151 	movx	a,@dptr
   001C FA                  152 	mov	r2,a
   001D A3                  153 	inc	dptr
   001E E0                  154 	movx	a,@dptr
   001F FB                  155 	mov	r3,a
   0020 A3                  156 	inc	dptr
   0021 E0                  157 	movx	a,@dptr
   0022 FC                  158 	mov	r4,a
   0023 A3                  159 	inc	dptr
   0024 E0                  160 	movx	a,@dptr
   0025 FD                  161 	mov	r5,a
                            162 ;	genAssign: resultIsFar = TRUE
                            163 ;	_memcpy.c:49: while (acount--) {
                            164 ;	genAssign: resultIsFar = FALSE
                            165 ;	genAssign: resultIsFar = TRUE
   0026 90s00r00r0A         166 	mov	dptr,#_memcpy_sloc0_1_0
   002A EE                  167 	mov	a,r6
   002B F0                  168 	movx	@dptr,a
   002C A3                  169 	inc	dptr
   002D EF                  170 	mov	a,r7
   002E F0                  171 	movx	@dptr,a
   002F A3                  172 	inc	dptr
   0030 E8                  173 	mov	a,r0
   0031 F0                  174 	movx	@dptr,a
   0032 A3                  175 	inc	dptr
   0033 E9                  176 	mov	a,r1
   0034 F0                  177 	movx	@dptr,a
   0035 90s00r00r04         178 	mov	dptr,#_memcpy_PARM_3
                            179 ;	genAssign: resultIsFar = FALSE
   0039 E0                  180 	movx	a,@dptr
   003A F8                  181 	mov	r0,a
   003B A3                  182 	inc	dptr
   003C E0                  183 	movx	a,@dptr
   003D F9                  184 	mov	r1,a
   003E                     185 00101$:
                            186 ;	genAssign: resultIsFar = FALSE
   003E 88 06               187 	mov	ar6,r0
   0040 89 07               188 	mov	ar7,r1
   0042 18                  189 	dec	r0
   0043 B8 FF 01            190 	cjne	r0,#0xFF,00109$
   0046 19                  191 	dec	r1
   0047                     192 00109$:
   0047 EE                  193 	mov	a,r6
   0048 4F                  194 	orl	a,r7
   0049 60 57               195 	jz  00103$
   004B                     196 00110$:
                            197 ;	_memcpy.c:50: *d++ = *s++;
   004B 8A 82               198 	mov	dpl,r2
   004D 8B 83               199 	mov	dph,r3
   004F 8C 93               200 	mov	dpx,r4
   0051 8D F0               201 	mov	b,r5
   0053 12s00r00r00         202 	lcall	__gptrget
   0057 FE                  203 	mov	r6,a
   0058 A3                  204 	inc	dptr
   0059 AA 82               205 	mov	r2,dpl
   005B AB 83               206 	mov	r3,dph
   005D AC 93               207 	mov	r4,dpx
   005F AD F0               208 	mov	r5,b
   0061 75 86 01            209 	mov     dps, #1
   0064 90s00r00r0A         210 	mov     dptr, #_memcpy_sloc0_1_0
   0068 E0                  211 	movx	a,@dptr
   0069 F5 82               212 	mov	dpl,a
   006B A3                  213 	inc	dptr
   006C E0                  214 	movx	a,@dptr
   006D F5 83               215 	mov	dph,a
   006F A3                  216 	inc	dptr
   0070 E0                  217 	movx	a,@dptr
   0071 F5 93               218 	mov	dpx,a
   0073 A3                  219 	inc	dptr
   0074 E0                  220 	movx	a,@dptr
   0075 F5 F0               221 	mov	b,a
   0077 75 86 00            222 	mov	dps,#0
   007A EE                  223 	mov	a,r6
   007B 12s00r00r00         224 	lcall	__gptrput
   007F A3                  225 	inc	dptr
   0080 05 86               226 	inc	dps
   0082 12s00r00r00         227 	lcall	__decdptr
   0086 12s00r00r00         228 	lcall	__decdptr
   008A 12s00r00r00         229 	lcall	__decdptr
   008E E5 82               230 	mov	a,dpl
   0090 F0                  231 	movx	@dptr,a
   0091 A3                  232 	inc	dptr
   0092 E5 83               233 	mov	a,dph
   0094 F0                  234 	movx	@dptr,a
   0095 A3                  235 	inc	dptr
   0096 E5 93               236 	mov	a,dpx
   0098 F0                  237 	movx	@dptr,a
   0099 A3                  238 	inc	dptr
   009A E5 F0               239 	mov	a,b
   009C F0                  240 	movx	@dptr,a
   009D 75 86 00            241 	mov	dps,#0
   00A0 80 9C               242 	sjmp 00101$
   00A2                     243 00103$:
                            244 ;	_memcpy.c:53: return(ret);
   00A2 75 86 01            245 	mov     dps, #1
   00A5 90s00r00r06         246 	mov     dptr, #_memcpy_ret_1_1
   00A9 E0                  247 	movx	a,@dptr
   00AA F5 82               248 	mov	dpl,a
   00AC A3                  249 	inc	dptr
   00AD E0                  250 	movx	a,@dptr
   00AE F5 83               251 	mov	dph,a
   00B0 A3                  252 	inc	dptr
   00B1 E0                  253 	movx	a,@dptr
   00B2 F5 93               254 	mov	dpx,a
   00B4 A3                  255 	inc	dptr
   00B5 E0                  256 	movx	a,@dptr
   00B6 F5 F0               257 	mov	b,a
   00B8 75 86 00            258 	mov	dps,#0
   00BB                     259 00104$:
   00BB 22                  260 	ret
                            261 	.area CSEG    (CODE)
                            262 	.area CONST   (CODE)
                            263 	.area XINIT   (CODE)
                            264 	.area CABS    (ABS,CODE)
