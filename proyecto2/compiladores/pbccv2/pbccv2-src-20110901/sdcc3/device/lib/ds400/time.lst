                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:20 2015
                              5 ;--------------------------------------------------------
                              6 	.module time
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl ___day
                             31 	.globl ___month
                             32 	.globl _time
                             33 	.globl _asctime
                             34 	.globl _ctime
                             35 	.globl _localtime
                             36 	.globl _gmtime
                             37 	.globl _mktime
                             38 ;--------------------------------------------------------
                             39 ; special function registers
                             40 ;--------------------------------------------------------
                    0080     41 _P4	=	0x0080
                    0081     42 _SP	=	0x0081
                    0082     43 _DPL	=	0x0082
                    0083     44 _DPH	=	0x0083
                    0084     45 _DPL1	=	0x0084
                    0085     46 _DPH1	=	0x0085
                    0086     47 _DPS	=	0x0086
                    0087     48 _PCON	=	0x0087
                    0088     49 _TCON	=	0x0088
                    0089     50 _TMOD	=	0x0089
                    008A     51 _TL0	=	0x008a
                    008B     52 _TL1	=	0x008b
                    008C     53 _TH0	=	0x008c
                    008D     54 _TH1	=	0x008d
                    008E     55 _CKCON	=	0x008e
                    0090     56 _P1	=	0x0090
                    0091     57 _EXIF	=	0x0091
                    0092     58 _P4CNT	=	0x0092
                    0093     59 _DPX	=	0x0093
                    0095     60 _DPX1	=	0x0095
                    0098     61 _SCON0	=	0x0098
                    0099     62 _SBUF0	=	0x0099
                    009B     63 _ESP	=	0x009b
                    009C     64 _AP	=	0x009c
                    009D     65 _ACON	=	0x009d
                    00A0     66 _P2	=	0x00a0
                    00A1     67 _P5	=	0x00a1
                    00A2     68 _P5CNT	=	0x00a2
                    00A8     69 _IE	=	0x00a8
                    00B0     70 _P3	=	0x00b0
                    00B8     71 _IP	=	0x00b8
                    00C0     72 _SCON1	=	0x00c0
                    00C1     73 _SBUF1	=	0x00c1
                    00C4     74 _PMR	=	0x00c4
                    00C6     75 _MCON	=	0x00c6
                    00C7     76 _TA	=	0x00c7
                    00C8     77 _T2CON	=	0x00c8
                    00C9     78 _T2MOD	=	0x00c9
                    00CA     79 _RCAP2L	=	0x00ca
                    00CA     80 _RTL2	=	0x00ca
                    00CB     81 _RCAP2H	=	0x00cb
                    00CB     82 _RTH2	=	0x00cb
                    00CC     83 _TL2	=	0x00cc
                    00CD     84 _TH2	=	0x00cd
                    00D0     85 _PSW	=	0x00d0
                    00D1     86 _MCNT0	=	0x00d1
                    00D2     87 _MCNT1	=	0x00d2
                    00D3     88 _MA	=	0x00d3
                    00D4     89 _MB	=	0x00d4
                    00D5     90 _MC	=	0x00d5
                    00D8     91 _WDCON	=	0x00d8
                    00E0     92 _ACC	=	0x00e0
                    00E8     93 _EIE	=	0x00e8
                    00EA     94 _MXAX	=	0x00ea
                    00F0     95 _B	=	0x00f0
                    00F8     96 _EIP	=	0x00f8
                    8C8A     97 _TMR0	=	0x8c8a
                    8D8B     98 _TMR1	=	0x8d8b
                    CDCC     99 _TMR2	=	0xcdcc
                    CBCA    100 _RCAP2	=	0xcbca
                            101 ;--------------------------------------------------------
                            102 ; special function bits
                            103 ;--------------------------------------------------------
                    0088    104 _IT0	=	0x0088
                    0089    105 _IE0	=	0x0089
                    008A    106 _IT1	=	0x008a
                    008B    107 _IE1	=	0x008b
                    008C    108 _TR0	=	0x008c
                    008D    109 _TF0	=	0x008d
                    008E    110 _TR1	=	0x008e
                    008F    111 _TF1	=	0x008f
                    0090    112 _T2	=	0x0090
                    0091    113 _T2EX	=	0x0091
                    0092    114 _RXD1	=	0x0092
                    0093    115 _TXD1	=	0x0093
                    0094    116 _INT2	=	0x0094
                    0095    117 _INT3	=	0x0095
                    0096    118 _INT4	=	0x0096
                    0097    119 _INT5	=	0x0097
                    0098    120 _RI_0	=	0x0098
                    0099    121 _TI_0	=	0x0099
                    009A    122 _RB8_0	=	0x009a
                    009B    123 _TB8_0	=	0x009b
                    009C    124 _REN_0	=	0x009c
                    009D    125 _SM2_0	=	0x009d
                    009E    126 _SM1_0	=	0x009e
                    009F    127 _SM0_0	=	0x009f
                    009F    128 _FE_0	=	0x009f
                    00A8    129 _EX0	=	0x00a8
                    00A9    130 _ET0	=	0x00a9
                    00AA    131 _EX1	=	0x00aa
                    00AB    132 _ET1	=	0x00ab
                    00AC    133 _ES0	=	0x00ac
                    00AD    134 _ET2	=	0x00ad
                    00AE    135 _ES1	=	0x00ae
                    00AF    136 _EA	=	0x00af
                    00B0    137 _RXD0	=	0x00b0
                    00B1    138 _TXD0	=	0x00b1
                    00B2    139 _INT0	=	0x00b2
                    00B3    140 _INT1	=	0x00b3
                    00B4    141 _T0	=	0x00b4
                    00B5    142 _T1	=	0x00b5
                    00B6    143 _WR	=	0x00b6
                    00B7    144 _RD	=	0x00b7
                    00B8    145 _PX0	=	0x00b8
                    00B9    146 _PT0	=	0x00b9
                    00BA    147 _PX1	=	0x00ba
                    00BB    148 _PT1	=	0x00bb
                    00BC    149 _PS0	=	0x00bc
                    00BD    150 _PT2	=	0x00bd
                    00BE    151 _PS1	=	0x00be
                    00C0    152 _RI_1	=	0x00c0
                    00C1    153 _TI_1	=	0x00c1
                    00C2    154 _RB8_1	=	0x00c2
                    00C3    155 _TB8_1	=	0x00c3
                    00C4    156 _REN_1	=	0x00c4
                    00C5    157 _SM2_1	=	0x00c5
                    00C6    158 _SM1_1	=	0x00c6
                    00C7    159 _SM0_1	=	0x00c7
                    00C7    160 _FE_1	=	0x00c7
                    00C8    161 _CP_RL	=	0x00c8
                    00C9    162 _C_T	=	0x00c9
                    00CA    163 _TR2	=	0x00ca
                    00CB    164 _EXEN2	=	0x00cb
                    00CC    165 _TCLK	=	0x00cc
                    00CD    166 _RCLK	=	0x00cd
                    00CE    167 _EXF2	=	0x00ce
                    00CF    168 _TF2	=	0x00cf
                    00D0    169 _P	=	0x00d0
                    00D1    170 _F1	=	0x00d1
                    00D2    171 _OV	=	0x00d2
                    00D3    172 _RS0	=	0x00d3
                    00D4    173 _RS1	=	0x00d4
                    00D5    174 _F0	=	0x00d5
                    00D6    175 _AC	=	0x00d6
                    00D7    176 _CY	=	0x00d7
                    00D8    177 _RWT	=	0x00d8
                    00D9    178 _EWT	=	0x00d9
                    00DA    179 _WDRF	=	0x00da
                    00DB    180 _WDIF	=	0x00db
                    00DC    181 _PFI	=	0x00dc
                    00DD    182 _EPFI	=	0x00dd
                    00DE    183 _POR	=	0x00de
                    00DF    184 _SMOD_1	=	0x00df
                    00E8    185 _EX2	=	0x00e8
                    00E9    186 _EX3	=	0x00e9
                    00EA    187 _EX4	=	0x00ea
                    00EB    188 _EX5	=	0x00eb
                    00EC    189 _EWDI	=	0x00ec
                    00ED    190 _C1IE	=	0x00ed
                    00EE    191 _C0IE	=	0x00ee
                    00EF    192 _CANBIE	=	0x00ef
                    00F8    193 _PX2	=	0x00f8
                    00F9    194 _PX3	=	0x00f9
                    00FA    195 _PX4	=	0x00fa
                    00FB    196 _PX5	=	0x00fb
                    00FC    197 _PWDI	=	0x00fc
                    00FD    198 _C1IP	=	0x00fd
                    00FE    199 _C0IP	=	0x00fe
                    00FF    200 _CANBIP	=	0x00ff
                            201 ;--------------------------------------------------------
                            202 ; overlayable register banks
                            203 ;--------------------------------------------------------
                            204 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     205 	.ds 8
                            206 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                     207 	.ds 8
                            208 ;--------------------------------------------------------
                            209 ; internal ram data
                            210 ;--------------------------------------------------------
                            211 	.area DSEG    (DATA)
                            212 ;--------------------------------------------------------
                            213 ; overlayable items in internal ram 
                            214 ;--------------------------------------------------------
                            215 	.area OSEG    (OVR,DATA)
                            216 ;--------------------------------------------------------
                            217 ; indirectly addressable internal ram data
                            218 ;--------------------------------------------------------
                            219 	.area ISEG    (DATA)
                            220 ;--------------------------------------------------------
                            221 ; absolute internal ram data
                            222 ;--------------------------------------------------------
                            223 	.area IABS    (ABS,DATA)
                            224 	.area IABS    (ABS,DATA)
                            225 ;--------------------------------------------------------
                            226 ; bit data
                            227 ;--------------------------------------------------------
                            228 	.area BSEG    (BIT)
                            229 ;--------------------------------------------------------
                            230 ; paged external ram data
                            231 ;--------------------------------------------------------
                            232 	.area PSEG    (PAG,XDATA)
                            233 ;--------------------------------------------------------
                            234 ; external ram data
                            235 ;--------------------------------------------------------
                            236 	.area XSEG    (XDATA)
   0000                     237 _time_timeptr_1_1:
   0000                     238 	.ds 4
   0004                     239 _time_now_1_1:
   0004                     240 	.ds 12
   0010                     241 _ascTimeBuffer:
   0010                     242 	.ds 32
   0030                     243 _CheckTime_sloc0_1_0:
   0030                     244 	.ds 1
   0031                     245 _asctime_timeptr_1_1:
   0031                     246 	.ds 4
   0035                     247 _asctime_sloc0_1_0:
   0035                     248 	.ds 2
   0037                     249 _asctime_sloc1_1_0:
   0037                     250 	.ds 2
   0039                     251 _asctime_sloc2_1_0:
   0039                     252 	.ds 2
   003B                     253 _asctime_sloc3_1_0:
   003B                     254 	.ds 2
   003D                     255 _asctime_sloc4_1_0:
   003D                     256 	.ds 2
   003F                     257 _lastTime:
   003F                     258 	.ds 12
   004B                     259 _gmtime_epoch_1_1:
   004B                     260 	.ds 4
   004F                     261 _mktime_timeptr_1_1:
   004F                     262 	.ds 4
   0053                     263 _mktime_year_1_1:
   0053                     264 	.ds 2
   0055                     265 _mktime_month_1_1:
   0055                     266 	.ds 2
   0057                     267 _mktime_seconds_1_1:
   0057                     268 	.ds 4
                            269 ;--------------------------------------------------------
                            270 ; absolute external ram data
                            271 ;--------------------------------------------------------
                            272 	.area XABS    (ABS,XDATA)
                            273 ;--------------------------------------------------------
                            274 ; external initialized ram data
                            275 ;--------------------------------------------------------
                            276 	.area XISEG   (XDATA)
                            277 ;--------------------------------------------------------
                            278 ; global & static initialisations
                            279 ;--------------------------------------------------------
                            280 	.area HOME    (CODE)
                            281 	.area GSINIT  (CODE)
                            282 	.area GSFINAL (CODE)
                            283 	.area GSINIT  (CODE)
                            284 ;--------------------------------------------------------
                            285 ; Home
                            286 ;--------------------------------------------------------
                            287 	.area HOME    (CODE)
                            288 	.area HOME    (CODE)
                            289 ;--------------------------------------------------------
                            290 ; code
                            291 ;--------------------------------------------------------
                            292 	.area CSEG    (CODE)
                            293 ;------------------------------------------------------------
                            294 ;Allocation info for local variables in function 'time'
                            295 ;------------------------------------------------------------
                            296 ;timeptr                   Allocated with name '_time_timeptr_1_1'
                            297 ;now                       Allocated with name '_time_now_1_1'
                            298 ;t                         Allocated to registers r6 r7 r0 r1 
                            299 ;------------------------------------------------------------
                            300 ;	time.c:50: time_t time(time_t *timeptr) {
                            301 ;	-----------------------------------------
                            302 ;	 function time
                            303 ;	-----------------------------------------
   0000                     304 _time:
                    0002    305 	ar2 = 0x02
                    0003    306 	ar3 = 0x03
                    0004    307 	ar4 = 0x04
                    0005    308 	ar5 = 0x05
                    0006    309 	ar6 = 0x06
                    0007    310 	ar7 = 0x07
                    0000    311 	ar0 = 0x00
                    0001    312 	ar1 = 0x01
   0000 75 86 01            313 	mov     dps, #1
   0003 90s00r00r00         314 	mov     dptr, #_time_timeptr_1_1
   0007 E5 82               315 	mov	a,dpl
   0009 F0                  316 	movx	@dptr,a
   000A A3                  317 	inc	dptr
   000B E5 83               318 	mov	a,dph
   000D F0                  319 	movx	@dptr,a
   000E A3                  320 	inc	dptr
   000F E5 93               321 	mov	a,dpx
   0011 F0                  322 	movx	@dptr,a
   0012 A3                  323 	inc	dptr
   0013 E5 F0               324 	mov	a,b
   0015 F0                  325 	movx	@dptr,a
   0016 75 86 00            326 	mov	dps,#0
                            327 ;	time.c:52: time_t t=-1;
                            328 ;	genAssign: resultIsFar = TRUE
   0019 7E FF               329 	mov	r6,#0xFF
   001B 7F FF               330 	mov	r7,#0xFF
   001D 78 FF               331 	mov	r0,#0xFF
   001F 79 FF               332 	mov	r1,#0xFF
                            333 ;	time.c:54: if (RtcRead(&now)) {
   0021 C0 06               334 	push	ar6
   0023 C0 07               335 	push	ar7
   0025 C0 00               336 	push	ar0
   0027 C0 01               337 	push	ar1
   0029 90s00r00r04         338 	mov dptr,#_time_now_1_1
   002D 75 F0 00            339 	mov	b,#0x00
   0030 12s00r00r00         340 	lcall	_RtcRead
   0034 D0 01               341 	pop	ar1
   0036 D0 00               342 	pop	ar0
   0038 D0 07               343 	pop	ar7
   003A D0 06               344 	pop	ar6
   003C E5 82               345 	mov	a,dpl
   003E 60 1B               346 	jz  00102$
   0040                     347 00109$:
                            348 ;	time.c:55: t=mktime(&now);
   0040 90s00r00r04         349 	mov dptr,#_time_now_1_1
   0044 75 F0 00            350 	mov	b,#0x00
   0047 12s00r07r53         351 	lcall	_mktime
   004B AA 82               352 	mov	r2,dpl
   004D AB 83               353 	mov	r3,dph
   004F AC 93               354 	mov	r4,dpx
   0051 AD F0               355 	mov	r5,b
                            356 ;	genAssign: resultIsFar = TRUE
   0053 8A 06               357 	mov	ar6,r2
   0055 8B 07               358 	mov	ar7,r3
   0057 8C 00               359 	mov	ar0,r4
   0059 8D 01               360 	mov	ar1,r5
   005B                     361 00102$:
                            362 ;	time.c:57: if (timeptr) {
   005B 90s00r00r00         363 	mov	dptr,#_time_timeptr_1_1
   005F E0                  364 	movx	a,@dptr
   0060 F5 F0               365 	mov	b,a
   0062 A3                  366 	inc	dptr
   0063 E0                  367 	movx	a,@dptr
   0064 42 F0               368 	orl	b,a
   0066 A3                  369 	inc	dptr
   0067 E0                  370 	movx	a,@dptr
   0068 45 F0               371 	orl	a,b
   006A 60 28               372 	jz  00104$
   006C                     373 00110$:
                            374 ;	time.c:58: *timeptr=t;
   006C 75 86 01            375 	mov     dps, #1
   006F 90s00r00r00         376 	mov     dptr, #_time_timeptr_1_1
   0073 E0                  377 	movx	a,@dptr
   0074 F5 82               378 	mov	dpl,a
   0076 A3                  379 	inc	dptr
   0077 E0                  380 	movx	a,@dptr
   0078 F5 83               381 	mov	dph,a
   007A A3                  382 	inc	dptr
   007B E0                  383 	movx	a,@dptr
   007C F5 93               384 	mov	dpx,a
   007E A3                  385 	inc	dptr
   007F E0                  386 	movx	a,@dptr
   0080 F5 F0               387 	mov	b,a
   0082 75 86 00            388 	mov	dps,#0
   0085 8E 9C               389 	mov	_ap, r6
   0087 EF                  390 	mov	a,r7
   0088 12s00r00r00         391 	lcall	__gptrputWord
   008C A3                  392 	inc	dptr
   008D 88 9C               393 	mov	_ap, r0
   008F E9                  394 	mov	a,r1
   0090 12s00r00r00         395 	lcall	__gptrputWord
   0094                     396 00104$:
                            397 ;	time.c:60: return t;
   0094 8E 82               398 	mov	dpl,r6
   0096 8F 83               399 	mov	dph,r7
   0098 88 93               400 	mov	dpx,r0
   009A 89 F0               401 	mov	b,r1
   009C                     402 00105$:
   009C 22                  403 	ret
                            404 ;------------------------------------------------------------
                            405 ;Allocation info for local variables in function 'CheckTime'
                            406 ;------------------------------------------------------------
                            407 ;timeptr                   Allocated to registers r2 r3 r4 r5 
                            408 ;sloc0                     Allocated with name '_CheckTime_sloc0_1_0'
                            409 ;------------------------------------------------------------
                            410 ;	time.c:73: static void CheckTime(struct tm *timeptr) {
                            411 ;	-----------------------------------------
                            412 ;	 function CheckTime
                            413 ;	-----------------------------------------
   009D                     414 _CheckTime:
                            415 ;	time.c:84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
   009D AA 82               416 	mov     r2,dpl
   009F AB 83               417 	mov     r3,dph
   00A1 AC 93               418 	mov     r4,dpx
   00A3 AD F0               419 	mov     r5,b
   00A5 8D F0               420 	mov	b,r5
   00A7 12s00r00r00         421 	lcall	__gptrget
   00AB FE                  422 	mov	r6,a
   00AC C3                  423 	clr	c
   00AD 74 3B               424 	mov	a,#0x3B
   00AF 9E                  425 	subb	a,r6
   00B0 50 0E               426 	jnc  00102$
   00B2                     427 00128$:
   00B2 8A 82               428 	mov	dpl,r2
   00B4 8B 83               429 	mov	dph,r3
   00B6 8C 93               430 	mov	dpx,r4
   00B8 8D F0               431 	mov	b,r5
   00BA 74 3B               432 	mov	a,#0x3B
   00BC 12s00r00r00         433 	lcall	__gptrput
   00C0                     434 00102$:
                            435 ;	time.c:85: if (timeptr->tm_min>59) timeptr->tm_min=59;
   00C0 74 01               436 	mov	a,#0x01
   00C2 2A                  437 	add	a,r2
   00C3 FE                  438 	mov	r6,a
   00C4 E4                  439 	clr  a
   00C5 3B                  440 	addc	a,r3
   00C6 FF                  441 	mov	r7,a
   00C7 E4                  442 	clr  a
   00C8 3C                  443 	addc	a,r4
   00C9 F8                  444 	mov	r0,a
   00CA 8D 01               445 	mov	ar1,r5
   00CC C0 02               446 	push	ar2
   00CE C0 03               447 	push	ar3
   00D0 C0 04               448 	push	ar4
   00D2 C0 05               449 	push	ar5
   00D4 8E 82               450 	mov	dpl,r6
   00D6 8F 83               451 	mov	dph,r7
   00D8 88 93               452 	mov	dpx,r0
   00DA 89 F0               453 	mov	b,r1
   00DC 12s00r00r00         454 	lcall	__gptrget
   00E0 FA                  455 	mov	r2,a
   00E1 C3                  456 	clr	c
   00E2 74 3B               457 	mov	a,#0x3B
   00E4 9A                  458 	subb	a,r2
   00E5 D0 05               459 	pop	ar5
   00E7 D0 04               460 	pop	ar4
   00E9 D0 03               461 	pop	ar3
   00EB D0 02               462 	pop	ar2
   00ED 50 0E               463 	jnc  00104$
   00EF                     464 00129$:
   00EF 8E 82               465 	mov	dpl,r6
   00F1 8F 83               466 	mov	dph,r7
   00F3 88 93               467 	mov	dpx,r0
   00F5 89 F0               468 	mov	b,r1
   00F7 74 3B               469 	mov	a,#0x3B
   00F9 12s00r00r00         470 	lcall	__gptrput
   00FD                     471 00104$:
                            472 ;	time.c:86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
   00FD 74 02               473 	mov	a,#0x02
   00FF 2A                  474 	add	a,r2
   0100 FE                  475 	mov	r6,a
   0101 E4                  476 	clr  a
   0102 3B                  477 	addc	a,r3
   0103 FF                  478 	mov	r7,a
   0104 E4                  479 	clr  a
   0105 3C                  480 	addc	a,r4
   0106 F8                  481 	mov	r0,a
   0107 8D 01               482 	mov	ar1,r5
   0109 C0 02               483 	push	ar2
   010B C0 03               484 	push	ar3
   010D C0 04               485 	push	ar4
   010F C0 05               486 	push	ar5
   0111 8E 82               487 	mov	dpl,r6
   0113 8F 83               488 	mov	dph,r7
   0115 88 93               489 	mov	dpx,r0
   0117 89 F0               490 	mov	b,r1
   0119 12s00r00r00         491 	lcall	__gptrget
   011D FA                  492 	mov	r2,a
   011E C3                  493 	clr	c
   011F 74 17               494 	mov	a,#0x17
   0121 9A                  495 	subb	a,r2
   0122 D0 05               496 	pop	ar5
   0124 D0 04               497 	pop	ar4
   0126 D0 03               498 	pop	ar3
   0128 D0 02               499 	pop	ar2
   012A 50 0E               500 	jnc  00106$
   012C                     501 00130$:
   012C 8E 82               502 	mov	dpl,r6
   012E 8F 83               503 	mov	dph,r7
   0130 88 93               504 	mov	dpx,r0
   0132 89 F0               505 	mov	b,r1
   0134 74 17               506 	mov	a,#0x17
   0136 12s00r00r00         507 	lcall	__gptrput
   013A                     508 00106$:
                            509 ;	time.c:87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
   013A 74 07               510 	mov	a,#0x07
   013C 2A                  511 	add	a,r2
   013D FE                  512 	mov	r6,a
   013E E4                  513 	clr  a
   013F 3B                  514 	addc	a,r3
   0140 FF                  515 	mov	r7,a
   0141 E4                  516 	clr  a
   0142 3C                  517 	addc	a,r4
   0143 F8                  518 	mov	r0,a
   0144 8D 01               519 	mov	ar1,r5
   0146 C0 02               520 	push	ar2
   0148 C0 03               521 	push	ar3
   014A C0 04               522 	push	ar4
   014C C0 05               523 	push	ar5
   014E 8E 82               524 	mov	dpl,r6
   0150 8F 83               525 	mov	dph,r7
   0152 88 93               526 	mov	dpx,r0
   0154 89 F0               527 	mov	b,r1
   0156 12s00r00r00         528 	lcall	__gptrget
   015A FA                  529 	mov	r2,a
   015B C3                  530 	clr	c
   015C 74 06               531 	mov	a,#0x06
   015E 9A                  532 	subb	a,r2
   015F D0 05               533 	pop	ar5
   0161 D0 04               534 	pop	ar4
   0163 D0 03               535 	pop	ar3
   0165 D0 02               536 	pop	ar2
   0167 50 0E               537 	jnc  00108$
   0169                     538 00131$:
   0169 8E 82               539 	mov	dpl,r6
   016B 8F 83               540 	mov	dph,r7
   016D 88 93               541 	mov	dpx,r0
   016F 89 F0               542 	mov	b,r1
   0171 74 06               543 	mov	a,#0x06
   0173 12s00r00r00         544 	lcall	__gptrput
   0177                     545 00108$:
                            546 ;	time.c:88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
   0177 74 03               547 	mov	a,#0x03
   0179 2A                  548 	add	a,r2
   017A FE                  549 	mov	r6,a
   017B E4                  550 	clr  a
   017C 3B                  551 	addc	a,r3
   017D FF                  552 	mov	r7,a
   017E E4                  553 	clr  a
   017F 3C                  554 	addc	a,r4
   0180 F8                  555 	mov	r0,a
   0181 8D 01               556 	mov	ar1,r5
   0183 8E 82               557 	mov	dpl,r6
   0185 8F 83               558 	mov	dph,r7
   0187 88 93               559 	mov	dpx,r0
   0189 89 F0               560 	mov	b,r1
   018B 75 86 01            561 	mov	dps, #1
   018E 90s00r00r30         562 	mov	dptr, #_CheckTime_sloc0_1_0
   0192 15 86               563 	dec	dps
   0194 12s00r00r00         564 	lcall	__gptrget
   0198 75 86 01            565 	mov	dps,#1
   019B F0                  566 	movx	@dptr,a
   019C 75 86 00            567 	mov	dps,#0
   019F 90s00r00r30         568 	mov	dptr,#_CheckTime_sloc0_1_0
   01A3 E0                  569 	movx	a,@dptr
   01A4 B4 01 00            570 	cjne	a,#0x01,00132$
   01A7                     571 00132$:
   01A7 50 10               572 	jnc  00112$
   01A9                     573 00133$:
   01A9 8E 82               574 	mov	dpl,r6
   01AB 8F 83               575 	mov	dph,r7
   01AD 88 93               576 	mov	dpx,r0
   01AF 89 F0               577 	mov	b,r1
   01B1 74 01               578 	mov	a,#0x01
   01B3 12s00r00r00         579 	lcall	__gptrput
   01B7 80 1E               580 	sjmp 00113$
   01B9                     581 00112$:
                            582 ;	time.c:89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
   01B9 90s00r00r30         583 	mov	dptr,#_CheckTime_sloc0_1_0
   01BD C3                  584 	clr	c
   01BE 74 1F               585 	mov	a,#0x1F
   01C0 C5 F0               586 	xch	a, b
   01C2 E0                  587 	movx	a,@dptr
   01C3 C5 F0               588 	xch	a, b
   01C5 95 F0               589 	subb	a,b
   01C7 50 0E               590 	jnc  00113$
   01C9                     591 00134$:
   01C9 8E 82               592 	mov	dpl,r6
   01CB 8F 83               593 	mov	dph,r7
   01CD 88 93               594 	mov	dpx,r0
   01CF 89 F0               595 	mov	b,r1
   01D1 74 1F               596 	mov	a,#0x1F
   01D3 12s00r00r00         597 	lcall	__gptrput
   01D7                     598 00113$:
                            599 ;	time.c:90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
   01D7 74 04               600 	mov	a,#0x04
   01D9 2A                  601 	add	a,r2
   01DA FE                  602 	mov	r6,a
   01DB E4                  603 	clr  a
   01DC 3B                  604 	addc	a,r3
   01DD FF                  605 	mov	r7,a
   01DE E4                  606 	clr  a
   01DF 3C                  607 	addc	a,r4
   01E0 F8                  608 	mov	r0,a
   01E1 8D 01               609 	mov	ar1,r5
   01E3 C0 02               610 	push	ar2
   01E5 C0 03               611 	push	ar3
   01E7 C0 04               612 	push	ar4
   01E9 C0 05               613 	push	ar5
   01EB 8E 82               614 	mov	dpl,r6
   01ED 8F 83               615 	mov	dph,r7
   01EF 88 93               616 	mov	dpx,r0
   01F1 89 F0               617 	mov	b,r1
   01F3 12s00r00r00         618 	lcall	__gptrget
   01F7 FA                  619 	mov	r2,a
   01F8 C3                  620 	clr	c
   01F9 74 0B               621 	mov	a,#0x0B
   01FB 9A                  622 	subb	a,r2
   01FC D0 05               623 	pop	ar5
   01FE D0 04               624 	pop	ar4
   0200 D0 03               625 	pop	ar3
   0202 D0 02               626 	pop	ar2
   0204 50 0E               627 	jnc  00115$
   0206                     628 00135$:
   0206 8E 82               629 	mov	dpl,r6
   0208 8F 83               630 	mov	dph,r7
   020A 88 93               631 	mov	dpx,r0
   020C 89 F0               632 	mov	b,r1
   020E 74 0B               633 	mov	a,#0x0B
   0210 12s00r00r00         634 	lcall	__gptrput
   0214                     635 00115$:
                            636 ;	time.c:91: if (timeptr->tm_year<0) timeptr->tm_year=0;
   0214 74 05               637 	mov	a,#0x05
   0216 2A                  638 	add	a,r2
   0217 FA                  639 	mov	r2,a
   0218 E4                  640 	clr  a
   0219 3B                  641 	addc	a,r3
   021A FB                  642 	mov	r3,a
   021B E4                  643 	clr  a
   021C 3C                  644 	addc	a,r4
   021D FC                  645 	mov	r4,a
   021E 8A 82               646 	mov	dpl,r2
   0220 8B 83               647 	mov	dph,r3
   0222 8C 93               648 	mov	dpx,r4
   0224 8D F0               649 	mov	b,r5
   0226 12s00r00r00         650 	lcall	__gptrgetWord
   022A FE                  651 	mov	r6,a
   022B AF 9C               652 	mov	r7,_ap
   022D EF                  653 	mov	a,r7
   022E 30 E7 0F            654 	jnb  acc.7,00118$
   0231                     655 00136$:
   0231 8A 82               656 	mov	dpl,r2
   0233 8B 83               657 	mov	dph,r3
   0235 8C 93               658 	mov	dpx,r4
   0237 8D F0               659 	mov	b,r5
   0239 E4                  660 	clr  a
   023A F5 9C               661 	mov  _ap,a
   023C 12s00r00r00         662 	lcall	__gptrputWord
   0240                     663 00118$:
   0240 22                  664 	ret
                            665 ;------------------------------------------------------------
                            666 ;Allocation info for local variables in function 'asctime'
                            667 ;------------------------------------------------------------
                            668 ;timeptr                   Allocated with name '_asctime_timeptr_1_1'
                            669 ;sloc0                     Allocated with name '_asctime_sloc0_1_0'
                            670 ;sloc1                     Allocated with name '_asctime_sloc1_1_0'
                            671 ;sloc2                     Allocated with name '_asctime_sloc2_1_0'
                            672 ;sloc3                     Allocated with name '_asctime_sloc3_1_0'
                            673 ;sloc4                     Allocated with name '_asctime_sloc4_1_0'
                            674 ;------------------------------------------------------------
                            675 ;	time.c:95: char *asctime(struct tm *timeptr) {
                            676 ;	-----------------------------------------
                            677 ;	 function asctime
                            678 ;	-----------------------------------------
   0241                     679 _asctime:
   0241 75 86 01            680 	mov     dps, #1
   0244 90s00r00r31         681 	mov     dptr, #_asctime_timeptr_1_1
   0248 E5 82               682 	mov	a,dpl
   024A F0                  683 	movx	@dptr,a
   024B A3                  684 	inc	dptr
   024C E5 83               685 	mov	a,dph
   024E F0                  686 	movx	@dptr,a
   024F A3                  687 	inc	dptr
   0250 E5 93               688 	mov	a,dpx
   0252 F0                  689 	movx	@dptr,a
   0253 A3                  690 	inc	dptr
   0254 E5 F0               691 	mov	a,b
   0256 F0                  692 	movx	@dptr,a
                            693 ;	time.c:96: CheckTime(timeptr);
   0257 75 86 01            694 	mov	dps, #1
   025A 90s00r00r31         695 	mov	dptr,#_asctime_timeptr_1_1
   025E E0                  696 	movx	a,@dptr
   025F F5 82               697 	mov	dpl,a
   0261 A3                  698 	inc	dptr
   0262 E0                  699 	movx	a,@dptr
   0263 F5 83               700 	mov	dph,a
   0265 A3                  701 	inc	dptr
   0266 E0                  702 	movx	a,@dptr
   0267 F5 93               703 	mov	dpx,a
   0269 A3                  704 	inc	dptr
   026A E0                  705 	movx	a,@dptr
   026B F5 F0               706 	mov	b,a
   026D 75 86 00            707 	mov	dps,#0
   0270 12s00r00r9D         708 	lcall	_CheckTime
                            709 ;	time.c:100: timeptr->tm_year+1900);
   0274 90s00r00r31         710 	mov	dptr,#_asctime_timeptr_1_1
   0278 E0                  711 	movx	a,@dptr
   0279 24 05               712 	add	a,#0x05
   027B FE                  713 	mov	r6,a
   027C A3                  714 	inc	dptr
   027D E0                  715 	movx	a,@dptr
   027E 34 00               716 	addc	a,#0x00
   0280 FF                  717 	mov	r7,a
   0281 A3                  718 	inc	dptr
   0282 E0                  719 	movx	a,@dptr
   0283 34 00               720 	addc	a,#0x00
   0285 F8                  721 	mov	r0,a
   0286 A3                  722 	inc	dptr
   0287 E0                  723 	movx	a,@dptr
   0288 F9                  724 	mov	r1,a
   0289 8E 82               725 	mov	dpl,r6
   028B 8F 83               726 	mov	dph,r7
   028D 88 93               727 	mov	dpx,r0
   028F 89 F0               728 	mov	b,r1
   0291 12s00r00r00         729 	lcall	__gptrgetWord
   0295 FE                  730 	mov	r6,a
   0296 AF 9C               731 	mov	r7,_ap
   0298 90s00r00r3D         732 	mov	dptr,#_asctime_sloc4_1_0
   029C 74 6C               733 	mov	a,#0x6C
   029E 2E                  734 	add	a,r6
   029F F0                  735 	movx	@dptr,a
   02A0 74 07               736 	mov	a,#0x07
   02A2 3F                  737 	addc	a,r7
   02A3 A3                  738 	inc	dptr
   02A4 F0                  739 	movx	@dptr,a
                            740 ;	time.c:99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
   02A5 75 86 01            741 	mov     dps, #1
   02A8 90s00r00r31         742 	mov     dptr, #_asctime_timeptr_1_1
   02AC E0                  743 	movx	a,@dptr
   02AD F5 82               744 	mov	dpl,a
   02AF A3                  745 	inc	dptr
   02B0 E0                  746 	movx	a,@dptr
   02B1 F5 83               747 	mov	dph,a
   02B3 A3                  748 	inc	dptr
   02B4 E0                  749 	movx	a,@dptr
   02B5 F5 93               750 	mov	dpx,a
   02B7 A3                  751 	inc	dptr
   02B8 E0                  752 	movx	a,@dptr
   02B9 F5 F0               753 	mov	b,a
   02BB 75 86 00            754 	mov	dps,#0
   02BE 12s00r00r00         755 	lcall	__gptrget
   02C2 F8                  756 	mov  r0,a
   02C3 90s00r00r3B         757 	mov  dptr,#_asctime_sloc3_1_0
   02C7 F0                  758 	movx @dptr,a
   02C8 A3                  759 	inc	dptr
   02C9 E4                  760 	clr	a
   02CA F0                  761 	movx	@dptr,a
   02CB 90s00r00r31         762 	mov	dptr,#_asctime_timeptr_1_1
   02CF E0                  763 	movx	a,@dptr
   02D0 24 01               764 	add	a,#0x01
   02D2 FA                  765 	mov	r2,a
   02D3 A3                  766 	inc	dptr
   02D4 E0                  767 	movx	a,@dptr
   02D5 34 00               768 	addc	a,#0x00
   02D7 FB                  769 	mov	r3,a
   02D8 A3                  770 	inc	dptr
   02D9 E0                  771 	movx	a,@dptr
   02DA 34 00               772 	addc	a,#0x00
   02DC FC                  773 	mov	r4,a
   02DD A3                  774 	inc	dptr
   02DE E0                  775 	movx	a,@dptr
   02DF FD                  776 	mov	r5,a
   02E0 8A 82               777 	mov	dpl,r2
   02E2 8B 83               778 	mov	dph,r3
   02E4 8C 93               779 	mov	dpx,r4
   02E6 8D F0               780 	mov	b,r5
   02E8 12s00r00r00         781 	lcall	__gptrget
   02EC FA                  782 	mov  r2,a
   02ED 90s00r00r35         783 	mov  dptr,#_asctime_sloc0_1_0
   02F1 F0                  784 	movx @dptr,a
   02F2 A3                  785 	inc	dptr
   02F3 E4                  786 	clr	a
   02F4 F0                  787 	movx	@dptr,a
   02F5 90s00r00r31         788 	mov	dptr,#_asctime_timeptr_1_1
   02F9 E0                  789 	movx	a,@dptr
   02FA 24 02               790 	add	a,#0x02
   02FC FC                  791 	mov	r4,a
   02FD A3                  792 	inc	dptr
   02FE E0                  793 	movx	a,@dptr
   02FF 34 00               794 	addc	a,#0x00
   0301 FD                  795 	mov	r5,a
   0302 A3                  796 	inc	dptr
   0303 E0                  797 	movx	a,@dptr
   0304 34 00               798 	addc	a,#0x00
   0306 FA                  799 	mov	r2,a
   0307 A3                  800 	inc	dptr
   0308 E0                  801 	movx	a,@dptr
   0309 FB                  802 	mov	r3,a
   030A 8C 82               803 	mov	dpl,r4
   030C 8D 83               804 	mov	dph,r5
   030E 8A 93               805 	mov	dpx,r2
   0310 8B F0               806 	mov	b,r3
   0312 12s00r00r00         807 	lcall	__gptrget
   0316 FC                  808 	mov  r4,a
   0317 90s00r00r37         809 	mov  dptr,#_asctime_sloc1_1_0
   031B F0                  810 	movx @dptr,a
   031C A3                  811 	inc	dptr
   031D E4                  812 	clr	a
   031E F0                  813 	movx	@dptr,a
                            814 ;	time.c:98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
   031F 90s00r00r31         815 	mov	dptr,#_asctime_timeptr_1_1
   0323 E0                  816 	movx	a,@dptr
   0324 24 03               817 	add	a,#0x03
   0326 FB                  818 	mov	r3,a
   0327 A3                  819 	inc	dptr
   0328 E0                  820 	movx	a,@dptr
   0329 34 00               821 	addc	a,#0x00
   032B FD                  822 	mov	r5,a
   032C A3                  823 	inc	dptr
   032D E0                  824 	movx	a,@dptr
   032E 34 00               825 	addc	a,#0x00
   0330 FA                  826 	mov	r2,a
   0331 A3                  827 	inc	dptr
   0332 E0                  828 	movx	a,@dptr
   0333 FC                  829 	mov	r4,a
   0334 8B 82               830 	mov	dpl,r3
   0336 8D 83               831 	mov	dph,r5
   0338 8A 93               832 	mov	dpx,r2
   033A 8C F0               833 	mov	b,r4
   033C 12s00r00r00         834 	lcall	__gptrget
   0340 FB                  835 	mov  r3,a
   0341 90s00r00r39         836 	mov  dptr,#_asctime_sloc2_1_0
   0345 F0                  837 	movx @dptr,a
   0346 A3                  838 	inc	dptr
   0347 E4                  839 	clr	a
   0348 F0                  840 	movx	@dptr,a
   0349 90s00r00r31         841 	mov	dptr,#_asctime_timeptr_1_1
   034D E0                  842 	movx	a,@dptr
   034E 24 04               843 	add	a,#0x04
   0350 FC                  844 	mov	r4,a
   0351 A3                  845 	inc	dptr
   0352 E0                  846 	movx	a,@dptr
   0353 34 00               847 	addc	a,#0x00
   0355 FD                  848 	mov	r5,a
   0356 A3                  849 	inc	dptr
   0357 E0                  850 	movx	a,@dptr
   0358 34 00               851 	addc	a,#0x00
   035A FA                  852 	mov	r2,a
   035B A3                  853 	inc	dptr
   035C E0                  854 	movx	a,@dptr
   035D FB                  855 	mov	r3,a
   035E 8C 82               856 	mov	dpl,r4
   0360 8D 83               857 	mov	dph,r5
   0362 8A 93               858 	mov	dpx,r2
   0364 8B F0               859 	mov	b,r3
   0366 12s00r00r00         860 	lcall	__gptrget
   036A FC                  861 	mov	r4,a
   036B 75 F0 03            862 	mov	b,#0x03
   036E EC                  863 	mov	a,r4
   036F A4                  864 	mul	ab
   0370 FC                  865 	mov  r4,a
   0371 F5 F0               866 	mov	b,a
   0373 90s00r00r0C         867 	mov	dptr,#___month
   0377 93                  868 	movc	a,@a+dptr
   0378 A3                  869 	inc	dptr
   0379 FA                  870 	mov	r2,a
   037A E5 F0               871 	mov	a,b
   037C 93                  872 	movc	a,@a+dptr
   037D A3                  873 	inc	dptr
   037E FB                  874 	mov	r3,a
   037F E5 F0               875 	mov	a,b
   0381 93                  876 	movc	a,@a+dptr
   0382 FC                  877 	mov	r4,a
   0383 7D 80               878 	mov	r5,#0x80
   0385 90s00r00r31         879 	mov	dptr,#_asctime_timeptr_1_1
   0389 E0                  880 	movx	a,@dptr
   038A 24 07               881 	add	a,#0x07
   038C F8                  882 	mov	r0,a
   038D A3                  883 	inc	dptr
   038E E0                  884 	movx	a,@dptr
   038F 34 00               885 	addc	a,#0x00
   0391 F9                  886 	mov	r1,a
   0392 A3                  887 	inc	dptr
   0393 E0                  888 	movx	a,@dptr
   0394 34 00               889 	addc	a,#0x00
   0396 FE                  890 	mov	r6,a
   0397 A3                  891 	inc	dptr
   0398 E0                  892 	movx	a,@dptr
   0399 FF                  893 	mov	r7,a
   039A 88 82               894 	mov	dpl,r0
   039C 89 83               895 	mov	dph,r1
   039E 8E 93               896 	mov	dpx,r6
   03A0 8F F0               897 	mov	b,r7
   03A2 12s00r00r00         898 	lcall	__gptrget
   03A6 F8                  899 	mov	r0,a
   03A7 75 F0 03            900 	mov	b,#0x03
   03AA E8                  901 	mov	a,r0
   03AB A4                  902 	mul	ab
   03AC F8                  903 	mov  r0,a
   03AD F5 F0               904 	mov	b,a
   03AF 90s00r00r30         905 	mov	dptr,#___day
   03B3 93                  906 	movc	a,@a+dptr
   03B4 A3                  907 	inc	dptr
   03B5 FE                  908 	mov	r6,a
   03B6 E5 F0               909 	mov	a,b
   03B8 93                  910 	movc	a,@a+dptr
   03B9 A3                  911 	inc	dptr
   03BA FF                  912 	mov	r7,a
   03BB E5 F0               913 	mov	a,b
   03BD 93                  914 	movc	a,@a+dptr
   03BE F8                  915 	mov	r0,a
   03BF 79 80               916 	mov	r1,#0x80
                            917 ;	time.c:97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
   03C1 90s00r00r3D         918 	mov	dptr,#_asctime_sloc4_1_0
   03C5 E0                  919 	movx	a,@dptr
   03C6 C0 E0               920 	push	acc
   03C8 A3                  921 	inc	dptr
   03C9 E0                  922 	movx	a,@dptr
   03CA C0 E0               923 	push	acc
   03CC 90s00r00r3B         924 	mov	dptr,#_asctime_sloc3_1_0
   03D0 E0                  925 	movx	a,@dptr
   03D1 C0 E0               926 	push	acc
   03D3 A3                  927 	inc	dptr
   03D4 E0                  928 	movx	a,@dptr
   03D5 C0 E0               929 	push	acc
   03D7 90s00r00r35         930 	mov	dptr,#_asctime_sloc0_1_0
   03DB E0                  931 	movx	a,@dptr
   03DC C0 E0               932 	push	acc
   03DE A3                  933 	inc	dptr
   03DF E0                  934 	movx	a,@dptr
   03E0 C0 E0               935 	push	acc
   03E2 90s00r00r37         936 	mov	dptr,#_asctime_sloc1_1_0
   03E6 E0                  937 	movx	a,@dptr
   03E7 C0 E0               938 	push	acc
   03E9 A3                  939 	inc	dptr
   03EA E0                  940 	movx	a,@dptr
   03EB C0 E0               941 	push	acc
   03ED 90s00r00r39         942 	mov	dptr,#_asctime_sloc2_1_0
   03F1 E0                  943 	movx	a,@dptr
   03F2 C0 E0               944 	push	acc
   03F4 A3                  945 	inc	dptr
   03F5 E0                  946 	movx	a,@dptr
   03F6 C0 E0               947 	push	acc
   03F8 C0 02               948 	push	ar2
   03FA C0 03               949 	push	ar3
   03FC C0 04               950 	push	ar4
   03FE C0 05               951 	push	ar5
   0400 C0 06               952 	push	ar6
   0402 C0 07               953 	push	ar7
   0404 C0 00               954 	push	ar0
   0406 C0 01               955 	push	ar1
   0408 74r45               956 	mov	a,#__str_0
   040A C0 E0               957 	push	acc
   040C 74s00               958 	mov	a,#(__str_0 >> 8)
   040E C0 E0               959 	push	acc
   0410 74s00               960 	mov	a,#(__str_0 >> 16)
   0412 C0 E0               961 	push	acc
   0414 74 80               962 	mov	a,#0x80
   0416 C0 E0               963 	push	acc
   0418 74r10               964 	mov	a,#_ascTimeBuffer
   041A C0 E0               965 	push	acc
   041C 74s00               966 	mov	a,#(_ascTimeBuffer >> 8)
   041E C0 E0               967 	push	acc
   0420 74s00               968 	mov	a,#(_ascTimeBuffer >> 16)
   0422 C0 E0               969 	push	acc
   0424 E4                  970 	clr  a
   0425 C0 E0               971 	push	acc
   0427 12s00r00r00         972 	lcall	_sprintf
   042B C3                  973 	clr	c
   042C E5 81               974 	mov	a,sp
   042E 94 1A               975 	subb	a,#0x1A
   0430 F5 81               976 	mov	sp,a
   0432 E5 9B               977 	mov	a,esp
   0434 54 03               978 	anl	a,#3
   0436 44 DC               979 	orl	a,#0xDC
   0438 94 00               980 	subb	a,#0x00
   043A F5 9B               981 	mov	esp,a
                            982 ;	time.c:101: return ascTimeBuffer;
   043C 90s00r00r10         983 	mov dptr,#_ascTimeBuffer
   0440 75 F0 00            984 	mov	b,#0x00
   0443                     985 00101$:
   0443 22                  986 	ret
                            987 ;------------------------------------------------------------
                            988 ;Allocation info for local variables in function 'ctime'
                            989 ;------------------------------------------------------------
                            990 ;timep                     Allocated to registers r2 r3 r4 r5 
                            991 ;------------------------------------------------------------
                            992 ;	time.c:104: char *ctime(time_t *timep) {
                            993 ;	-----------------------------------------
                            994 ;	 function ctime
                            995 ;	-----------------------------------------
   0444                     996 _ctime:
                            997 ;	time.c:105: return asctime(localtime(timep));
   0444 AA 82               998 	mov     r2,dpl
   0446 AB 83               999 	mov     r3,dph
   0448 AC 93              1000 	mov     r4,dpx
   044A AD F0              1001 	mov     r5,b
   044C 8D F0              1002 	mov	b,r5
   044E 12s00r04r57        1003 	lcall	_localtime
   0452 12s00r02r41        1004 	lcall	_asctime
   0456                    1005 00101$:
   0456 22                 1006 	ret
                           1007 ;------------------------------------------------------------
                           1008 ;Allocation info for local variables in function 'localtime'
                           1009 ;------------------------------------------------------------
                           1010 ;timep                     Allocated to registers r2 r3 r4 r5 
                           1011 ;------------------------------------------------------------
                           1012 ;	time.c:121: struct tm *localtime(time_t *timep) {
                           1013 ;	-----------------------------------------
                           1014 ;	 function localtime
                           1015 ;	-----------------------------------------
   0457                    1016 _localtime:
                           1017 ;	time.c:122: return gmtime(timep);
   0457 AA 82              1018 	mov     r2,dpl
   0459 AB 83              1019 	mov     r3,dph
   045B AC 93              1020 	mov     r4,dpx
   045D AD F0              1021 	mov     r5,b
   045F 8D F0              1022 	mov	b,r5
   0461 12s00r04r66        1023 	lcall	_gmtime
   0465                    1024 00101$:
   0465 22                 1025 	ret
                           1026 ;------------------------------------------------------------
                           1027 ;Allocation info for local variables in function 'gmtime'
                           1028 ;------------------------------------------------------------
                           1029 ;timep                     Allocated to registers 
                           1030 ;epoch                     Allocated with name '_gmtime_epoch_1_1'
                           1031 ;year                      Allocated to registers 
                           1032 ;month                     Allocated to registers 
                           1033 ;monthLength               Allocated to registers r1 
                           1034 ;days                      Allocated to registers r2 r3 r4 r5 
                           1035 ;------------------------------------------------------------
                           1036 ;	time.c:125: struct tm *gmtime(time_t *timep) {
                           1037 ;	-----------------------------------------
                           1038 ;	 function gmtime
                           1039 ;	-----------------------------------------
   0466                    1040 _gmtime:
                           1041 ;	time.c:126: unsigned long epoch=*timep;
   0466 12s00r00r00        1042 	lcall	__gptrgetWord
   046A FA                 1043 	mov	r2,a
   046B AB 9C              1044 	mov	r3,_ap
   046D A3                 1045 	inc	dptr
   046E 12s00r00r00        1046 	lcall	__gptrgetWord
   0472 FC                 1047 	mov	r4,a
   0473 AD 9C              1048 	mov	r5,_ap
                           1049 ;	genAssign: resultIsFar = TRUE
   0475 90s00r00r4B        1050 	mov	dptr,#_gmtime_epoch_1_1
   0479 EA                 1051 	mov	a,r2
   047A F0                 1052 	movx	@dptr,a
   047B A3                 1053 	inc	dptr
   047C EB                 1054 	mov	a,r3
   047D F0                 1055 	movx	@dptr,a
   047E A3                 1056 	inc	dptr
   047F EC                 1057 	mov	a,r4
   0480 F0                 1058 	movx	@dptr,a
   0481 A3                 1059 	inc	dptr
   0482 ED                 1060 	mov	a,r5
   0483 F0                 1061 	movx	@dptr,a
                           1062 ;	time.c:131: lastTime.tm_sec=epoch%60;
                           1063 ;	genAssign: resultIsFar = TRUE
   0484 90s00r00r00        1064 	mov	dptr,#__modulong_PARM_2
   0488 74 3C              1065 	mov	a,#0x3C
   048A F0                 1066 	movx	@dptr,a
   048B E4                 1067 	clr	a
   048C A3                 1068 	inc	dptr
   048D F0                 1069 	movx	@dptr,a
   048E A3                 1070 	inc	dptr
   048F F0                 1071 	movx	@dptr,a
   0490 A3                 1072 	inc	dptr
   0491 F0                 1073 	movx	@dptr,a
   0492 05 86              1074 	inc	dps
   0494 90s00r00r4B        1075 	mov	dptr,#_gmtime_epoch_1_1
   0498 E0                 1076 	movx	a,@dptr
   0499 F5 82              1077 	mov	dpl,a
   049B A3                 1078 	inc	dptr
   049C E0                 1079 	movx	a,@dptr
   049D F5 83              1080 	mov	dph,a
   049F A3                 1081 	inc	dptr
   04A0 E0                 1082 	movx	a,@dptr
   04A1 F5 93              1083 	mov	dpx,a
   04A3 A3                 1084 	inc	dptr
   04A4 E0                 1085 	movx	a,@dptr
   04A5 F5 F0              1086 	mov	b,a
   04A7 75 86 00           1087 	mov	dps,#0
   04AA 12s00r00r00        1088 	lcall	__modulong
   04AE AE 82              1089 	mov	r6,dpl
   04B0 90s00r00r3F        1090 	mov	dptr,#_lastTime
   04B4 EE                 1091 	mov	a,r6
   04B5 F0                 1092 	movx	@dptr,a
                           1093 ;	time.c:132: epoch/=60; // now it is minutes
                           1094 ;	genAssign: resultIsFar = TRUE
   04B6 90s00r00r00        1095 	mov	dptr,#__divulong_PARM_2
   04BA 74 3C              1096 	mov	a,#0x3C
   04BC F0                 1097 	movx	@dptr,a
   04BD E4                 1098 	clr	a
   04BE A3                 1099 	inc	dptr
   04BF F0                 1100 	movx	@dptr,a
   04C0 A3                 1101 	inc	dptr
   04C1 F0                 1102 	movx	@dptr,a
   04C2 A3                 1103 	inc	dptr
   04C3 F0                 1104 	movx	@dptr,a
   04C4 05 86              1105 	inc	dps
   04C6 90s00r00r4B        1106 	mov	dptr,#_gmtime_epoch_1_1
   04CA E0                 1107 	movx	a,@dptr
   04CB F5 82              1108 	mov	dpl,a
   04CD A3                 1109 	inc	dptr
   04CE E0                 1110 	movx	a,@dptr
   04CF F5 83              1111 	mov	dph,a
   04D1 A3                 1112 	inc	dptr
   04D2 E0                 1113 	movx	a,@dptr
   04D3 F5 93              1114 	mov	dpx,a
   04D5 A3                 1115 	inc	dptr
   04D6 E0                 1116 	movx	a,@dptr
   04D7 F5 F0              1117 	mov	b,a
   04D9 75 86 00           1118 	mov	dps,#0
   04DC 12s00r00r00        1119 	lcall	__divulong
   04E0 AE 82              1120 	mov	r6,dpl
   04E2 AF 83              1121 	mov	r7,dph
   04E4 A8 93              1122 	mov	r0,dpx
   04E6 A9 F0              1123 	mov	r1,b
                           1124 ;	genAssign: resultIsFar = TRUE
   04E8 90s00r00r4B        1125 	mov	dptr,#_gmtime_epoch_1_1
   04EC EE                 1126 	mov	a,r6
   04ED F0                 1127 	movx	@dptr,a
   04EE A3                 1128 	inc	dptr
   04EF EF                 1129 	mov	a,r7
   04F0 F0                 1130 	movx	@dptr,a
   04F1 A3                 1131 	inc	dptr
   04F2 E8                 1132 	mov	a,r0
   04F3 F0                 1133 	movx	@dptr,a
   04F4 A3                 1134 	inc	dptr
   04F5 E9                 1135 	mov	a,r1
   04F6 F0                 1136 	movx	@dptr,a
                           1137 ;	time.c:133: lastTime.tm_min=epoch%60;
                           1138 ;	genAssign: resultIsFar = TRUE
   04F7 90s00r00r00        1139 	mov	dptr,#__modulong_PARM_2
   04FB 74 3C              1140 	mov	a,#0x3C
   04FD F0                 1141 	movx	@dptr,a
   04FE E4                 1142 	clr	a
   04FF A3                 1143 	inc	dptr
   0500 F0                 1144 	movx	@dptr,a
   0501 A3                 1145 	inc	dptr
   0502 F0                 1146 	movx	@dptr,a
   0503 A3                 1147 	inc	dptr
   0504 F0                 1148 	movx	@dptr,a
   0505 05 86              1149 	inc	dps
   0507 90s00r00r4B        1150 	mov	dptr,#_gmtime_epoch_1_1
   050B E0                 1151 	movx	a,@dptr
   050C F5 82              1152 	mov	dpl,a
   050E A3                 1153 	inc	dptr
   050F E0                 1154 	movx	a,@dptr
   0510 F5 83              1155 	mov	dph,a
   0512 A3                 1156 	inc	dptr
   0513 E0                 1157 	movx	a,@dptr
   0514 F5 93              1158 	mov	dpx,a
   0516 A3                 1159 	inc	dptr
   0517 E0                 1160 	movx	a,@dptr
   0518 F5 F0              1161 	mov	b,a
   051A 75 86 00           1162 	mov	dps,#0
   051D 12s00r00r00        1163 	lcall	__modulong
   0521 AE 82              1164 	mov	r6,dpl
   0523 90s00r00r40        1165 	mov	dptr,#(_lastTime + 0x000001)
   0527 EE                 1166 	mov	a,r6
   0528 F0                 1167 	movx	@dptr,a
                           1168 ;	time.c:134: epoch/=60; // now it is hours
                           1169 ;	genAssign: resultIsFar = TRUE
   0529 90s00r00r00        1170 	mov	dptr,#__divulong_PARM_2
   052D 74 3C              1171 	mov	a,#0x3C
   052F F0                 1172 	movx	@dptr,a
   0530 E4                 1173 	clr	a
   0531 A3                 1174 	inc	dptr
   0532 F0                 1175 	movx	@dptr,a
   0533 A3                 1176 	inc	dptr
   0534 F0                 1177 	movx	@dptr,a
   0535 A3                 1178 	inc	dptr
   0536 F0                 1179 	movx	@dptr,a
   0537 05 86              1180 	inc	dps
   0539 90s00r00r4B        1181 	mov	dptr,#_gmtime_epoch_1_1
   053D E0                 1182 	movx	a,@dptr
   053E F5 82              1183 	mov	dpl,a
   0540 A3                 1184 	inc	dptr
   0541 E0                 1185 	movx	a,@dptr
   0542 F5 83              1186 	mov	dph,a
   0544 A3                 1187 	inc	dptr
   0545 E0                 1188 	movx	a,@dptr
   0546 F5 93              1189 	mov	dpx,a
   0548 A3                 1190 	inc	dptr
   0549 E0                 1191 	movx	a,@dptr
   054A F5 F0              1192 	mov	b,a
   054C 75 86 00           1193 	mov	dps,#0
   054F 12s00r00r00        1194 	lcall	__divulong
   0553 AE 82              1195 	mov	r6,dpl
   0555 AF 83              1196 	mov	r7,dph
   0557 A8 93              1197 	mov	r0,dpx
   0559 A9 F0              1198 	mov	r1,b
                           1199 ;	genAssign: resultIsFar = TRUE
   055B 90s00r00r4B        1200 	mov	dptr,#_gmtime_epoch_1_1
   055F EE                 1201 	mov	a,r6
   0560 F0                 1202 	movx	@dptr,a
   0561 A3                 1203 	inc	dptr
   0562 EF                 1204 	mov	a,r7
   0563 F0                 1205 	movx	@dptr,a
   0564 A3                 1206 	inc	dptr
   0565 E8                 1207 	mov	a,r0
   0566 F0                 1208 	movx	@dptr,a
   0567 A3                 1209 	inc	dptr
   0568 E9                 1210 	mov	a,r1
   0569 F0                 1211 	movx	@dptr,a
                           1212 ;	time.c:135: lastTime.tm_hour=epoch%24;
                           1213 ;	genAssign: resultIsFar = TRUE
   056A 90s00r00r00        1214 	mov	dptr,#__modulong_PARM_2
   056E 74 18              1215 	mov	a,#0x18
   0570 F0                 1216 	movx	@dptr,a
   0571 E4                 1217 	clr	a
   0572 A3                 1218 	inc	dptr
   0573 F0                 1219 	movx	@dptr,a
   0574 A3                 1220 	inc	dptr
   0575 F0                 1221 	movx	@dptr,a
   0576 A3                 1222 	inc	dptr
   0577 F0                 1223 	movx	@dptr,a
   0578 05 86              1224 	inc	dps
   057A 90s00r00r4B        1225 	mov	dptr,#_gmtime_epoch_1_1
   057E E0                 1226 	movx	a,@dptr
   057F F5 82              1227 	mov	dpl,a
   0581 A3                 1228 	inc	dptr
   0582 E0                 1229 	movx	a,@dptr
   0583 F5 83              1230 	mov	dph,a
   0585 A3                 1231 	inc	dptr
   0586 E0                 1232 	movx	a,@dptr
   0587 F5 93              1233 	mov	dpx,a
   0589 A3                 1234 	inc	dptr
   058A E0                 1235 	movx	a,@dptr
   058B F5 F0              1236 	mov	b,a
   058D 75 86 00           1237 	mov	dps,#0
   0590 12s00r00r00        1238 	lcall	__modulong
   0594 AE 82              1239 	mov	r6,dpl
   0596 90s00r00r41        1240 	mov	dptr,#(_lastTime + 0x000002)
   059A EE                 1241 	mov	a,r6
   059B F0                 1242 	movx	@dptr,a
                           1243 ;	time.c:136: epoch/=24; // now it is days
                           1244 ;	genAssign: resultIsFar = TRUE
   059C 90s00r00r00        1245 	mov	dptr,#__divulong_PARM_2
   05A0 74 18              1246 	mov	a,#0x18
   05A2 F0                 1247 	movx	@dptr,a
   05A3 E4                 1248 	clr	a
   05A4 A3                 1249 	inc	dptr
   05A5 F0                 1250 	movx	@dptr,a
   05A6 A3                 1251 	inc	dptr
   05A7 F0                 1252 	movx	@dptr,a
   05A8 A3                 1253 	inc	dptr
   05A9 F0                 1254 	movx	@dptr,a
   05AA 05 86              1255 	inc	dps
   05AC 90s00r00r4B        1256 	mov	dptr,#_gmtime_epoch_1_1
   05B0 E0                 1257 	movx	a,@dptr
   05B1 F5 82              1258 	mov	dpl,a
   05B3 A3                 1259 	inc	dptr
   05B4 E0                 1260 	movx	a,@dptr
   05B5 F5 83              1261 	mov	dph,a
   05B7 A3                 1262 	inc	dptr
   05B8 E0                 1263 	movx	a,@dptr
   05B9 F5 93              1264 	mov	dpx,a
   05BB A3                 1265 	inc	dptr
   05BC E0                 1266 	movx	a,@dptr
   05BD F5 F0              1267 	mov	b,a
   05BF 75 86 00           1268 	mov	dps,#0
   05C2 12s00r00r00        1269 	lcall	__divulong
   05C6 AE 82              1270 	mov	r6,dpl
   05C8 AF 83              1271 	mov	r7,dph
   05CA A8 93              1272 	mov	r0,dpx
   05CC A9 F0              1273 	mov	r1,b
                           1274 ;	genAssign: resultIsFar = TRUE
   05CE 90s00r00r4B        1275 	mov	dptr,#_gmtime_epoch_1_1
   05D2 EE                 1276 	mov	a,r6
   05D3 F0                 1277 	movx	@dptr,a
   05D4 A3                 1278 	inc	dptr
   05D5 EF                 1279 	mov	a,r7
   05D6 F0                 1280 	movx	@dptr,a
   05D7 A3                 1281 	inc	dptr
   05D8 E8                 1282 	mov	a,r0
   05D9 F0                 1283 	movx	@dptr,a
   05DA A3                 1284 	inc	dptr
   05DB E9                 1285 	mov	a,r1
   05DC F0                 1286 	movx	@dptr,a
                           1287 ;	time.c:137: lastTime.tm_wday=(epoch+4)%7;
   05DD 90s00r00r4B        1288 	mov	dptr,#_gmtime_epoch_1_1
   05E1 E0                 1289 	movx	a,@dptr
   05E2 24 04              1290 	add	a,#0x04
   05E4 FE                 1291 	mov	r6,a
   05E5 A3                 1292 	inc	dptr
   05E6 E0                 1293 	movx	a,@dptr
   05E7 34 00              1294 	addc	a,#0x00
   05E9 FF                 1295 	mov	r7,a
   05EA A3                 1296 	inc	dptr
   05EB E0                 1297 	movx	a,@dptr
   05EC 34 00              1298 	addc	a,#0x00
   05EE F8                 1299 	mov	r0,a
   05EF A3                 1300 	inc	dptr
   05F0 E0                 1301 	movx	a,@dptr
   05F1 34 00              1302 	addc	a,#0x00
   05F3 F9                 1303 	mov	r1,a
                           1304 ;	genAssign: resultIsFar = TRUE
   05F4 90s00r00r00        1305 	mov	dptr,#__modulong_PARM_2
   05F8 74 07              1306 	mov	a,#0x07
   05FA F0                 1307 	movx	@dptr,a
   05FB E4                 1308 	clr	a
   05FC A3                 1309 	inc	dptr
   05FD F0                 1310 	movx	@dptr,a
   05FE A3                 1311 	inc	dptr
   05FF F0                 1312 	movx	@dptr,a
   0600 A3                 1313 	inc	dptr
   0601 F0                 1314 	movx	@dptr,a
   0602 8E 82              1315 	mov	dpl,r6
   0604 8F 83              1316 	mov	dph,r7
   0606 88 93              1317 	mov	dpx,r0
   0608 89 F0              1318 	mov	b,r1
   060A 12s00r00r00        1319 	lcall	__modulong
   060E AE 82              1320 	mov	r6,dpl
   0610 90s00r00r46        1321 	mov	dptr,#(_lastTime + 0x000007)
   0614 EE                 1322 	mov	a,r6
   0615 F0                 1323 	movx	@dptr,a
                           1324 ;	time.c:140: days=0;
                           1325 ;	genAssign: resultIsFar = FALSE
   0616 7A 00              1326 	mov	r2,#0x00
   0618 7B 00              1327 	mov	r3,#0x00
   061A 7C 00              1328 	mov	r4,#0x00
   061C 7D 00              1329 	mov	r5,#0x00
                           1330 ;	time.c:141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
                           1331 ;	genAssign: resultIsFar = FALSE
   061E 7E B2              1332 	mov	r6,#0xB2
   0620 7F 07              1333 	mov	r7,#0x07
   0622                    1334 00101$:
   0622 74 03              1335 	mov	a,#0x03
   0624 5E                 1336 	anl	a,r6
   0625 F8                 1337 	mov	r0,a
   0626 79 00              1338 	mov	r1,#0
   0628 E8                 1339 	mov	a,r0
   0629 49                 1340 	orl	a,r1
   062A B4 01 00           1341 	cjne	a,#0x01,00134$
   062D                    1342 00134$:
   062D E4                 1343 	clr	a
   062E 33                 1344 	rlc	a
   062F F8                 1345 	mov  r0,a
   0630 60 06              1346 	jz  00119$
   0632                    1347 00135$:
                           1348 ;	genAssign: resultIsFar = FALSE
   0632 78 6E              1349 	mov	r0,#0x6E
   0634 79 01              1350 	mov	r1,#0x01
   0636 80 04              1351 	sjmp 00120$
   0638                    1352 00119$:
                           1353 ;	genAssign: resultIsFar = FALSE
   0638 78 6D              1354 	mov	r0,#0x6D
   063A 79 01              1355 	mov	r1,#0x01
   063C                    1356 00120$:
   063C C0 06              1357 	push	ar6
   063E C0 07              1358 	push	ar7
   0640 E9                 1359 	mov	a,r1
   0641 33                 1360 	rlc	a
   0642 95 E0              1361 	subb	a,acc
   0644 FE                 1362 	mov	r6,a
   0645 FF                 1363 	mov	r7,a
   0646 E8                 1364 	mov	a,r0
   0647 2A                 1365 	add	a,r2
   0648 F8                 1366 	mov	r0,a
   0649 E9                 1367 	mov	a,r1
   064A 3B                 1368 	addc	a,r3
   064B F9                 1369 	mov	r1,a
   064C EE                 1370 	mov	a,r6
   064D 3C                 1371 	addc	a,r4
   064E FE                 1372 	mov	r6,a
   064F EF                 1373 	mov	a,r7
   0650 3D                 1374 	addc	a,r5
   0651 FF                 1375 	mov	r7,a
                           1376 ;	genAssign: resultIsFar = FALSE
   0652 88 02              1377 	mov	ar2,r0
   0654 89 03              1378 	mov	ar3,r1
   0656 8E 04              1379 	mov	ar4,r6
   0658 8F 05              1380 	mov	ar5,r7
   065A 90s00r00r4B        1381 	mov	dptr,#_gmtime_epoch_1_1
   065E C3                 1382 	clr	c
   065F E0                 1383 	movx	a,@dptr
   0660 98                 1384 	subb	a,r0
   0661 A3                 1385 	inc	dptr
   0662 E0                 1386 	movx	a,@dptr
   0663 99                 1387 	subb	a,r1
   0664 A3                 1388 	inc	dptr
   0665 E0                 1389 	movx	a,@dptr
   0666 9E                 1390 	subb	a,r6
   0667 A3                 1391 	inc	dptr
   0668 E0                 1392 	movx	a,@dptr
   0669 9F                 1393 	subb	a,r7
   066A D0 07              1394 	pop	ar7
   066C D0 06              1395 	pop	ar6
   066E 40 07              1396 	jc   00103$
   0670                    1397 00136$:
                           1398 ;	time.c:142: year++;
   0670 0E                 1399 	inc	r6
   0671 BE 00 01           1400 	cjne	r6,#0,00137$
   0674 0F                 1401 	inc	r7
   0675                    1402 00137$:
   0675 80 AB              1403 	sjmp 00101$
   0677                    1404 00103$:
                           1405 ;	time.c:144: lastTime.tm_year=year-1900;
   0677 EE                 1406 	mov	a,r6
   0678 24 94              1407 	add	a,#0x94
   067A F8                 1408 	mov	r0,a
   067B EF                 1409 	mov	a,r7
   067C 34 F8              1410 	addc	a,#0xF8
   067E F9                 1411 	mov	r1,a
   067F 90s00r00r44        1412 	mov	dptr,#(_lastTime + 0x000005)
   0683 E8                 1413 	mov	a,r0
   0684 F0                 1414 	movx	@dptr,a
   0685 A3                 1415 	inc	dptr
   0686 E9                 1416 	mov	a,r1
   0687 F0                 1417 	movx	@dptr,a
                           1418 ;	time.c:146: days -= LEAP_YEAR(year) ? 366 : 365;
   0688 53 06 03           1419 	anl	ar6,#0x03
   068B 7F 00              1420 	mov	r7,#0
   068D EE                 1421 	mov	a,r6
   068E 4F                 1422 	orl	a,r7
   068F B4 01 00           1423 	cjne	a,#0x01,00138$
   0692                    1424 00138$:
   0692 E4                 1425 	clr	a
   0693 33                 1426 	rlc	a
   0694 F8                 1427 	mov  r0,a
   0695 60 06              1428 	jz  00121$
   0697                    1429 00139$:
                           1430 ;	genAssign: resultIsFar = FALSE
   0697 78 6E              1431 	mov	r0,#0x6E
   0699 79 01              1432 	mov	r1,#0x01
   069B 80 04              1433 	sjmp 00122$
   069D                    1434 00121$:
                           1435 ;	genAssign: resultIsFar = FALSE
   069D 78 6D              1436 	mov	r0,#0x6D
   069F 79 01              1437 	mov	r1,#0x01
   06A1                    1438 00122$:
   06A1 C0 06              1439 	push	ar6
   06A3 C0 07              1440 	push	ar7
   06A5 E9                 1441 	mov	a,r1
   06A6 33                 1442 	rlc	a
   06A7 95 E0              1443 	subb	a,acc
   06A9 FE                 1444 	mov	r6,a
   06AA FF                 1445 	mov	r7,a
   06AB C3                 1446 	clr	c
   06AC EA                 1447 	mov	a,r2
   06AD 98                 1448 	subb	a,r0
   06AE FA                 1449 	mov	r2,a
   06AF EB                 1450 	mov	a,r3
   06B0 99                 1451 	subb	a,r1
   06B1 FB                 1452 	mov	r3,a
   06B2 EC                 1453 	mov	a,r4
   06B3 9E                 1454 	subb	a,r6
   06B4 FC                 1455 	mov	r4,a
   06B5 ED                 1456 	mov	a,r5
   06B6 9F                 1457 	subb	a,r7
   06B7 FD                 1458 	mov	r5,a
                           1459 ;	time.c:147: epoch -= days; // now it is days in this year, starting at 0
   06B8 90s00r00r4B        1460 	mov	dptr,#_gmtime_epoch_1_1
   06BC C3                 1461 	clr	c
   06BD E0                 1462 	movx	a,@dptr
   06BE 9A                 1463 	subb	a,r2
   06BF F0                 1464 	movx	@dptr,a
   06C0 A3                 1465 	inc	dptr
   06C1 E0                 1466 	movx	a,@dptr
   06C2 9B                 1467 	subb	a,r3
   06C3 F0                 1468 	movx	@dptr,a
   06C4 A3                 1469 	inc	dptr
   06C5 E0                 1470 	movx	a,@dptr
   06C6 9C                 1471 	subb	a,r4
   06C7 F0                 1472 	movx	@dptr,a
   06C8 A3                 1473 	inc	dptr
   06C9 E0                 1474 	movx	a,@dptr
   06CA 9D                 1475 	subb	a,r5
   06CB F0                 1476 	movx	@dptr,a
                           1477 ;	time.c:148: lastTime.tm_yday=epoch;
   06CC 90s00r00r4B        1478 	mov	dptr,#_gmtime_epoch_1_1
   06D0 E0                 1479 	movx	a,@dptr
   06D1 FE                 1480 	mov	r6,a
   06D2 A3                 1481 	inc	dptr
   06D3 E0                 1482 	movx	a,@dptr
   06D4 FF                 1483 	mov	r7,a
   06D5 90s00r00r47        1484 	mov	dptr,#(_lastTime + 0x000008)
   06D9 EE                 1485 	mov	a,r6
   06DA F0                 1486 	movx	@dptr,a
   06DB A3                 1487 	inc	dptr
   06DC EF                 1488 	mov	a,r7
   06DD F0                 1489 	movx	@dptr,a
                           1490 ;	time.c:175: return &lastTime;
   06DE D0 07              1491 	pop	ar7
   06E0 D0 06              1492 	pop	ar6
                           1493 ;	time.c:153: for (month=0; month<12; month++) {
                           1494 ;	genAssign: resultIsFar = FALSE
   06E2 78 00              1495 	mov	r0,#0x00
   06E4                    1496 00113$:
   06E4 B8 0C 00           1497 	cjne	r0,#0x0C,00140$
   06E7                    1498 00140$:
   06E7 50 4A              1499 	jnc  00116$
   06E9                    1500 00141$:
                           1501 ;	time.c:154: if (month==1) { // februari
   06E9 E8                 1502 	mov	a,r0
   06EA B4 01 0C           1503 	cjne a,#0x01,00108$
   06ED                    1504 00143$:
                           1505 ;	time.c:155: if (LEAP_YEAR(year)) {
   06ED EE                 1506 	mov	a,r6
   06EE 4F                 1507 	orl	a,r7
   06EF 70 04              1508 	jnz  00105$
   06F1                    1509 00144$:
                           1510 ;	time.c:156: monthLength=29;
                           1511 ;	genAssign: resultIsFar = TRUE
   06F1 79 1D              1512 	mov	r1,#0x1D
   06F3 80 0D              1513 	sjmp 00109$
   06F5                    1514 00105$:
                           1515 ;	time.c:158: monthLength=28;
                           1516 ;	genAssign: resultIsFar = TRUE
   06F5 79 1C              1517 	mov	r1,#0x1C
   06F7 80 09              1518 	sjmp 00109$
   06F9                    1519 00108$:
                           1520 ;	time.c:161: monthLength = monthDays[month];
   06F9 E8                 1521 	mov	a,r0
   06FA 90s00r00r00        1522 	mov	dptr,#_monthDays
   06FE 93                 1523 	movc	a,@a+dptr
   06FF FA                 1524 	mov	r2,a
                           1525 ;	genAssign: resultIsFar = TRUE
   0700 8A 01              1526 	mov	ar1,r2
   0702                    1527 00109$:
                           1528 ;	time.c:164: if (epoch>=monthLength) {
   0702 89 02              1529 	mov	ar2,r1
   0704 7B 00              1530 	mov	r3,#0
   0706 7C 00              1531 	mov	r4,#0
   0708 7D 00              1532 	mov	r5,#0
   070A 90s00r00r4B        1533 	mov	dptr,#_gmtime_epoch_1_1
   070E C3                 1534 	clr	c
   070F E0                 1535 	movx	a,@dptr
   0710 9A                 1536 	subb	a,r2
   0711 A3                 1537 	inc	dptr
   0712 E0                 1538 	movx	a,@dptr
   0713 9B                 1539 	subb	a,r3
   0714 A3                 1540 	inc	dptr
   0715 E0                 1541 	movx	a,@dptr
   0716 9C                 1542 	subb	a,r4
   0717 A3                 1543 	inc	dptr
   0718 E0                 1544 	movx	a,@dptr
   0719 9D                 1545 	subb	a,r5
   071A 40 17              1546 	jc   00116$
   071C                    1547 00145$:
                           1548 ;	time.c:165: epoch-=monthLength;
   071C 90s00r00r4B        1549 	mov	dptr,#_gmtime_epoch_1_1
   0720 C3                 1550 	clr	c
   0721 E0                 1551 	movx	a,@dptr
   0722 9A                 1552 	subb	a,r2
   0723 F0                 1553 	movx	@dptr,a
   0724 A3                 1554 	inc	dptr
   0725 E0                 1555 	movx	a,@dptr
   0726 9B                 1556 	subb	a,r3
   0727 F0                 1557 	movx	@dptr,a
   0728 A3                 1558 	inc	dptr
   0729 E0                 1559 	movx	a,@dptr
   072A 9C                 1560 	subb	a,r4
   072B F0                 1561 	movx	@dptr,a
   072C A3                 1562 	inc	dptr
   072D E0                 1563 	movx	a,@dptr
   072E 9D                 1564 	subb	a,r5
   072F F0                 1565 	movx	@dptr,a
                           1566 ;	time.c:153: for (month=0; month<12; month++) {
   0730 08                 1567 	inc	r0
   0731 80 B1              1568 	sjmp 00113$
   0733                    1569 00116$:
                           1570 ;	time.c:170: lastTime.tm_mon=month;
   0733 90s00r00r43        1571 	mov	dptr,#(_lastTime + 0x000004)
   0737 E8                 1572 	mov	a,r0
   0738 F0                 1573 	movx	@dptr,a
                           1574 ;	time.c:171: lastTime.tm_mday=epoch+1;
   0739 90s00r00r4B        1575 	mov	dptr,#_gmtime_epoch_1_1
   073D E0                 1576 	movx	a,@dptr
   073E 04                 1577 	inc  a
   073F FA                 1578 	mov  r2,a
   0740 90s00r00r42        1579 	mov  dptr,#(_lastTime + 0x000003)
   0744 F0                 1580 	movx @dptr,a
                           1581 ;	time.c:173: lastTime.tm_isdst=0;
   0745 90s00r00r49        1582 	mov	dptr,#(_lastTime + 0x00000a)
   0749 E4                 1583 	clr  a
   074A F0                 1584 	movx	@dptr,a
                           1585 ;	time.c:175: return &lastTime;
   074B 90s00r00r3F        1586 	mov dptr,#_lastTime
   074F 75 F0 00           1587 	mov	b,#0x00
   0752                    1588 00117$:
   0752 22                 1589 	ret
                           1590 ;------------------------------------------------------------
                           1591 ;Allocation info for local variables in function 'mktime'
                           1592 ;------------------------------------------------------------
                           1593 ;timeptr                   Allocated with name '_mktime_timeptr_1_1'
                           1594 ;year                      Allocated with name '_mktime_year_1_1'
                           1595 ;month                     Allocated with name '_mktime_month_1_1'
                           1596 ;i                         Allocated to registers 
                           1597 ;seconds                   Allocated with name '_mktime_seconds_1_1'
                           1598 ;sloc0                     Allocated with name '_mktime_sloc0_1_0'
                           1599 ;------------------------------------------------------------
                           1600 ;	time.c:179: time_t mktime(struct tm *timeptr) {
                           1601 ;	-----------------------------------------
                           1602 ;	 function mktime
                           1603 ;	-----------------------------------------
   0753                    1604 _mktime:
   0753 75 86 01           1605 	mov     dps, #1
   0756 90s00r00r4F        1606 	mov     dptr, #_mktime_timeptr_1_1
   075A E5 82              1607 	mov	a,dpl
   075C F0                 1608 	movx	@dptr,a
   075D A3                 1609 	inc	dptr
   075E E5 83              1610 	mov	a,dph
   0760 F0                 1611 	movx	@dptr,a
   0761 A3                 1612 	inc	dptr
   0762 E5 93              1613 	mov	a,dpx
   0764 F0                 1614 	movx	@dptr,a
   0765 A3                 1615 	inc	dptr
   0766 E5 F0              1616 	mov	a,b
   0768 F0                 1617 	movx	@dptr,a
   0769 75 86 00           1618 	mov	dps,#0
                           1619 ;	time.c:180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
   076C 90s00r00r4F        1620 	mov	dptr,#_mktime_timeptr_1_1
   0770 E0                 1621 	movx	a,@dptr
   0771 24 05              1622 	add	a,#0x05
   0773 FE                 1623 	mov	r6,a
   0774 A3                 1624 	inc	dptr
   0775 E0                 1625 	movx	a,@dptr
   0776 34 00              1626 	addc	a,#0x00
   0778 FF                 1627 	mov	r7,a
   0779 A3                 1628 	inc	dptr
   077A E0                 1629 	movx	a,@dptr
   077B 34 00              1630 	addc	a,#0x00
   077D F8                 1631 	mov	r0,a
   077E A3                 1632 	inc	dptr
   077F E0                 1633 	movx	a,@dptr
   0780 F9                 1634 	mov	r1,a
   0781 8E 82              1635 	mov	dpl,r6
   0783 8F 83              1636 	mov	dph,r7
   0785 88 93              1637 	mov	dpx,r0
   0787 89 F0              1638 	mov	b,r1
   0789 12s00r00r00        1639 	lcall	__gptrgetWord
   078D FE                 1640 	mov	r6,a
   078E AF 9C              1641 	mov	r7,_ap
   0790 90s00r00r53        1642 	mov	dptr,#_mktime_year_1_1
   0794 74 6C              1643 	mov	a,#0x6C
   0796 2E                 1644 	add	a,r6
   0797 F0                 1645 	movx	@dptr,a
   0798 74 07              1646 	mov	a,#0x07
   079A 3F                 1647 	addc	a,r7
   079B A3                 1648 	inc	dptr
   079C F0                 1649 	movx	@dptr,a
   079D 90s00r00r4F        1650 	mov	dptr,#_mktime_timeptr_1_1
   07A1 E0                 1651 	movx	a,@dptr
   07A2 24 04              1652 	add	a,#0x04
   07A4 F8                 1653 	mov	r0,a
   07A5 A3                 1654 	inc	dptr
   07A6 E0                 1655 	movx	a,@dptr
   07A7 34 00              1656 	addc	a,#0x00
   07A9 F9                 1657 	mov	r1,a
   07AA A3                 1658 	inc	dptr
   07AB E0                 1659 	movx	a,@dptr
   07AC 34 00              1660 	addc	a,#0x00
   07AE FE                 1661 	mov	r6,a
   07AF A3                 1662 	inc	dptr
   07B0 E0                 1663 	movx	a,@dptr
   07B1 FF                 1664 	mov	r7,a
   07B2 88 82              1665 	mov	dpl,r0
   07B4 89 83              1666 	mov	dph,r1
   07B6 8E 93              1667 	mov	dpx,r6
   07B8 8F F0              1668 	mov	b,r7
   07BA 12s00r00r00        1669 	lcall	__gptrget
   07BE F8                 1670 	mov  r0,a
   07BF 90s00r00r55        1671 	mov  dptr,#_mktime_month_1_1
   07C3 F0                 1672 	movx @dptr,a
   07C4 A3                 1673 	inc	dptr
   07C5 E4                 1674 	clr	a
   07C6 F0                 1675 	movx	@dptr,a
                           1676 ;	time.c:183: CheckTime(timeptr);
   07C7 05 86              1677 	inc	dps
   07C9 90s00r00r4F        1678 	mov	dptr,#_mktime_timeptr_1_1
   07CD E0                 1679 	movx	a,@dptr
   07CE F5 82              1680 	mov	dpl,a
   07D0 A3                 1681 	inc	dptr
   07D1 E0                 1682 	movx	a,@dptr
   07D2 F5 83              1683 	mov	dph,a
   07D4 A3                 1684 	inc	dptr
   07D5 E0                 1685 	movx	a,@dptr
   07D6 F5 93              1686 	mov	dpx,a
   07D8 A3                 1687 	inc	dptr
   07D9 E0                 1688 	movx	a,@dptr
   07DA F5 F0              1689 	mov	b,a
   07DC 75 86 00           1690 	mov	dps,#0
   07DF 12s00r00r9D        1691 	lcall	_CheckTime
                           1692 ;	time.c:186: seconds= (year-1970)*(60*60*24L*365);
   07E3 90s00r00r53        1693 	mov	dptr,#_mktime_year_1_1
   07E7 E0                 1694 	movx	a,@dptr
   07E8 24 4E              1695 	add	a,#0x4E
   07EA F8                 1696 	mov	r0,a
   07EB A3                 1697 	inc	dptr
   07EC E0                 1698 	movx	a,@dptr
   07ED 34 F8              1699 	addc	a,#0xF8
   07EF F9                 1700 	mov	r1,a
   07F0 90s00r00r00        1701 	mov	dptr,#__mullong_PARM_2
   07F4 E8                 1702 	mov	a,r0
   07F5 F0                 1703 	movx	@dptr,a
   07F6 A3                 1704 	inc	dptr
   07F7 E9                 1705 	mov	a,r1
   07F8 F0                 1706 	movx	@dptr,a
   07F9 E9                 1707 	mov	a,r1
   07FA 33                 1708 	rlc	a
   07FB 95 E0              1709 	subb	a,acc
   07FD A3                 1710 	inc	dptr
   07FE F0                 1711 	movx	@dptr,a
   07FF A3                 1712 	inc	dptr
   0800 F0                 1713 	movx	@dptr,a
   0801 90 E1 33 80        1714 	mov	dptr,#0xE13380
   0805 75 F0 01           1715 	mov	b,#0x01
   0808 12s00r00r00        1716 	lcall	__mullong
   080C A8 82              1717 	mov	r0,dpl
   080E A9 83              1718 	mov	r1,dph
   0810 AE 93              1719 	mov	r6,dpx
   0812 AF F0              1720 	mov	r7,b
                           1721 ;	genAssign: resultIsFar = TRUE
   0814 90s00r00r57        1722 	mov	dptr,#_mktime_seconds_1_1
   0818 E8                 1723 	mov	a,r0
   0819 F0                 1724 	movx	@dptr,a
   081A A3                 1725 	inc	dptr
   081B E9                 1726 	mov	a,r1
   081C F0                 1727 	movx	@dptr,a
   081D A3                 1728 	inc	dptr
   081E EE                 1729 	mov	a,r6
   081F F0                 1730 	movx	@dptr,a
   0820 A3                 1731 	inc	dptr
   0821 EF                 1732 	mov	a,r7
   0822 F0                 1733 	movx	@dptr,a
                           1734 ;	time.c:189: for (i=1970; i<year; i++) {
   0823 90s00r00r57        1735 	mov	dptr,#_mktime_seconds_1_1
                           1736 ;	genAssign: resultIsFar = FALSE
   0827 E0                 1737 	movx	a,@dptr
   0828 FA                 1738 	mov	r2,a
   0829 A3                 1739 	inc	dptr
   082A E0                 1740 	movx	a,@dptr
   082B FB                 1741 	mov	r3,a
   082C A3                 1742 	inc	dptr
   082D E0                 1743 	movx	a,@dptr
   082E FC                 1744 	mov	r4,a
   082F A3                 1745 	inc	dptr
   0830 E0                 1746 	movx	a,@dptr
   0831 FD                 1747 	mov	r5,a
                           1748 ;	genAssign: resultIsFar = FALSE
   0832 7E B2              1749 	mov	r6,#0xB2
   0834 7F 07              1750 	mov	r7,#0x07
   0836                    1751 00107$:
   0836 90s00r00r53        1752 	mov	dptr,#_mktime_year_1_1
   083A C3                 1753 	clr	c
   083B EE                 1754 	mov	a,r6
   083C C5 F0              1755 	xch	a, b
   083E E0                 1756 	movx	a,@dptr
   083F C5 F0              1757 	xch	a, b
   0841 95 F0              1758 	subb	a,b
   0843 EF                 1759 	mov	a,r7
   0844 64 80              1760 	xrl	a,#0x80
   0846 C5 F0              1761 	xch	a, b
   0848 A3                 1762 	inc	dptr
   0849 E0                 1763 	movx	a,@dptr
   084A C5 F0              1764 	xch	a, b
   084C 63 F0 80           1765 	xrl	b,#0x80
   084F 95 F0              1766 	subb	a,b
   0851 50 46              1767 	jnc  00124$
   0853                    1768 00126$:
                           1769 ;	time.c:190: if (LEAP_YEAR(i)) {
                           1770 ;	genAssign: resultIsFar = TRUE
   0853 90s00r00r00        1771 	mov	dptr,#__modsint_PARM_2
   0857 74 04              1772 	mov	a,#0x04
   0859 F0                 1773 	movx	@dptr,a
   085A E4                 1774 	clr	a
   085B A3                 1775 	inc	dptr
   085C F0                 1776 	movx	@dptr,a
   085D C0 02              1777 	push	ar2
   085F C0 03              1778 	push	ar3
   0861 C0 04              1779 	push	ar4
   0863 C0 05              1780 	push	ar5
   0865 C0 06              1781 	push	ar6
   0867 C0 07              1782 	push	ar7
   0869 8E 82              1783 	mov	dpl,r6
   086B 8F 83              1784 	mov	dph,r7
   086D 12s00r00r00        1785 	lcall	__modsint
   0871 D0 07              1786 	pop	ar7
   0873 D0 06              1787 	pop	ar6
   0875 D0 05              1788 	pop	ar5
   0877 D0 04              1789 	pop	ar4
   0879 D0 03              1790 	pop	ar3
   087B D0 02              1791 	pop	ar2
   087D E5 82              1792 	mov	a,dpl
   087F 45 83              1793 	orl	a,dph
   0881 70 0F              1794 	jnz  00109$
   0883                    1795 00127$:
                           1796 ;	time.c:191: seconds+= 60*60*24L;
   0883 74 80              1797 	mov	a,#0x80
   0885 2A                 1798 	add	a,r2
   0886 FA                 1799 	mov	r2,a
   0887 74 51              1800 	mov	a,#0x51
   0889 3B                 1801 	addc	a,r3
   088A FB                 1802 	mov	r3,a
   088B 74 01              1803 	mov	a,#0x01
   088D 3C                 1804 	addc	a,r4
   088E FC                 1805 	mov	r4,a
   088F E4                 1806 	clr  a
   0890 3D                 1807 	addc	a,r5
   0891 FD                 1808 	mov	r5,a
   0892                    1809 00109$:
                           1810 ;	time.c:189: for (i=1970; i<year; i++) {
   0892 0E                 1811 	inc	r6
   0893 BE 00 01           1812 	cjne	r6,#0,00128$
   0896 0F                 1813 	inc	r7
   0897                    1814 00128$:
   0897 80 9D              1815 	sjmp 00107$
   0899                    1816 00124$:
                           1817 ;	genAssign: resultIsFar = TRUE
   0899 90s00r00r57        1818 	mov	dptr,#_mktime_seconds_1_1
   089D EA                 1819 	mov	a,r2
   089E F0                 1820 	movx	@dptr,a
   089F A3                 1821 	inc	dptr
   08A0 EB                 1822 	mov	a,r3
   08A1 F0                 1823 	movx	@dptr,a
   08A2 A3                 1824 	inc	dptr
   08A3 EC                 1825 	mov	a,r4
   08A4 F0                 1826 	movx	@dptr,a
   08A5 A3                 1827 	inc	dptr
   08A6 ED                 1828 	mov	a,r5
   08A7 F0                 1829 	movx	@dptr,a
                           1830 ;	time.c:196: for (i=0; i<month; i++) {
                           1831 ;	genAssign: resultIsFar = TRUE
   08A8 90s00r00r00        1832 	mov	dptr,#__modsint_PARM_2
   08AC 74 04              1833 	mov	a,#0x04
   08AE F0                 1834 	movx	@dptr,a
   08AF E4                 1835 	clr	a
   08B0 A3                 1836 	inc	dptr
   08B1 F0                 1837 	movx	@dptr,a
   08B2 05 86              1838 	inc	dps
   08B4 90s00r00r53        1839 	mov	dptr,#_mktime_year_1_1
   08B8 E0                 1840 	movx	a,@dptr
   08B9 F5 82              1841 	mov	dpl,a
   08BB A3                 1842 	inc	dptr
   08BC E0                 1843 	movx	a,@dptr
   08BD F5 83              1844 	mov	dph,a
   08BF 75 86 00           1845 	mov	dps,#0
   08C2 12s00r00r00        1846 	lcall	__modsint
   08C6 AA 82              1847 	mov	r2,dpl
   08C8 AB 83              1848 	mov	r3,dph
                           1849 ;	genAssign: resultIsFar = FALSE
   08CA 7C 00              1850 	mov	r4,#0x00
   08CC 7D 00              1851 	mov	r5,#0x00
   08CE                    1852 00111$:
   08CE 90s00r00r55        1853 	mov	dptr,#_mktime_month_1_1
   08D2 C3                 1854 	clr	c
   08D3 EC                 1855 	mov	a,r4
   08D4 C5 F0              1856 	xch	a, b
   08D6 E0                 1857 	movx	a,@dptr
   08D7 C5 F0              1858 	xch	a, b
   08D9 95 F0              1859 	subb	a,b
   08DB ED                 1860 	mov	a,r5
   08DC 64 80              1861 	xrl	a,#0x80
   08DE C5 F0              1862 	xch	a, b
   08E0 A3                 1863 	inc	dptr
   08E1 E0                 1864 	movx	a,@dptr
   08E2 C5 F0              1865 	xch	a, b
   08E4 63 F0 80           1866 	xrl	b,#0x80
   08E7 95 F0              1867 	subb	a,b
   08E9 40 04              1868 	jc	00129$
   08EB 02s00r09r74        1869 	ljmp	00114$
   08EF                    1870 00129$:
                           1871 ;	time.c:197: if (i==1 && LEAP_YEAR(year)) { 
   08EF EC                 1872 	mov	a,r4
   08F0 B4 01 21           1873 	cjne a,#0x01,00104$
   08F3 ED                 1874 	mov  a,r5
   08F4 B4 00 1D           1875 	cjne a,#0x00,00104$
   08F7                    1876 00131$:
   08F7 EA                 1877 	mov	a,r2
   08F8 4B                 1878 	orl	a,r3
   08F9 70 19              1879 	jnz  00104$
   08FB                    1880 00132$:
                           1881 ;	time.c:198: seconds+= 60*60*24L*29;
   08FB 90s00r00r57        1882 	mov	dptr,#_mktime_seconds_1_1
   08FF E0                 1883 	movx	a,@dptr
   0900 24 80              1884 	add	a,#0x80
   0902 F0                 1885 	movx	@dptr,a
   0903 A3                 1886 	inc	dptr
   0904 E0                 1887 	movx	a,@dptr
   0905 34 3B              1888 	addc	a,#0x3B
   0907 F0                 1889 	movx	@dptr,a
   0908 A3                 1890 	inc	dptr
   0909 E0                 1891 	movx	a,@dptr
   090A 34 26              1892 	addc	a,#0x26
   090C F0                 1893 	movx	@dptr,a
   090D A3                 1894 	inc	dptr
   090E E0                 1895 	movx	a,@dptr
   090F 34 00              1896 	addc	a,#0x00
   0911 F0                 1897 	movx	@dptr,a
   0912 80 57              1898 	sjmp 00113$
   0914                    1899 00104$:
                           1900 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
   0914 C0 02              1901 	push	ar2
   0916 C0 03              1902 	push	ar3
   0918 EC                 1903 	mov	a,r4
   0919 24r00              1904 	add	a,#_monthDays
   091B F5 82              1905 	mov	dpl,a
   091D ED                 1906 	mov	a,r5
   091E 34s00              1907 	addc	a,#(_monthDays >> 8)
   0920 F5 83              1908 	mov	dph,a
   0922 E4                 1909 	clr	a
   0923 34s00              1910 	addc	a,#(_monthDays >> 16)
   0925 F5 93              1911 	mov	dpx,a
   0927 E4                 1912 	clr	a
   0928 93                 1913 	movc	a,@a+dptr
   0929 FA                 1914 	mov  r2,a
   092A 90s00r00r00        1915 	mov  dptr,#__mullong_PARM_2
   092E F0                 1916 	movx @dptr,a
   092F EA                 1917 	mov	a,r2
   0930 33                 1918 	rlc	a
   0931 95 E0              1919 	subb	a,acc
   0933 A3                 1920 	inc	dptr
   0934 F0                 1921 	movx	@dptr,a
   0935 A3                 1922 	inc	dptr
   0936 F0                 1923 	movx	@dptr,a
   0937 A3                 1924 	inc	dptr
   0938 F0                 1925 	movx	@dptr,a
   0939 C0 04              1926 	push	ar4
   093B C0 05              1927 	push	ar5
   093D 90 01 51 80        1928 	mov	dptr,#0x015180
   0941 75 F0 00           1929 	mov	b,#0x00
   0944 12s00r00r00        1930 	lcall	__mullong
   0948 AA 82              1931 	mov	r2,dpl
   094A AB 83              1932 	mov	r3,dph
   094C AE 93              1933 	mov	r6,dpx
   094E AF F0              1934 	mov	r7,b
   0950 D0 05              1935 	pop	ar5
   0952 D0 04              1936 	pop	ar4
   0954 90s00r00r57        1937 	mov	dptr,#_mktime_seconds_1_1
   0958 E0                 1938 	movx	a,@dptr
   0959 2A                 1939 	add	a,r2
   095A F0                 1940 	movx	@dptr,a
   095B A3                 1941 	inc	dptr
   095C E0                 1942 	movx	a,@dptr
   095D 3B                 1943 	addc	a,r3
   095E F0                 1944 	movx	@dptr,a
   095F A3                 1945 	inc	dptr
   0960 E0                 1946 	movx	a,@dptr
   0961 3E                 1947 	addc	a,r6
   0962 F0                 1948 	movx	@dptr,a
   0963 A3                 1949 	inc	dptr
   0964 E0                 1950 	movx	a,@dptr
   0965 3F                 1951 	addc	a,r7
   0966 F0                 1952 	movx	@dptr,a
                           1953 ;	time.c:208: return seconds;
   0967 D0 03              1954 	pop	ar3
   0969 D0 02              1955 	pop	ar2
                           1956 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
   096B                    1957 00113$:
                           1958 ;	time.c:196: for (i=0; i<month; i++) {
   096B 0C                 1959 	inc	r4
   096C BC 00 01           1960 	cjne	r4,#0,00133$
   096F 0D                 1961 	inc	r5
   0970                    1962 00133$:
   0970 02s00r08rCE        1963 	ljmp	00111$
   0974                    1964 00114$:
                           1965 ;	time.c:204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
   0974 90s00r00r4F        1966 	mov	dptr,#_mktime_timeptr_1_1
   0978 E0                 1967 	movx	a,@dptr
   0979 24 03              1968 	add	a,#0x03
   097B FA                 1969 	mov	r2,a
   097C A3                 1970 	inc	dptr
   097D E0                 1971 	movx	a,@dptr
   097E 34 00              1972 	addc	a,#0x00
   0980 FB                 1973 	mov	r3,a
   0981 A3                 1974 	inc	dptr
   0982 E0                 1975 	movx	a,@dptr
   0983 34 00              1976 	addc	a,#0x00
   0985 FC                 1977 	mov	r4,a
   0986 A3                 1978 	inc	dptr
   0987 E0                 1979 	movx	a,@dptr
   0988 FD                 1980 	mov	r5,a
   0989 8A 82              1981 	mov	dpl,r2
   098B 8B 83              1982 	mov	dph,r3
   098D 8C 93              1983 	mov	dpx,r4
   098F 8D F0              1984 	mov	b,r5
   0991 12s00r00r00        1985 	lcall	__gptrget
   0995 FA                 1986 	mov	r2,a
   0996 7B 00              1987 	mov	r3,#0
   0998 1A                 1988 	dec	r2
   0999 BA FF 01           1989 	cjne	r2,#0xFF,00134$
   099C 1B                 1990 	dec	r3
   099D                    1991 00134$:
   099D 90s00r00r00        1992 	mov	dptr,#__mullong_PARM_2
   09A1 EA                 1993 	mov	a,r2
   09A2 F0                 1994 	movx	@dptr,a
   09A3 A3                 1995 	inc	dptr
   09A4 EB                 1996 	mov	a,r3
   09A5 F0                 1997 	movx	@dptr,a
   09A6 EB                 1998 	mov	a,r3
   09A7 33                 1999 	rlc	a
   09A8 95 E0              2000 	subb	a,acc
   09AA A3                 2001 	inc	dptr
   09AB F0                 2002 	movx	@dptr,a
   09AC A3                 2003 	inc	dptr
   09AD F0                 2004 	movx	@dptr,a
   09AE 90 01 51 80        2005 	mov	dptr,#0x015180
   09B2 75 F0 00           2006 	mov	b,#0x00
   09B5 12s00r00r00        2007 	lcall	__mullong
   09B9 AA 82              2008 	mov	r2,dpl
   09BB AB 83              2009 	mov	r3,dph
   09BD AC 93              2010 	mov	r4,dpx
   09BF AD F0              2011 	mov	r5,b
   09C1 90s00r00r57        2012 	mov	dptr,#_mktime_seconds_1_1
   09C5 E0                 2013 	movx	a,@dptr
   09C6 2A                 2014 	add	a,r2
   09C7 F0                 2015 	movx	@dptr,a
   09C8 A3                 2016 	inc	dptr
   09C9 E0                 2017 	movx	a,@dptr
   09CA 3B                 2018 	addc	a,r3
   09CB F0                 2019 	movx	@dptr,a
   09CC A3                 2020 	inc	dptr
   09CD E0                 2021 	movx	a,@dptr
   09CE 3C                 2022 	addc	a,r4
   09CF F0                 2023 	movx	@dptr,a
   09D0 A3                 2024 	inc	dptr
   09D1 E0                 2025 	movx	a,@dptr
   09D2 3D                 2026 	addc	a,r5
   09D3 F0                 2027 	movx	@dptr,a
                           2028 ;	time.c:205: seconds+= timeptr->tm_hour*60*60L;
   09D4 90s00r00r4F        2029 	mov	dptr,#_mktime_timeptr_1_1
   09D8 E0                 2030 	movx	a,@dptr
   09D9 24 02              2031 	add	a,#0x02
   09DB FA                 2032 	mov	r2,a
   09DC A3                 2033 	inc	dptr
   09DD E0                 2034 	movx	a,@dptr
   09DE 34 00              2035 	addc	a,#0x00
   09E0 FB                 2036 	mov	r3,a
   09E1 A3                 2037 	inc	dptr
   09E2 E0                 2038 	movx	a,@dptr
   09E3 34 00              2039 	addc	a,#0x00
   09E5 FC                 2040 	mov	r4,a
   09E6 A3                 2041 	inc	dptr
   09E7 E0                 2042 	movx	a,@dptr
   09E8 FD                 2043 	mov	r5,a
   09E9 8A 82              2044 	mov	dpl,r2
   09EB 8B 83              2045 	mov	dph,r3
   09ED 8C 93              2046 	mov	dpx,r4
   09EF 8D F0              2047 	mov	b,r5
   09F1 12s00r00r00        2048 	lcall	__gptrget
   09F5 FA                 2049 	mov  r2,a
   09F6 90s00r00r00        2050 	mov  dptr,#__mullong_PARM_2
   09FA F0                 2051 	movx @dptr,a
   09FB A3                 2052 	inc	dptr
   09FC E4                 2053 	clr	a
   09FD F0                 2054 	movx	@dptr,a
   09FE A3                 2055 	inc	dptr
   09FF E4                 2056 	clr	a
   0A00 F0                 2057 	movx	@dptr,a
   0A01 A3                 2058 	inc	dptr
   0A02 E4                 2059 	clr	a
   0A03 F0                 2060 	movx	@dptr,a
   0A04 90 00 0E 10        2061 	mov	dptr,#0x000E10
   0A08 75 F0 00           2062 	mov	b,#0x00
   0A0B 12s00r00r00        2063 	lcall	__mullong
   0A0F AA 82              2064 	mov	r2,dpl
   0A11 AB 83              2065 	mov	r3,dph
   0A13 AC 93              2066 	mov	r4,dpx
   0A15 AD F0              2067 	mov	r5,b
   0A17 90s00r00r57        2068 	mov	dptr,#_mktime_seconds_1_1
   0A1B E0                 2069 	movx	a,@dptr
   0A1C 2A                 2070 	add	a,r2
   0A1D F0                 2071 	movx	@dptr,a
   0A1E A3                 2072 	inc	dptr
   0A1F E0                 2073 	movx	a,@dptr
   0A20 3B                 2074 	addc	a,r3
   0A21 F0                 2075 	movx	@dptr,a
   0A22 A3                 2076 	inc	dptr
   0A23 E0                 2077 	movx	a,@dptr
   0A24 3C                 2078 	addc	a,r4
   0A25 F0                 2079 	movx	@dptr,a
   0A26 A3                 2080 	inc	dptr
   0A27 E0                 2081 	movx	a,@dptr
   0A28 3D                 2082 	addc	a,r5
   0A29 F0                 2083 	movx	@dptr,a
                           2084 ;	time.c:206: seconds+= timeptr->tm_min*60;
   0A2A 90s00r00r4F        2085 	mov	dptr,#_mktime_timeptr_1_1
   0A2E E0                 2086 	movx	a,@dptr
   0A2F 24 01              2087 	add	a,#0x01
   0A31 FA                 2088 	mov	r2,a
   0A32 A3                 2089 	inc	dptr
   0A33 E0                 2090 	movx	a,@dptr
   0A34 34 00              2091 	addc	a,#0x00
   0A36 FB                 2092 	mov	r3,a
   0A37 A3                 2093 	inc	dptr
   0A38 E0                 2094 	movx	a,@dptr
   0A39 34 00              2095 	addc	a,#0x00
   0A3B FC                 2096 	mov	r4,a
   0A3C A3                 2097 	inc	dptr
   0A3D E0                 2098 	movx	a,@dptr
   0A3E FD                 2099 	mov	r5,a
   0A3F 8A 82              2100 	mov	dpl,r2
   0A41 8B 83              2101 	mov	dph,r3
   0A43 8C 93              2102 	mov	dpx,r4
   0A45 8D F0              2103 	mov	b,r5
   0A47 12s00r00r00        2104 	lcall	__gptrget
   0A4B FA                 2105 	mov	r2,a
   0A4C 75 F0 3C           2106 	mov	b,#0x3C
   0A4F EA                 2107 	mov	a,r2
   0A50 A4                 2108 	mul	ab
   0A51 FA                 2109 	mov	r2,a
   0A52 AB F0              2110 	mov	r3,b
   0A54 EB                 2111 	mov	a,r3
   0A55 33                 2112 	rlc	a
   0A56 95 E0              2113 	subb	a,acc
   0A58 FC                 2114 	mov	r4,a
   0A59 FD                 2115 	mov	r5,a
   0A5A 90s00r00r57        2116 	mov	dptr,#_mktime_seconds_1_1
   0A5E E0                 2117 	movx	a,@dptr
   0A5F 2A                 2118 	add	a,r2
   0A60 F0                 2119 	movx	@dptr,a
   0A61 A3                 2120 	inc	dptr
   0A62 E0                 2121 	movx	a,@dptr
   0A63 3B                 2122 	addc	a,r3
   0A64 F0                 2123 	movx	@dptr,a
   0A65 A3                 2124 	inc	dptr
   0A66 E0                 2125 	movx	a,@dptr
   0A67 3C                 2126 	addc	a,r4
   0A68 F0                 2127 	movx	@dptr,a
   0A69 A3                 2128 	inc	dptr
   0A6A E0                 2129 	movx	a,@dptr
   0A6B 3D                 2130 	addc	a,r5
   0A6C F0                 2131 	movx	@dptr,a
                           2132 ;	time.c:207: seconds+= timeptr->tm_sec;
   0A6D 75 86 01           2133 	mov     dps, #1
   0A70 90s00r00r4F        2134 	mov     dptr, #_mktime_timeptr_1_1
   0A74 E0                 2135 	movx	a,@dptr
   0A75 F5 82              2136 	mov	dpl,a
   0A77 A3                 2137 	inc	dptr
   0A78 E0                 2138 	movx	a,@dptr
   0A79 F5 83              2139 	mov	dph,a
   0A7B A3                 2140 	inc	dptr
   0A7C E0                 2141 	movx	a,@dptr
   0A7D F5 93              2142 	mov	dpx,a
   0A7F A3                 2143 	inc	dptr
   0A80 E0                 2144 	movx	a,@dptr
   0A81 F5 F0              2145 	mov	b,a
   0A83 75 86 00           2146 	mov	dps,#0
   0A86 12s00r00r00        2147 	lcall	__gptrget
   0A8A FA                 2148 	mov	r2,a
   0A8B 7B 00              2149 	mov	r3,#0
   0A8D EB                 2150 	mov	a,r3
   0A8E 33                 2151 	rlc	a
   0A8F 95 E0              2152 	subb	a,acc
   0A91 FC                 2153 	mov	r4,a
   0A92 FD                 2154 	mov	r5,a
   0A93 90s00r00r57        2155 	mov	dptr,#_mktime_seconds_1_1
   0A97 E0                 2156 	movx	a,@dptr
   0A98 2A                 2157 	add	a,r2
   0A99 F0                 2158 	movx	@dptr,a
   0A9A A3                 2159 	inc	dptr
   0A9B E0                 2160 	movx	a,@dptr
   0A9C 3B                 2161 	addc	a,r3
   0A9D F0                 2162 	movx	@dptr,a
   0A9E A3                 2163 	inc	dptr
   0A9F E0                 2164 	movx	a,@dptr
   0AA0 3C                 2165 	addc	a,r4
   0AA1 F0                 2166 	movx	@dptr,a
   0AA2 A3                 2167 	inc	dptr
   0AA3 E0                 2168 	movx	a,@dptr
   0AA4 3D                 2169 	addc	a,r5
   0AA5 F0                 2170 	movx	@dptr,a
                           2171 ;	time.c:208: return seconds;
   0AA6 75 86 01           2172 	mov     dps, #1
   0AA9 90s00r00r57        2173 	mov     dptr, #_mktime_seconds_1_1
   0AAD E0                 2174 	movx	a,@dptr
   0AAE F5 82              2175 	mov	dpl,a
   0AB0 A3                 2176 	inc	dptr
   0AB1 E0                 2177 	movx	a,@dptr
   0AB2 F5 83              2178 	mov	dph,a
   0AB4 A3                 2179 	inc	dptr
   0AB5 E0                 2180 	movx	a,@dptr
   0AB6 F5 93              2181 	mov	dpx,a
   0AB8 A3                 2182 	inc	dptr
   0AB9 E0                 2183 	movx	a,@dptr
   0ABA F5 F0              2184 	mov	b,a
   0ABC 75 86 00           2185 	mov	dps,#0
   0ABF                    2186 00115$:
   0ABF 22                 2187 	ret
                           2188 	.area CSEG    (CODE)
                           2189 	.area CONST   (CODE)
   0000                    2190 _monthDays:
   0000 1F                 2191 	.db #0x1F	;  31
   0001 1C                 2192 	.db #0x1C	;  28
   0002 1F                 2193 	.db #0x1F	;  31
   0003 1E                 2194 	.db #0x1E	;  30
   0004 1F                 2195 	.db #0x1F	;  31
   0005 1E                 2196 	.db #0x1E	;  30
   0006 1F                 2197 	.db #0x1F	;  31
   0007 1F                 2198 	.db #0x1F	;  31
   0008 1E                 2199 	.db #0x1E	;  30
   0009 1F                 2200 	.db #0x1F	;  31
   000A 1E                 2201 	.db #0x1E	;  30
   000B 1F                 2202 	.db #0x1F	;  31
   000C                    2203 ___month:
   000Cr64s00s00           2204 	.byte _str_1,(_str_1 >> 8),(_str_1 >> 16)
   000Fr68s00s00           2205 	.byte _str_2,(_str_2 >> 8),(_str_2 >> 16)
   0012r6Cs00s00           2206 	.byte _str_3,(_str_3 >> 8),(_str_3 >> 16)
   0015r70s00s00           2207 	.byte _str_4,(_str_4 >> 8),(_str_4 >> 16)
   0018r74s00s00           2208 	.byte _str_5,(_str_5 >> 8),(_str_5 >> 16)
   001Br78s00s00           2209 	.byte _str_6,(_str_6 >> 8),(_str_6 >> 16)
   001Er7Cs00s00           2210 	.byte _str_7,(_str_7 >> 8),(_str_7 >> 16)
   0021r80s00s00           2211 	.byte _str_8,(_str_8 >> 8),(_str_8 >> 16)
   0024r84s00s00           2212 	.byte _str_9,(_str_9 >> 8),(_str_9 >> 16)
   0027r88s00s00           2213 	.byte _str_10,(_str_10 >> 8),(_str_10 >> 16)
   002Ar8Cs00s00           2214 	.byte _str_11,(_str_11 >> 8),(_str_11 >> 16)
   002Dr90s00s00           2215 	.byte _str_12,(_str_12 >> 8),(_str_12 >> 16)
   0030                    2216 ___day:
   0030r94s00s00           2217 	.byte _str_13,(_str_13 >> 8),(_str_13 >> 16)
   0033r98s00s00           2218 	.byte _str_14,(_str_14 >> 8),(_str_14 >> 16)
   0036r9Cs00s00           2219 	.byte _str_15,(_str_15 >> 8),(_str_15 >> 16)
   0039rA0s00s00           2220 	.byte _str_16,(_str_16 >> 8),(_str_16 >> 16)
   003CrA4s00s00           2221 	.byte _str_17,(_str_17 >> 8),(_str_17 >> 16)
   003FrA8s00s00           2222 	.byte _str_18,(_str_18 >> 8),(_str_18 >> 16)
   0042rACs00s00           2223 	.byte _str_19,(_str_19 >> 8),(_str_19 >> 16)
   0045                    2224 __str_0:
   0045 25 73 20 25 73 20  2225 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
        25 32 64 20 25 30
        32 64 3A 25 30 32
        64 3A 25 30 32 64
        20 25 30 34 64
   0062 0A                 2226 	.db 0x0A
   0063 00                 2227 	.db 0x00
   0064                    2228 _str_1:
   0064 4A 61 6E           2229 	.ascii "Jan"
   0067 00                 2230 	.db 0x00
   0068                    2231 _str_2:
   0068 46 65 62           2232 	.ascii "Feb"
   006B 00                 2233 	.db 0x00
   006C                    2234 _str_3:
   006C 4D 61 72           2235 	.ascii "Mar"
   006F 00                 2236 	.db 0x00
   0070                    2237 _str_4:
   0070 41 70 72           2238 	.ascii "Apr"
   0073 00                 2239 	.db 0x00
   0074                    2240 _str_5:
   0074 4D 61 79           2241 	.ascii "May"
   0077 00                 2242 	.db 0x00
   0078                    2243 _str_6:
   0078 4A 75 6E           2244 	.ascii "Jun"
   007B 00                 2245 	.db 0x00
   007C                    2246 _str_7:
   007C 4A 75 6C           2247 	.ascii "Jul"
   007F 00                 2248 	.db 0x00
   0080                    2249 _str_8:
   0080 41 75 67           2250 	.ascii "Aug"
   0083 00                 2251 	.db 0x00
   0084                    2252 _str_9:
   0084 53 65 70           2253 	.ascii "Sep"
   0087 00                 2254 	.db 0x00
   0088                    2255 _str_10:
   0088 4F 63 74           2256 	.ascii "Oct"
   008B 00                 2257 	.db 0x00
   008C                    2258 _str_11:
   008C 4E 6F 76           2259 	.ascii "Nov"
   008F 00                 2260 	.db 0x00
   0090                    2261 _str_12:
   0090 44 65 63           2262 	.ascii "Dec"
   0093 00                 2263 	.db 0x00
   0094                    2264 _str_13:
   0094 53 75 6E           2265 	.ascii "Sun"
   0097 00                 2266 	.db 0x00
   0098                    2267 _str_14:
   0098 4D 6F 6E           2268 	.ascii "Mon"
   009B 00                 2269 	.db 0x00
   009C                    2270 _str_15:
   009C 54 75 65           2271 	.ascii "Tue"
   009F 00                 2272 	.db 0x00
   00A0                    2273 _str_16:
   00A0 57 65 64           2274 	.ascii "Wed"
   00A3 00                 2275 	.db 0x00
   00A4                    2276 _str_17:
   00A4 54 68 75           2277 	.ascii "Thu"
   00A7 00                 2278 	.db 0x00
   00A8                    2279 _str_18:
   00A8 46 72 69           2280 	.ascii "Fri"
   00AB 00                 2281 	.db 0x00
   00AC                    2282 _str_19:
   00AC 53 61 74           2283 	.ascii "Sat"
   00AF 00                 2284 	.db 0x00
                           2285 	.area XINIT   (CODE)
                           2286 	.area CABS    (ABS,CODE)
