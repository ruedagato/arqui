                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:31 2015
                              5 ;--------------------------------------------------------
                              6 	.module _atoi
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _atoi
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in internal ram 
                             34 ;--------------------------------------------------------
                             35 	.area OSEG    (OVR,DATA)
                             36 ;--------------------------------------------------------
                             37 ; indirectly addressable internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area ISEG    (DATA)
                             40 ;--------------------------------------------------------
                             41 ; absolute internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area IABS    (ABS,DATA)
                             44 	.area IABS    (ABS,DATA)
                             45 ;--------------------------------------------------------
                             46 ; bit data
                             47 ;--------------------------------------------------------
                             48 	.area BSEG    (BIT)
                             49 ;--------------------------------------------------------
                             50 ; paged external ram data
                             51 ;--------------------------------------------------------
                             52 	.area PSEG    (PAG,XDATA)
                             53 ;--------------------------------------------------------
                             54 ; external ram data
                             55 ;--------------------------------------------------------
                             56 	.area XSEG    (XDATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XABS    (ABS,XDATA)
                             61 ;--------------------------------------------------------
                             62 ; external initialized ram data
                             63 ;--------------------------------------------------------
                             64 	.area XISEG   (XDATA)
                             65 	.area HOME    (CODE)
                             66 	.area GSINIT0 (CODE)
                             67 	.area GSINIT1 (CODE)
                             68 	.area GSINIT2 (CODE)
                             69 	.area GSINIT3 (CODE)
                             70 	.area GSINIT4 (CODE)
                             71 	.area GSINIT5 (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area CSEG    (CODE)
                             75 ;--------------------------------------------------------
                             76 ; global & static initialisations
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT  (CODE)
                             80 	.area GSFINAL (CODE)
                             81 	.area GSINIT  (CODE)
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area HOME    (CODE)
                             86 	.area HOME    (CODE)
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area CSEG    (CODE)
                             91 ;------------------------------------------------------------
                             92 ;Allocation info for local variables in function 'atoi'
                             93 ;------------------------------------------------------------
                             94 ;s                         Allocated to stack - offset 1
                             95 ;rv                        Allocated to registers r5 r6 
                             96 ;sign                      Allocated to registers r4 
                             97 ;sloc0                     Allocated to stack - offset 7
                             98 ;sloc1                     Allocated to stack - offset 4
                             99 ;------------------------------------------------------------
                            100 ;	_atoi.c:29: int atoi(const char * s)
                            101 ;	-----------------------------------------
                            102 ;	 function atoi
                            103 ;	-----------------------------------------
   0000                     104 _atoi:
                    0002    105 	ar2 = 0x02
                    0003    106 	ar3 = 0x03
                    0004    107 	ar4 = 0x04
                    0005    108 	ar5 = 0x05
                    0006    109 	ar6 = 0x06
                    0007    110 	ar7 = 0x07
                    0000    111 	ar0 = 0x00
                    0001    112 	ar1 = 0x01
   0000 C0*00               113 	push	_bp
   0002 85 81*00            114 	mov	_bp,sp
   0005 C0 82               115 	push	dpl
   0007 C0 83               116 	push	dph
   0009 C0 F0               117 	push	b
   000B 05 81               118 	inc	sp
   000D 05 81               119 	inc	sp
   000F 05 81               120 	inc	sp
                            121 ;	_atoi.c:31: register int rv=0; 
   0011 7D 00               122 	mov	r5,#0x00
   0013 7E 00               123 	mov	r6,#0x00
                            124 ;	_atoi.c:35: while (*s) {
   0015 A8*00               125 	mov	r0,_bp
   0017 08                  126 	inc	r0
   0018 86 07               127 	mov	ar7,@r0
   001A 08                  128 	inc	r0
   001B 86 02               129 	mov	ar2,@r0
   001D 08                  130 	inc	r0
   001E 86 03               131 	mov	ar3,@r0
   0020                     132 00107$:
   0020 8F 82               133 	mov	dpl,r7
   0022 8A 83               134 	mov	dph,r2
   0024 8B F0               135 	mov	b,r3
   0026 12s00r00            136 	lcall	__gptrget
   0029 FC                  137 	mov	r4,a
   002A 60 2E               138 	jz	00133$
                            139 ;	_atoi.c:36: if (*s <= '9' && *s >= '0')
   002C C3                  140 	clr	c
   002D 74 B9               141 	mov	a,#(0x39 ^ 0x80)
   002F 8C F0               142 	mov	b,r4
   0031 63 F0 80            143 	xrl	b,#0x80
   0034 95 F0               144 	subb	a,b
   0036 40 07               145 	jc	00102$
   0038 EC                  146 	mov	a,r4
   0039 64 80               147 	xrl	a,#0x80
   003B 94 B0               148 	subb	a,#0xb0
   003D 50 1B               149 	jnc	00133$
                            150 ;	_atoi.c:37: break;
   003F                     151 00102$:
                            152 ;	_atoi.c:38: if (*s == '-' || *s == '+') 
   003F 8F 82               153 	mov	dpl,r7
   0041 8A 83               154 	mov	dph,r2
   0043 8B F0               155 	mov	b,r3
   0045 12s00r00            156 	lcall	__gptrget
   0048 FC                  157 	mov	r4,a
   0049 BC 2D 02            158 	cjne	r4,#0x2D,00138$
   004C 80 0C               159 	sjmp	00133$
   004E                     160 00138$:
   004E BC 2B 02            161 	cjne	r4,#0x2B,00139$
   0051 80 07               162 	sjmp	00133$
   0053                     163 00139$:
                            164 ;	_atoi.c:40: s++;
   0053 0F                  165 	inc	r7
   0054 BF 00 C9            166 	cjne	r7,#0x00,00107$
   0057 0A                  167 	inc	r2
   0058 80 C6               168 	sjmp	00107$
   005A                     169 00133$:
   005A A8*00               170 	mov	r0,_bp
   005C 08                  171 	inc	r0
   005D A6 07               172 	mov	@r0,ar7
   005F 08                  173 	inc	r0
   0060 A6 02               174 	mov	@r0,ar2
   0062 08                  175 	inc	r0
   0063 A6 03               176 	mov	@r0,ar3
                            177 ;	_atoi.c:43: sign = (*s == '-');
   0065 8F 82               178 	mov	dpl,r7
   0067 8A 83               179 	mov	dph,r2
   0069 8B F0               180 	mov	b,r3
   006B 12s00r00            181 	lcall	__gptrget
   006E FA                  182 	mov	r2,a
   006F E4                  183 	clr	a
   0070 BA 2D 01            184 	cjne	r2,#0x2D,00141$
   0073 04                  185 	inc	a
   0074                     186 00141$:
                            187 ;	_atoi.c:44: if (*s == '-' || *s == '+') s++;
   0074 FB                  188 	mov	r3,a
   0075 FC                  189 	mov	r4,a
   0076 70 03               190 	jnz	00110$
   0078 BA 2B 09            191 	cjne	r2,#0x2B,00131$
   007B                     192 00110$:
   007B A8*00               193 	mov	r0,_bp
   007D 08                  194 	inc	r0
   007E 06                  195 	inc	@r0
   007F B6 00 02            196 	cjne	@r0,#0x00,00146$
   0082 08                  197 	inc	r0
   0083 06                  198 	inc	@r0
   0084                     199 00146$:
                            200 ;	_atoi.c:46: while (*s && *s >= '0' && *s <= '9') {
   0084                     201 00131$:
   0084 A8*00               202 	mov	r0,_bp
   0086 08                  203 	inc	r0
   0087 E5*00               204 	mov	a,_bp
   0089 24 04               205 	add	a,#0x04
   008B F9                  206 	mov	r1,a
   008C E6                  207 	mov	a,@r0
   008D F7                  208 	mov	@r1,a
   008E 08                  209 	inc	r0
   008F 09                  210 	inc	r1
   0090 E6                  211 	mov	a,@r0
   0091 F7                  212 	mov	@r1,a
   0092 08                  213 	inc	r0
   0093 09                  214 	inc	r1
   0094 E6                  215 	mov	a,@r0
   0095 F7                  216 	mov	@r1,a
   0096                     217 00115$:
   0096 E5*00               218 	mov	a,_bp
   0098 24 04               219 	add	a,#0x04
   009A F8                  220 	mov	r0,a
   009B 86 82               221 	mov	dpl,@r0
   009D 08                  222 	inc	r0
   009E 86 83               223 	mov	dph,@r0
   00A0 08                  224 	inc	r0
   00A1 86 F0               225 	mov	b,@r0
   00A3 12s00r00            226 	lcall	__gptrget
   00A6 FB                  227 	mov	r3,a
   00A7 60 51               228 	jz	00117$
   00A9 C3                  229 	clr	c
   00AA EB                  230 	mov	a,r3
   00AB 64 80               231 	xrl	a,#0x80
   00AD 94 B0               232 	subb	a,#0xb0
   00AF 40 49               233 	jc	00117$
   00B1 74 B9               234 	mov	a,#(0x39 ^ 0x80)
   00B3 8B F0               235 	mov	b,r3
   00B5 63 F0 80            236 	xrl	b,#0x80
   00B8 95 F0               237 	subb	a,b
   00BA 40 3E               238 	jc	00117$
                            239 ;	_atoi.c:47: rv = (rv * 10) + (*s - '0');
   00BC C0 04               240 	push	ar4
   00BE C0 03               241 	push	ar3
   00C0 C0 05               242 	push	ar5
   00C2 C0 06               243 	push	ar6
   00C4 90 00 0A            244 	mov	dptr,#0x000A
   00C7 12s00r00            245 	lcall	__mulint
   00CA AC 82               246 	mov	r4,dpl
   00CC AA 83               247 	mov	r2,dph
   00CE 15 81               248 	dec	sp
   00D0 15 81               249 	dec	sp
   00D2 D0 03               250 	pop	ar3
   00D4 EB                  251 	mov	a,r3
   00D5 33                  252 	rlc	a
   00D6 95 E0               253 	subb	a,acc
   00D8 FF                  254 	mov	r7,a
   00D9 EB                  255 	mov	a,r3
   00DA 24 D0               256 	add	a,#0xd0
   00DC FB                  257 	mov	r3,a
   00DD EF                  258 	mov	a,r7
   00DE 34 FF               259 	addc	a,#0xff
   00E0 FF                  260 	mov	r7,a
   00E1 EB                  261 	mov	a,r3
   00E2 2C                  262 	add	a,r4
   00E3 FC                  263 	mov	r4,a
   00E4 EF                  264 	mov	a,r7
   00E5 3A                  265 	addc	a,r2
   00E6 FA                  266 	mov	r2,a
   00E7 8C 05               267 	mov	ar5,r4
   00E9 8A 06               268 	mov	ar6,r2
                            269 ;	_atoi.c:48: s++;
   00EB E5*00               270 	mov	a,_bp
   00ED 24 04               271 	add	a,#0x04
   00EF F8                  272 	mov	r0,a
   00F0 06                  273 	inc	@r0
   00F1 B6 00 02            274 	cjne	@r0,#0x00,00150$
   00F4 08                  275 	inc	r0
   00F5 06                  276 	inc	@r0
   00F6                     277 00150$:
   00F6 D0 04               278 	pop	ar4
   00F8 80 9C               279 	sjmp	00115$
   00FA                     280 00117$:
                            281 ;	_atoi.c:51: return (sign ? -rv : rv);
   00FA EC                  282 	mov	a,r4
   00FB 60 09               283 	jz	00120$
   00FD C3                  284 	clr	c
   00FE E4                  285 	clr	a
   00FF 9D                  286 	subb	a,r5
   0100 FA                  287 	mov	r2,a
   0101 E4                  288 	clr	a
   0102 9E                  289 	subb	a,r6
   0103 FB                  290 	mov	r3,a
   0104 80 04               291 	sjmp	00121$
   0106                     292 00120$:
   0106 8D 02               293 	mov	ar2,r5
   0108 8E 03               294 	mov	ar3,r6
   010A                     295 00121$:
   010A 8A 82               296 	mov	dpl,r2
   010C 8B 83               297 	mov	dph,r3
   010E 85*00 81            298 	mov	sp,_bp
   0111 D0*00               299 	pop	_bp
   0113 22                  300 	ret
                            301 	.area CSEG    (CODE)
                            302 	.area CONST   (CODE)
                            303 	.area XINIT   (CODE)
                            304 	.area CABS    (ABS,CODE)
