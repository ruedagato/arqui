                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:31 2015
                              5 ;--------------------------------------------------------
                              6 	.module _memchr
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _memchr
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in internal ram 
                             34 ;--------------------------------------------------------
                             35 	.area OSEG    (OVR,DATA)
                             36 ;--------------------------------------------------------
                             37 ; indirectly addressable internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area ISEG    (DATA)
                             40 ;--------------------------------------------------------
                             41 ; absolute internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area IABS    (ABS,DATA)
                             44 	.area IABS    (ABS,DATA)
                             45 ;--------------------------------------------------------
                             46 ; bit data
                             47 ;--------------------------------------------------------
                             48 	.area BSEG    (BIT)
                             49 ;--------------------------------------------------------
                             50 ; paged external ram data
                             51 ;--------------------------------------------------------
                             52 	.area PSEG    (PAG,XDATA)
                             53 ;--------------------------------------------------------
                             54 ; external ram data
                             55 ;--------------------------------------------------------
                             56 	.area XSEG    (XDATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XABS    (ABS,XDATA)
                             61 ;--------------------------------------------------------
                             62 ; external initialized ram data
                             63 ;--------------------------------------------------------
                             64 	.area XISEG   (XDATA)
                             65 	.area HOME    (CODE)
                             66 	.area GSINIT0 (CODE)
                             67 	.area GSINIT1 (CODE)
                             68 	.area GSINIT2 (CODE)
                             69 	.area GSINIT3 (CODE)
                             70 	.area GSINIT4 (CODE)
                             71 	.area GSINIT5 (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area CSEG    (CODE)
                             75 ;--------------------------------------------------------
                             76 ; global & static initialisations
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT  (CODE)
                             80 	.area GSFINAL (CODE)
                             81 	.area GSINIT  (CODE)
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area HOME    (CODE)
                             86 	.area HOME    (CODE)
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area CSEG    (CODE)
                             91 ;------------------------------------------------------------
                             92 ;Allocation info for local variables in function 'memchr'
                             93 ;------------------------------------------------------------
                             94 ;c                         Allocated to stack - offset -4
                             95 ;n                         Allocated to stack - offset -6
                             96 ;s                         Allocated to stack - offset 1
                             97 ;p                         Allocated to registers r5 r6 r7 
                             98 ;end                       Allocated to stack - offset 4
                             99 ;------------------------------------------------------------
                            100 ;	_memchr.c:31: void *memchr(const void *s, int c, size_t n)
                            101 ;	-----------------------------------------
                            102 ;	 function memchr
                            103 ;	-----------------------------------------
   0000                     104 _memchr:
                    0002    105 	ar2 = 0x02
                    0003    106 	ar3 = 0x03
                    0004    107 	ar4 = 0x04
                    0005    108 	ar5 = 0x05
                    0006    109 	ar6 = 0x06
                    0007    110 	ar7 = 0x07
                    0000    111 	ar0 = 0x00
                    0001    112 	ar1 = 0x01
   0000 C0*00               113 	push	_bp
   0002 85 81*00            114 	mov	_bp,sp
   0005 C0 82               115 	push	dpl
   0007 C0 83               116 	push	dph
   0009 C0 F0               117 	push	b
   000B 05 81               118 	inc	sp
   000D 05 81               119 	inc	sp
   000F 05 81               120 	inc	sp
                            121 ;	_memchr.c:33: unsigned char *p = (unsigned char *)s;
   0011 A8*00               122 	mov	r0,_bp
   0013 08                  123 	inc	r0
   0014 86 05               124 	mov	ar5,@r0
   0016 08                  125 	inc	r0
   0017 86 06               126 	mov	ar6,@r0
   0019 08                  127 	inc	r0
   001A 86 07               128 	mov	ar7,@r0
                            129 ;	_memchr.c:34: unsigned char *end = p + n;
   001C A8*00               130 	mov	r0,_bp
   001E 08                  131 	inc	r0
   001F E5*00               132 	mov	a,_bp
   0021 24 FA               133 	add	a,#0xfa
   0023 F9                  134 	mov	r1,a
   0024 E7                  135 	mov	a,@r1
   0025 26                  136 	add	a,@r0
   0026 FA                  137 	mov	r2,a
   0027 09                  138 	inc	r1
   0028 E7                  139 	mov	a,@r1
   0029 08                  140 	inc	r0
   002A 36                  141 	addc	a,@r0
   002B FB                  142 	mov	r3,a
   002C 08                  143 	inc	r0
   002D 86 04               144 	mov	ar4,@r0
   002F E5*00               145 	mov	a,_bp
   0031 24 04               146 	add	a,#0x04
   0033 F8                  147 	mov	r0,a
   0034 A6 02               148 	mov	@r0,ar2
   0036 08                  149 	inc	r0
   0037 A6 03               150 	mov	@r0,ar3
   0039 08                  151 	inc	r0
   003A A6 04               152 	mov	@r0,ar4
                            153 ;	_memchr.c:38: return(0);
   003C A8*00               154 	mov	r0,_bp
   003E 08                  155 	inc	r0
   003F 86 02               156 	mov	ar2,@r0
   0041 08                  157 	inc	r0
   0042 86 03               158 	mov	ar3,@r0
   0044 08                  159 	inc	r0
   0045 86 04               160 	mov	ar4,@r0
   0047                     161 00103$:
                            162 ;	_memchr.c:35: for(; p != end; p++)
   0047 E5*00               163 	mov	a,_bp
   0049 24 04               164 	add	a,#0x04
   004B F8                  165 	mov	r0,a
   004C E6                  166 	mov	a,@r0
   004D B5 02 0C            167 	cjne	a,ar2,00112$
   0050 08                  168 	inc	r0
   0051 E6                  169 	mov	a,@r0
   0052 B5 03 07            170 	cjne	a,ar3,00112$
   0055 08                  171 	inc	r0
   0056 E6                  172 	mov	a,@r0
   0057 B5 04 02            173 	cjne	a,ar4,00112$
   005A 80 45               174 	sjmp	00106$
   005C                     175 00112$:
                            176 ;	_memchr.c:36: if(*p == c)
   005C C0 05               177 	push	ar5
   005E C0 06               178 	push	ar6
   0060 C0 07               179 	push	ar7
   0062 8A 82               180 	mov	dpl,r2
   0064 8B 83               181 	mov	dph,r3
   0066 8C F0               182 	mov	b,r4
   0068 12s00r00            183 	lcall	__gptrget
   006B FD                  184 	mov	r5,a
   006C 7E 00               185 	mov	r6,#0x00
   006E E5*00               186 	mov	a,_bp
   0070 24 FC               187 	add	a,#0xfc
   0072 F8                  188 	mov	r0,a
   0073 E6                  189 	mov	a,@r0
   0074 B5 05 07            190 	cjne	a,ar5,00113$
   0077 08                  191 	inc	r0
   0078 E6                  192 	mov	a,@r0
   0079 B5 06 02            193 	cjne	a,ar6,00113$
   007C 80 08               194 	sjmp	00114$
   007E                     195 00113$:
   007E D0 07               196 	pop	ar7
   0080 D0 06               197 	pop	ar6
   0082 D0 05               198 	pop	ar5
   0084 80 0E               199 	sjmp	00105$
   0086                     200 00114$:
   0086 D0 07               201 	pop	ar7
   0088 D0 06               202 	pop	ar6
   008A D0 05               203 	pop	ar5
                            204 ;	_memchr.c:37: return((void *)p);
   008C 8D 82               205 	mov	dpl,r5
   008E 8E 83               206 	mov	dph,r6
   0090 8F F0               207 	mov	b,r7
   0092 80 13               208 	sjmp	00107$
   0094                     209 00105$:
                            210 ;	_memchr.c:35: for(; p != end; p++)
   0094 0A                  211 	inc	r2
   0095 BA 00 01            212 	cjne	r2,#0x00,00115$
   0098 0B                  213 	inc	r3
   0099                     214 00115$:
   0099 8A 05               215 	mov	ar5,r2
   009B 8B 06               216 	mov	ar6,r3
   009D 8C 07               217 	mov	ar7,r4
   009F 80 A6               218 	sjmp	00103$
   00A1                     219 00106$:
                            220 ;	_memchr.c:38: return(0);
   00A1 90 00 00            221 	mov	dptr,#0x0000
   00A4 75 F0 00            222 	mov	b,#0x00
   00A7                     223 00107$:
   00A7 85*00 81            224 	mov	sp,_bp
   00AA D0*00               225 	pop	_bp
   00AC 22                  226 	ret
                            227 	.area CSEG    (CODE)
                            228 	.area CONST   (CODE)
                            229 	.area XINIT   (CODE)
                            230 	.area CABS    (ABS,CODE)
