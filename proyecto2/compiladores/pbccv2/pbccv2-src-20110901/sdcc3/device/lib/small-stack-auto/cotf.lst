                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:30 2015
                              5 ;--------------------------------------------------------
                              6 	.module cotf
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _cotf
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; overlayable bit register bank
                             30 ;--------------------------------------------------------
                             31 	.area BIT_BANK	(REL,OVR,DATA)
   0000                      32 bits:
   0000                      33 	.ds 1
                    8000     34 	b0 = bits[0]
                    8100     35 	b1 = bits[1]
                    8200     36 	b2 = bits[2]
                    8300     37 	b3 = bits[3]
                    8400     38 	b4 = bits[4]
                    8500     39 	b5 = bits[5]
                    8600     40 	b6 = bits[6]
                    8700     41 	b7 = bits[7]
                             42 ;--------------------------------------------------------
                             43 ; internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area DSEG    (DATA)
                             46 ;--------------------------------------------------------
                             47 ; overlayable items in internal ram 
                             48 ;--------------------------------------------------------
                             49 	.area OSEG    (OVR,DATA)
                             50 ;--------------------------------------------------------
                             51 ; indirectly addressable internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area ISEG    (DATA)
                             54 ;--------------------------------------------------------
                             55 ; absolute internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area IABS    (ABS,DATA)
                             58 	.area IABS    (ABS,DATA)
                             59 ;--------------------------------------------------------
                             60 ; bit data
                             61 ;--------------------------------------------------------
                             62 	.area BSEG    (BIT)
                             63 ;--------------------------------------------------------
                             64 ; paged external ram data
                             65 ;--------------------------------------------------------
                             66 	.area PSEG    (PAG,XDATA)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                             71 ;--------------------------------------------------------
                             72 ; absolute external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XABS    (ABS,XDATA)
                             75 ;--------------------------------------------------------
                             76 ; external initialized ram data
                             77 ;--------------------------------------------------------
                             78 	.area XISEG   (XDATA)
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT0 (CODE)
                             81 	.area GSINIT1 (CODE)
                             82 	.area GSINIT2 (CODE)
                             83 	.area GSINIT3 (CODE)
                             84 	.area GSINIT4 (CODE)
                             85 	.area GSINIT5 (CODE)
                             86 	.area GSINIT  (CODE)
                             87 	.area GSFINAL (CODE)
                             88 	.area CSEG    (CODE)
                             89 ;--------------------------------------------------------
                             90 ; global & static initialisations
                             91 ;--------------------------------------------------------
                             92 	.area HOME    (CODE)
                             93 	.area GSINIT  (CODE)
                             94 	.area GSFINAL (CODE)
                             95 	.area GSINIT  (CODE)
                             96 ;--------------------------------------------------------
                             97 ; Home
                             98 ;--------------------------------------------------------
                             99 	.area HOME    (CODE)
                            100 	.area HOME    (CODE)
                            101 ;--------------------------------------------------------
                            102 ; code
                            103 ;--------------------------------------------------------
                            104 	.area CSEG    (CODE)
                            105 ;------------------------------------------------------------
                            106 ;Allocation info for local variables in function 'cotf'
                            107 ;------------------------------------------------------------
                            108 ;x                         Allocated to registers r2 r3 r4 r5 
                            109 ;y                         Allocated to stack - offset 1
                            110 ;------------------------------------------------------------
                            111 ;	cotf.c:37: float cotf(const float x) _FLOAT_FUNC_REENTRANT
                            112 ;	-----------------------------------------
                            113 ;	 function cotf
                            114 ;	-----------------------------------------
   0000                     115 _cotf:
                    0002    116 	ar2 = 0x02
                    0003    117 	ar3 = 0x03
                    0004    118 	ar4 = 0x04
                    0005    119 	ar5 = 0x05
                    0006    120 	ar6 = 0x06
                    0007    121 	ar7 = 0x07
                    0000    122 	ar0 = 0x00
                    0001    123 	ar1 = 0x01
   0000 C0*00               124 	push	_bp
   0002 85 81*00            125 	mov	_bp,sp
   0005 AA 82               126 	mov	r2,dpl
   0007 AB 83               127 	mov	r3,dph
   0009 AC F0               128 	mov	r4,b
   000B FD                  129 	mov	r5,a
   000C E5 81               130 	mov	a,sp
   000E 24 04               131 	add	a,#0x04
   0010 F5 81               132 	mov	sp,a
                            133 ;	cotf.c:41: y=fabsf(x);
   0012 8A 82               134 	mov	dpl,r2
   0014 8B 83               135 	mov	dph,r3
   0016 8C F0               136 	mov	b,r4
   0018 ED                  137 	mov	a,r5
   0019 C0 02               138 	push	ar2
   001B C0 03               139 	push	ar3
   001D C0 04               140 	push	ar4
   001F C0 05               141 	push	ar5
   0021 12s00r00            142 	lcall	_fabsf
   0024 A8*00               143 	mov	r0,_bp
   0026 08                  144 	inc	r0
   0027 A6 82               145 	mov	@r0,dpl
   0029 08                  146 	inc	r0
   002A A6 83               147 	mov	@r0,dph
   002C 08                  148 	inc	r0
   002D A6 F0               149 	mov	@r0,b
   002F 08                  150 	inc	r0
   0030 F6                  151 	mov	@r0,a
   0031 A8*00               152 	mov	r0,_bp
   0033 08                  153 	inc	r0
                            154 ;	cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
   0034 74 60               155 	mov	a,#0x60
   0036 C0 E0               156 	push	acc
   0038 74 42               157 	mov	a,#0x42
   003A C0 E0               158 	push	acc
   003C 74 A2               159 	mov	a,#0xA2
   003E C0 E0               160 	push	acc
   0040 74 0D               161 	mov	a,#0x0D
   0042 C0 E0               162 	push	acc
   0044 A8*00               163 	mov	r0,_bp
   0046 08                  164 	inc	r0
   0047 86 82               165 	mov	dpl,@r0
   0049 08                  166 	inc	r0
   004A 86 83               167 	mov	dph,@r0
   004C 08                  168 	inc	r0
   004D 86 F0               169 	mov	b,@r0
   004F 08                  170 	inc	r0
   0050 E6                  171 	mov	a,@r0
   0051 12s00r00            172 	lcall	___fslt
   0054 AE 82               173 	mov	r6,dpl
   0056 E5 81               174 	mov	a,sp
   0058 24 FC               175 	add	a,#0xfc
   005A F5 81               176 	mov	sp,a
   005C D0 05               177 	pop	ar5
   005E D0 04               178 	pop	ar4
   0060 D0 03               179 	pop	ar3
   0062 D0 02               180 	pop	ar2
   0064 EE                  181 	mov	a,r6
   0065 60 36               182 	jz	00105$
                            183 ;	cotf.c:44: errno = ERANGE;
   0067 75*00 22            184 	mov	_errno,#0x22
                            185 ;	cotf.c:45: if (x<0.0)
   006A E4                  186 	clr	a
   006B F5*01               187 	mov	(_errno + 1),a
   006D C0 E0               188 	push	acc
   006F C0 E0               189 	push	acc
   0071 C0 E0               190 	push	acc
   0073 C0 E0               191 	push	acc
   0075 8A 82               192 	mov	dpl,r2
   0077 8B 83               193 	mov	dph,r3
   0079 8C F0               194 	mov	b,r4
   007B ED                  195 	mov	a,r5
   007C 12s00r00            196 	lcall	___fslt
   007F AE 82               197 	mov	r6,dpl
   0081 E5 81               198 	mov	a,sp
   0083 24 FC               199 	add	a,#0xfc
   0085 F5 81               200 	mov	sp,a
   0087 EE                  201 	mov	a,r6
   0088 60 0A               202 	jz	00102$
                            203 ;	cotf.c:46: return -HUGE_VALF;
   008A 90 FF FF            204 	mov	dptr,#0xFFFF
   008D 75 F0 7F            205 	mov	b,#0x7F
   0090 74 FF               206 	mov	a,#0xFF
   0092 80 1F               207 	sjmp	00106$
   0094                     208 00102$:
                            209 ;	cotf.c:48: return +HUGE_VALF;
   0094 90 FF FF            210 	mov	dptr,#0xFFFF
   0097 74 7F               211 	mov	a,#0x7F
   0099 F5 F0               212 	mov	b,a
   009B 80 16               213 	sjmp	00106$
   009D                     214 00105$:
                            215 ;	cotf.c:50: return tancotf(x, 1);
   009D D2 F0               216 	setb	b[0]
   009F 85 F0*00            217 	mov	bits,b
   00A2 8A 82               218 	mov	dpl,r2
   00A4 8B 83               219 	mov	dph,r3
   00A6 8C F0               220 	mov	b,r4
   00A8 ED                  221 	mov	a,r5
   00A9 12s00r00            222 	lcall	_tancotf
   00AC AA 82               223 	mov	r2,dpl
   00AE AB 83               224 	mov	r3,dph
   00B0 AC F0               225 	mov	r4,b
   00B2 FD                  226 	mov	r5,a
   00B3                     227 00106$:
   00B3 85*00 81            228 	mov	sp,_bp
   00B6 D0*00               229 	pop	_bp
   00B8 22                  230 	ret
                            231 	.area CSEG    (CODE)
                            232 	.area CONST   (CODE)
                            233 	.area XINIT   (CODE)
                            234 	.area CABS    (ABS,CODE)
