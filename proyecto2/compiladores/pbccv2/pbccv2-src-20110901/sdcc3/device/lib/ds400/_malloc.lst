                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:19 2015
                              5 ;--------------------------------------------------------
                              6 	.module _malloc
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl __sdcc_first_memheader
                             31 	.globl _malloc
                             32 ;--------------------------------------------------------
                             33 ; special function registers
                             34 ;--------------------------------------------------------
                             35 ;--------------------------------------------------------
                             36 ; special function bits
                             37 ;--------------------------------------------------------
                             38 ;--------------------------------------------------------
                             39 ; overlayable register banks
                             40 ;--------------------------------------------------------
                             41 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      42 	.ds 8
                             43 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                      44 	.ds 8
                             45 ;--------------------------------------------------------
                             46 ; internal ram data
                             47 ;--------------------------------------------------------
                             48 	.area DSEG    (DATA)
                             49 ;--------------------------------------------------------
                             50 ; overlayable items in internal ram 
                             51 ;--------------------------------------------------------
                             52 	.area OSEG    (OVR,DATA)
                             53 ;--------------------------------------------------------
                             54 ; indirectly addressable internal ram data
                             55 ;--------------------------------------------------------
                             56 	.area ISEG    (DATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute internal ram data
                             59 ;--------------------------------------------------------
                             60 	.area IABS    (ABS,DATA)
                             61 	.area IABS    (ABS,DATA)
                             62 ;--------------------------------------------------------
                             63 ; bit data
                             64 ;--------------------------------------------------------
                             65 	.area BSEG    (BIT)
                             66 ;--------------------------------------------------------
                             67 ; paged external ram data
                             68 ;--------------------------------------------------------
                             69 	.area PSEG    (PAG,XDATA)
                             70 ;--------------------------------------------------------
                             71 ; external ram data
                             72 ;--------------------------------------------------------
                             73 	.area XSEG    (XDATA)
   0000                      74 _malloc_size_1_1:
   0000                      75 	.ds 2
   0002                      76 _malloc_current_header_1_1:
   0002                      77 	.ds 3
   0005                      78 _malloc_new_header_1_1:
   0005                      79 	.ds 3
                             80 ;--------------------------------------------------------
                             81 ; absolute external ram data
                             82 ;--------------------------------------------------------
                             83 	.area XABS    (ABS,XDATA)
                             84 ;--------------------------------------------------------
                             85 ; external initialized ram data
                             86 ;--------------------------------------------------------
                             87 	.area XISEG   (XDATA)
   0000                      88 __sdcc_first_memheader::
   0000                      89 	.ds 3
                             90 ;--------------------------------------------------------
                             91 ; global & static initialisations
                             92 ;--------------------------------------------------------
                             93 	.area HOME    (CODE)
                             94 	.area GSINIT  (CODE)
                             95 	.area GSFINAL (CODE)
                             96 	.area GSINIT  (CODE)
                             97 ;--------------------------------------------------------
                             98 ; Home
                             99 ;--------------------------------------------------------
                            100 	.area HOME    (CODE)
                            101 	.area HOME    (CODE)
                            102 ;--------------------------------------------------------
                            103 ; code
                            104 ;--------------------------------------------------------
                            105 	.area CSEG    (CODE)
                            106 ;------------------------------------------------------------
                            107 ;Allocation info for local variables in function 'init_dynamic_memory'
                            108 ;------------------------------------------------------------
                            109 ;heap                      Allocated to registers r2 r3 r4 
                            110 ;size                      Allocated to registers r5 r6 
                            111 ;------------------------------------------------------------
                            112 ;	_malloc.c:166: static void init_dynamic_memory(void)
                            113 ;	-----------------------------------------
                            114 ;	 function init_dynamic_memory
                            115 ;	-----------------------------------------
   0000                     116 _init_dynamic_memory:
                    0002    117 	ar2 = 0x02
                    0003    118 	ar3 = 0x03
                    0004    119 	ar4 = 0x04
                    0005    120 	ar5 = 0x05
                    0006    121 	ar6 = 0x06
                    0007    122 	ar7 = 0x07
                    0000    123 	ar0 = 0x00
                    0001    124 	ar1 = 0x01
                            125 ;	_malloc.c:168: char __xdata * heap = (char __xdata *)_sdcc_heap;
                            126 ;	genAssign: resultIsFar = TRUE
   0000 05 86               127 	inc	dps
   0002 90s00r00r00         128 	mov	dptr,#__sdcc_heap
   0006 15 86               129 	dec	dps
                            130 ;	_malloc.c:169: unsigned int size = _sdcc_heap_size;
   0008 90s00r00r00         131 	mov	dptr,#__sdcc_heap_size
                            132 ;	genAssign: resultIsFar = TRUE
   000C E4                  133 	clr	a
   000D 93                  134 	movc	a,@a+dptr
   000E FD                  135 	mov	r5,a
   000F A3                  136 	inc	dptr
   0010 E4                  137 	clr	a
   0011 93                  138 	movc	a,@a+dptr
   0012 FE                  139 	mov	r6,a
                            140 ;	_malloc.c:171: if ( !heap ) //Reserved memory starts at 0x0000 but that's NULL...
   0013 E5 84               141 	mov	a,dpl1
   0015 45 85               142 	orl	a,dph1
   0017 45 95               143 	orl	a,dpx1
   0019 70 13               144 	jnz  00102$
   001B                     145 00106$:
                            146 ;	_malloc.c:173: heap++;
   001B 75 86 01            147 	mov	dps,#0x01
   001E A3                  148 	inc	dptr
   001F 75 86 00            149 	mov	dps,#0
                            150 ;	_malloc.c:174: size--;
   0022 ED                  151 	mov	a,r5
   0023 24 FF               152 	add	a,#0xFF
   0025 FF                  153 	mov	r7,a
   0026 EE                  154 	mov	a,r6
   0027 34 FF               155 	addc	a,#0xFF
   0029 F8                  156 	mov	r0,a
                            157 ;	genAssign: resultIsFar = TRUE
   002A 8F 05               158 	mov	ar5,r7
   002C 88 06               159 	mov	ar6,r0
   002E                     160 00102$:
                            161 ;	_malloc.c:176: _sdcc_first_memheader = (MEMHEADER __xdata * ) heap;
                            162 ;	genAssign: resultIsFar = TRUE
   002E 90s00r00r00         163 	mov	dptr,#__sdcc_first_memheader
   0032 E5 84               164 	mov	a,dpl1
   0034 F0                  165 	movx	@dptr,a
   0035 A3                  166 	inc	dptr
   0036 E5 85               167 	mov	a,dph1
   0038 F0                  168 	movx	@dptr,a
   0039 A3                  169 	inc	dptr
   003A E5 95               170 	mov	a,dpx1
   003C F0                  171 	movx	@dptr,a
                            172 ;	_malloc.c:178: _sdcc_first_memheader->next = (MEMHEADER __xdata * )(heap + size - sizeof(MEMHEADER __xdata *));
   003D ED                  173 	mov	a,r5
   003E 25 84               174 	add	a,dpl1
   0040 FD                  175 	mov	r5,a
   0041 EE                  176 	mov	a,r6
   0042 35 85               177 	addc	a,dph1
   0044 FE                  178 	mov	r6,a
   0045 E4                  179 	clr	a
   0046 35 95               180 	addc	a,dpx1
   0048 FF                  181 	mov	r7,a
   0049 ED                  182 	mov	a,r5
   004A 24 FD               183 	add	a,#0xFD
   004C FD                  184 	mov	r5,a
   004D EE                  185 	mov	a,r6
   004E 34 FF               186 	addc	a,#0xFF
   0050 FE                  187 	mov	r6,a
   0051 EF                  188 	mov	a,r7
   0052 34 FF               189 	addc	a,#0xFF
   0054 FF                  190 	mov	r7,a
   0055 ED                  191 	mov	a,r5
   0056 05 86               192 	inc	dps
   0058 F0                  193 	movx	@dptr,a
   0059 A3                  194 	inc	dptr
   005A EE                  195 	mov	a,r6
   005B F0                  196 	movx	@dptr,a
   005C A3                  197 	inc	dptr
   005D EF                  198 	mov	a,r7
   005E F0                  199 	movx	@dptr,a
   005F 75 86 01            200 	mov     dps, #1
   0062 12s00r00r00         201 	lcall	__decdptr
   0066 12s00r00r00         202 	lcall	__decdptr
   006A 75 86 00            203 	mov	dps,#0
                            204 ;	_malloc.c:179: _sdcc_first_memheader->next->next = (MEMHEADER __xdata * ) NULL; //And mark it as last
   006D 8D 82               205 	mov	dpl,r5
   006F 8E 83               206 	mov	dph,r6
   0071 8F 93               207 	mov	dpx,r7
   0073 E4                  208 	clr  a
   0074 F0                  209 	movx @dptr,a
   0075 A3                  210 	inc  dptr
   0076 F0                  211 	movx @dptr,a
   0077 A3                  212 	inc	dptr
   0078 E4                  213 	clr  a
   0079 F0                  214 	movx	@dptr,a
                            215 ;	_malloc.c:180: _sdcc_first_memheader->len        = 0;    //Empty and ready.
   007A 85 95 93            216 	mov	dpx,dpx1
   007D 85 85 83            217 	mov	dph,dph1
   0080 85 84 82            218 	mov	dpl,dpl1
   0083 A3                  219 	inc	dptr
   0084 A3                  220 	inc	dptr
   0085 A3                  221 	inc	dptr
   0086 E4                  222 	clr  a
   0087 F0                  223 	movx @dptr,a
   0088 A3                  224 	inc  dptr
   0089 F0                  225 	movx @dptr,a
   008A                     226 00103$:
   008A 22                  227 	ret
                            228 ;------------------------------------------------------------
                            229 ;Allocation info for local variables in function 'malloc'
                            230 ;------------------------------------------------------------
                            231 ;size                      Allocated with name '_malloc_size_1_1'
                            232 ;current_header            Allocated with name '_malloc_current_header_1_1'
                            233 ;new_header                Allocated with name '_malloc_new_header_1_1'
                            234 ;ret                       Allocated to registers r2 r3 r4 
                            235 ;------------------------------------------------------------
                            236 ;	_malloc.c:183: void __xdata * malloc (unsigned int size)
                            237 ;	-----------------------------------------
                            238 ;	 function malloc
                            239 ;	-----------------------------------------
   008B                     240 _malloc:
   008B 75 86 01            241 	mov     dps, #1
   008E 90s00r00r00         242 	mov     dptr, #_malloc_size_1_1
   0092 E5 82               243 	mov	a,dpl
   0094 F0                  244 	movx	@dptr,a
   0095 A3                  245 	inc	dptr
   0096 E5 83               246 	mov	a,dph
   0098 F0                  247 	movx	@dptr,a
   0099 75 86 00            248 	mov	dps,#0
                            249 ;	_malloc.c:189: if (size>(0xFFFF-HEADER_SIZE))
   009C 90s00r00r00         250 	mov	dptr,#_malloc_size_1_1
   00A0 C3                  251 	clr	c
   00A1 74 FA               252 	mov	a,#0xFA
   00A3 C5 F0               253 	xch	a, b
   00A5 E0                  254 	movx	a,@dptr
   00A6 C5 F0               255 	xch	a, b
   00A8 95 F0               256 	subb	a,b
   00AA 74 FF               257 	mov	a,#0xFF
   00AC C5 F0               258 	xch	a, b
   00AE A3                  259 	inc	dptr
   00AF E0                  260 	movx	a,@dptr
   00B0 C5 F0               261 	xch	a, b
   00B2 95 F0               262 	subb	a,b
   00B4 50 08               263 	jnc  00102$
   00B6                     264 00126$:
                            265 ;	_malloc.c:190: return (void __xdata *) NULL; //To prevent overflow in next line
   00B6 90 00 00 00         266 	mov  dptr,#0x0000
   00BA 02s00r02rD5         267 	ljmp	00117$
   00BE                     268 00102$:
                            269 ;	_malloc.c:191: size += HEADER_SIZE; //We need a memory for header too
   00BE 90s00r00r00         270 	mov	dptr,#_malloc_size_1_1
   00C2 E0                  271 	movx	a,@dptr
   00C3 24 05               272 	add	a,#0x05
   00C5 F0                  273 	movx	@dptr,a
   00C6 A3                  274 	inc	dptr
   00C7 E0                  275 	movx	a,@dptr
   00C8 34 00               276 	addc	a,#0x00
   00CA F0                  277 	movx	@dptr,a
                            278 ;	_malloc.c:193: if (!_sdcc_first_memheader)
   00CB 90s00r00r00         279 	mov	dptr,#__sdcc_first_memheader
                            280 ;	genAssign: resultIsFar = FALSE
   00CF E0                  281 	movx	a,@dptr
   00D0 FC                  282 	mov	r4,a
   00D1 A3                  283 	inc	dptr
   00D2 E0                  284 	movx	a,@dptr
   00D3 FD                  285 	mov	r5,a
   00D4 A3                  286 	inc	dptr
   00D5 E0                  287 	movx	a,@dptr
   00D6 FE                  288 	mov	r6,a
   00D7 EC                  289 	mov	a,r4
   00D8 4D                  290 	orl	a,r5
   00D9 4E                  291 	orl	a,r6
   00DA 70 04               292 	jnz  00104$
   00DC                     293 00127$:
                            294 ;	_malloc.c:194: init_dynamic_memory();
   00DC 12s00r00r00         295 	lcall	_init_dynamic_memory
   00E0                     296 00104$:
                            297 ;	_malloc.c:196: current_header = _sdcc_first_memheader;
   00E0 90s00r00r00         298 	mov	dptr,#__sdcc_first_memheader
                            299 ;	genAssign: resultIsFar = FALSE
   00E4 E0                  300 	movx	a,@dptr
   00E5 FC                  301 	mov	r4,a
   00E6 A3                  302 	inc	dptr
   00E7 E0                  303 	movx	a,@dptr
   00E8 FD                  304 	mov	r5,a
   00E9 A3                  305 	inc	dptr
   00EA E0                  306 	movx	a,@dptr
   00EB FE                  307 	mov	r6,a
                            308 ;	genAssign: resultIsFar = TRUE
   00EC 90s00r00r02         309 	mov	dptr,#_malloc_current_header_1_1
   00F0 EC                  310 	mov	a,r4
   00F1 F0                  311 	movx	@dptr,a
   00F2 A3                  312 	inc	dptr
   00F3 ED                  313 	mov	a,r5
   00F4 F0                  314 	movx	@dptr,a
   00F5 A3                  315 	inc	dptr
   00F6 EE                  316 	mov	a,r6
   00F7 F0                  317 	movx	@dptr,a
                            318 ;	_malloc.c:199: while (1)
   00F8                     319 00110$:
                            320 ;	_malloc.c:209: if ((((unsigned int)current_header->next) -
   00F8 90s00r00r02         321 	mov	dptr,#_malloc_current_header_1_1
   00FC E0                  322 	movx	a,@dptr
   00FD C0 E0               323 	push	acc
   00FF A3                  324 	inc	dptr
   0100 E0                  325 	movx	a,@dptr
   0101 C0 E0               326 	push	acc
   0103 A3                  327 	inc	dptr
   0104 E0                  328 	movx	a,@dptr
   0105 F5 93               329 	mov	dpx,a
   0107 D0 83               330 	pop	dph
   0109 D0 82               331 	pop	dpl
   010B E0                  332 	movx	a,@dptr
   010C A3                  333 	inc	dptr
   010D FF                  334 	mov	r7,a
   010E E0                  335 	movx	a,@dptr
   010F A3                  336 	inc	dptr
   0110 F8                  337 	mov	r0,a
   0111 E0                  338 	movx	a,@dptr
   0112 F9                  339 	mov	r1,a
   0113 8F 02               340 	mov	ar2,r7
   0115 88 03               341 	mov	ar3,r0
                            342 ;	_malloc.c:210: ((unsigned int)current_header) -
   0117 90s00r00r02         343 	mov	dptr,#_malloc_current_header_1_1
                            344 ;	genAssign: resultIsFar = FALSE
   011B E0                  345 	movx	a,@dptr
   011C FC                  346 	mov	r4,a
   011D A3                  347 	inc	dptr
   011E E0                  348 	movx	a,@dptr
   011F FD                  349 	mov	r5,a
   0120 A3                  350 	inc	dptr
   0121 E0                  351 	movx	a,@dptr
   0122 FE                  352 	mov	r6,a
   0123 C3                  353 	clr	c
   0124 EA                  354 	mov	a,r2
   0125 9C                  355 	subb	a,r4
   0126 FA                  356 	mov	r2,a
   0127 EB                  357 	mov	a,r3
   0128 9D                  358 	subb	a,r5
   0129 FB                  359 	mov	r3,a
                            360 ;	_malloc.c:211: current_header->len) >= size)
   012A 90s00r00r02         361 	mov	dptr,#_malloc_current_header_1_1
   012E E0                  362 	movx	a,@dptr
   012F 24 03               363 	add	a,#0x03
   0131 F5 84               364 	mov	dpl1,a
   0133 A3                  365 	inc	dptr
   0134 E0                  366 	movx	a,@dptr
   0135 34 00               367 	addc	a,#0x00
   0137 F5 85               368 	mov	dph1,a
   0139 A3                  369 	inc	dptr
   013A E0                  370 	movx	a,@dptr
   013B 34 00               371 	addc	a,#0x00
   013D F5 95               372 	mov	dpx1,a
   013F 05 86               373 	inc	dps
   0141 E0                  374 	movx	a,@dptr
   0142 A3                  375 	inc	dptr
   0143 FC                  376 	mov	r4,a
   0144 E0                  377 	movx	a,@dptr
   0145 FD                  378 	mov	r5,a
   0146 75 86 01            379 	mov     dps, #1
   0149 12s00r00r00         380 	lcall	__decdptr
   014D 75 86 00            381 	mov	dps,#0
   0150 C3                  382 	clr	c
   0151 EA                  383 	mov	a,r2
   0152 9C                  384 	subb	a,r4
   0153 FA                  385 	mov	r2,a
   0154 EB                  386 	mov	a,r3
   0155 9D                  387 	subb	a,r5
   0156 FB                  388 	mov	r3,a
   0157 90s00r00r00         389 	mov	dptr,#_malloc_size_1_1
   015B C3                  390 	clr	c
   015C EA                  391 	mov	a,r2
   015D C5 F0               392 	xch	a, b
   015F E0                  393 	movx	a,@dptr
   0160 C5 F0               394 	xch	a, b
   0162 95 F0               395 	subb	a,b
   0164 EB                  396 	mov	a,r3
   0165 C5 F0               397 	xch	a, b
   0167 A3                  398 	inc	dptr
   0168 E0                  399 	movx	a,@dptr
   0169 C5 F0               400 	xch	a, b
   016B 95 F0               401 	subb	a,b
   016D 40 14               402 	jc   00106$
   016F                     403 00128$:
                            404 ;	_malloc.c:213: ret = current_header->mem;
   016F 90s00r00r02         405 	mov	dptr,#_malloc_current_header_1_1
   0173 E0                  406 	movx	a,@dptr
   0174 24 05               407 	add	a,#0x05
   0176 FA                  408 	mov	r2,a
   0177 A3                  409 	inc	dptr
   0178 E0                  410 	movx	a,@dptr
   0179 34 00               411 	addc	a,#0x00
   017B FB                  412 	mov	r3,a
   017C A3                  413 	inc	dptr
   017D E0                  414 	movx	a,@dptr
   017E 34 00               415 	addc	a,#0x00
   0180 FC                  416 	mov	r4,a
                            417 ;	_malloc.c:214: break;
   0181 80 36               418 	sjmp 00111$
   0183                     419 00106$:
                            420 ;	_malloc.c:216: current_header = current_header->next;    //else try next
                            421 ;	genAssign: resultIsFar = TRUE
   0183 90s00r00r02         422 	mov	dptr,#_malloc_current_header_1_1
   0187 EF                  423 	mov	a,r7
   0188 F0                  424 	movx	@dptr,a
   0189 A3                  425 	inc	dptr
   018A E8                  426 	mov	a,r0
   018B F0                  427 	movx	@dptr,a
   018C A3                  428 	inc	dptr
   018D E9                  429 	mov	a,r1
   018E F0                  430 	movx	@dptr,a
                            431 ;	_malloc.c:217: if (!current_header->next)
   018F 90s00r00r02         432 	mov	dptr,#_malloc_current_header_1_1
   0193 E0                  433 	movx	a,@dptr
   0194 C0 E0               434 	push	acc
   0196 A3                  435 	inc	dptr
   0197 E0                  436 	movx	a,@dptr
   0198 C0 E0               437 	push	acc
   019A A3                  438 	inc	dptr
   019B E0                  439 	movx	a,@dptr
   019C F5 93               440 	mov	dpx,a
   019E D0 83               441 	pop	dph
   01A0 D0 82               442 	pop	dpl
   01A2 E0                  443 	movx	a,@dptr
   01A3 A3                  444 	inc	dptr
   01A4 FD                  445 	mov	r5,a
   01A5 E0                  446 	movx	a,@dptr
   01A6 A3                  447 	inc	dptr
   01A7 FE                  448 	mov	r6,a
   01A8 E0                  449 	movx	a,@dptr
   01A9 FF                  450 	mov	r7,a
   01AA ED                  451 	mov	a,r5
   01AB 4E                  452 	orl	a,r6
   01AC 4F                  453 	orl	a,r7
   01AD 60 04               454 	jz	00129$
   01AF 02s00r00rF8         455 	ljmp	00110$
   01B3                     456 00129$:
                            457 ;	_malloc.c:219: ret = (void __xdata *) NULL;
                            458 ;	genAssign: resultIsFar = TRUE
   01B3 7A 00               459 	mov	r2,#0x00
   01B5 7B 00               460 	mov	r3,#0x00
   01B7 7C 00               461 	mov	r4,#0x00
                            462 ;	_malloc.c:220: break;
   01B9                     463 00111$:
                            464 ;	_malloc.c:223: if (ret)
   01B9 EA                  465 	mov	a,r2
   01BA 4B                  466 	orl	a,r3
   01BB 4C                  467 	orl	a,r4
   01BC 70 04               468 	jnz	00130$
   01BE 02s00r02rCF         469 	ljmp	00116$
   01C2                     470 00130$:
                            471 ;	_malloc.c:225: if (!current_header->len)
   01C2 90s00r00r02         472 	mov	dptr,#_malloc_current_header_1_1
   01C6 E0                  473 	movx	a,@dptr
   01C7 24 03               474 	add	a,#0x03
   01C9 F5 84               475 	mov	dpl1,a
   01CB A3                  476 	inc	dptr
   01CC E0                  477 	movx	a,@dptr
   01CD 34 00               478 	addc	a,#0x00
   01CF F5 85               479 	mov	dph1,a
   01D1 A3                  480 	inc	dptr
   01D2 E0                  481 	movx	a,@dptr
   01D3 34 00               482 	addc	a,#0x00
   01D5 F5 95               483 	mov	dpx1,a
   01D7 05 86               484 	inc	dps
   01D9 E0                  485 	movx	a,@dptr
   01DA A3                  486 	inc	dptr
   01DB F8                  487 	mov	r0,a
   01DC E0                  488 	movx	a,@dptr
   01DD F9                  489 	mov	r1,a
   01DE 75 86 01            490 	mov     dps, #1
   01E1 12s00r00r00         491 	lcall	__decdptr
   01E5 75 86 00            492 	mov	dps,#0
   01E8 E8                  493 	mov	a,r0
   01E9 49                  494 	orl	a,r1
   01EA 70 1A               495 	jnz  00113$
   01EC                     496 00131$:
                            497 ;	_malloc.c:227: current_header->len = size; //for first allocation
   01EC 90s00r00r00         498 	mov	dptr,#_malloc_size_1_1
   01F0 E0                  499 	movx	a,@dptr
   01F1 75 86 01            500 	mov	dps,#1
   01F4 F0                  501 	movx	@dptr,a
   01F5 A3                  502 	inc	dptr
   01F6 75 86 00            503 	mov	dps,#0
   01F9 A3                  504 	inc	dptr
   01FA E0                  505 	movx	a,@dptr
   01FB 75 86 01            506 	mov	dps,#1
   01FE F0                  507 	movx	@dptr,a
   01FF 75 86 00            508 	mov	dps,#0
   0202 02s00r02rCF         509 	ljmp	00116$
   0206                     510 00113$:
                            511 ;	_malloc.c:231: new_header = (MEMHEADER __xdata * )((char __xdata *)current_header + current_header->len);
   0206 90s00r00r02         512 	mov	dptr,#_malloc_current_header_1_1
   020A 75 86 01            513 	mov	dps, #1
   020D 90s00r00r05         514 	mov	dptr, #_malloc_new_header_1_1
   0211 15 86               515 	dec	dps
   0213 E0                  516 	movx	a,@dptr
   0214 28                  517 	add	a,r0
   0215 05 86               518 	inc	dps
   0217 F0                  519 	movx	@dptr,a
   0218 15 86               520 	dec	dps
   021A A3                  521 	inc	dptr
   021B E0                  522 	movx	a,@dptr
   021C 39                  523 	addc	a,r1
   021D 05 86               524 	inc	dps
   021F A3                  525 	inc	dptr
   0220 F0                  526 	movx	@dptr,a
   0221 15 86               527 	dec	dps
   0223 A3                  528 	inc	dptr
   0224 E0                  529 	movx	a,@dptr
   0225 34 00               530 	addc	a,#0
   0227 05 86               531 	inc	dps
   0229 A3                  532 	inc	dptr
   022A F0                  533 	movx	@dptr,a
   022B 75 86 00            534 	mov	dps,#0
                            535 ;	_malloc.c:232: new_header->next = current_header->next; //and plug it into the chain
   022E 90s00r00r02         536 	mov	dptr,#_malloc_current_header_1_1
   0232 E0                  537 	movx	a,@dptr
   0233 C0 E0               538 	push	acc
   0235 A3                  539 	inc	dptr
   0236 E0                  540 	movx	a,@dptr
   0237 C0 E0               541 	push	acc
   0239 A3                  542 	inc	dptr
   023A E0                  543 	movx	a,@dptr
   023B F5 93               544 	mov	dpx,a
   023D D0 83               545 	pop	dph
   023F D0 82               546 	pop	dpl
   0241 E0                  547 	movx	a,@dptr
   0242 A3                  548 	inc	dptr
   0243 FE                  549 	mov	r6,a
   0244 E0                  550 	movx	a,@dptr
   0245 A3                  551 	inc	dptr
   0246 FF                  552 	mov	r7,a
   0247 E0                  553 	movx	a,@dptr
   0248 FD                  554 	mov	r5,a
   0249 90s00r00r05         555 	mov	dptr,#_malloc_new_header_1_1
   024D E0                  556 	movx	a,@dptr
   024E C0 E0               557 	push	acc
   0250 A3                  558 	inc	dptr
   0251 E0                  559 	movx	a,@dptr
   0252 C0 E0               560 	push	acc
   0254 A3                  561 	inc	dptr
   0255 E0                  562 	movx	a,@dptr
   0256 F5 93               563 	mov	dpx,a
   0258 D0 83               564 	pop	dph
   025A D0 82               565 	pop	dpl
   025C EE                  566 	mov	a,r6
   025D F0                  567 	movx	@dptr,a
   025E A3                  568 	inc	dptr
   025F EF                  569 	mov	a,r7
   0260 F0                  570 	movx	@dptr,a
   0261 A3                  571 	inc	dptr
   0262 ED                  572 	mov	a,r5
   0263 F0                  573 	movx	@dptr,a
                            574 ;	_malloc.c:233: current_header->next  = new_header;
   0264 90s00r00r02         575 	mov	dptr,#_malloc_current_header_1_1
   0268 E0                  576 	movx	a,@dptr
   0269 C0 E0               577 	push	acc
   026B A3                  578 	inc	dptr
   026C E0                  579 	movx	a,@dptr
   026D C0 E0               580 	push	acc
   026F A3                  581 	inc	dptr
   0270 E0                  582 	movx	a,@dptr
   0271 F5 93               583 	mov	dpx,a
   0273 D0 83               584 	pop	dph
   0275 D0 82               585 	pop	dpl
   0277 75 86 01            586 	mov     dps, #1
   027A 90s00r00r05         587 	mov     dptr, #_malloc_new_header_1_1
   027E E0                  588 	movx	a,@dptr
   027F 15 86               589 	dec	dps
   0281 F0                  590 	movx	@dptr,a
   0282 A3                  591 	inc	dptr
   0283 05 86               592 	inc	dps
   0285 A3                  593 	inc	dptr
   0286 E0                  594 	movx	a,@dptr
   0287 15 86               595 	dec	dps
   0289 F0                  596 	movx	@dptr,a
   028A A3                  597 	inc	dptr
   028B 05 86               598 	inc	dps
   028D A3                  599 	inc	dptr
   028E E0                  600 	movx	a,@dptr
   028F 15 86               601 	dec	dps
   0291 F0                  602 	movx	@dptr,a
                            603 ;	_malloc.c:234: new_header->len  = size; //mark as used
   0292 90s00r00r05         604 	mov	dptr,#_malloc_new_header_1_1
   0296 E0                  605 	movx	a,@dptr
   0297 24 03               606 	add	a,#0x03
   0299 F5 84               607 	mov	dpl1,a
   029B A3                  608 	inc	dptr
   029C E0                  609 	movx	a,@dptr
   029D 34 00               610 	addc	a,#0x00
   029F F5 85               611 	mov	dph1,a
   02A1 A3                  612 	inc	dptr
   02A2 E0                  613 	movx	a,@dptr
   02A3 34 00               614 	addc	a,#0x00
   02A5 F5 95               615 	mov	dpx1,a
   02A7 90s00r00r00         616 	mov	dptr,#_malloc_size_1_1
   02AB E0                  617 	movx	a,@dptr
   02AC 75 86 01            618 	mov	dps,#1
   02AF F0                  619 	movx	@dptr,a
   02B0 A3                  620 	inc	dptr
   02B1 75 86 00            621 	mov	dps,#0
   02B4 A3                  622 	inc	dptr
   02B5 E0                  623 	movx	a,@dptr
   02B6 75 86 01            624 	mov	dps,#1
   02B9 F0                  625 	movx	@dptr,a
   02BA 75 86 00            626 	mov	dps,#0
                            627 ;	_malloc.c:235: ret = new_header->mem;
   02BD 90s00r00r05         628 	mov	dptr,#_malloc_new_header_1_1
   02C1 E0                  629 	movx	a,@dptr
   02C2 24 05               630 	add	a,#0x05
   02C4 FA                  631 	mov	r2,a
   02C5 A3                  632 	inc	dptr
   02C6 E0                  633 	movx	a,@dptr
   02C7 34 00               634 	addc	a,#0x00
   02C9 FB                  635 	mov	r3,a
   02CA A3                  636 	inc	dptr
   02CB E0                  637 	movx	a,@dptr
   02CC 34 00               638 	addc	a,#0x00
   02CE FC                  639 	mov	r4,a
   02CF                     640 00116$:
                            641 ;	_malloc.c:239: return ret;
   02CF 8A 82               642 	mov	dpl,r2
   02D1 8B 83               643 	mov	dph,r3
   02D3 8C 93               644 	mov	dpx,r4
   02D5                     645 00117$:
   02D5 22                  646 	ret
                            647 	.area CSEG    (CODE)
                            648 	.area CONST   (CODE)
                            649 	.area XINIT   (CODE)
   0000                     650 __xinit___sdcc_first_memheader:
                            651 ; generic printIvalPtr
   0000 00 00 00            652 	.byte #0x00,#0x00,#0x00
                            653 	.area CABS    (ABS,CODE)
