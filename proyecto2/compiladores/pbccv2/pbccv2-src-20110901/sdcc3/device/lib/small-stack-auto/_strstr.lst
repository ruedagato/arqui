                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:31 2015
                              5 ;--------------------------------------------------------
                              6 	.module _strstr
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _strstr
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in internal ram 
                             34 ;--------------------------------------------------------
                             35 	.area OSEG    (OVR,DATA)
                             36 ;--------------------------------------------------------
                             37 ; indirectly addressable internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area ISEG    (DATA)
                             40 ;--------------------------------------------------------
                             41 ; absolute internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area IABS    (ABS,DATA)
                             44 	.area IABS    (ABS,DATA)
                             45 ;--------------------------------------------------------
                             46 ; bit data
                             47 ;--------------------------------------------------------
                             48 	.area BSEG    (BIT)
                             49 ;--------------------------------------------------------
                             50 ; paged external ram data
                             51 ;--------------------------------------------------------
                             52 	.area PSEG    (PAG,XDATA)
                             53 ;--------------------------------------------------------
                             54 ; external ram data
                             55 ;--------------------------------------------------------
                             56 	.area XSEG    (XDATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XABS    (ABS,XDATA)
                             61 ;--------------------------------------------------------
                             62 ; external initialized ram data
                             63 ;--------------------------------------------------------
                             64 	.area XISEG   (XDATA)
                             65 	.area HOME    (CODE)
                             66 	.area GSINIT0 (CODE)
                             67 	.area GSINIT1 (CODE)
                             68 	.area GSINIT2 (CODE)
                             69 	.area GSINIT3 (CODE)
                             70 	.area GSINIT4 (CODE)
                             71 	.area GSINIT5 (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area CSEG    (CODE)
                             75 ;--------------------------------------------------------
                             76 ; global & static initialisations
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT  (CODE)
                             80 	.area GSFINAL (CODE)
                             81 	.area GSINIT  (CODE)
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area HOME    (CODE)
                             86 	.area HOME    (CODE)
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area CSEG    (CODE)
                             91 ;------------------------------------------------------------
                             92 ;Allocation info for local variables in function 'strstr'
                             93 ;------------------------------------------------------------
                             94 ;str2                      Allocated to stack - offset -5
                             95 ;str1                      Allocated to registers r2 r3 r4 
                             96 ;cp                        Allocated to stack - offset 1
                             97 ;s1                        Allocated to registers r2 r3 r4 
                             98 ;s2                        Allocated to stack - offset 4
                             99 ;sloc0                     Allocated to stack - offset 7
                            100 ;sloc1                     Allocated to stack - offset 10
                            101 ;sloc2                     Allocated to stack - offset 11
                            102 ;sloc3                     Allocated to stack - offset 12
                            103 ;------------------------------------------------------------
                            104 ;	_strstr.c:31: char * strstr (
                            105 ;	-----------------------------------------
                            106 ;	 function strstr
                            107 ;	-----------------------------------------
   0000                     108 _strstr:
                    0002    109 	ar2 = 0x02
                    0003    110 	ar3 = 0x03
                    0004    111 	ar4 = 0x04
                    0005    112 	ar5 = 0x05
                    0006    113 	ar6 = 0x06
                    0007    114 	ar7 = 0x07
                    0000    115 	ar0 = 0x00
                    0001    116 	ar1 = 0x01
   0000 C0*00               117 	push	_bp
   0002 E5 81               118 	mov	a,sp
   0004 F5*00               119 	mov	_bp,a
   0006 24 0D               120 	add	a,#0x0d
   0008 F5 81               121 	mov	sp,a
   000A AA 82               122 	mov	r2,dpl
   000C AB 83               123 	mov	r3,dph
   000E AC F0               124 	mov	r4,b
                            125 ;	_strstr.c:36: const char * cp = str1;
   0010 A8*00               126 	mov	r0,_bp
   0012 08                  127 	inc	r0
   0013 A6 02               128 	mov	@r0,ar2
   0015 08                  129 	inc	r0
   0016 A6 03               130 	mov	@r0,ar3
   0018 08                  131 	inc	r0
   0019 A6 04               132 	mov	@r0,ar4
                            133 ;	_strstr.c:40: if ( !*str2 )
   001B E5*00               134 	mov	a,_bp
   001D 24 FB               135 	add	a,#0xfb
   001F F8                  136 	mov	r0,a
   0020 E5*00               137 	mov	a,_bp
   0022 24 04               138 	add	a,#0x04
   0024 F9                  139 	mov	r1,a
   0025 E6                  140 	mov	a,@r0
   0026 F7                  141 	mov	@r1,a
   0027 08                  142 	inc	r0
   0028 09                  143 	inc	r1
   0029 E6                  144 	mov	a,@r0
   002A F7                  145 	mov	@r1,a
   002B 08                  146 	inc	r0
   002C 09                  147 	inc	r1
   002D E6                  148 	mov	a,@r0
   002E F7                  149 	mov	@r1,a
   002F E5*00               150 	mov	a,_bp
   0031 24 04               151 	add	a,#0x04
   0033 F8                  152 	mov	r0,a
   0034 86 82               153 	mov	dpl,@r0
   0036 08                  154 	inc	r0
   0037 86 83               155 	mov	dph,@r0
   0039 08                  156 	inc	r0
   003A 86 F0               157 	mov	b,@r0
   003C 12s00r00            158 	lcall	__gptrget
   003F 70 09               159 	jnz	00122$
                            160 ;	_strstr.c:41: return str1;
   0041 8A 82               161 	mov	dpl,r2
   0043 8B 83               162 	mov	dph,r3
   0045 8C F0               163 	mov	b,r4
   0047 02s01r24            164 	ljmp	00113$
                            165 ;	_strstr.c:43: while (*cp)
   004A                     166 00122$:
   004A                     167 00110$:
   004A 8A 82               168 	mov	dpl,r2
   004C 8B 83               169 	mov	dph,r3
   004E 8C F0               170 	mov	b,r4
   0050 12s00r00            171 	lcall	__gptrget
   0053 70 03               172 	jnz	00125$
   0055 02s01r1E            173 	ljmp	00112$
   0058                     174 00125$:
                            175 ;	_strstr.c:46: s2 = str2;
   0058 E5*00               176 	mov	a,_bp
   005A 24 04               177 	add	a,#0x04
   005C F8                  178 	mov	r0,a
   005D 86 05               179 	mov	ar5,@r0
   005F 08                  180 	inc	r0
   0060 86 06               181 	mov	ar6,@r0
   0062 08                  182 	inc	r0
   0063 86 07               183 	mov	ar7,@r0
                            184 ;	_strstr.c:48: while ( *s1 && *s2 && !(*s1-*s2) )
   0065 E5*00               185 	mov	a,_bp
   0067 24 07               186 	add	a,#0x07
   0069 F8                  187 	mov	r0,a
   006A A6 02               188 	mov	@r0,ar2
   006C 08                  189 	inc	r0
   006D A6 03               190 	mov	@r0,ar3
   006F 08                  191 	inc	r0
   0070 A6 04               192 	mov	@r0,ar4
   0072                     193 00105$:
   0072 E5*00               194 	mov	a,_bp
   0074 24 07               195 	add	a,#0x07
   0076 F8                  196 	mov	r0,a
   0077 86 82               197 	mov	dpl,@r0
   0079 08                  198 	inc	r0
   007A 86 83               199 	mov	dph,@r0
   007C 08                  200 	inc	r0
   007D 86 F0               201 	mov	b,@r0
   007F E5*00               202 	mov	a,_bp
   0081 24 0A               203 	add	a,#0x0a
   0083 F9                  204 	mov	r1,a
   0084 12s00r00            205 	lcall	__gptrget
   0087 F7                  206 	mov	@r1,a
   0088 E5*00               207 	mov	a,_bp
   008A 24 0A               208 	add	a,#0x0a
   008C F8                  209 	mov	r0,a
   008D E6                  210 	mov	a,@r0
   008E 60 63               211 	jz	00107$
   0090 8D 82               212 	mov	dpl,r5
   0092 8E 83               213 	mov	dph,r6
   0094 8F F0               214 	mov	b,r7
   0096 E5*00               215 	mov	a,_bp
   0098 24 0B               216 	add	a,#0x0b
   009A F8                  217 	mov	r0,a
   009B 12s00r00            218 	lcall	__gptrget
   009E F6                  219 	mov	@r0,a
   009F E5*00               220 	mov	a,_bp
   00A1 24 0B               221 	add	a,#0x0b
   00A3 F8                  222 	mov	r0,a
   00A4 E6                  223 	mov	a,@r0
   00A5 60 4C               224 	jz	00107$
   00A7 C0 02               225 	push	ar2
   00A9 C0 03               226 	push	ar3
   00AB C0 04               227 	push	ar4
   00AD E5*00               228 	mov	a,_bp
   00AF 24 0A               229 	add	a,#0x0a
   00B1 F8                  230 	mov	r0,a
   00B2 E5*00               231 	mov	a,_bp
   00B4 24 0C               232 	add	a,#0x0c
   00B6 F9                  233 	mov	r1,a
   00B7 E6                  234 	mov	a,@r0
   00B8 F7                  235 	mov	@r1,a
   00B9 E6                  236 	mov	a,@r0
   00BA 33                  237 	rlc	a
   00BB 95 E0               238 	subb	a,acc
   00BD 09                  239 	inc	r1
   00BE F7                  240 	mov	@r1,a
   00BF E5*00               241 	mov	a,_bp
   00C1 24 0B               242 	add	a,#0x0b
   00C3 F8                  243 	mov	r0,a
   00C4 86 04               244 	mov	ar4,@r0
   00C6 E6                  245 	mov	a,@r0
   00C7 33                  246 	rlc	a
   00C8 95 E0               247 	subb	a,acc
   00CA FA                  248 	mov	r2,a
   00CB E5*00               249 	mov	a,_bp
   00CD 24 0C               250 	add	a,#0x0c
   00CF F8                  251 	mov	r0,a
   00D0 E6                  252 	mov	a,@r0
   00D1 C3                  253 	clr	c
   00D2 9C                  254 	subb	a,r4
   00D3 FC                  255 	mov	r4,a
   00D4 08                  256 	inc	r0
   00D5 E6                  257 	mov	a,@r0
   00D6 9A                  258 	subb	a,r2
   00D7 4C                  259 	orl	a,r4
   00D8 D0 04               260 	pop	ar4
   00DA D0 03               261 	pop	ar3
   00DC D0 02               262 	pop	ar2
   00DE 70 13               263 	jnz	00107$
                            264 ;	_strstr.c:49: s1++, s2++;
   00E0 E5*00               265 	mov	a,_bp
   00E2 24 07               266 	add	a,#0x07
   00E4 F8                  267 	mov	r0,a
   00E5 06                  268 	inc	@r0
   00E6 B6 00 02            269 	cjne	@r0,#0x00,00129$
   00E9 08                  270 	inc	r0
   00EA 06                  271 	inc	@r0
   00EB                     272 00129$:
   00EB 0D                  273 	inc	r5
   00EC BD 00 01            274 	cjne	r5,#0x00,00130$
   00EF 0E                  275 	inc	r6
   00F0                     276 00130$:
   00F0 02s00r72            277 	ljmp	00105$
   00F3                     278 00107$:
                            279 ;	_strstr.c:51: if (!*s2)
   00F3 8D 82               280 	mov	dpl,r5
   00F5 8E 83               281 	mov	dph,r6
   00F7 8F F0               282 	mov	b,r7
   00F9 12s00r00            283 	lcall	__gptrget
   00FC 70 0D               284 	jnz	00109$
                            285 ;	_strstr.c:52: return( (char*)cp );
   00FE A8*00               286 	mov	r0,_bp
   0100 08                  287 	inc	r0
   0101 86 82               288 	mov	dpl,@r0
   0103 08                  289 	inc	r0
   0104 86 83               290 	mov	dph,@r0
   0106 08                  291 	inc	r0
   0107 86 F0               292 	mov	b,@r0
   0109 80 19               293 	sjmp	00113$
   010B                     294 00109$:
                            295 ;	_strstr.c:54: cp++;
   010B 0A                  296 	inc	r2
   010C BA 00 01            297 	cjne	r2,#0x00,00132$
   010F 0B                  298 	inc	r3
   0110                     299 00132$:
   0110 A8*00               300 	mov	r0,_bp
   0112 08                  301 	inc	r0
   0113 A6 02               302 	mov	@r0,ar2
   0115 08                  303 	inc	r0
   0116 A6 03               304 	mov	@r0,ar3
   0118 08                  305 	inc	r0
   0119 A6 04               306 	mov	@r0,ar4
   011B 02s00r4A            307 	ljmp	00110$
   011E                     308 00112$:
                            309 ;	_strstr.c:57: return (NULL) ;
   011E 90 00 00            310 	mov	dptr,#0x0000
   0121 75 F0 00            311 	mov	b,#0x00
   0124                     312 00113$:
   0124 85*00 81            313 	mov	sp,_bp
   0127 D0*00               314 	pop	_bp
   0129 22                  315 	ret
                            316 	.area CSEG    (CODE)
                            317 	.area CONST   (CODE)
                            318 	.area XINIT   (CODE)
                            319 	.area CABS    (ABS,CODE)
