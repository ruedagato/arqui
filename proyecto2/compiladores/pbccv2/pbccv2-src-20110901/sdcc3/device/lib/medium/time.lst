                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:26 2015
                              5 ;--------------------------------------------------------
                              6 	.module time
                              7 	.optsdcc -mmcs51 --model-medium
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl ___day
                             13 	.globl ___month
                             14 	.globl _RtcRead
                             15 	.globl _time
                             16 	.globl _asctime
                             17 	.globl _ctime
                             18 	.globl _localtime
                             19 	.globl _gmtime
                             20 	.globl _mktime
                             21 ;--------------------------------------------------------
                             22 ; special function registers
                             23 ;--------------------------------------------------------
                             24 	.area RSEG    (ABS,DATA)
   0000                      25 	.org 0x0000
                             26 ;--------------------------------------------------------
                             27 ; special function bits
                             28 ;--------------------------------------------------------
                             29 	.area RSEG    (ABS,DATA)
   0000                      30 	.org 0x0000
                             31 ;--------------------------------------------------------
                             32 ; overlayable register banks
                             33 ;--------------------------------------------------------
                             34 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      35 	.ds 8
                             36 ;--------------------------------------------------------
                             37 ; internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area DSEG    (DATA)
   0000                      40 _asctime_sloc0_1_0:
   0000                      41 	.ds 2
   0002                      42 _asctime_sloc1_1_0:
   0002                      43 	.ds 2
   0004                      44 _asctime_sloc2_1_0:
   0004                      45 	.ds 2
   0006                      46 _asctime_sloc3_1_0:
   0006                      47 	.ds 2
   0008                      48 _asctime_sloc4_1_0:
   0008                      49 	.ds 2
   000A                      50 _gmtime_sloc0_1_0:
   000A                      51 	.ds 4
                             52 ;--------------------------------------------------------
                             53 ; overlayable items in internal ram 
                             54 ;--------------------------------------------------------
                             55 	.area OSEG    (OVR,DATA)
                             56 ;--------------------------------------------------------
                             57 ; indirectly addressable internal ram data
                             58 ;--------------------------------------------------------
                             59 	.area ISEG    (DATA)
                             60 ;--------------------------------------------------------
                             61 ; absolute internal ram data
                             62 ;--------------------------------------------------------
                             63 	.area IABS    (ABS,DATA)
                             64 	.area IABS    (ABS,DATA)
                             65 ;--------------------------------------------------------
                             66 ; bit data
                             67 ;--------------------------------------------------------
                             68 	.area BSEG    (BIT)
                             69 ;--------------------------------------------------------
                             70 ; paged external ram data
                             71 ;--------------------------------------------------------
                             72 	.area PSEG    (PAG,XDATA)
   0000                      73 _time_timeptr_1_1:
   0000                      74 	.ds 3
   0003                      75 _time_now_1_1:
   0003                      76 	.ds 12
   000F                      77 _ascTimeBuffer:
   000F                      78 	.ds 32
   002F                      79 _asctime_timeptr_1_1:
   002F                      80 	.ds 3
   0032                      81 _lastTime:
   0032                      82 	.ds 12
   003E                      83 _gmtime_epoch_1_1:
   003E                      84 	.ds 4
   0042                      85 _gmtime_days_1_1:
   0042                      86 	.ds 4
   0046                      87 _mktime_timeptr_1_1:
   0046                      88 	.ds 3
   0049                      89 _mktime_year_1_1:
   0049                      90 	.ds 2
   004B                      91 _mktime_month_1_1:
   004B                      92 	.ds 2
   004D                      93 _mktime_i_1_1:
   004D                      94 	.ds 2
   004F                      95 _mktime_seconds_1_1:
   004F                      96 	.ds 4
                             97 ;--------------------------------------------------------
                             98 ; external ram data
                             99 ;--------------------------------------------------------
                            100 	.area XSEG    (XDATA)
                            101 ;--------------------------------------------------------
                            102 ; absolute external ram data
                            103 ;--------------------------------------------------------
                            104 	.area XABS    (ABS,XDATA)
                            105 ;--------------------------------------------------------
                            106 ; external initialized ram data
                            107 ;--------------------------------------------------------
                            108 	.area XISEG   (XDATA)
                            109 	.area HOME    (CODE)
                            110 	.area GSINIT0 (CODE)
                            111 	.area GSINIT1 (CODE)
                            112 	.area GSINIT2 (CODE)
                            113 	.area GSINIT3 (CODE)
                            114 	.area GSINIT4 (CODE)
                            115 	.area GSINIT5 (CODE)
                            116 	.area GSINIT  (CODE)
                            117 	.area GSFINAL (CODE)
                            118 	.area CSEG    (CODE)
                            119 ;--------------------------------------------------------
                            120 ; global & static initialisations
                            121 ;--------------------------------------------------------
                            122 	.area HOME    (CODE)
                            123 	.area GSINIT  (CODE)
                            124 	.area GSFINAL (CODE)
                            125 	.area GSINIT  (CODE)
                            126 ;--------------------------------------------------------
                            127 ; Home
                            128 ;--------------------------------------------------------
                            129 	.area HOME    (CODE)
                            130 	.area HOME    (CODE)
                            131 ;--------------------------------------------------------
                            132 ; code
                            133 ;--------------------------------------------------------
                            134 	.area CSEG    (CODE)
                            135 ;------------------------------------------------------------
                            136 ;Allocation info for local variables in function 'RtcRead'
                            137 ;------------------------------------------------------------
                            138 ;------------------------------------------------------------
                            139 ;	time.c:42: unsigned char RtcRead(struct tm *timeptr) {
                            140 ;	-----------------------------------------
                            141 ;	 function RtcRead
                            142 ;	-----------------------------------------
   0000                     143 _RtcRead:
                    0002    144 	ar2 = 0x02
                    0003    145 	ar3 = 0x03
                    0004    146 	ar4 = 0x04
                    0005    147 	ar5 = 0x05
                    0006    148 	ar6 = 0x06
                    0007    149 	ar7 = 0x07
                    0000    150 	ar0 = 0x00
                    0001    151 	ar1 = 0x01
                            152 ;	time.c:45: return 0;
   0000 75 82 00            153 	mov	dpl,#0x00
   0003 22                  154 	ret
                            155 ;------------------------------------------------------------
                            156 ;Allocation info for local variables in function 'time'
                            157 ;------------------------------------------------------------
                            158 ;------------------------------------------------------------
                            159 ;	time.c:50: time_t time(time_t *timeptr) {
                            160 ;	-----------------------------------------
                            161 ;	 function time
                            162 ;	-----------------------------------------
   0004                     163 _time:
   0004 AA F0               164 	mov	r2,b
   0006 AB 83               165 	mov	r3,dph
   0008 E5 82               166 	mov	a,dpl
   000A 78r00               167 	mov	r0,#_time_timeptr_1_1
   000C F2                  168 	movx	@r0,a
   000D 08                  169 	inc	r0
   000E EB                  170 	mov	a,r3
   000F F2                  171 	movx	@r0,a
   0010 08                  172 	inc	r0
   0011 EA                  173 	mov	a,r2
   0012 F2                  174 	movx	@r0,a
                            175 ;	time.c:52: time_t t=-1;
   0013 7D FF               176 	mov	r5,#0xFF
   0015 7E FF               177 	mov	r6,#0xFF
   0017 7F FF               178 	mov	r7,#0xFF
   0019 7A FF               179 	mov	r2,#0xFF
                            180 ;	time.c:54: if (RtcRead(&now)) {
   001B 90s00r03            181 	mov	dptr,#_time_now_1_1
   001E 75 F0 60            182 	mov	b,#0x60
   0021 C0 02               183 	push	ar2
   0023 C0 05               184 	push	ar5
   0025 C0 06               185 	push	ar6
   0027 C0 07               186 	push	ar7
   0029 12s00r00            187 	lcall	_RtcRead
   002C E5 82               188 	mov	a,dpl
   002E D0 07               189 	pop	ar7
   0030 D0 06               190 	pop	ar6
   0032 D0 05               191 	pop	ar5
   0034 D0 02               192 	pop	ar2
   0036 60 10               193 	jz	00102$
                            194 ;	time.c:55: t=mktime(&now);
   0038 90s00r03            195 	mov	dptr,#_time_now_1_1
   003B 75 F0 60            196 	mov	b,#0x60
   003E 12s05r6B            197 	lcall	_mktime
   0041 AD 82               198 	mov	r5,dpl
   0043 AE 83               199 	mov	r6,dph
   0045 AF F0               200 	mov	r7,b
   0047 FA                  201 	mov	r2,a
   0048                     202 00102$:
                            203 ;	time.c:57: if (timeptr) {
   0048 78r00               204 	mov	r0,#_time_timeptr_1_1
   004A E2                  205 	movx	a,@r0
   004B F5 F0               206 	mov	b,a
   004D 08                  207 	inc	r0
   004E E2                  208 	movx	a,@r0
   004F 42 F0               209 	orl	b,a
   0051 08                  210 	inc	r0
   0052 E2                  211 	movx	a,@r0
   0053 45 F0               212 	orl	a,b
   0055 60 20               213 	jz	00104$
                            214 ;	time.c:58: *timeptr=t;
   0057 78r00               215 	mov	r0,#_time_timeptr_1_1
   0059 E2                  216 	movx	a,@r0
   005A F5 82               217 	mov	dpl,a
   005C 08                  218 	inc	r0
   005D E2                  219 	movx	a,@r0
   005E F5 83               220 	mov	dph,a
   0060 08                  221 	inc	r0
   0061 E2                  222 	movx	a,@r0
   0062 F5 F0               223 	mov	b,a
   0064 ED                  224 	mov	a,r5
   0065 12s00r00            225 	lcall	__gptrput
   0068 A3                  226 	inc	dptr
   0069 EE                  227 	mov	a,r6
   006A 12s00r00            228 	lcall	__gptrput
   006D A3                  229 	inc	dptr
   006E EF                  230 	mov	a,r7
   006F 12s00r00            231 	lcall	__gptrput
   0072 A3                  232 	inc	dptr
   0073 EA                  233 	mov	a,r2
   0074 12s00r00            234 	lcall	__gptrput
   0077                     235 00104$:
                            236 ;	time.c:60: return t;
   0077 8D 82               237 	mov	dpl,r5
   0079 8E 83               238 	mov	dph,r6
   007B 8F F0               239 	mov	b,r7
   007D EA                  240 	mov	a,r2
   007E 22                  241 	ret
                            242 ;------------------------------------------------------------
                            243 ;Allocation info for local variables in function 'CheckTime'
                            244 ;------------------------------------------------------------
                            245 ;------------------------------------------------------------
                            246 ;	time.c:73: static void CheckTime(struct tm *timeptr) {
                            247 ;	-----------------------------------------
                            248 ;	 function CheckTime
                            249 ;	-----------------------------------------
   007F                     250 _CheckTime:
                            251 ;	time.c:84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
   007F AA 82               252 	mov	r2,dpl
   0081 AB 83               253 	mov	r3,dph
   0083 AC F0               254 	mov	r4,b
   0085 12s00r00            255 	lcall	__gptrget
   0088 FD                  256 	mov	r5,a
   0089 74 3B               257 	mov	a,#0x3B
   008B B5 05 00            258 	cjne	a,ar5,00128$
   008E                     259 00128$:
   008E 50 0B               260 	jnc	00102$
   0090 8A 82               261 	mov	dpl,r2
   0092 8B 83               262 	mov	dph,r3
   0094 8C F0               263 	mov	b,r4
   0096 74 3B               264 	mov	a,#0x3B
   0098 12s00r00            265 	lcall	__gptrput
   009B                     266 00102$:
                            267 ;	time.c:85: if (timeptr->tm_min>59) timeptr->tm_min=59;
   009B 74 01               268 	mov	a,#0x01
   009D 2A                  269 	add	a,r2
   009E FD                  270 	mov	r5,a
   009F E4                  271 	clr	a
   00A0 3B                  272 	addc	a,r3
   00A1 FE                  273 	mov	r6,a
   00A2 8C 07               274 	mov	ar7,r4
   00A4 8D 82               275 	mov	dpl,r5
   00A6 8E 83               276 	mov	dph,r6
   00A8 8F F0               277 	mov	b,r7
   00AA 12s00r00            278 	lcall	__gptrget
   00AD F8                  279 	mov	r0,a
   00AE 74 3B               280 	mov	a,#0x3B
   00B0 B5 00 00            281 	cjne	a,ar0,00130$
   00B3                     282 00130$:
   00B3 50 0B               283 	jnc	00104$
   00B5 8D 82               284 	mov	dpl,r5
   00B7 8E 83               285 	mov	dph,r6
   00B9 8F F0               286 	mov	b,r7
   00BB 74 3B               287 	mov	a,#0x3B
   00BD 12s00r00            288 	lcall	__gptrput
   00C0                     289 00104$:
                            290 ;	time.c:86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
   00C0 74 02               291 	mov	a,#0x02
   00C2 2A                  292 	add	a,r2
   00C3 FD                  293 	mov	r5,a
   00C4 E4                  294 	clr	a
   00C5 3B                  295 	addc	a,r3
   00C6 FE                  296 	mov	r6,a
   00C7 8C 07               297 	mov	ar7,r4
   00C9 8D 82               298 	mov	dpl,r5
   00CB 8E 83               299 	mov	dph,r6
   00CD 8F F0               300 	mov	b,r7
   00CF 12s00r00            301 	lcall	__gptrget
   00D2 F8                  302 	mov	r0,a
   00D3 74 17               303 	mov	a,#0x17
   00D5 B5 00 00            304 	cjne	a,ar0,00132$
   00D8                     305 00132$:
   00D8 50 0B               306 	jnc	00106$
   00DA 8D 82               307 	mov	dpl,r5
   00DC 8E 83               308 	mov	dph,r6
   00DE 8F F0               309 	mov	b,r7
   00E0 74 17               310 	mov	a,#0x17
   00E2 12s00r00            311 	lcall	__gptrput
   00E5                     312 00106$:
                            313 ;	time.c:87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
   00E5 74 07               314 	mov	a,#0x07
   00E7 2A                  315 	add	a,r2
   00E8 FD                  316 	mov	r5,a
   00E9 E4                  317 	clr	a
   00EA 3B                  318 	addc	a,r3
   00EB FE                  319 	mov	r6,a
   00EC 8C 07               320 	mov	ar7,r4
   00EE 8D 82               321 	mov	dpl,r5
   00F0 8E 83               322 	mov	dph,r6
   00F2 8F F0               323 	mov	b,r7
   00F4 12s00r00            324 	lcall	__gptrget
   00F7 F8                  325 	mov	r0,a
   00F8 74 06               326 	mov	a,#0x06
   00FA B5 00 00            327 	cjne	a,ar0,00134$
   00FD                     328 00134$:
   00FD 50 0B               329 	jnc	00108$
   00FF 8D 82               330 	mov	dpl,r5
   0101 8E 83               331 	mov	dph,r6
   0103 8F F0               332 	mov	b,r7
   0105 74 06               333 	mov	a,#0x06
   0107 12s00r00            334 	lcall	__gptrput
   010A                     335 00108$:
                            336 ;	time.c:88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
   010A 74 03               337 	mov	a,#0x03
   010C 2A                  338 	add	a,r2
   010D FD                  339 	mov	r5,a
   010E E4                  340 	clr	a
   010F 3B                  341 	addc	a,r3
   0110 FE                  342 	mov	r6,a
   0111 8C 07               343 	mov	ar7,r4
   0113 8D 82               344 	mov	dpl,r5
   0115 8E 83               345 	mov	dph,r6
   0117 8F F0               346 	mov	b,r7
   0119 12s00r00            347 	lcall	__gptrget
   011C F8                  348 	mov	r0,a
   011D B8 01 00            349 	cjne	r0,#0x01,00136$
   0120                     350 00136$:
   0120 50 0D               351 	jnc	00112$
   0122 8D 82               352 	mov	dpl,r5
   0124 8E 83               353 	mov	dph,r6
   0126 8F F0               354 	mov	b,r7
   0128 74 01               355 	mov	a,#0x01
   012A 12s00r00            356 	lcall	__gptrput
   012D 80 12               357 	sjmp	00113$
   012F                     358 00112$:
                            359 ;	time.c:89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
   012F 74 1F               360 	mov	a,#0x1F
   0131 B5 00 00            361 	cjne	a,ar0,00138$
   0134                     362 00138$:
   0134 50 0B               363 	jnc	00113$
   0136 8D 82               364 	mov	dpl,r5
   0138 8E 83               365 	mov	dph,r6
   013A 8F F0               366 	mov	b,r7
   013C 74 1F               367 	mov	a,#0x1F
   013E 12s00r00            368 	lcall	__gptrput
   0141                     369 00113$:
                            370 ;	time.c:90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
   0141 74 04               371 	mov	a,#0x04
   0143 2A                  372 	add	a,r2
   0144 FD                  373 	mov	r5,a
   0145 E4                  374 	clr	a
   0146 3B                  375 	addc	a,r3
   0147 FE                  376 	mov	r6,a
   0148 8C 07               377 	mov	ar7,r4
   014A 8D 82               378 	mov	dpl,r5
   014C 8E 83               379 	mov	dph,r6
   014E 8F F0               380 	mov	b,r7
   0150 12s00r00            381 	lcall	__gptrget
   0153 F8                  382 	mov	r0,a
   0154 74 0B               383 	mov	a,#0x0B
   0156 B5 00 00            384 	cjne	a,ar0,00140$
   0159                     385 00140$:
   0159 50 0B               386 	jnc	00115$
   015B 8D 82               387 	mov	dpl,r5
   015D 8E 83               388 	mov	dph,r6
   015F 8F F0               389 	mov	b,r7
   0161 74 0B               390 	mov	a,#0x0B
   0163 12s00r00            391 	lcall	__gptrput
   0166                     392 00115$:
                            393 ;	time.c:91: if (timeptr->tm_year<0) timeptr->tm_year=0;
   0166 74 05               394 	mov	a,#0x05
   0168 2A                  395 	add	a,r2
   0169 FA                  396 	mov	r2,a
   016A E4                  397 	clr	a
   016B 3B                  398 	addc	a,r3
   016C FB                  399 	mov	r3,a
   016D 8A 82               400 	mov	dpl,r2
   016F 8B 83               401 	mov	dph,r3
   0171 8C F0               402 	mov	b,r4
   0173 12s00r00            403 	lcall	__gptrget
   0176 FD                  404 	mov	r5,a
   0177 A3                  405 	inc	dptr
   0178 12s00r00            406 	lcall	__gptrget
   017B FE                  407 	mov	r6,a
   017C 30 E7 0F            408 	jnb	acc.7,00118$
   017F 8A 82               409 	mov	dpl,r2
   0181 8B 83               410 	mov	dph,r3
   0183 8C F0               411 	mov	b,r4
   0185 E4                  412 	clr	a
   0186 12s00r00            413 	lcall	__gptrput
   0189 A3                  414 	inc	dptr
   018A E4                  415 	clr	a
   018B 02s00r00            416 	ljmp	__gptrput
   018E                     417 00118$:
   018E 22                  418 	ret
                            419 ;------------------------------------------------------------
                            420 ;Allocation info for local variables in function 'asctime'
                            421 ;------------------------------------------------------------
                            422 ;sloc0                     Allocated with name '_asctime_sloc0_1_0'
                            423 ;sloc1                     Allocated with name '_asctime_sloc1_1_0'
                            424 ;sloc2                     Allocated with name '_asctime_sloc2_1_0'
                            425 ;sloc3                     Allocated with name '_asctime_sloc3_1_0'
                            426 ;sloc4                     Allocated with name '_asctime_sloc4_1_0'
                            427 ;------------------------------------------------------------
                            428 ;	time.c:95: char *asctime(struct tm *timeptr) {
                            429 ;	-----------------------------------------
                            430 ;	 function asctime
                            431 ;	-----------------------------------------
   018F                     432 _asctime:
   018F AA F0               433 	mov	r2,b
   0191 AB 83               434 	mov	r3,dph
   0193 E5 82               435 	mov	a,dpl
   0195 78r2F               436 	mov	r0,#_asctime_timeptr_1_1
   0197 F2                  437 	movx	@r0,a
   0198 08                  438 	inc	r0
   0199 EB                  439 	mov	a,r3
   019A F2                  440 	movx	@r0,a
   019B 08                  441 	inc	r0
   019C EA                  442 	mov	a,r2
   019D F2                  443 	movx	@r0,a
                            444 ;	time.c:96: CheckTime(timeptr);
   019E 78r2F               445 	mov	r0,#_asctime_timeptr_1_1
   01A0 E2                  446 	movx	a,@r0
   01A1 F5 82               447 	mov	dpl,a
   01A3 08                  448 	inc	r0
   01A4 E2                  449 	movx	a,@r0
   01A5 F5 83               450 	mov	dph,a
   01A7 08                  451 	inc	r0
   01A8 E2                  452 	movx	a,@r0
   01A9 F5 F0               453 	mov	b,a
   01AB 12s00r7F            454 	lcall	_CheckTime
                            455 ;	time.c:100: timeptr->tm_year+1900);
   01AE 78r2F               456 	mov	r0,#_asctime_timeptr_1_1
   01B0 E2                  457 	movx	a,@r0
   01B1 24 05               458 	add	a,#0x05
   01B3 FD                  459 	mov	r5,a
   01B4 08                  460 	inc	r0
   01B5 E2                  461 	movx	a,@r0
   01B6 34 00               462 	addc	a,#0x00
   01B8 FE                  463 	mov	r6,a
   01B9 08                  464 	inc	r0
   01BA E2                  465 	movx	a,@r0
   01BB FF                  466 	mov	r7,a
   01BC 8D 82               467 	mov	dpl,r5
   01BE 8E 83               468 	mov	dph,r6
   01C0 8F F0               469 	mov	b,r7
   01C2 12s00r00            470 	lcall	__gptrget
   01C5 FD                  471 	mov	r5,a
   01C6 A3                  472 	inc	dptr
   01C7 12s00r00            473 	lcall	__gptrget
   01CA FE                  474 	mov	r6,a
   01CB 74 6C               475 	mov	a,#0x6C
   01CD 2D                  476 	add	a,r5
   01CE F5*08               477 	mov	_asctime_sloc4_1_0,a
   01D0 74 07               478 	mov	a,#0x07
   01D2 3E                  479 	addc	a,r6
   01D3 F5*09               480 	mov	(_asctime_sloc4_1_0 + 1),a
                            481 ;	time.c:99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
   01D5 78r2F               482 	mov	r0,#_asctime_timeptr_1_1
   01D7 E2                  483 	movx	a,@r0
   01D8 F5 82               484 	mov	dpl,a
   01DA 08                  485 	inc	r0
   01DB E2                  486 	movx	a,@r0
   01DC F5 83               487 	mov	dph,a
   01DE 08                  488 	inc	r0
   01DF E2                  489 	movx	a,@r0
   01E0 F5 F0               490 	mov	b,a
   01E2 12s00r00            491 	lcall	__gptrget
   01E5 FF                  492 	mov	r7,a
   01E6 8F*00               493 	mov	_asctime_sloc0_1_0,r7
   01E8 75*01 00            494 	mov	(_asctime_sloc0_1_0 + 1),#0x00
   01EB 78r2F               495 	mov	r0,#_asctime_timeptr_1_1
   01ED E2                  496 	movx	a,@r0
   01EE 24 01               497 	add	a,#0x01
   01F0 FB                  498 	mov	r3,a
   01F1 08                  499 	inc	r0
   01F2 E2                  500 	movx	a,@r0
   01F3 34 00               501 	addc	a,#0x00
   01F5 FC                  502 	mov	r4,a
   01F6 08                  503 	inc	r0
   01F7 E2                  504 	movx	a,@r0
   01F8 FA                  505 	mov	r2,a
   01F9 8B 82               506 	mov	dpl,r3
   01FB 8C 83               507 	mov	dph,r4
   01FD 8A F0               508 	mov	b,r2
   01FF 12s00r00            509 	lcall	__gptrget
   0202 FB                  510 	mov	r3,a
   0203 8B*02               511 	mov	_asctime_sloc1_1_0,r3
   0205 75*03 00            512 	mov	(_asctime_sloc1_1_0 + 1),#0x00
   0208 78r2F               513 	mov	r0,#_asctime_timeptr_1_1
   020A E2                  514 	movx	a,@r0
   020B 24 02               515 	add	a,#0x02
   020D FC                  516 	mov	r4,a
   020E 08                  517 	inc	r0
   020F E2                  518 	movx	a,@r0
   0210 34 00               519 	addc	a,#0x00
   0212 FF                  520 	mov	r7,a
   0213 08                  521 	inc	r0
   0214 E2                  522 	movx	a,@r0
   0215 FA                  523 	mov	r2,a
   0216 8C 82               524 	mov	dpl,r4
   0218 8F 83               525 	mov	dph,r7
   021A 8A F0               526 	mov	b,r2
   021C 12s00r00            527 	lcall	__gptrget
   021F FC                  528 	mov	r4,a
   0220 8C*04               529 	mov	_asctime_sloc2_1_0,r4
   0222 75*05 00            530 	mov	(_asctime_sloc2_1_0 + 1),#0x00
                            531 ;	time.c:98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
   0225 78r2F               532 	mov	r0,#_asctime_timeptr_1_1
   0227 E2                  533 	movx	a,@r0
   0228 24 03               534 	add	a,#0x03
   022A FB                  535 	mov	r3,a
   022B 08                  536 	inc	r0
   022C E2                  537 	movx	a,@r0
   022D 34 00               538 	addc	a,#0x00
   022F FF                  539 	mov	r7,a
   0230 08                  540 	inc	r0
   0231 E2                  541 	movx	a,@r0
   0232 FA                  542 	mov	r2,a
   0233 8B 82               543 	mov	dpl,r3
   0235 8F 83               544 	mov	dph,r7
   0237 8A F0               545 	mov	b,r2
   0239 12s00r00            546 	lcall	__gptrget
   023C FB                  547 	mov	r3,a
   023D 8B*06               548 	mov	_asctime_sloc3_1_0,r3
   023F 75*07 00            549 	mov	(_asctime_sloc3_1_0 + 1),#0x00
   0242 78r2F               550 	mov	r0,#_asctime_timeptr_1_1
   0244 E2                  551 	movx	a,@r0
   0245 24 04               552 	add	a,#0x04
   0247 FC                  553 	mov	r4,a
   0248 08                  554 	inc	r0
   0249 E2                  555 	movx	a,@r0
   024A 34 00               556 	addc	a,#0x00
   024C FF                  557 	mov	r7,a
   024D 08                  558 	inc	r0
   024E E2                  559 	movx	a,@r0
   024F FA                  560 	mov	r2,a
   0250 8C 82               561 	mov	dpl,r4
   0252 8F 83               562 	mov	dph,r7
   0254 8A F0               563 	mov	b,r2
   0256 12s00r00            564 	lcall	__gptrget
   0259 25 E0               565 	add	a,acc
   025B FA                  566 	mov	r2,a
   025C 90s00r0C            567 	mov	dptr,#___month
   025F 93                  568 	movc	a,@a+dptr
   0260 CA                  569 	xch	a,r2
   0261 A3                  570 	inc	dptr
   0262 93                  571 	movc	a,@a+dptr
   0263 FB                  572 	mov	r3,a
   0264 7C 80               573 	mov	r4,#0x80
   0266 78r2F               574 	mov	r0,#_asctime_timeptr_1_1
   0268 E2                  575 	movx	a,@r0
   0269 24 07               576 	add	a,#0x07
   026B FF                  577 	mov	r7,a
   026C 08                  578 	inc	r0
   026D E2                  579 	movx	a,@r0
   026E 34 00               580 	addc	a,#0x00
   0270 FD                  581 	mov	r5,a
   0271 08                  582 	inc	r0
   0272 E2                  583 	movx	a,@r0
   0273 FE                  584 	mov	r6,a
   0274 8F 82               585 	mov	dpl,r7
   0276 8D 83               586 	mov	dph,r5
   0278 8E F0               587 	mov	b,r6
   027A 12s00r00            588 	lcall	__gptrget
   027D 25 E0               589 	add	a,acc
   027F FD                  590 	mov	r5,a
   0280 90s00r24            591 	mov	dptr,#___day
   0283 93                  592 	movc	a,@a+dptr
   0284 CD                  593 	xch	a,r5
   0285 A3                  594 	inc	dptr
   0286 93                  595 	movc	a,@a+dptr
   0287 FE                  596 	mov	r6,a
   0288 7F 80               597 	mov	r7,#0x80
                            598 ;	time.c:97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
   028A C0*08               599 	push	_asctime_sloc4_1_0
   028C C0*09               600 	push	(_asctime_sloc4_1_0 + 1)
   028E C0*00               601 	push	_asctime_sloc0_1_0
   0290 C0*01               602 	push	(_asctime_sloc0_1_0 + 1)
   0292 C0*02               603 	push	_asctime_sloc1_1_0
   0294 C0*03               604 	push	(_asctime_sloc1_1_0 + 1)
   0296 C0*04               605 	push	_asctime_sloc2_1_0
   0298 C0*05               606 	push	(_asctime_sloc2_1_0 + 1)
   029A C0*06               607 	push	_asctime_sloc3_1_0
   029C C0*07               608 	push	(_asctime_sloc3_1_0 + 1)
   029E C0 02               609 	push	ar2
   02A0 C0 03               610 	push	ar3
   02A2 C0 04               611 	push	ar4
   02A4 C0 05               612 	push	ar5
   02A6 C0 06               613 	push	ar6
   02A8 C0 07               614 	push	ar7
   02AA 74r32               615 	mov	a,#__str_0
   02AC C0 E0               616 	push	acc
   02AE 74s00               617 	mov	a,#(__str_0 >> 8)
   02B0 C0 E0               618 	push	acc
   02B2 74 80               619 	mov	a,#0x80
   02B4 C0 E0               620 	push	acc
   02B6 74r0F               621 	mov	a,#_ascTimeBuffer
   02B8 C0 E0               622 	push	acc
   02BA 74s00               623 	mov	a,#(_ascTimeBuffer >> 8)
   02BC C0 E0               624 	push	acc
   02BE 74 60               625 	mov	a,#0x60
   02C0 C0 E0               626 	push	acc
   02C2 12s00r00            627 	lcall	_sprintf
   02C5 E5 81               628 	mov	a,sp
   02C7 24 EA               629 	add	a,#0xea
   02C9 F5 81               630 	mov	sp,a
                            631 ;	time.c:101: return ascTimeBuffer;
   02CB 90s00r0F            632 	mov	dptr,#_ascTimeBuffer
   02CE 75 F0 60            633 	mov	b,#0x60
   02D1 22                  634 	ret
                            635 ;------------------------------------------------------------
                            636 ;Allocation info for local variables in function 'ctime'
                            637 ;------------------------------------------------------------
                            638 ;------------------------------------------------------------
                            639 ;	time.c:104: char *ctime(time_t *timep) {
                            640 ;	-----------------------------------------
                            641 ;	 function ctime
                            642 ;	-----------------------------------------
   02D2                     643 _ctime:
                            644 ;	time.c:105: return asctime(localtime(timep));
   02D2 12s02rD8            645 	lcall	_localtime
   02D5 02s01r8F            646 	ljmp	_asctime
                            647 ;------------------------------------------------------------
                            648 ;Allocation info for local variables in function 'localtime'
                            649 ;------------------------------------------------------------
                            650 ;------------------------------------------------------------
                            651 ;	time.c:121: struct tm *localtime(time_t *timep) {
                            652 ;	-----------------------------------------
                            653 ;	 function localtime
                            654 ;	-----------------------------------------
   02D8                     655 _localtime:
                            656 ;	time.c:122: return gmtime(timep);
   02D8 02s02rDB            657 	ljmp	_gmtime
                            658 ;------------------------------------------------------------
                            659 ;Allocation info for local variables in function 'gmtime'
                            660 ;------------------------------------------------------------
                            661 ;sloc0                     Allocated with name '_gmtime_sloc0_1_0'
                            662 ;------------------------------------------------------------
                            663 ;	time.c:125: struct tm *gmtime(time_t *timep) {
                            664 ;	-----------------------------------------
                            665 ;	 function gmtime
                            666 ;	-----------------------------------------
   02DB                     667 _gmtime:
                            668 ;	time.c:126: unsigned long epoch=*timep;
   02DB 78r3E               669 	mov	r0,#_gmtime_epoch_1_1
   02DD 12s00r00            670 	lcall	__gptrget
   02E0 F2                  671 	movx	@r0,a
   02E1 A3                  672 	inc	dptr
   02E2 12s00r00            673 	lcall	__gptrget
   02E5 08                  674 	inc	r0
   02E6 F2                  675 	movx	@r0,a
   02E7 A3                  676 	inc	dptr
   02E8 12s00r00            677 	lcall	__gptrget
   02EB 08                  678 	inc	r0
   02EC F2                  679 	movx	@r0,a
   02ED A3                  680 	inc	dptr
   02EE 12s00r00            681 	lcall	__gptrget
   02F1 08                  682 	inc	r0
   02F2 F2                  683 	movx	@r0,a
                            684 ;	time.c:131: lastTime.tm_sec=epoch%60;
   02F3 78r00               685 	mov	r0,#__modulong_PARM_2
   02F5 74 3C               686 	mov	a,#0x3C
   02F7 F2                  687 	movx	@r0,a
   02F8 08                  688 	inc	r0
   02F9 E4                  689 	clr	a
   02FA F2                  690 	movx	@r0,a
   02FB 08                  691 	inc	r0
   02FC F2                  692 	movx	@r0,a
   02FD 08                  693 	inc	r0
   02FE F2                  694 	movx	@r0,a
   02FF 78r3E               695 	mov	r0,#_gmtime_epoch_1_1
   0301 E2                  696 	movx	a,@r0
   0302 F5 82               697 	mov	dpl,a
   0304 08                  698 	inc	r0
   0305 E2                  699 	movx	a,@r0
   0306 F5 83               700 	mov	dph,a
   0308 08                  701 	inc	r0
   0309 E2                  702 	movx	a,@r0
   030A F5 F0               703 	mov	b,a
   030C 08                  704 	inc	r0
   030D E2                  705 	movx	a,@r0
   030E 12s00r00            706 	lcall	__modulong
   0311 AE 82               707 	mov	r6,dpl
   0313 78r32               708 	mov	r0,#_lastTime
   0315 EE                  709 	mov	a,r6
   0316 F2                  710 	movx	@r0,a
                            711 ;	time.c:132: epoch/=60; // now it is minutes
   0317 78r00               712 	mov	r0,#__divulong_PARM_2
   0319 74 3C               713 	mov	a,#0x3C
   031B F2                  714 	movx	@r0,a
   031C 08                  715 	inc	r0
   031D E4                  716 	clr	a
   031E F2                  717 	movx	@r0,a
   031F 08                  718 	inc	r0
   0320 F2                  719 	movx	@r0,a
   0321 08                  720 	inc	r0
   0322 F2                  721 	movx	@r0,a
   0323 78r3E               722 	mov	r0,#_gmtime_epoch_1_1
   0325 E2                  723 	movx	a,@r0
   0326 F5 82               724 	mov	dpl,a
   0328 08                  725 	inc	r0
   0329 E2                  726 	movx	a,@r0
   032A F5 83               727 	mov	dph,a
   032C 08                  728 	inc	r0
   032D E2                  729 	movx	a,@r0
   032E F5 F0               730 	mov	b,a
   0330 08                  731 	inc	r0
   0331 E2                  732 	movx	a,@r0
   0332 12s00r00            733 	lcall	__divulong
   0335 78r3E               734 	mov	r0,#_gmtime_epoch_1_1
   0337 C0 E0               735 	push	acc
   0339 E5 82               736 	mov	a,dpl
   033B F2                  737 	movx	@r0,a
   033C 08                  738 	inc	r0
   033D E5 83               739 	mov	a,dph
   033F F2                  740 	movx	@r0,a
   0340 08                  741 	inc	r0
   0341 E5 F0               742 	mov	a,b
   0343 F2                  743 	movx	@r0,a
   0344 D0 E0               744 	pop	acc
   0346 08                  745 	inc	r0
   0347 F2                  746 	movx	@r0,a
                            747 ;	time.c:133: lastTime.tm_min=epoch%60;
   0348 78r00               748 	mov	r0,#__modulong_PARM_2
   034A 74 3C               749 	mov	a,#0x3C
   034C F2                  750 	movx	@r0,a
   034D 08                  751 	inc	r0
   034E E4                  752 	clr	a
   034F F2                  753 	movx	@r0,a
   0350 08                  754 	inc	r0
   0351 F2                  755 	movx	@r0,a
   0352 08                  756 	inc	r0
   0353 F2                  757 	movx	@r0,a
   0354 78r3E               758 	mov	r0,#_gmtime_epoch_1_1
   0356 E2                  759 	movx	a,@r0
   0357 F5 82               760 	mov	dpl,a
   0359 08                  761 	inc	r0
   035A E2                  762 	movx	a,@r0
   035B F5 83               763 	mov	dph,a
   035D 08                  764 	inc	r0
   035E E2                  765 	movx	a,@r0
   035F F5 F0               766 	mov	b,a
   0361 08                  767 	inc	r0
   0362 E2                  768 	movx	a,@r0
   0363 12s00r00            769 	lcall	__modulong
   0366 AA 82               770 	mov	r2,dpl
   0368 78r33               771 	mov	r0,#(_lastTime + 0x0001)
   036A EA                  772 	mov	a,r2
   036B F2                  773 	movx	@r0,a
                            774 ;	time.c:134: epoch/=60; // now it is hours
   036C 78r00               775 	mov	r0,#__divulong_PARM_2
   036E 74 3C               776 	mov	a,#0x3C
   0370 F2                  777 	movx	@r0,a
   0371 08                  778 	inc	r0
   0372 E4                  779 	clr	a
   0373 F2                  780 	movx	@r0,a
   0374 08                  781 	inc	r0
   0375 F2                  782 	movx	@r0,a
   0376 08                  783 	inc	r0
   0377 F2                  784 	movx	@r0,a
   0378 78r3E               785 	mov	r0,#_gmtime_epoch_1_1
   037A E2                  786 	movx	a,@r0
   037B F5 82               787 	mov	dpl,a
   037D 08                  788 	inc	r0
   037E E2                  789 	movx	a,@r0
   037F F5 83               790 	mov	dph,a
   0381 08                  791 	inc	r0
   0382 E2                  792 	movx	a,@r0
   0383 F5 F0               793 	mov	b,a
   0385 08                  794 	inc	r0
   0386 E2                  795 	movx	a,@r0
   0387 12s00r00            796 	lcall	__divulong
   038A 78r3E               797 	mov	r0,#_gmtime_epoch_1_1
   038C C0 E0               798 	push	acc
   038E E5 82               799 	mov	a,dpl
   0390 F2                  800 	movx	@r0,a
   0391 08                  801 	inc	r0
   0392 E5 83               802 	mov	a,dph
   0394 F2                  803 	movx	@r0,a
   0395 08                  804 	inc	r0
   0396 E5 F0               805 	mov	a,b
   0398 F2                  806 	movx	@r0,a
   0399 D0 E0               807 	pop	acc
   039B 08                  808 	inc	r0
   039C F2                  809 	movx	@r0,a
                            810 ;	time.c:135: lastTime.tm_hour=epoch%24;
   039D 78r00               811 	mov	r0,#__modulong_PARM_2
   039F 74 18               812 	mov	a,#0x18
   03A1 F2                  813 	movx	@r0,a
   03A2 08                  814 	inc	r0
   03A3 E4                  815 	clr	a
   03A4 F2                  816 	movx	@r0,a
   03A5 08                  817 	inc	r0
   03A6 F2                  818 	movx	@r0,a
   03A7 08                  819 	inc	r0
   03A8 F2                  820 	movx	@r0,a
   03A9 78r3E               821 	mov	r0,#_gmtime_epoch_1_1
   03AB E2                  822 	movx	a,@r0
   03AC F5 82               823 	mov	dpl,a
   03AE 08                  824 	inc	r0
   03AF E2                  825 	movx	a,@r0
   03B0 F5 83               826 	mov	dph,a
   03B2 08                  827 	inc	r0
   03B3 E2                  828 	movx	a,@r0
   03B4 F5 F0               829 	mov	b,a
   03B6 08                  830 	inc	r0
   03B7 E2                  831 	movx	a,@r0
   03B8 12s00r00            832 	lcall	__modulong
   03BB AA 82               833 	mov	r2,dpl
   03BD 78r34               834 	mov	r0,#(_lastTime + 0x0002)
   03BF EA                  835 	mov	a,r2
   03C0 F2                  836 	movx	@r0,a
                            837 ;	time.c:136: epoch/=24; // now it is days
   03C1 78r00               838 	mov	r0,#__divulong_PARM_2
   03C3 74 18               839 	mov	a,#0x18
   03C5 F2                  840 	movx	@r0,a
   03C6 08                  841 	inc	r0
   03C7 E4                  842 	clr	a
   03C8 F2                  843 	movx	@r0,a
   03C9 08                  844 	inc	r0
   03CA F2                  845 	movx	@r0,a
   03CB 08                  846 	inc	r0
   03CC F2                  847 	movx	@r0,a
   03CD 78r3E               848 	mov	r0,#_gmtime_epoch_1_1
   03CF E2                  849 	movx	a,@r0
   03D0 F5 82               850 	mov	dpl,a
   03D2 08                  851 	inc	r0
   03D3 E2                  852 	movx	a,@r0
   03D4 F5 83               853 	mov	dph,a
   03D6 08                  854 	inc	r0
   03D7 E2                  855 	movx	a,@r0
   03D8 F5 F0               856 	mov	b,a
   03DA 08                  857 	inc	r0
   03DB E2                  858 	movx	a,@r0
   03DC 12s00r00            859 	lcall	__divulong
   03DF 78r3E               860 	mov	r0,#_gmtime_epoch_1_1
   03E1 C0 E0               861 	push	acc
   03E3 E5 82               862 	mov	a,dpl
   03E5 F2                  863 	movx	@r0,a
   03E6 08                  864 	inc	r0
   03E7 E5 83               865 	mov	a,dph
   03E9 F2                  866 	movx	@r0,a
   03EA 08                  867 	inc	r0
   03EB E5 F0               868 	mov	a,b
   03ED F2                  869 	movx	@r0,a
   03EE D0 E0               870 	pop	acc
   03F0 08                  871 	inc	r0
   03F1 F2                  872 	movx	@r0,a
                            873 ;	time.c:137: lastTime.tm_wday=(epoch+4)%7;
   03F2 78r3E               874 	mov	r0,#_gmtime_epoch_1_1
   03F4 E2                  875 	movx	a,@r0
   03F5 24 04               876 	add	a,#0x04
   03F7 FA                  877 	mov	r2,a
   03F8 08                  878 	inc	r0
   03F9 E2                  879 	movx	a,@r0
   03FA 34 00               880 	addc	a,#0x00
   03FC FB                  881 	mov	r3,a
   03FD 08                  882 	inc	r0
   03FE E2                  883 	movx	a,@r0
   03FF 34 00               884 	addc	a,#0x00
   0401 FC                  885 	mov	r4,a
   0402 08                  886 	inc	r0
   0403 E2                  887 	movx	a,@r0
   0404 34 00               888 	addc	a,#0x00
   0406 FD                  889 	mov	r5,a
   0407 78r00               890 	mov	r0,#__modulong_PARM_2
   0409 74 07               891 	mov	a,#0x07
   040B F2                  892 	movx	@r0,a
   040C 08                  893 	inc	r0
   040D E4                  894 	clr	a
   040E F2                  895 	movx	@r0,a
   040F 08                  896 	inc	r0
   0410 F2                  897 	movx	@r0,a
   0411 08                  898 	inc	r0
   0412 F2                  899 	movx	@r0,a
   0413 8A 82               900 	mov	dpl,r2
   0415 8B 83               901 	mov	dph,r3
   0417 8C F0               902 	mov	b,r4
   0419 ED                  903 	mov	a,r5
   041A 12s00r00            904 	lcall	__modulong
   041D AA 82               905 	mov	r2,dpl
   041F AB 83               906 	mov	r3,dph
   0421 AC F0               907 	mov	r4,b
   0423 FD                  908 	mov	r5,a
   0424 78r39               909 	mov	r0,#(_lastTime + 0x0007)
   0426 EA                  910 	mov	a,r2
   0427 F2                  911 	movx	@r0,a
                            912 ;	time.c:140: days=0;
   0428 78r42               913 	mov	r0,#_gmtime_days_1_1
   042A E4                  914 	clr	a
   042B F2                  915 	movx	@r0,a
   042C 08                  916 	inc	r0
   042D F2                  917 	movx	@r0,a
   042E 08                  918 	inc	r0
   042F F2                  919 	movx	@r0,a
   0430 08                  920 	inc	r0
   0431 F2                  921 	movx	@r0,a
                            922 ;	time.c:141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
   0432 7E B2               923 	mov	r6,#0xB2
   0434 7F 07               924 	mov	r7,#0x07
   0436                     925 00101$:
   0436 74 03               926 	mov	a,#0x03
   0438 5E                  927 	anl	a,r6
   0439 FA                  928 	mov	r2,a
   043A 7B 00               929 	mov	r3,#0x00
   043C 4B                  930 	orl	a,r3
   043D B4 01 00            931 	cjne	a,#0x01,00134$
   0440                     932 00134$:
   0440 E4                  933 	clr	a
   0441 33                  934 	rlc	a
   0442 FA                  935 	mov	r2,a
   0443 60 06               936 	jz	00119$
   0445 7A 6E               937 	mov	r2,#0x6E
   0447 7B 01               938 	mov	r3,#0x01
   0449 80 04               939 	sjmp	00120$
   044B                     940 00119$:
   044B 7A 6D               941 	mov	r2,#0x6D
   044D 7B 01               942 	mov	r3,#0x01
   044F                     943 00120$:
   044F EB                  944 	mov	a,r3
   0450 33                  945 	rlc	a
   0451 95 E0               946 	subb	a,acc
   0453 FC                  947 	mov	r4,a
   0454 FD                  948 	mov	r5,a
   0455 78r42               949 	mov	r0,#_gmtime_days_1_1
   0457 E2                  950 	movx	a,@r0
   0458 2A                  951 	add	a,r2
   0459 FA                  952 	mov	r2,a
   045A 08                  953 	inc	r0
   045B E2                  954 	movx	a,@r0
   045C 3B                  955 	addc	a,r3
   045D FB                  956 	mov	r3,a
   045E 08                  957 	inc	r0
   045F E2                  958 	movx	a,@r0
   0460 3C                  959 	addc	a,r4
   0461 FC                  960 	mov	r4,a
   0462 08                  961 	inc	r0
   0463 E2                  962 	movx	a,@r0
   0464 3D                  963 	addc	a,r5
   0465 FD                  964 	mov	r5,a
   0466 78r42               965 	mov	r0,#_gmtime_days_1_1
   0468 EA                  966 	mov	a,r2
   0469 F2                  967 	movx	@r0,a
   046A 08                  968 	inc	r0
   046B EB                  969 	mov	a,r3
   046C F2                  970 	movx	@r0,a
   046D 08                  971 	inc	r0
   046E EC                  972 	mov	a,r4
   046F F2                  973 	movx	@r0,a
   0470 08                  974 	inc	r0
   0471 ED                  975 	mov	a,r5
   0472 F2                  976 	movx	@r0,a
   0473 78r3E               977 	mov	r0,#_gmtime_epoch_1_1
   0475 C3                  978 	clr	c
   0476 E2                  979 	movx	a,@r0
   0477 9A                  980 	subb	a,r2
   0478 08                  981 	inc	r0
   0479 E2                  982 	movx	a,@r0
   047A 9B                  983 	subb	a,r3
   047B 08                  984 	inc	r0
   047C E2                  985 	movx	a,@r0
   047D 9C                  986 	subb	a,r4
   047E 08                  987 	inc	r0
   047F E2                  988 	movx	a,@r0
   0480 9D                  989 	subb	a,r5
   0481 40 07               990 	jc	00103$
                            991 ;	time.c:142: year++;
   0483 0E                  992 	inc	r6
   0484 BE 00 AF            993 	cjne	r6,#0x00,00101$
   0487 0F                  994 	inc	r7
   0488 80 AC               995 	sjmp	00101$
   048A                     996 00103$:
                            997 ;	time.c:144: lastTime.tm_year=year-1900;
   048A EE                  998 	mov	a,r6
   048B 24 94               999 	add	a,#0x94
   048D FA                 1000 	mov	r2,a
   048E EF                 1001 	mov	a,r7
   048F 34 F8              1002 	addc	a,#0xf8
   0491 FB                 1003 	mov	r3,a
   0492 78r37              1004 	mov	r0,#(_lastTime + 0x0005)
   0494 EA                 1005 	mov	a,r2
   0495 F2                 1006 	movx	@r0,a
   0496 08                 1007 	inc	r0
   0497 EB                 1008 	mov	a,r3
   0498 F2                 1009 	movx	@r0,a
                           1010 ;	time.c:146: days -= LEAP_YEAR(year) ? 366 : 365;
   0499 74 03              1011 	mov	a,#0x03
   049B 5E                 1012 	anl	a,r6
   049C FA                 1013 	mov	r2,a
   049D 7B 00              1014 	mov	r3,#0x00
   049F 4B                 1015 	orl	a,r3
   04A0 B4 01 00           1016 	cjne	a,#0x01,00138$
   04A3                    1017 00138$:
   04A3 E4                 1018 	clr	a
   04A4 33                 1019 	rlc	a
   04A5 FC                 1020 	mov	r4,a
   04A6 60 06              1021 	jz	00121$
   04A8 7C 6E              1022 	mov	r4,#0x6E
   04AA 7D 01              1023 	mov	r5,#0x01
   04AC 80 04              1024 	sjmp	00122$
   04AE                    1025 00121$:
   04AE 7C 6D              1026 	mov	r4,#0x6D
   04B0 7D 01              1027 	mov	r5,#0x01
   04B2                    1028 00122$:
   04B2 ED                 1029 	mov	a,r5
   04B3 33                 1030 	rlc	a
   04B4 95 E0              1031 	subb	a,acc
   04B6 FE                 1032 	mov	r6,a
   04B7 FF                 1033 	mov	r7,a
   04B8 78r42              1034 	mov	r0,#_gmtime_days_1_1
   04BA E2                 1035 	movx	a,@r0
   04BB C3                 1036 	clr	c
   04BC 9C                 1037 	subb	a,r4
   04BD F2                 1038 	movx	@r0,a
   04BE 08                 1039 	inc	r0
   04BF E2                 1040 	movx	a,@r0
   04C0 9D                 1041 	subb	a,r5
   04C1 F2                 1042 	movx	@r0,a
   04C2 08                 1043 	inc	r0
   04C3 E2                 1044 	movx	a,@r0
   04C4 9E                 1045 	subb	a,r6
   04C5 F2                 1046 	movx	@r0,a
   04C6 08                 1047 	inc	r0
   04C7 E2                 1048 	movx	a,@r0
   04C8 9F                 1049 	subb	a,r7
   04C9 F2                 1050 	movx	@r0,a
                           1051 ;	time.c:147: epoch -= days; // now it is days in this year, starting at 0
   04CA 78r3E              1052 	mov	r0,#_gmtime_epoch_1_1
   04CC 79r42              1053 	mov	r1,#_gmtime_days_1_1
   04CE E3                 1054 	movx	a,@r1
   04CF F5 F0              1055 	mov	b,a
   04D1 C3                 1056 	clr	c
   04D2 E2                 1057 	movx	a,@r0
   04D3 95 F0              1058 	subb	a,b
   04D5 F2                 1059 	movx	@r0,a
   04D6 09                 1060 	inc	r1
   04D7 E3                 1061 	movx	a,@r1
   04D8 F5 F0              1062 	mov	b,a
   04DA 08                 1063 	inc	r0
   04DB E2                 1064 	movx	a,@r0
   04DC 95 F0              1065 	subb	a,b
   04DE F2                 1066 	movx	@r0,a
   04DF 09                 1067 	inc	r1
   04E0 E3                 1068 	movx	a,@r1
   04E1 F5 F0              1069 	mov	b,a
   04E3 08                 1070 	inc	r0
   04E4 E2                 1071 	movx	a,@r0
   04E5 95 F0              1072 	subb	a,b
   04E7 F2                 1073 	movx	@r0,a
   04E8 09                 1074 	inc	r1
   04E9 E3                 1075 	movx	a,@r1
   04EA F5 F0              1076 	mov	b,a
   04EC 08                 1077 	inc	r0
   04ED E2                 1078 	movx	a,@r0
   04EE 95 F0              1079 	subb	a,b
   04F0 F2                 1080 	movx	@r0,a
                           1081 ;	time.c:148: lastTime.tm_yday=epoch;
   04F1 78r3E              1082 	mov	r0,#_gmtime_epoch_1_1
   04F3 E2                 1083 	movx	a,@r0
   04F4 FC                 1084 	mov	r4,a
   04F5 08                 1085 	inc	r0
   04F6 E2                 1086 	movx	a,@r0
   04F7 FD                 1087 	mov	r5,a
   04F8 78r3A              1088 	mov	r0,#(_lastTime + 0x0008)
   04FA EC                 1089 	mov	a,r4
   04FB F2                 1090 	movx	@r0,a
   04FC 08                 1091 	inc	r0
   04FD ED                 1092 	mov	a,r5
   04FE F2                 1093 	movx	@r0,a
                           1094 ;	time.c:153: for (month=0; month<12; month++) {
   04FF 7C 00              1095 	mov	r4,#0x00
   0501                    1096 00113$:
   0501 BC 0C 00           1097 	cjne	r4,#0x0C,00140$
   0504                    1098 00140$:
   0504 50 4D              1099 	jnc	00116$
                           1100 ;	time.c:154: if (month==1) { // februari
   0506 BC 01 0C           1101 	cjne	r4,#0x01,00108$
                           1102 ;	time.c:155: if (LEAP_YEAR(year)) {
   0509 EA                 1103 	mov	a,r2
   050A 4B                 1104 	orl	a,r3
   050B 70 04              1105 	jnz	00105$
                           1106 ;	time.c:156: monthLength=29;
   050D 7D 1D              1107 	mov	r5,#0x1D
   050F 80 0A              1108 	sjmp	00109$
   0511                    1109 00105$:
                           1110 ;	time.c:158: monthLength=28;
   0511 7D 1C              1111 	mov	r5,#0x1C
   0513 80 06              1112 	sjmp	00109$
   0515                    1113 00108$:
                           1114 ;	time.c:161: monthLength = monthDays[month];
   0515 EC                 1115 	mov	a,r4
   0516 90s00r00           1116 	mov	dptr,#_monthDays
   0519 93                 1117 	movc	a,@a+dptr
   051A FD                 1118 	mov	r5,a
   051B                    1119 00109$:
                           1120 ;	time.c:164: if (epoch>=monthLength) {
   051B 8D*0A              1121 	mov	_gmtime_sloc0_1_0,r5
   051D 75*0B 00           1122 	mov	(_gmtime_sloc0_1_0 + 1),#0x00
   0520 75*0C 00           1123 	mov	(_gmtime_sloc0_1_0 + 2),#0x00
   0523 75*0D 00           1124 	mov	(_gmtime_sloc0_1_0 + 3),#0x00
   0526 78r3E              1125 	mov	r0,#_gmtime_epoch_1_1
   0528 C3                 1126 	clr	c
   0529 E2                 1127 	movx	a,@r0
   052A 95*0A              1128 	subb	a,_gmtime_sloc0_1_0
   052C 08                 1129 	inc	r0
   052D E2                 1130 	movx	a,@r0
   052E 95*0B              1131 	subb	a,(_gmtime_sloc0_1_0 + 1)
   0530 08                 1132 	inc	r0
   0531 E2                 1133 	movx	a,@r0
   0532 95*0C              1134 	subb	a,(_gmtime_sloc0_1_0 + 2)
   0534 08                 1135 	inc	r0
   0535 E2                 1136 	movx	a,@r0
   0536 95*0D              1137 	subb	a,(_gmtime_sloc0_1_0 + 3)
   0538 40 19              1138 	jc	00116$
                           1139 ;	time.c:165: epoch-=monthLength;
   053A 78r3E              1140 	mov	r0,#_gmtime_epoch_1_1
   053C E2                 1141 	movx	a,@r0
   053D C3                 1142 	clr	c
   053E 95*0A              1143 	subb	a,_gmtime_sloc0_1_0
   0540 F2                 1144 	movx	@r0,a
   0541 08                 1145 	inc	r0
   0542 E2                 1146 	movx	a,@r0
   0543 95*0B              1147 	subb	a,(_gmtime_sloc0_1_0 + 1)
   0545 F2                 1148 	movx	@r0,a
   0546 08                 1149 	inc	r0
   0547 E2                 1150 	movx	a,@r0
   0548 95*0C              1151 	subb	a,(_gmtime_sloc0_1_0 + 2)
   054A F2                 1152 	movx	@r0,a
   054B 08                 1153 	inc	r0
   054C E2                 1154 	movx	a,@r0
   054D 95*0D              1155 	subb	a,(_gmtime_sloc0_1_0 + 3)
   054F F2                 1156 	movx	@r0,a
                           1157 ;	time.c:153: for (month=0; month<12; month++) {
   0550 0C                 1158 	inc	r4
   0551 80 AE              1159 	sjmp	00113$
   0553                    1160 00116$:
                           1161 ;	time.c:170: lastTime.tm_mon=month;
   0553 78r36              1162 	mov	r0,#(_lastTime + 0x0004)
   0555 EC                 1163 	mov	a,r4
   0556 F2                 1164 	movx	@r0,a
                           1165 ;	time.c:171: lastTime.tm_mday=epoch+1;
   0557 78r3E              1166 	mov	r0,#_gmtime_epoch_1_1
   0559 E2                 1167 	movx	a,@r0
   055A FA                 1168 	mov	r2,a
   055B 0A                 1169 	inc	r2
   055C 78r35              1170 	mov	r0,#(_lastTime + 0x0003)
   055E EA                 1171 	mov	a,r2
   055F F2                 1172 	movx	@r0,a
                           1173 ;	time.c:173: lastTime.tm_isdst=0;
   0560 78r3C              1174 	mov	r0,#(_lastTime + 0x000a)
   0562 E4                 1175 	clr	a
   0563 F2                 1176 	movx	@r0,a
                           1177 ;	time.c:175: return &lastTime;
   0564 90s00r32           1178 	mov	dptr,#_lastTime
   0567 75 F0 60           1179 	mov	b,#0x60
   056A 22                 1180 	ret
                           1181 ;------------------------------------------------------------
                           1182 ;Allocation info for local variables in function 'mktime'
                           1183 ;------------------------------------------------------------
                           1184 ;------------------------------------------------------------
                           1185 ;	time.c:179: time_t mktime(struct tm *timeptr) {
                           1186 ;	-----------------------------------------
                           1187 ;	 function mktime
                           1188 ;	-----------------------------------------
   056B                    1189 _mktime:
   056B AA F0              1190 	mov	r2,b
   056D AB 83              1191 	mov	r3,dph
   056F E5 82              1192 	mov	a,dpl
   0571 78r46              1193 	mov	r0,#_mktime_timeptr_1_1
   0573 F2                 1194 	movx	@r0,a
   0574 08                 1195 	inc	r0
   0575 EB                 1196 	mov	a,r3
   0576 F2                 1197 	movx	@r0,a
   0577 08                 1198 	inc	r0
   0578 EA                 1199 	mov	a,r2
   0579 F2                 1200 	movx	@r0,a
                           1201 ;	time.c:180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
   057A 78r46              1202 	mov	r0,#_mktime_timeptr_1_1
   057C E2                 1203 	movx	a,@r0
   057D 24 05              1204 	add	a,#0x05
   057F FD                 1205 	mov	r5,a
   0580 08                 1206 	inc	r0
   0581 E2                 1207 	movx	a,@r0
   0582 34 00              1208 	addc	a,#0x00
   0584 FE                 1209 	mov	r6,a
   0585 08                 1210 	inc	r0
   0586 E2                 1211 	movx	a,@r0
   0587 FF                 1212 	mov	r7,a
   0588 8D 82              1213 	mov	dpl,r5
   058A 8E 83              1214 	mov	dph,r6
   058C 8F F0              1215 	mov	b,r7
   058E 12s00r00           1216 	lcall	__gptrget
   0591 FD                 1217 	mov	r5,a
   0592 A3                 1218 	inc	dptr
   0593 12s00r00           1219 	lcall	__gptrget
   0596 FE                 1220 	mov	r6,a
   0597 78r49              1221 	mov	r0,#_mktime_year_1_1
   0599 74 6C              1222 	mov	a,#0x6C
   059B 2D                 1223 	add	a,r5
   059C F2                 1224 	movx	@r0,a
   059D 74 07              1225 	mov	a,#0x07
   059F 3E                 1226 	addc	a,r6
   05A0 08                 1227 	inc	r0
   05A1 F2                 1228 	movx	@r0,a
   05A2 78r46              1229 	mov	r0,#_mktime_timeptr_1_1
   05A4 E2                 1230 	movx	a,@r0
   05A5 24 04              1231 	add	a,#0x04
   05A7 FF                 1232 	mov	r7,a
   05A8 08                 1233 	inc	r0
   05A9 E2                 1234 	movx	a,@r0
   05AA 34 00              1235 	addc	a,#0x00
   05AC FD                 1236 	mov	r5,a
   05AD 08                 1237 	inc	r0
   05AE E2                 1238 	movx	a,@r0
   05AF FE                 1239 	mov	r6,a
   05B0 8F 82              1240 	mov	dpl,r7
   05B2 8D 83              1241 	mov	dph,r5
   05B4 8E F0              1242 	mov	b,r6
   05B6 12s00r00           1243 	lcall	__gptrget
   05B9 78r4B              1244 	mov	r0,#_mktime_month_1_1
   05BB F2                 1245 	movx	@r0,a
   05BC 08                 1246 	inc	r0
   05BD E4                 1247 	clr	a
   05BE F2                 1248 	movx	@r0,a
                           1249 ;	time.c:183: CheckTime(timeptr);
   05BF 78r46              1250 	mov	r0,#_mktime_timeptr_1_1
   05C1 E2                 1251 	movx	a,@r0
   05C2 F5 82              1252 	mov	dpl,a
   05C4 08                 1253 	inc	r0
   05C5 E2                 1254 	movx	a,@r0
   05C6 F5 83              1255 	mov	dph,a
   05C8 08                 1256 	inc	r0
   05C9 E2                 1257 	movx	a,@r0
   05CA F5 F0              1258 	mov	b,a
   05CC 12s00r7F           1259 	lcall	_CheckTime
                           1260 ;	time.c:186: seconds= (year-1970)*(60*60*24L*365);
   05CF 78r49              1261 	mov	r0,#_mktime_year_1_1
   05D1 E2                 1262 	movx	a,@r0
   05D2 24 4E              1263 	add	a,#0x4e
   05D4 FE                 1264 	mov	r6,a
   05D5 08                 1265 	inc	r0
   05D6 E2                 1266 	movx	a,@r0
   05D7 34 F8              1267 	addc	a,#0xf8
   05D9 FD                 1268 	mov	r5,a
   05DA 78r00              1269 	mov	r0,#__mullong_PARM_2
   05DC EE                 1270 	mov	a,r6
   05DD F2                 1271 	movx	@r0,a
   05DE 08                 1272 	inc	r0
   05DF ED                 1273 	mov	a,r5
   05E0 F2                 1274 	movx	@r0,a
   05E1 ED                 1275 	mov	a,r5
   05E2 33                 1276 	rlc	a
   05E3 95 E0              1277 	subb	a,acc
   05E5 08                 1278 	inc	r0
   05E6 F2                 1279 	movx	@r0,a
   05E7 08                 1280 	inc	r0
   05E8 F2                 1281 	movx	@r0,a
   05E9 90 33 80           1282 	mov	dptr,#0x3380
   05EC 75 F0 E1           1283 	mov	b,#0xE1
   05EF 74 01              1284 	mov	a,#0x01
   05F1 12s00r00           1285 	lcall	__mullong
   05F4 78r4F              1286 	mov	r0,#_mktime_seconds_1_1
   05F6 C0 E0              1287 	push	acc
   05F8 E5 82              1288 	mov	a,dpl
   05FA F2                 1289 	movx	@r0,a
   05FB 08                 1290 	inc	r0
   05FC E5 83              1291 	mov	a,dph
   05FE F2                 1292 	movx	@r0,a
   05FF 08                 1293 	inc	r0
   0600 E5 F0              1294 	mov	a,b
   0602 F2                 1295 	movx	@r0,a
   0603 D0 E0              1296 	pop	acc
   0605 08                 1297 	inc	r0
   0606 F2                 1298 	movx	@r0,a
                           1299 ;	time.c:189: for (i=1970; i<year; i++) {
   0607 78r4F              1300 	mov	r0,#_mktime_seconds_1_1
   0609 E2                 1301 	movx	a,@r0
   060A FB                 1302 	mov	r3,a
   060B 08                 1303 	inc	r0
   060C E2                 1304 	movx	a,@r0
   060D FC                 1305 	mov	r4,a
   060E 08                 1306 	inc	r0
   060F E2                 1307 	movx	a,@r0
   0610 FA                 1308 	mov	r2,a
   0611 08                 1309 	inc	r0
   0612 E2                 1310 	movx	a,@r0
   0613 FD                 1311 	mov	r5,a
   0614 7E B2              1312 	mov	r6,#0xB2
   0616 7F 07              1313 	mov	r7,#0x07
   0618                    1314 00107$:
   0618 78r49              1315 	mov	r0,#_mktime_year_1_1
   061A C3                 1316 	clr	c
   061B E2                 1317 	movx	a,@r0
   061C F5 F0              1318 	mov	b,a
   061E EE                 1319 	mov	a,r6
   061F 95 F0              1320 	subb	a,b
   0621 08                 1321 	inc	r0
   0622 E2                 1322 	movx	a,@r0
   0623 F5 F0              1323 	mov	b,a
   0625 EF                 1324 	mov	a,r7
   0626 64 80              1325 	xrl	a,#0x80
   0628 63 F0 80           1326 	xrl	b,#0x80
   062B 95 F0              1327 	subb	a,b
   062D 50 46              1328 	jnc	00124$
                           1329 ;	time.c:190: if (LEAP_YEAR(i)) {
   062F 78r00              1330 	mov	r0,#__modsint_PARM_2
   0631 74 04              1331 	mov	a,#0x04
   0633 F2                 1332 	movx	@r0,a
   0634 08                 1333 	inc	r0
   0635 E4                 1334 	clr	a
   0636 F2                 1335 	movx	@r0,a
   0637 8E 82              1336 	mov	dpl,r6
   0639 8F 83              1337 	mov	dph,r7
   063B C0 02              1338 	push	ar2
   063D C0 03              1339 	push	ar3
   063F C0 04              1340 	push	ar4
   0641 C0 05              1341 	push	ar5
   0643 C0 06              1342 	push	ar6
   0645 C0 07              1343 	push	ar7
   0647 12s00r00           1344 	lcall	__modsint
   064A E5 82              1345 	mov	a,dpl
   064C 85 83 F0           1346 	mov	b,dph
   064F D0 07              1347 	pop	ar7
   0651 D0 06              1348 	pop	ar6
   0653 D0 05              1349 	pop	ar5
   0655 D0 04              1350 	pop	ar4
   0657 D0 03              1351 	pop	ar3
   0659 D0 02              1352 	pop	ar2
   065B 45 F0              1353 	orl	a,b
   065D 70 0F              1354 	jnz	00109$
                           1355 ;	time.c:191: seconds+= 60*60*24L;
   065F 74 80              1356 	mov	a,#0x80
   0661 2B                 1357 	add	a,r3
   0662 FB                 1358 	mov	r3,a
   0663 74 51              1359 	mov	a,#0x51
   0665 3C                 1360 	addc	a,r4
   0666 FC                 1361 	mov	r4,a
   0667 74 01              1362 	mov	a,#0x01
   0669 3A                 1363 	addc	a,r2
   066A FA                 1364 	mov	r2,a
   066B E4                 1365 	clr	a
   066C 3D                 1366 	addc	a,r5
   066D FD                 1367 	mov	r5,a
   066E                    1368 00109$:
                           1369 ;	time.c:189: for (i=1970; i<year; i++) {
   066E 0E                 1370 	inc	r6
   066F BE 00 A6           1371 	cjne	r6,#0x00,00107$
   0672 0F                 1372 	inc	r7
   0673 80 A3              1373 	sjmp	00107$
   0675                    1374 00124$:
   0675 78r4F              1375 	mov	r0,#_mktime_seconds_1_1
   0677 EB                 1376 	mov	a,r3
   0678 F2                 1377 	movx	@r0,a
   0679 08                 1378 	inc	r0
   067A EC                 1379 	mov	a,r4
   067B F2                 1380 	movx	@r0,a
   067C 08                 1381 	inc	r0
   067D EA                 1382 	mov	a,r2
   067E F2                 1383 	movx	@r0,a
   067F 08                 1384 	inc	r0
   0680 ED                 1385 	mov	a,r5
   0681 F2                 1386 	movx	@r0,a
                           1387 ;	time.c:196: for (i=0; i<month; i++) {
   0682 78r00              1388 	mov	r0,#__modsint_PARM_2
   0684 74 04              1389 	mov	a,#0x04
   0686 F2                 1390 	movx	@r0,a
   0687 08                 1391 	inc	r0
   0688 E4                 1392 	clr	a
   0689 F2                 1393 	movx	@r0,a
   068A 78r49              1394 	mov	r0,#_mktime_year_1_1
   068C E2                 1395 	movx	a,@r0
   068D F5 82              1396 	mov	dpl,a
   068F 08                 1397 	inc	r0
   0690 E2                 1398 	movx	a,@r0
   0691 F5 83              1399 	mov	dph,a
   0693 12s00r00           1400 	lcall	__modsint
   0696 AA 82              1401 	mov	r2,dpl
   0698 AB 83              1402 	mov	r3,dph
   069A 78r4D              1403 	mov	r0,#_mktime_i_1_1
   069C E4                 1404 	clr	a
   069D F2                 1405 	movx	@r0,a
   069E 08                 1406 	inc	r0
   069F F2                 1407 	movx	@r0,a
   06A0                    1408 00111$:
   06A0 78r4D              1409 	mov	r0,#_mktime_i_1_1
   06A2 79r4B              1410 	mov	r1,#_mktime_month_1_1
   06A4 C3                 1411 	clr	c
   06A5 E3                 1412 	movx	a,@r1
   06A6 F5 F0              1413 	mov	b,a
   06A8 E2                 1414 	movx	a,@r0
   06A9 95 F0              1415 	subb	a,b
   06AB 09                 1416 	inc	r1
   06AC E3                 1417 	movx	a,@r1
   06AD F5 F0              1418 	mov	b,a
   06AF 08                 1419 	inc	r0
   06B0 E2                 1420 	movx	a,@r0
   06B1 64 80              1421 	xrl	a,#0x80
   06B3 63 F0 80           1422 	xrl	b,#0x80
   06B6 95 F0              1423 	subb	a,b
   06B8 40 03              1424 	jc	00128$
   06BA 02s07r3C           1425 	ljmp	00114$
   06BD                    1426 00128$:
                           1427 ;	time.c:197: if (i==1 && LEAP_YEAR(year)) { 
   06BD 78r4D              1428 	mov	r0,#_mktime_i_1_1
   06BF E2                 1429 	movx	a,@r0
   06C0 B4 01 07           1430 	cjne	a,#0x01,00129$
   06C3 08                 1431 	inc	r0
   06C4 E2                 1432 	movx	a,@r0
   06C5 B4 00 02           1433 	cjne	a,#0x00,00129$
   06C8 80 02              1434 	sjmp	00130$
   06CA                    1435 00129$:
   06CA 80 1B              1436 	sjmp	00104$
   06CC                    1437 00130$:
   06CC EA                 1438 	mov	a,r2
   06CD 4B                 1439 	orl	a,r3
   06CE 70 17              1440 	jnz	00104$
                           1441 ;	time.c:198: seconds+= 60*60*24L*29;
   06D0 78r4F              1442 	mov	r0,#_mktime_seconds_1_1
   06D2 E2                 1443 	movx	a,@r0
   06D3 24 80              1444 	add	a,#0x80
   06D5 F2                 1445 	movx	@r0,a
   06D6 08                 1446 	inc	r0
   06D7 E2                 1447 	movx	a,@r0
   06D8 34 3B              1448 	addc	a,#0x3B
   06DA F2                 1449 	movx	@r0,a
   06DB 08                 1450 	inc	r0
   06DC E2                 1451 	movx	a,@r0
   06DD 34 26              1452 	addc	a,#0x26
   06DF F2                 1453 	movx	@r0,a
   06E0 08                 1454 	inc	r0
   06E1 E2                 1455 	movx	a,@r0
   06E2 34 00              1456 	addc	a,#0x00
   06E4 F2                 1457 	movx	@r0,a
   06E5 80 47              1458 	sjmp	00113$
   06E7                    1459 00104$:
                           1460 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
   06E7 78r4D              1461 	mov	r0,#_mktime_i_1_1
   06E9 E2                 1462 	movx	a,@r0
   06EA 24r00              1463 	add	a,#_monthDays
   06EC F5 82              1464 	mov	dpl,a
   06EE 08                 1465 	inc	r0
   06EF E2                 1466 	movx	a,@r0
   06F0 34s00              1467 	addc	a,#(_monthDays >> 8)
   06F2 F5 83              1468 	mov	dph,a
   06F4 E4                 1469 	clr	a
   06F5 93                 1470 	movc	a,@a+dptr
   06F6 FE                 1471 	mov	r6,a
   06F7 78r00              1472 	mov	r0,#__mullong_PARM_2
   06F9 F2                 1473 	movx	@r0,a
   06FA EE                 1474 	mov	a,r6
   06FB 33                 1475 	rlc	a
   06FC 95 E0              1476 	subb	a,acc
   06FE 08                 1477 	inc	r0
   06FF F2                 1478 	movx	@r0,a
   0700 08                 1479 	inc	r0
   0701 F2                 1480 	movx	@r0,a
   0702 08                 1481 	inc	r0
   0703 F2                 1482 	movx	@r0,a
   0704 90 51 80           1483 	mov	dptr,#0x5180
   0707 75 F0 01           1484 	mov	b,#0x01
   070A E4                 1485 	clr	a
   070B C0 02              1486 	push	ar2
   070D C0 03              1487 	push	ar3
   070F 12s00r00           1488 	lcall	__mullong
   0712 AE 82              1489 	mov	r6,dpl
   0714 AF 83              1490 	mov	r7,dph
   0716 AC F0              1491 	mov	r4,b
   0718 FD                 1492 	mov	r5,a
   0719 D0 03              1493 	pop	ar3
   071B D0 02              1494 	pop	ar2
   071D 78r4F              1495 	mov	r0,#_mktime_seconds_1_1
   071F E2                 1496 	movx	a,@r0
   0720 2E                 1497 	add	a,r6
   0721 F2                 1498 	movx	@r0,a
   0722 08                 1499 	inc	r0
   0723 E2                 1500 	movx	a,@r0
   0724 3F                 1501 	addc	a,r7
   0725 F2                 1502 	movx	@r0,a
   0726 08                 1503 	inc	r0
   0727 E2                 1504 	movx	a,@r0
   0728 3C                 1505 	addc	a,r4
   0729 F2                 1506 	movx	@r0,a
   072A 08                 1507 	inc	r0
   072B E2                 1508 	movx	a,@r0
   072C 3D                 1509 	addc	a,r5
   072D F2                 1510 	movx	@r0,a
   072E                    1511 00113$:
                           1512 ;	time.c:196: for (i=0; i<month; i++) {
   072E 78r4D              1513 	mov	r0,#_mktime_i_1_1
   0730 E2                 1514 	movx	a,@r0
   0731 24 01              1515 	add	a,#0x01
   0733 F2                 1516 	movx	@r0,a
   0734 08                 1517 	inc	r0
   0735 E2                 1518 	movx	a,@r0
   0736 34 00              1519 	addc	a,#0x00
   0738 F2                 1520 	movx	@r0,a
   0739 02s06rA0           1521 	ljmp	00111$
   073C                    1522 00114$:
                           1523 ;	time.c:204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
   073C 78r46              1524 	mov	r0,#_mktime_timeptr_1_1
   073E E2                 1525 	movx	a,@r0
   073F 24 03              1526 	add	a,#0x03
   0741 FA                 1527 	mov	r2,a
   0742 08                 1528 	inc	r0
   0743 E2                 1529 	movx	a,@r0
   0744 34 00              1530 	addc	a,#0x00
   0746 FB                 1531 	mov	r3,a
   0747 08                 1532 	inc	r0
   0748 E2                 1533 	movx	a,@r0
   0749 FC                 1534 	mov	r4,a
   074A 8A 82              1535 	mov	dpl,r2
   074C 8B 83              1536 	mov	dph,r3
   074E 8C F0              1537 	mov	b,r4
   0750 12s00r00           1538 	lcall	__gptrget
   0753 FA                 1539 	mov	r2,a
   0754 7B 00              1540 	mov	r3,#0x00
   0756 1A                 1541 	dec	r2
   0757 BA FF 01           1542 	cjne	r2,#0xff,00132$
   075A 1B                 1543 	dec	r3
   075B                    1544 00132$:
   075B 78r00              1545 	mov	r0,#__mullong_PARM_2
   075D EA                 1546 	mov	a,r2
   075E F2                 1547 	movx	@r0,a
   075F 08                 1548 	inc	r0
   0760 EB                 1549 	mov	a,r3
   0761 F2                 1550 	movx	@r0,a
   0762 EB                 1551 	mov	a,r3
   0763 33                 1552 	rlc	a
   0764 95 E0              1553 	subb	a,acc
   0766 08                 1554 	inc	r0
   0767 F2                 1555 	movx	@r0,a
   0768 08                 1556 	inc	r0
   0769 F2                 1557 	movx	@r0,a
   076A 90 51 80           1558 	mov	dptr,#0x5180
   076D 75 F0 01           1559 	mov	b,#0x01
   0770 E4                 1560 	clr	a
   0771 12s00r00           1561 	lcall	__mullong
   0774 AA 82              1562 	mov	r2,dpl
   0776 AB 83              1563 	mov	r3,dph
   0778 AC F0              1564 	mov	r4,b
   077A FD                 1565 	mov	r5,a
   077B 78r4F              1566 	mov	r0,#_mktime_seconds_1_1
   077D E2                 1567 	movx	a,@r0
   077E 2A                 1568 	add	a,r2
   077F F2                 1569 	movx	@r0,a
   0780 08                 1570 	inc	r0
   0781 E2                 1571 	movx	a,@r0
   0782 3B                 1572 	addc	a,r3
   0783 F2                 1573 	movx	@r0,a
   0784 08                 1574 	inc	r0
   0785 E2                 1575 	movx	a,@r0
   0786 3C                 1576 	addc	a,r4
   0787 F2                 1577 	movx	@r0,a
   0788 08                 1578 	inc	r0
   0789 E2                 1579 	movx	a,@r0
   078A 3D                 1580 	addc	a,r5
   078B F2                 1581 	movx	@r0,a
                           1582 ;	time.c:205: seconds+= timeptr->tm_hour*60*60L;
   078C 78r46              1583 	mov	r0,#_mktime_timeptr_1_1
   078E E2                 1584 	movx	a,@r0
   078F 24 02              1585 	add	a,#0x02
   0791 FA                 1586 	mov	r2,a
   0792 08                 1587 	inc	r0
   0793 E2                 1588 	movx	a,@r0
   0794 34 00              1589 	addc	a,#0x00
   0796 FB                 1590 	mov	r3,a
   0797 08                 1591 	inc	r0
   0798 E2                 1592 	movx	a,@r0
   0799 FC                 1593 	mov	r4,a
   079A 8A 82              1594 	mov	dpl,r2
   079C 8B 83              1595 	mov	dph,r3
   079E 8C F0              1596 	mov	b,r4
   07A0 12s00r00           1597 	lcall	__gptrget
   07A3 78r00              1598 	mov	r0,#__mullong_PARM_2
   07A5 F2                 1599 	movx	@r0,a
   07A6 08                 1600 	inc	r0
   07A7 E4                 1601 	clr	a
   07A8 F2                 1602 	movx	@r0,a
   07A9 08                 1603 	inc	r0
   07AA F2                 1604 	movx	@r0,a
   07AB 08                 1605 	inc	r0
   07AC F2                 1606 	movx	@r0,a
   07AD 90 0E 10           1607 	mov	dptr,#0x0E10
   07B0 E4                 1608 	clr	a
   07B1 F5 F0              1609 	mov	b,a
   07B3 12s00r00           1610 	lcall	__mullong
   07B6 AA 82              1611 	mov	r2,dpl
   07B8 AB 83              1612 	mov	r3,dph
   07BA AC F0              1613 	mov	r4,b
   07BC FD                 1614 	mov	r5,a
   07BD 78r4F              1615 	mov	r0,#_mktime_seconds_1_1
   07BF E2                 1616 	movx	a,@r0
   07C0 2A                 1617 	add	a,r2
   07C1 F2                 1618 	movx	@r0,a
   07C2 08                 1619 	inc	r0
   07C3 E2                 1620 	movx	a,@r0
   07C4 3B                 1621 	addc	a,r3
   07C5 F2                 1622 	movx	@r0,a
   07C6 08                 1623 	inc	r0
   07C7 E2                 1624 	movx	a,@r0
   07C8 3C                 1625 	addc	a,r4
   07C9 F2                 1626 	movx	@r0,a
   07CA 08                 1627 	inc	r0
   07CB E2                 1628 	movx	a,@r0
   07CC 3D                 1629 	addc	a,r5
   07CD F2                 1630 	movx	@r0,a
                           1631 ;	time.c:206: seconds+= timeptr->tm_min*60;
   07CE 78r46              1632 	mov	r0,#_mktime_timeptr_1_1
   07D0 E2                 1633 	movx	a,@r0
   07D1 24 01              1634 	add	a,#0x01
   07D3 FA                 1635 	mov	r2,a
   07D4 08                 1636 	inc	r0
   07D5 E2                 1637 	movx	a,@r0
   07D6 34 00              1638 	addc	a,#0x00
   07D8 FB                 1639 	mov	r3,a
   07D9 08                 1640 	inc	r0
   07DA E2                 1641 	movx	a,@r0
   07DB FC                 1642 	mov	r4,a
   07DC 8A 82              1643 	mov	dpl,r2
   07DE 8B 83              1644 	mov	dph,r3
   07E0 8C F0              1645 	mov	b,r4
   07E2 12s00r00           1646 	lcall	__gptrget
   07E5 75 F0 3C           1647 	mov	b,#0x3C
   07E8 A4                 1648 	mul	ab
   07E9 FA                 1649 	mov	r2,a
   07EA E5 F0              1650 	mov	a,b
   07EC FB                 1651 	mov	r3,a
   07ED 33                 1652 	rlc	a
   07EE 95 E0              1653 	subb	a,acc
   07F0 FC                 1654 	mov	r4,a
   07F1 FD                 1655 	mov	r5,a
   07F2 78r4F              1656 	mov	r0,#_mktime_seconds_1_1
   07F4 E2                 1657 	movx	a,@r0
   07F5 2A                 1658 	add	a,r2
   07F6 F2                 1659 	movx	@r0,a
   07F7 08                 1660 	inc	r0
   07F8 E2                 1661 	movx	a,@r0
   07F9 3B                 1662 	addc	a,r3
   07FA F2                 1663 	movx	@r0,a
   07FB 08                 1664 	inc	r0
   07FC E2                 1665 	movx	a,@r0
   07FD 3C                 1666 	addc	a,r4
   07FE F2                 1667 	movx	@r0,a
   07FF 08                 1668 	inc	r0
   0800 E2                 1669 	movx	a,@r0
   0801 3D                 1670 	addc	a,r5
   0802 F2                 1671 	movx	@r0,a
                           1672 ;	time.c:207: seconds+= timeptr->tm_sec;
   0803 78r46              1673 	mov	r0,#_mktime_timeptr_1_1
   0805 E2                 1674 	movx	a,@r0
   0806 F5 82              1675 	mov	dpl,a
   0808 08                 1676 	inc	r0
   0809 E2                 1677 	movx	a,@r0
   080A F5 83              1678 	mov	dph,a
   080C 08                 1679 	inc	r0
   080D E2                 1680 	movx	a,@r0
   080E F5 F0              1681 	mov	b,a
   0810 12s00r00           1682 	lcall	__gptrget
   0813 FA                 1683 	mov	r2,a
   0814 E4                 1684 	clr	a
   0815 FB                 1685 	mov	r3,a
   0816 33                 1686 	rlc	a
   0817 95 E0              1687 	subb	a,acc
   0819 FC                 1688 	mov	r4,a
   081A FD                 1689 	mov	r5,a
   081B 78r4F              1690 	mov	r0,#_mktime_seconds_1_1
   081D E2                 1691 	movx	a,@r0
   081E 2A                 1692 	add	a,r2
   081F F2                 1693 	movx	@r0,a
   0820 08                 1694 	inc	r0
   0821 E2                 1695 	movx	a,@r0
   0822 3B                 1696 	addc	a,r3
   0823 F2                 1697 	movx	@r0,a
   0824 08                 1698 	inc	r0
   0825 E2                 1699 	movx	a,@r0
   0826 3C                 1700 	addc	a,r4
   0827 F2                 1701 	movx	@r0,a
   0828 08                 1702 	inc	r0
   0829 E2                 1703 	movx	a,@r0
   082A 3D                 1704 	addc	a,r5
   082B F2                 1705 	movx	@r0,a
                           1706 ;	time.c:208: return seconds;
   082C 78r4F              1707 	mov	r0,#_mktime_seconds_1_1
   082E E2                 1708 	movx	a,@r0
   082F F5 82              1709 	mov	dpl,a
   0831 08                 1710 	inc	r0
   0832 E2                 1711 	movx	a,@r0
   0833 F5 83              1712 	mov	dph,a
   0835 08                 1713 	inc	r0
   0836 E2                 1714 	movx	a,@r0
   0837 F5 F0              1715 	mov	b,a
   0839 08                 1716 	inc	r0
   083A E2                 1717 	movx	a,@r0
   083B 22                 1718 	ret
                           1719 	.area CSEG    (CODE)
                           1720 	.area CONST   (CODE)
   0000                    1721 _monthDays:
   0000 1F                 1722 	.db #0x1F	;  31
   0001 1C                 1723 	.db #0x1C	;  28
   0002 1F                 1724 	.db #0x1F	;  31
   0003 1E                 1725 	.db #0x1E	;  30
   0004 1F                 1726 	.db #0x1F	;  31
   0005 1E                 1727 	.db #0x1E	;  30
   0006 1F                 1728 	.db #0x1F	;  31
   0007 1F                 1729 	.db #0x1F	;  31
   0008 1E                 1730 	.db #0x1E	;  30
   0009 1F                 1731 	.db #0x1F	;  31
   000A 1E                 1732 	.db #0x1E	;  30
   000B 1F                 1733 	.db #0x1F	;  31
   000C                    1734 ___month:
   000Cr51s00              1735 	.byte _str_1,(_str_1 >> 8)
   000Er55s00              1736 	.byte _str_2,(_str_2 >> 8)
   0010r59s00              1737 	.byte _str_3,(_str_3 >> 8)
   0012r5Ds00              1738 	.byte _str_4,(_str_4 >> 8)
   0014r61s00              1739 	.byte _str_5,(_str_5 >> 8)
   0016r65s00              1740 	.byte _str_6,(_str_6 >> 8)
   0018r69s00              1741 	.byte _str_7,(_str_7 >> 8)
   001Ar6Ds00              1742 	.byte _str_8,(_str_8 >> 8)
   001Cr71s00              1743 	.byte _str_9,(_str_9 >> 8)
   001Er75s00              1744 	.byte _str_10,(_str_10 >> 8)
   0020r79s00              1745 	.byte _str_11,(_str_11 >> 8)
   0022r7Ds00              1746 	.byte _str_12,(_str_12 >> 8)
   0024                    1747 ___day:
   0024r81s00              1748 	.byte _str_13,(_str_13 >> 8)
   0026r85s00              1749 	.byte _str_14,(_str_14 >> 8)
   0028r89s00              1750 	.byte _str_15,(_str_15 >> 8)
   002Ar8Ds00              1751 	.byte _str_16,(_str_16 >> 8)
   002Cr91s00              1752 	.byte _str_17,(_str_17 >> 8)
   002Er95s00              1753 	.byte _str_18,(_str_18 >> 8)
   0030r99s00              1754 	.byte _str_19,(_str_19 >> 8)
   0032                    1755 __str_0:
   0032 25 73 20 25 73 20  1756 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
        25 32 64 20 25 30
        32 64 3A 25 30 32
        64 3A 25 30 32 64
        20 25 30 34 64
   004F 0A                 1757 	.db 0x0A
   0050 00                 1758 	.db 0x00
   0051                    1759 _str_1:
   0051 4A 61 6E           1760 	.ascii "Jan"
   0054 00                 1761 	.db 0x00
   0055                    1762 _str_2:
   0055 46 65 62           1763 	.ascii "Feb"
   0058 00                 1764 	.db 0x00
   0059                    1765 _str_3:
   0059 4D 61 72           1766 	.ascii "Mar"
   005C 00                 1767 	.db 0x00
   005D                    1768 _str_4:
   005D 41 70 72           1769 	.ascii "Apr"
   0060 00                 1770 	.db 0x00
   0061                    1771 _str_5:
   0061 4D 61 79           1772 	.ascii "May"
   0064 00                 1773 	.db 0x00
   0065                    1774 _str_6:
   0065 4A 75 6E           1775 	.ascii "Jun"
   0068 00                 1776 	.db 0x00
   0069                    1777 _str_7:
   0069 4A 75 6C           1778 	.ascii "Jul"
   006C 00                 1779 	.db 0x00
   006D                    1780 _str_8:
   006D 41 75 67           1781 	.ascii "Aug"
   0070 00                 1782 	.db 0x00
   0071                    1783 _str_9:
   0071 53 65 70           1784 	.ascii "Sep"
   0074 00                 1785 	.db 0x00
   0075                    1786 _str_10:
   0075 4F 63 74           1787 	.ascii "Oct"
   0078 00                 1788 	.db 0x00
   0079                    1789 _str_11:
   0079 4E 6F 76           1790 	.ascii "Nov"
   007C 00                 1791 	.db 0x00
   007D                    1792 _str_12:
   007D 44 65 63           1793 	.ascii "Dec"
   0080 00                 1794 	.db 0x00
   0081                    1795 _str_13:
   0081 53 75 6E           1796 	.ascii "Sun"
   0084 00                 1797 	.db 0x00
   0085                    1798 _str_14:
   0085 4D 6F 6E           1799 	.ascii "Mon"
   0088 00                 1800 	.db 0x00
   0089                    1801 _str_15:
   0089 54 75 65           1802 	.ascii "Tue"
   008C 00                 1803 	.db 0x00
   008D                    1804 _str_16:
   008D 57 65 64           1805 	.ascii "Wed"
   0090 00                 1806 	.db 0x00
   0091                    1807 _str_17:
   0091 54 68 75           1808 	.ascii "Thu"
   0094 00                 1809 	.db 0x00
   0095                    1810 _str_18:
   0095 46 72 69           1811 	.ascii "Fri"
   0098 00                 1812 	.db 0x00
   0099                    1813 _str_19:
   0099 53 61 74           1814 	.ascii "Sat"
   009C 00                 1815 	.db 0x00
                           1816 	.area XINIT   (CODE)
                           1817 	.area CABS    (ABS,CODE)
