                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:29 2015
                              5 ;--------------------------------------------------------
                              6 	.module printf_large
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __print_format_PARM_4
                             13 	.globl __print_format_PARM_3
                             14 	.globl __print_format_PARM_2
                             15 	.globl __print_format
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 	.area RSEG    (ABS,DATA)
   0000                      20 	.org 0x0000
                             21 ;--------------------------------------------------------
                             22 ; special function bits
                             23 ;--------------------------------------------------------
                             24 	.area RSEG    (ABS,DATA)
   0000                      25 	.org 0x0000
                             26 ;--------------------------------------------------------
                             27 ; overlayable register banks
                             28 ;--------------------------------------------------------
                             29 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      30 	.ds 8
                             31 ;--------------------------------------------------------
                             32 ; internal ram data
                             33 ;--------------------------------------------------------
                             34 	.area DSEG    (DATA)
   0000                      35 __print_format_sloc0_1_0:
   0000                      36 	.ds 1
   0001                      37 __print_format_sloc1_1_0:
   0001                      38 	.ds 3
   0004                      39 __print_format_sloc2_1_0:
   0004                      40 	.ds 2
                             41 ;--------------------------------------------------------
                             42 ; overlayable items in internal ram 
                             43 ;--------------------------------------------------------
                             44 	.area	OSEG    (OVR,DATA)
                             45 ;--------------------------------------------------------
                             46 ; indirectly addressable internal ram data
                             47 ;--------------------------------------------------------
                             48 	.area ISEG    (DATA)
                             49 ;--------------------------------------------------------
                             50 ; absolute internal ram data
                             51 ;--------------------------------------------------------
                             52 	.area IABS    (ABS,DATA)
                             53 	.area IABS    (ABS,DATA)
                             54 ;--------------------------------------------------------
                             55 ; bit data
                             56 ;--------------------------------------------------------
                             57 	.area BSEG    (BIT)
   0000                      58 _lower_case:
   0000                      59 	.ds 1
   0001                      60 __print_format_left_justify_1_1:
   0001                      61 	.ds 1
   0002                      62 __print_format_zero_padding_1_1:
   0002                      63 	.ds 1
   0003                      64 __print_format_prefix_sign_1_1:
   0003                      65 	.ds 1
   0004                      66 __print_format_prefix_space_1_1:
   0004                      67 	.ds 1
   0005                      68 __print_format_signed_argument_1_1:
   0005                      69 	.ds 1
   0006                      70 __print_format_char_argument_1_1:
   0006                      71 	.ds 1
   0007                      72 __print_format_long_argument_1_1:
   0007                      73 	.ds 1
   0008                      74 __print_format_float_argument_1_1:
   0008                      75 	.ds 1
   0009                      76 __print_format_lsd_1_1:
   0009                      77 	.ds 1
                             78 ;--------------------------------------------------------
                             79 ; paged external ram data
                             80 ;--------------------------------------------------------
                             81 	.area PSEG    (PAG,XDATA)
                             82 ;--------------------------------------------------------
                             83 ; external ram data
                             84 ;--------------------------------------------------------
                             85 	.area XSEG    (XDATA)
   0000                      86 _output_char:
   0000                      87 	.ds 2
   0002                      88 _p:
   0002                      89 	.ds 3
   0005                      90 _value:
   0005                      91 	.ds 5
   000A                      92 _charsOutputted:
   000A                      93 	.ds 2
   000C                      94 __output_char_c_1_1:
   000C                      95 	.ds 1
   000D                      96 _output_digit_n_1_1:
   000D                      97 	.ds 1
   000E                      98 _output_2digits_b_1_1:
   000E                      99 	.ds 1
   000F                     100 _calculate_digit_radix_1_1:
   000F                     101 	.ds 1
   0010                     102 __print_format_PARM_2:
   0010                     103 	.ds 3
   0013                     104 __print_format_PARM_3:
   0013                     105 	.ds 3
   0016                     106 __print_format_PARM_4:
   0016                     107 	.ds 1
   0017                     108 __print_format_pfn_1_1:
   0017                     109 	.ds 2
   0019                     110 __print_format_radix_1_1:
   0019                     111 	.ds 1
   001A                     112 __print_format_width_1_1:
   001A                     113 	.ds 1
   001B                     114 __print_format_decimals_1_1:
   001B                     115 	.ds 1
   001C                     116 __print_format_length_1_1:
   001C                     117 	.ds 1
   001D                     118 __print_format_c_1_1:
   001D                     119 	.ds 1
   001E                     120 __print_format_store_4_22:
   001E                     121 	.ds 6
   0024                     122 __print_format_pstore_4_22:
   0024                     123 	.ds 2
                            124 ;--------------------------------------------------------
                            125 ; absolute external ram data
                            126 ;--------------------------------------------------------
                            127 	.area XABS    (ABS,XDATA)
                            128 ;--------------------------------------------------------
                            129 ; external initialized ram data
                            130 ;--------------------------------------------------------
                            131 	.area XISEG   (XDATA)
                            132 	.area HOME    (CODE)
                            133 	.area GSINIT0 (CODE)
                            134 	.area GSINIT1 (CODE)
                            135 	.area GSINIT2 (CODE)
                            136 	.area GSINIT3 (CODE)
                            137 	.area GSINIT4 (CODE)
                            138 	.area GSINIT5 (CODE)
                            139 	.area GSINIT  (CODE)
                            140 	.area GSFINAL (CODE)
                            141 	.area CSEG    (CODE)
                            142 ;--------------------------------------------------------
                            143 ; global & static initialisations
                            144 ;--------------------------------------------------------
                            145 	.area HOME    (CODE)
                            146 	.area GSINIT  (CODE)
                            147 	.area GSFINAL (CODE)
                            148 	.area GSINIT  (CODE)
                            149 ;--------------------------------------------------------
                            150 ; Home
                            151 ;--------------------------------------------------------
                            152 	.area HOME    (CODE)
                            153 	.area HOME    (CODE)
                            154 ;--------------------------------------------------------
                            155 ; code
                            156 ;--------------------------------------------------------
                            157 	.area CSEG    (CODE)
                            158 ;------------------------------------------------------------
                            159 ;Allocation info for local variables in function '_output_char'
                            160 ;------------------------------------------------------------
                            161 ;c                         Allocated with name '__output_char_c_1_1'
                            162 ;------------------------------------------------------------
                            163 ;	printf_large.c:105: _output_char (unsigned char c)
                            164 ;	-----------------------------------------
                            165 ;	 function _output_char
                            166 ;	-----------------------------------------
   0000                     167 __output_char:
                    0002    168 	ar2 = 0x02
                    0003    169 	ar3 = 0x03
                    0004    170 	ar4 = 0x04
                    0005    171 	ar5 = 0x05
                    0006    172 	ar6 = 0x06
                    0007    173 	ar7 = 0x07
                    0000    174 	ar0 = 0x00
                    0001    175 	ar1 = 0x01
   0000 E5 82               176 	mov	a,dpl
                            177 ;	printf_large.c:107: output_char( c, p );
   0002 90s00r0C            178 	mov	dptr,#__output_char_c_1_1
   0005 F0                  179 	movx	@dptr,a
   0006 FA                  180 	mov	r2,a
   0007 90s00r02            181 	mov	dptr,#_p
   000A E0                  182 	movx	a,@dptr
   000B C0 E0               183 	push	acc
   000D A3                  184 	inc	dptr
   000E E0                  185 	movx	a,@dptr
   000F C0 E0               186 	push	acc
   0011 A3                  187 	inc	dptr
   0012 E0                  188 	movx	a,@dptr
   0013 C0 E0               189 	push	acc
   0015 74r2A               190 	mov	a,#00103$
   0017 C0 E0               191 	push	acc
   0019 74s00               192 	mov	a,#(00103$ >> 8)
   001B C0 E0               193 	push	acc
   001D 90s00r00            194 	mov	dptr,#_output_char
   0020 E0                  195 	movx	a,@dptr
   0021 C0 E0               196 	push	acc
   0023 A3                  197 	inc	dptr
   0024 E0                  198 	movx	a,@dptr
   0025 C0 E0               199 	push	acc
   0027 8A 82               200 	mov	dpl,r2
   0029 22                  201 	ret
   002A                     202 00103$:
   002A 15 81               203 	dec	sp
   002C 15 81               204 	dec	sp
   002E 15 81               205 	dec	sp
                            206 ;	printf_large.c:108: charsOutputted++;
   0030 90s00r0A            207 	mov	dptr,#_charsOutputted
   0033 E0                  208 	movx	a,@dptr
   0034 24 01               209 	add	a,#0x01
   0036 F0                  210 	movx	@dptr,a
   0037 A3                  211 	inc	dptr
   0038 E0                  212 	movx	a,@dptr
   0039 34 00               213 	addc	a,#0x00
   003B F0                  214 	movx	@dptr,a
   003C 22                  215 	ret
                            216 ;------------------------------------------------------------
                            217 ;Allocation info for local variables in function 'output_digit'
                            218 ;------------------------------------------------------------
                            219 ;c                         Allocated to registers r2 
                            220 ;n                         Allocated with name '_output_digit_n_1_1'
                            221 ;------------------------------------------------------------
                            222 ;	printf_large.c:130: output_digit (unsigned char n)
                            223 ;	-----------------------------------------
                            224 ;	 function output_digit
                            225 ;	-----------------------------------------
   003D                     226 _output_digit:
   003D E5 82               227 	mov	a,dpl
                            228 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
   003F 90s00r0D            229 	mov	dptr,#_output_digit_n_1_1
   0042 F0                  230 	movx	@dptr,a
   0043 FA                  231 	mov	r2,a
   0044 74 30               232 	mov	a,#0x30
   0046 2A                  233 	add	a,r2
   0047 FA                  234 	mov	r2,a
                            235 ;	printf_large.c:134: if (c > (unsigned char)'9')
   0048 74 39               236 	mov	a,#0x39
   004A B5 02 00            237 	cjne	a,ar2,00109$
   004D                     238 00109$:
   004D 50 0A               239 	jnc	00104$
                            240 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
   004F 74 07               241 	mov	a,#0x07
   0051 2A                  242 	add	a,r2
   0052 FA                  243 	mov	r2,a
                            244 ;	printf_large.c:137: if (lower_case)
   0053 30*00 03            245 	jnb	_lower_case,00104$
                            246 ;	printf_large.c:138: c = tolower(c);
   0056 43 02 20            247 	orl	ar2,#0x20
   0059                     248 00104$:
                            249 ;	printf_large.c:140: _output_char( c );
   0059 8A 82               250 	mov	dpl,r2
   005B 02s00r00            251 	ljmp	__output_char
                            252 ;------------------------------------------------------------
                            253 ;Allocation info for local variables in function 'output_2digits'
                            254 ;------------------------------------------------------------
                            255 ;b                         Allocated with name '_output_2digits_b_1_1'
                            256 ;------------------------------------------------------------
                            257 ;	printf_large.c:157: output_2digits (unsigned char b)
                            258 ;	-----------------------------------------
                            259 ;	 function output_2digits
                            260 ;	-----------------------------------------
   005E                     261 _output_2digits:
   005E E5 82               262 	mov	a,dpl
                            263 ;	printf_large.c:159: output_digit( b>>4   );
   0060 90s00r0E            264 	mov	dptr,#_output_2digits_b_1_1
   0063 F0                  265 	movx	@dptr,a
   0064 FA                  266 	mov	r2,a
   0065 C4                  267 	swap	a
   0066 54 0F               268 	anl	a,#0x0f
   0068 F5 82               269 	mov	dpl,a
   006A C0 02               270 	push	ar2
   006C 12s00r3D            271 	lcall	_output_digit
   006F D0 02               272 	pop	ar2
                            273 ;	printf_large.c:160: output_digit( b&0x0F );
   0071 53 02 0F            274 	anl	ar2,#0x0F
   0074 8A 82               275 	mov	dpl,r2
   0076 02s00r3D            276 	ljmp	_output_digit
                            277 ;------------------------------------------------------------
                            278 ;Allocation info for local variables in function 'calculate_digit'
                            279 ;------------------------------------------------------------
                            280 ;radix                     Allocated with name '_calculate_digit_radix_1_1'
                            281 ;ul                        Allocated to registers r2 r3 r4 r5 
                            282 ;b4                        Allocated to registers r6 
                            283 ;i                         Allocated to registers r0 
                            284 ;------------------------------------------------------------
                            285 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                            286 ;	-----------------------------------------
                            287 ;	 function calculate_digit
                            288 ;	-----------------------------------------
   0079                     289 _calculate_digit:
   0079 E5 82               290 	mov	a,dpl
   007B 90s00r0F            291 	mov	dptr,#_calculate_digit_radix_1_1
   007E F0                  292 	movx	@dptr,a
                            293 ;	printf_large.c:191: register unsigned long ul = value.ul;
   007F 90s00r05            294 	mov	dptr,#_value
   0082 E0                  295 	movx	a,@dptr
   0083 FA                  296 	mov	r2,a
   0084 A3                  297 	inc	dptr
   0085 E0                  298 	movx	a,@dptr
   0086 FB                  299 	mov	r3,a
   0087 A3                  300 	inc	dptr
   0088 E0                  301 	movx	a,@dptr
   0089 FC                  302 	mov	r4,a
   008A A3                  303 	inc	dptr
   008B E0                  304 	movx	a,@dptr
   008C FD                  305 	mov	r5,a
                            306 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
   008D 90s00r09            307 	mov	dptr,#(_value + 0x0004)
   0090 E0                  308 	movx	a,@dptr
   0091 FE                  309 	mov	r6,a
                            310 ;	printf_large.c:195: do
   0092 90s00r0F            311 	mov	dptr,#_calculate_digit_radix_1_1
   0095 E0                  312 	movx	a,@dptr
   0096 FF                  313 	mov	r7,a
   0097 78 20               314 	mov	r0,#0x20
   0099                     315 00103$:
                            316 ;	printf_large.c:197: b4 = (b4 << 1);
   0099 EE                  317 	mov	a,r6
   009A 2E                  318 	add	a,r6
   009B FE                  319 	mov	r6,a
                            320 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
   009C ED                  321 	mov	a,r5
   009D 23                  322 	rl	a
   009E 54 01               323 	anl	a,#0x01
   00A0 F9                  324 	mov	r1,a
   00A1 42 06               325 	orl	ar6,a
                            326 ;	printf_large.c:199: ul <<= 1;
   00A3 EA                  327 	mov	a,r2
   00A4 2A                  328 	add	a,r2
   00A5 FA                  329 	mov	r2,a
   00A6 EB                  330 	mov	a,r3
   00A7 33                  331 	rlc	a
   00A8 FB                  332 	mov	r3,a
   00A9 EC                  333 	mov	a,r4
   00AA 33                  334 	rlc	a
   00AB FC                  335 	mov	r4,a
   00AC ED                  336 	mov	a,r5
   00AD 33                  337 	rlc	a
   00AE FD                  338 	mov	r5,a
                            339 ;	printf_large.c:201: if (radix <= b4 )
   00AF EE                  340 	mov	a,r6
   00B0 B5 07 00            341 	cjne	a,ar7,00112$
   00B3                     342 00112$:
   00B3 40 07               343 	jc	00104$
                            344 ;	printf_large.c:203: b4 -= radix;
   00B5 EE                  345 	mov	a,r6
   00B6 C3                  346 	clr	c
   00B7 9F                  347 	subb	a,r7
   00B8 FE                  348 	mov	r6,a
                            349 ;	printf_large.c:204: ul |= 1;
   00B9 43 02 01            350 	orl	ar2,#0x01
   00BC                     351 00104$:
                            352 ;	printf_large.c:206: } while (--i);
   00BC D8 DB               353 	djnz	r0,00103$
                            354 ;	printf_large.c:207: value.ul = ul;
   00BE 90s00r05            355 	mov	dptr,#_value
   00C1 EA                  356 	mov	a,r2
   00C2 F0                  357 	movx	@dptr,a
   00C3 A3                  358 	inc	dptr
   00C4 EB                  359 	mov	a,r3
   00C5 F0                  360 	movx	@dptr,a
   00C6 A3                  361 	inc	dptr
   00C7 EC                  362 	mov	a,r4
   00C8 F0                  363 	movx	@dptr,a
   00C9 A3                  364 	inc	dptr
   00CA ED                  365 	mov	a,r5
   00CB F0                  366 	movx	@dptr,a
                            367 ;	printf_large.c:208: value.byte[4] = b4;
   00CC 90s00r09            368 	mov	dptr,#(_value + 0x0004)
   00CF EE                  369 	mov	a,r6
   00D0 F0                  370 	movx	@dptr,a
   00D1 22                  371 	ret
                            372 ;------------------------------------------------------------
                            373 ;Allocation info for local variables in function '_print_format'
                            374 ;------------------------------------------------------------
                            375 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                            376 ;sloc1                     Allocated with name '__print_format_sloc1_1_0'
                            377 ;sloc2                     Allocated with name '__print_format_sloc2_1_0'
                            378 ;pvoid                     Allocated with name '__print_format_PARM_2'
                            379 ;format                    Allocated with name '__print_format_PARM_3'
                            380 ;ap                        Allocated with name '__print_format_PARM_4'
                            381 ;pfn                       Allocated with name '__print_format_pfn_1_1'
                            382 ;radix                     Allocated with name '__print_format_radix_1_1'
                            383 ;width                     Allocated with name '__print_format_width_1_1'
                            384 ;decimals                  Allocated with name '__print_format_decimals_1_1'
                            385 ;length                    Allocated with name '__print_format_length_1_1'
                            386 ;c                         Allocated with name '__print_format_c_1_1'
                            387 ;memtype                   Allocated with name '__print_format_memtype_5_18'
                            388 ;store                     Allocated with name '__print_format_store_4_22'
                            389 ;pstore                    Allocated with name '__print_format_pstore_4_22'
                            390 ;------------------------------------------------------------
                            391 ;	printf_large.c:414: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                            392 ;	-----------------------------------------
                            393 ;	 function _print_format
                            394 ;	-----------------------------------------
   00D2                     395 __print_format:
                            396 ;	printf_large.c:441: output_char = pfn;
   00D2 AA 83               397 	mov	r2,dph
   00D4 E5 82               398 	mov	a,dpl
   00D6 90s00r17            399 	mov	dptr,#__print_format_pfn_1_1
   00D9 F0                  400 	movx	@dptr,a
   00DA A3                  401 	inc	dptr
   00DB CA                  402 	xch	a,r2
   00DC F0                  403 	movx	@dptr,a
   00DD FB                  404 	mov	r3,a
   00DE 90s00r00            405 	mov	dptr,#_output_char
   00E1 EA                  406 	mov	a,r2
   00E2 F0                  407 	movx	@dptr,a
   00E3 A3                  408 	inc	dptr
   00E4 EB                  409 	mov	a,r3
   00E5 F0                  410 	movx	@dptr,a
                            411 ;	printf_large.c:442: p = pvoid;
   00E6 90s00r10            412 	mov	dptr,#__print_format_PARM_2
   00E9 E0                  413 	movx	a,@dptr
   00EA FA                  414 	mov	r2,a
   00EB A3                  415 	inc	dptr
   00EC E0                  416 	movx	a,@dptr
   00ED FB                  417 	mov	r3,a
   00EE A3                  418 	inc	dptr
   00EF E0                  419 	movx	a,@dptr
   00F0 FC                  420 	mov	r4,a
   00F1 90s00r02            421 	mov	dptr,#_p
   00F4 EA                  422 	mov	a,r2
   00F5 F0                  423 	movx	@dptr,a
   00F6 A3                  424 	inc	dptr
   00F7 EB                  425 	mov	a,r3
   00F8 F0                  426 	movx	@dptr,a
   00F9 A3                  427 	inc	dptr
   00FA EC                  428 	mov	a,r4
   00FB F0                  429 	movx	@dptr,a
                            430 ;	printf_large.c:446: charsOutputted = 0;
   00FC 90s00r0A            431 	mov	dptr,#_charsOutputted
   00FF E4                  432 	clr	a
   0100 F0                  433 	movx	@dptr,a
   0101 A3                  434 	inc	dptr
   0102 F0                  435 	movx	@dptr,a
                            436 ;	printf_large.c:454: while( c=*format++ )
   0103                     437 00239$:
   0103 90s00r13            438 	mov	dptr,#__print_format_PARM_3
   0106 E0                  439 	movx	a,@dptr
   0107 FA                  440 	mov	r2,a
   0108 A3                  441 	inc	dptr
   0109 E0                  442 	movx	a,@dptr
   010A FB                  443 	mov	r3,a
   010B A3                  444 	inc	dptr
   010C E0                  445 	movx	a,@dptr
   010D FC                  446 	mov	r4,a
   010E 8A 82               447 	mov	dpl,r2
   0110 8B 83               448 	mov	dph,r3
   0112 8C F0               449 	mov	b,r4
   0114 12s00r00            450 	lcall	__gptrget
   0117 FD                  451 	mov	r5,a
   0118 90s00r13            452 	mov	dptr,#__print_format_PARM_3
   011B 74 01               453 	mov	a,#0x01
   011D 2A                  454 	add	a,r2
   011E F0                  455 	movx	@dptr,a
   011F E4                  456 	clr	a
   0120 3B                  457 	addc	a,r3
   0121 A3                  458 	inc	dptr
   0122 F0                  459 	movx	@dptr,a
   0123 A3                  460 	inc	dptr
   0124 EC                  461 	mov	a,r4
   0125 F0                  462 	movx	@dptr,a
   0126 ED                  463 	mov	a,r5
   0127 70 03               464 	jnz	00328$
   0129 02s07rC0            465 	ljmp	00241$
   012C                     466 00328$:
                            467 ;	printf_large.c:456: if ( c=='%' )
   012C BD 25 02            468 	cjne	r5,#0x25,00329$
   012F 80 03               469 	sjmp	00330$
   0131                     470 00329$:
   0131 02s07rB8            471 	ljmp	00237$
   0134                     472 00330$:
                            473 ;	printf_large.c:458: left_justify    = 0;
   0134 C2*01               474 	clr	__print_format_left_justify_1_1
                            475 ;	printf_large.c:459: zero_padding    = 0;
   0136 C2*02               476 	clr	__print_format_zero_padding_1_1
                            477 ;	printf_large.c:460: prefix_sign     = 0;
   0138 C2*03               478 	clr	__print_format_prefix_sign_1_1
                            479 ;	printf_large.c:461: prefix_space    = 0;
   013A C2*04               480 	clr	__print_format_prefix_space_1_1
                            481 ;	printf_large.c:462: signed_argument = 0;
   013C C2*05               482 	clr	__print_format_signed_argument_1_1
                            483 ;	printf_large.c:463: char_argument   = 0;
   013E C2*06               484 	clr	__print_format_char_argument_1_1
                            485 ;	printf_large.c:464: long_argument   = 0;
   0140 C2*07               486 	clr	__print_format_long_argument_1_1
                            487 ;	printf_large.c:465: float_argument  = 0;
   0142 C2*08               488 	clr	__print_format_float_argument_1_1
                            489 ;	printf_large.c:466: radix           = 0;
   0144 90s00r19            490 	mov	dptr,#__print_format_radix_1_1
                            491 ;	printf_large.c:467: width           = 0;
   0147 E4                  492 	clr	a
   0148 F0                  493 	movx	@dptr,a
   0149 90s00r1A            494 	mov	dptr,#__print_format_width_1_1
   014C F0                  495 	movx	@dptr,a
                            496 ;	printf_large.c:468: decimals        = -1;
   014D 90s00r1B            497 	mov	dptr,#__print_format_decimals_1_1
   0150 74 FF               498 	mov	a,#0xFF
   0152 F0                  499 	movx	@dptr,a
                            500 ;	printf_large.c:470: get_conversion_spec:
   0153 90s00r13            501 	mov	dptr,#__print_format_PARM_3
   0156 E0                  502 	movx	a,@dptr
   0157 FA                  503 	mov	r2,a
   0158 A3                  504 	inc	dptr
   0159 E0                  505 	movx	a,@dptr
   015A FB                  506 	mov	r3,a
   015B A3                  507 	inc	dptr
   015C E0                  508 	movx	a,@dptr
   015D FC                  509 	mov	r4,a
   015E                     510 00101$:
                            511 ;	printf_large.c:472: c = *format++;
   015E 8A 82               512 	mov	dpl,r2
   0160 8B 83               513 	mov	dph,r3
   0162 8C F0               514 	mov	b,r4
   0164 12s00r00            515 	lcall	__gptrget
   0167 FE                  516 	mov	r6,a
   0168 A3                  517 	inc	dptr
   0169 AA 82               518 	mov	r2,dpl
   016B AB 83               519 	mov	r3,dph
   016D 90s00r13            520 	mov	dptr,#__print_format_PARM_3
   0170 EA                  521 	mov	a,r2
   0171 F0                  522 	movx	@dptr,a
   0172 A3                  523 	inc	dptr
   0173 EB                  524 	mov	a,r3
   0174 F0                  525 	movx	@dptr,a
   0175 A3                  526 	inc	dptr
   0176 EC                  527 	mov	a,r4
   0177 F0                  528 	movx	@dptr,a
   0178 90s00r1D            529 	mov	dptr,#__print_format_c_1_1
   017B EE                  530 	mov	a,r6
   017C F0                  531 	movx	@dptr,a
                            532 ;	printf_large.c:474: if (c=='%') {
   017D BE 25 08            533 	cjne	r6,#0x25,00103$
                            534 ;	printf_large.c:475: OUTPUT_CHAR(c, p);
   0180 8E 82               535 	mov	dpl,r6
   0182 12s00r00            536 	lcall	__output_char
                            537 ;	printf_large.c:476: continue;
   0185 02s01r03            538 	ljmp	00239$
   0188                     539 00103$:
                            540 ;	printf_large.c:479: if (isdigit(c)) {
   0188 8E 07               541 	mov	ar7,r6
   018A BF 30 00            542 	cjne	r7,#0x30,00333$
   018D                     543 00333$:
   018D 40 40               544 	jc	00110$
   018F 8E 07               545 	mov	ar7,r6
   0191 74 39               546 	mov	a,#0x39
   0193 B5 07 00            547 	cjne	a,ar7,00335$
   0196                     548 00335$:
   0196 40 37               549 	jc	00110$
                            550 ;	printf_large.c:480: if (decimals==-1) {
   0198 90s00r1B            551 	mov	dptr,#__print_format_decimals_1_1
   019B E0                  552 	movx	a,@dptr
   019C FF                  553 	mov	r7,a
   019D BF FF 21            554 	cjne	r7,#0xFF,00107$
                            555 ;	printf_large.c:481: width = 10*width + c - '0';
   01A0 C0 02               556 	push	ar2
   01A2 C0 03               557 	push	ar3
   01A4 C0 04               558 	push	ar4
   01A6 90s00r1A            559 	mov	dptr,#__print_format_width_1_1
   01A9 E0                  560 	movx	a,@dptr
   01AA 75 F0 0A            561 	mov	b,#0x0A
   01AD A4                  562 	mul	ab
   01AE 2E                  563 	add	a,r6
   01AF 24 D0               564 	add	a,#0xd0
                            565 ;	printf_large.c:482: if (width == 0) {
   01B1 90s00r1A            566 	mov	dptr,#__print_format_width_1_1
   01B4 F0                  567 	movx	@dptr,a
   01B5 D0 04               568 	pop	ar4
   01B7 D0 03               569 	pop	ar3
   01B9 D0 02               570 	pop	ar2
   01BB 70 A1               571 	jnz	00101$
                            572 ;	printf_large.c:484: zero_padding = 1;
   01BD D2*02               573 	setb	__print_format_zero_padding_1_1
   01BF 80 9D               574 	sjmp	00101$
   01C1                     575 00107$:
                            576 ;	printf_large.c:487: decimals = 10*decimals + c - '0';
   01C1 EF                  577 	mov	a,r7
   01C2 75 F0 0A            578 	mov	b,#0x0A
   01C5 A4                  579 	mul	ab
   01C6 2E                  580 	add	a,r6
   01C7 24 D0               581 	add	a,#0xd0
   01C9 90s00r1B            582 	mov	dptr,#__print_format_decimals_1_1
   01CC F0                  583 	movx	@dptr,a
                            584 ;	printf_large.c:489: goto get_conversion_spec;
   01CD 80 8F               585 	sjmp	00101$
   01CF                     586 00110$:
                            587 ;	printf_large.c:492: if (c=='.') {
   01CF 90s00r1D            588 	mov	dptr,#__print_format_c_1_1
   01D2 E0                  589 	movx	a,@dptr
   01D3 FE                  590 	mov	r6,a
   01D4 BE 2E 15            591 	cjne	r6,#0x2E,00115$
                            592 ;	printf_large.c:493: if (decimals==-1) decimals=0;
   01D7 90s00r1B            593 	mov	dptr,#__print_format_decimals_1_1
   01DA E0                  594 	movx	a,@dptr
   01DB FF                  595 	mov	r7,a
   01DC BF FF 02            596 	cjne	r7,#0xFF,00342$
   01DF 80 03               597 	sjmp	00343$
   01E1                     598 00342$:
   01E1 02s01r5E            599 	ljmp	00101$
   01E4                     600 00343$:
   01E4 90s00r1B            601 	mov	dptr,#__print_format_decimals_1_1
   01E7 E4                  602 	clr	a
   01E8 F0                  603 	movx	@dptr,a
                            604 ;	printf_large.c:496: goto get_conversion_spec;
   01E9 02s01r5E            605 	ljmp	00101$
   01EC                     606 00115$:
                            607 ;	printf_large.c:499: if (islower(c))
   01EC 8E 07               608 	mov	ar7,r6
   01EE BF 61 00            609 	cjne	r7,#0x61,00344$
   01F1                     610 00344$:
   01F1 40 14               611 	jc	00117$
   01F3 8E 07               612 	mov	ar7,r6
   01F5 74 7A               613 	mov	a,#0x7A
   01F7 B5 07 00            614 	cjne	a,ar7,00346$
   01FA                     615 00346$:
   01FA 40 0B               616 	jc	00117$
                            617 ;	printf_large.c:501: c = toupper(c);
   01FC 90s00r1D            618 	mov	dptr,#__print_format_c_1_1
   01FF 74 DF               619 	mov	a,#0xDF
   0201 5E                  620 	anl	a,r6
   0202 F0                  621 	movx	@dptr,a
                            622 ;	printf_large.c:502: lower_case = 1;
   0203 D2*00               623 	setb	_lower_case
   0205 80 02               624 	sjmp	00118$
   0207                     625 00117$:
                            626 ;	printf_large.c:505: lower_case = 0;
   0207 C2*00               627 	clr	_lower_case
   0209                     628 00118$:
                            629 ;	printf_large.c:507: switch( c )
   0209 90s00r1D            630 	mov	dptr,#__print_format_c_1_1
   020C E0                  631 	movx	a,@dptr
   020D FE                  632 	mov	r6,a
   020E BE 20 02            633 	cjne	r6,#0x20,00348$
   0211 80 55               634 	sjmp	00122$
   0213                     635 00348$:
   0213 BE 2B 02            636 	cjne	r6,#0x2B,00349$
   0216 80 4B               637 	sjmp	00121$
   0218                     638 00349$:
   0218 BE 2D 02            639 	cjne	r6,#0x2D,00350$
   021B 80 41               640 	sjmp	00120$
   021D                     641 00350$:
   021D BE 42 02            642 	cjne	r6,#0x42,00351$
   0220 80 4B               643 	sjmp	00123$
   0222                     644 00351$:
   0222 BE 43 02            645 	cjne	r6,#0x43,00352$
   0225 80 50               646 	sjmp	00125$
   0227                     647 00352$:
   0227 BE 44 03            648 	cjne	r6,#0x44,00353$
   022A 02s04r4C            649 	ljmp	00162$
   022D                     650 00353$:
   022D BE 46 03            651 	cjne	r6,#0x46,00354$
   0230 02s04r6E            652 	ljmp	00166$
   0233                     653 00354$:
   0233 BE 49 03            654 	cjne	r6,#0x49,00355$
   0236 02s04r4C            655 	ljmp	00162$
   0239                     656 00355$:
   0239 BE 4C 02            657 	cjne	r6,#0x4C,00356$
   023C 80 34               658 	sjmp	00124$
   023E                     659 00356$:
   023E BE 4F 03            660 	cjne	r6,#0x4F,00357$
   0241 02s04r56            661 	ljmp	00163$
   0244                     662 00357$:
   0244 BE 50 03            663 	cjne	r6,#0x50,00358$
   0247 02s03rBC            664 	ljmp	00148$
   024A                     665 00358$:
   024A BE 53 02            666 	cjne	r6,#0x53,00359$
   024D 80 5F               667 	sjmp	00129$
   024F                     668 00359$:
   024F BE 55 03            669 	cjne	r6,#0x55,00360$
   0252 02s04r5E            670 	ljmp	00164$
   0255                     671 00360$:
   0255 BE 58 03            672 	cjne	r6,#0x58,00361$
   0258 02s04r66            673 	ljmp	00165$
   025B                     674 00361$:
   025B 02s04r72            675 	ljmp	00167$
                            676 ;	printf_large.c:509: case '-':
   025E                     677 00120$:
                            678 ;	printf_large.c:510: left_justify = 1;
   025E D2*01               679 	setb	__print_format_left_justify_1_1
                            680 ;	printf_large.c:511: goto get_conversion_spec;
   0260 02s01r5E            681 	ljmp	00101$
                            682 ;	printf_large.c:512: case '+':
   0263                     683 00121$:
                            684 ;	printf_large.c:513: prefix_sign = 1;
   0263 D2*03               685 	setb	__print_format_prefix_sign_1_1
                            686 ;	printf_large.c:514: goto get_conversion_spec;
   0265 02s01r5E            687 	ljmp	00101$
                            688 ;	printf_large.c:515: case ' ':
   0268                     689 00122$:
                            690 ;	printf_large.c:516: prefix_space = 1;
   0268 D2*04               691 	setb	__print_format_prefix_space_1_1
                            692 ;	printf_large.c:517: goto get_conversion_spec;
   026A 02s01r5E            693 	ljmp	00101$
                            694 ;	printf_large.c:518: case 'B':
   026D                     695 00123$:
                            696 ;	printf_large.c:519: char_argument = 1;
   026D D2*06               697 	setb	__print_format_char_argument_1_1
                            698 ;	printf_large.c:520: goto get_conversion_spec;
   026F 02s01r5E            699 	ljmp	00101$
                            700 ;	printf_large.c:521: case 'L':
   0272                     701 00124$:
                            702 ;	printf_large.c:522: long_argument = 1;
   0272 D2*07               703 	setb	__print_format_long_argument_1_1
                            704 ;	printf_large.c:523: goto get_conversion_spec;
   0274 02s01r5E            705 	ljmp	00101$
                            706 ;	printf_large.c:525: case 'C':
   0277                     707 00125$:
                            708 ;	printf_large.c:526: if( char_argument )
   0277 30*06 12            709 	jnb	__print_format_char_argument_1_1,00127$
                            710 ;	printf_large.c:527: c = va_arg(ap,char);
   027A 90s00r16            711 	mov	dptr,#__print_format_PARM_4
   027D E0                  712 	movx	a,@dptr
   027E FA                  713 	mov	r2,a
   027F 14                  714 	dec	a
   0280 F8                  715 	mov	r0,a
   0281 90s00r16            716 	mov	dptr,#__print_format_PARM_4
   0284 F0                  717 	movx	@dptr,a
   0285 90s00r1D            718 	mov	dptr,#__print_format_c_1_1
   0288 E6                  719 	mov	a,@r0
   0289 F0                  720 	movx	@dptr,a
   028A 80 16               721 	sjmp	00128$
   028C                     722 00127$:
                            723 ;	printf_large.c:529: c = va_arg(ap,int);
   028C 90s00r16            724 	mov	dptr,#__print_format_PARM_4
   028F E0                  725 	movx	a,@dptr
   0290 24 FE               726 	add	a,#0xfe
   0292 F8                  727 	mov	r0,a
   0293 90s00r16            728 	mov	dptr,#__print_format_PARM_4
   0296 F0                  729 	movx	@dptr,a
   0297 86 02               730 	mov	ar2,@r0
   0299 08                  731 	inc	r0
   029A 86 03               732 	mov	ar3,@r0
   029C 18                  733 	dec	r0
   029D 90s00r1D            734 	mov	dptr,#__print_format_c_1_1
   02A0 EA                  735 	mov	a,r2
   02A1 F0                  736 	movx	@dptr,a
   02A2                     737 00128$:
                            738 ;	printf_large.c:530: OUTPUT_CHAR( c, p );
   02A2 90s00r1D            739 	mov	dptr,#__print_format_c_1_1
   02A5 E0                  740 	movx	a,@dptr
   02A6 F5 82               741 	mov	dpl,a
   02A8 12s00r00            742 	lcall	__output_char
                            743 ;	printf_large.c:531: break;
   02AB 02s04r7E            744 	ljmp	00168$
                            745 ;	printf_large.c:533: case 'S':
   02AE                     746 00129$:
                            747 ;	printf_large.c:534: PTR = va_arg(ap,ptr_t);
   02AE 90s00r16            748 	mov	dptr,#__print_format_PARM_4
   02B1 E0                  749 	movx	a,@dptr
   02B2 24 FD               750 	add	a,#0xfd
   02B4 F8                  751 	mov	r0,a
   02B5 90s00r16            752 	mov	dptr,#__print_format_PARM_4
   02B8 F0                  753 	movx	@dptr,a
   02B9 86 02               754 	mov	ar2,@r0
   02BB 08                  755 	inc	r0
   02BC 86 03               756 	mov	ar3,@r0
   02BE 08                  757 	inc	r0
   02BF 86 04               758 	mov	ar4,@r0
   02C1 18                  759 	dec	r0
   02C2 18                  760 	dec	r0
   02C3 90s00r05            761 	mov	dptr,#_value
   02C6 EA                  762 	mov	a,r2
   02C7 F0                  763 	movx	@dptr,a
   02C8 A3                  764 	inc	dptr
   02C9 EB                  765 	mov	a,r3
   02CA F0                  766 	movx	@dptr,a
   02CB A3                  767 	inc	dptr
   02CC EC                  768 	mov	a,r4
   02CD F0                  769 	movx	@dptr,a
                            770 ;	printf_large.c:544: length = strlen(PTR);
   02CE 8A 82               771 	mov	dpl,r2
   02D0 8B 83               772 	mov	dph,r3
   02D2 8C F0               773 	mov	b,r4
   02D4 12s00r00            774 	lcall	_strlen
   02D7 AA 82               775 	mov	r2,dpl
                            776 ;	printf_large.c:546: if ( decimals == -1 )
   02D9 90s00r1B            777 	mov	dptr,#__print_format_decimals_1_1
   02DC E0                  778 	movx	a,@dptr
   02DD FB                  779 	mov	r3,a
   02DE BB FF 05            780 	cjne	r3,#0xFF,00131$
                            781 ;	printf_large.c:548: decimals = length;
   02E1 90s00r1B            782 	mov	dptr,#__print_format_decimals_1_1
   02E4 EA                  783 	mov	a,r2
   02E5 F0                  784 	movx	@dptr,a
   02E6                     785 00131$:
                            786 ;	printf_large.c:550: if ( ( !left_justify ) && (length < width) )
   02E6 20*01 37            787 	jb	__print_format_left_justify_1_1,00281$
   02E9 90s00r1A            788 	mov	dptr,#__print_format_width_1_1
   02EC E0                  789 	movx	a,@dptr
   02ED FB                  790 	mov	r3,a
   02EE EA                  791 	mov	a,r2
   02EF B5 03 00            792 	cjne	a,ar3,00366$
   02F2                     793 00366$:
   02F2 50 2C               794 	jnc	00281$
                            795 ;	printf_large.c:552: width -= length;
   02F4 90s00r1A            796 	mov	dptr,#__print_format_width_1_1
   02F7 EB                  797 	mov	a,r3
   02F8 C3                  798 	clr	c
   02F9 9A                  799 	subb	a,r2
   02FA F0                  800 	movx	@dptr,a
                            801 ;	printf_large.c:553: while( width-- != 0 )
   02FB 90s00r1A            802 	mov	dptr,#__print_format_width_1_1
   02FE E0                  803 	movx	a,@dptr
   02FF FB                  804 	mov	r3,a
   0300                     805 00132$:
   0300 8B 04               806 	mov	ar4,r3
   0302 1B                  807 	dec	r3
   0303 90s00r1A            808 	mov	dptr,#__print_format_width_1_1
   0306 EB                  809 	mov	a,r3
   0307 F0                  810 	movx	@dptr,a
   0308 EC                  811 	mov	a,r4
   0309 60 10               812 	jz	00321$
                            813 ;	printf_large.c:555: OUTPUT_CHAR( ' ', p );
   030B 75 82 20            814 	mov	dpl,#0x20
   030E C0 02               815 	push	ar2
   0310 C0 03               816 	push	ar3
   0312 12s00r00            817 	lcall	__output_char
   0315 D0 03               818 	pop	ar3
   0317 D0 02               819 	pop	ar2
                            820 ;	printf_large.c:559: while ( (c = *PTR)  && (decimals-- > 0))
   0319 80 E5               821 	sjmp	00132$
   031B                     822 00321$:
   031B 90s00r1A            823 	mov	dptr,#__print_format_width_1_1
   031E EB                  824 	mov	a,r3
   031F F0                  825 	movx	@dptr,a
   0320                     826 00281$:
   0320 90s00r1B            827 	mov	dptr,#__print_format_decimals_1_1
   0323 E0                  828 	movx	a,@dptr
   0324 FB                  829 	mov	r3,a
   0325                     830 00139$:
   0325 C0 02               831 	push	ar2
   0327 90s00r05            832 	mov	dptr,#_value
   032A E0                  833 	movx	a,@dptr
   032B FC                  834 	mov	r4,a
   032C A3                  835 	inc	dptr
   032D E0                  836 	movx	a,@dptr
   032E FF                  837 	mov	r7,a
   032F A3                  838 	inc	dptr
   0330 E0                  839 	movx	a,@dptr
   0331 FA                  840 	mov	r2,a
   0332 8C 82               841 	mov	dpl,r4
   0334 8F 83               842 	mov	dph,r7
   0336 8A F0               843 	mov	b,r2
   0338 12s00r00            844 	lcall	__gptrget
   033B F5*00               845 	mov	__print_format_sloc0_1_0,a
   033D D0 02               846 	pop	ar2
   033F E5*00               847 	mov	a,__print_format_sloc0_1_0
   0341 60 3F               848 	jz	00141$
   0343 8B 04               849 	mov	ar4,r3
   0345 1B                  850 	dec	r3
   0346 C3                  851 	clr	c
   0347 E4                  852 	clr	a
   0348 64 80               853 	xrl	a,#0x80
   034A 8C F0               854 	mov	b,r4
   034C 63 F0 80            855 	xrl	b,#0x80
   034F 95 F0               856 	subb	a,b
   0351 50 2F               857 	jnc	00141$
                            858 ;	printf_large.c:561: OUTPUT_CHAR( c, p );
   0353 C0 02               859 	push	ar2
   0355 85*00 82            860 	mov	dpl,__print_format_sloc0_1_0
   0358 C0 02               861 	push	ar2
   035A C0 03               862 	push	ar3
   035C 12s00r00            863 	lcall	__output_char
   035F D0 03               864 	pop	ar3
   0361 D0 02               865 	pop	ar2
                            866 ;	printf_large.c:562: PTR++;
   0363 90s00r05            867 	mov	dptr,#_value
   0366 E0                  868 	movx	a,@dptr
   0367 FC                  869 	mov	r4,a
   0368 A3                  870 	inc	dptr
   0369 E0                  871 	movx	a,@dptr
   036A FF                  872 	mov	r7,a
   036B A3                  873 	inc	dptr
   036C E0                  874 	movx	a,@dptr
   036D FA                  875 	mov	r2,a
   036E 0C                  876 	inc	r4
   036F BC 00 01            877 	cjne	r4,#0x00,00371$
   0372 0F                  878 	inc	r7
   0373                     879 00371$:
   0373 90s00r05            880 	mov	dptr,#_value
   0376 EC                  881 	mov	a,r4
   0377 F0                  882 	movx	@dptr,a
   0378 A3                  883 	inc	dptr
   0379 EF                  884 	mov	a,r7
   037A F0                  885 	movx	@dptr,a
   037B A3                  886 	inc	dptr
   037C EA                  887 	mov	a,r2
   037D F0                  888 	movx	@dptr,a
   037E D0 02               889 	pop	ar2
   0380 80 A3               890 	sjmp	00139$
   0382                     891 00141$:
                            892 ;	printf_large.c:565: if ( left_justify && (length < width))
   0382 20*01 03            893 	jb	__print_format_left_justify_1_1,00372$
   0385 02s04r7E            894 	ljmp	00168$
   0388                     895 00372$:
   0388 90s00r1A            896 	mov	dptr,#__print_format_width_1_1
   038B E0                  897 	movx	a,@dptr
   038C FB                  898 	mov	r3,a
   038D EA                  899 	mov	a,r2
   038E B5 03 00            900 	cjne	a,ar3,00373$
   0391                     901 00373$:
   0391 40 03               902 	jc	00374$
   0393 02s04r7E            903 	ljmp	00168$
   0396                     904 00374$:
                            905 ;	printf_large.c:567: width -= length;
   0396 90s00r1A            906 	mov	dptr,#__print_format_width_1_1
   0399 EB                  907 	mov	a,r3
   039A C3                  908 	clr	c
   039B 9A                  909 	subb	a,r2
   039C F0                  910 	movx	@dptr,a
                            911 ;	printf_large.c:568: while( width-- != 0 )
   039D 90s00r1A            912 	mov	dptr,#__print_format_width_1_1
   03A0 E0                  913 	movx	a,@dptr
   03A1 FA                  914 	mov	r2,a
   03A2                     915 00142$:
   03A2 8A 03               916 	mov	ar3,r2
   03A4 1A                  917 	dec	r2
   03A5 90s00r1A            918 	mov	dptr,#__print_format_width_1_1
   03A8 EA                  919 	mov	a,r2
   03A9 F0                  920 	movx	@dptr,a
   03AA EB                  921 	mov	a,r3
   03AB 70 03               922 	jnz	00375$
   03AD 02s04r79            923 	ljmp	00323$
   03B0                     924 00375$:
                            925 ;	printf_large.c:570: OUTPUT_CHAR( ' ', p );
   03B0 75 82 20            926 	mov	dpl,#0x20
   03B3 C0 02               927 	push	ar2
   03B5 12s00r00            928 	lcall	__output_char
   03B8 D0 02               929 	pop	ar2
                            930 ;	printf_large.c:575: case 'P':
   03BA 80 E6               931 	sjmp	00142$
   03BC                     932 00148$:
                            933 ;	printf_large.c:576: PTR = va_arg(ap,ptr_t);
   03BC 90s00r16            934 	mov	dptr,#__print_format_PARM_4
   03BF E0                  935 	movx	a,@dptr
   03C0 24 FD               936 	add	a,#0xfd
   03C2 F8                  937 	mov	r0,a
   03C3 90s00r16            938 	mov	dptr,#__print_format_PARM_4
   03C6 F0                  939 	movx	@dptr,a
   03C7 86 03               940 	mov	ar3,@r0
   03C9 08                  941 	inc	r0
   03CA 86 04               942 	mov	ar4,@r0
   03CC 08                  943 	inc	r0
   03CD 86 07               944 	mov	ar7,@r0
   03CF 18                  945 	dec	r0
   03D0 18                  946 	dec	r0
   03D1 90s00r05            947 	mov	dptr,#_value
   03D4 EB                  948 	mov	a,r3
   03D5 F0                  949 	movx	@dptr,a
   03D6 A3                  950 	inc	dptr
   03D7 EC                  951 	mov	a,r4
   03D8 F0                  952 	movx	@dptr,a
   03D9 A3                  953 	inc	dptr
   03DA EF                  954 	mov	a,r7
   03DB F0                  955 	movx	@dptr,a
                            956 ;	printf_large.c:599: unsigned char memtype = value.byte[2];
   03DC 90s00r07            957 	mov	dptr,#(_value + 0x0002)
   03DF E0                  958 	movx	a,@dptr
   03E0 FB                  959 	mov	r3,a
                            960 ;	printf_large.c:600: if (memtype >= 0x80)
   03E1 BB 80 00            961 	cjne	r3,#0x80,00376$
   03E4                     962 00376$:
   03E4 40 08               963 	jc	00156$
                            964 ;	printf_large.c:601: c = 'C';
   03E6 90s00r1D            965 	mov	dptr,#__print_format_c_1_1
   03E9 74 43               966 	mov	a,#0x43
   03EB F0                  967 	movx	@dptr,a
   03EC 80 20               968 	sjmp	00157$
   03EE                     969 00156$:
                            970 ;	printf_large.c:602: else if (memtype >= 0x60)
   03EE BB 60 00            971 	cjne	r3,#0x60,00378$
   03F1                     972 00378$:
   03F1 40 08               973 	jc	00153$
                            974 ;	printf_large.c:603: c = 'P';
   03F3 90s00r1D            975 	mov	dptr,#__print_format_c_1_1
   03F6 74 50               976 	mov	a,#0x50
   03F8 F0                  977 	movx	@dptr,a
   03F9 80 13               978 	sjmp	00157$
   03FB                     979 00153$:
                            980 ;	printf_large.c:604: else if (memtype >= 0x40)
   03FB BB 40 00            981 	cjne	r3,#0x40,00380$
   03FE                     982 00380$:
   03FE 40 08               983 	jc	00150$
                            984 ;	printf_large.c:605: c = 'I';
   0400 90s00r1D            985 	mov	dptr,#__print_format_c_1_1
   0403 74 49               986 	mov	a,#0x49
   0405 F0                  987 	movx	@dptr,a
   0406 80 06               988 	sjmp	00157$
   0408                     989 00150$:
                            990 ;	printf_large.c:607: c = 'X';
   0408 90s00r1D            991 	mov	dptr,#__print_format_c_1_1
   040B 74 58               992 	mov	a,#0x58
   040D F0                  993 	movx	@dptr,a
   040E                     994 00157$:
                            995 ;	printf_large.c:609: OUTPUT_CHAR(c, p);
   040E 90s00r1D            996 	mov	dptr,#__print_format_c_1_1
   0411 E0                  997 	movx	a,@dptr
   0412 FB                  998 	mov	r3,a
   0413 F5 82               999 	mov	dpl,a
   0415 C0 03              1000 	push	ar3
   0417 12s00r00           1001 	lcall	__output_char
                           1002 ;	printf_large.c:610: OUTPUT_CHAR(':', p);
   041A 75 82 3A           1003 	mov	dpl,#0x3A
   041D 12s00r00           1004 	lcall	__output_char
                           1005 ;	printf_large.c:611: OUTPUT_CHAR('0', p);
   0420 75 82 30           1006 	mov	dpl,#0x30
   0423 12s00r00           1007 	lcall	__output_char
                           1008 ;	printf_large.c:612: OUTPUT_CHAR('x', p);
   0426 75 82 78           1009 	mov	dpl,#0x78
   0429 12s00r00           1010 	lcall	__output_char
   042C D0 03              1011 	pop	ar3
                           1012 ;	printf_large.c:613: if ((c != 'I' /* idata */) &&
   042E BB 49 02           1013 	cjne	r3,#0x49,00382$
   0431 80 0E              1014 	sjmp	00159$
   0433                    1015 00382$:
                           1016 ;	printf_large.c:614: (c != 'P' /* pdata */))
   0433 BB 50 02           1017 	cjne	r3,#0x50,00383$
   0436 80 09              1018 	sjmp	00159$
   0438                    1019 00383$:
                           1020 ;	printf_large.c:616: OUTPUT_2DIGITS( value.byte[1] );
   0438 90s00r06           1021 	mov	dptr,#(_value + 0x0001)
   043B E0                 1022 	movx	a,@dptr
   043C F5 82              1023 	mov	dpl,a
   043E 12s00r5E           1024 	lcall	_output_2digits
   0441                    1025 00159$:
                           1026 ;	printf_large.c:618: OUTPUT_2DIGITS( value.byte[0] );
   0441 90s00r05           1027 	mov	dptr,#_value
   0444 E0                 1028 	movx	a,@dptr
   0445 F5 82              1029 	mov	dpl,a
   0447 12s00r5E           1030 	lcall	_output_2digits
                           1031 ;	printf_large.c:625: break;
                           1032 ;	printf_large.c:628: case 'I':
   044A 80 32              1033 	sjmp	00168$
   044C                    1034 00162$:
                           1035 ;	printf_large.c:629: signed_argument = 1;
   044C D2*05              1036 	setb	__print_format_signed_argument_1_1
                           1037 ;	printf_large.c:630: radix = 10;
   044E 90s00r19           1038 	mov	dptr,#__print_format_radix_1_1
   0451 74 0A              1039 	mov	a,#0x0A
   0453 F0                 1040 	movx	@dptr,a
                           1041 ;	printf_large.c:631: break;
                           1042 ;	printf_large.c:633: case 'O':
   0454 80 28              1043 	sjmp	00168$
   0456                    1044 00163$:
                           1045 ;	printf_large.c:634: radix = 8;
   0456 90s00r19           1046 	mov	dptr,#__print_format_radix_1_1
   0459 74 08              1047 	mov	a,#0x08
   045B F0                 1048 	movx	@dptr,a
                           1049 ;	printf_large.c:635: break;
                           1050 ;	printf_large.c:637: case 'U':
   045C 80 20              1051 	sjmp	00168$
   045E                    1052 00164$:
                           1053 ;	printf_large.c:638: radix = 10;
   045E 90s00r19           1054 	mov	dptr,#__print_format_radix_1_1
   0461 74 0A              1055 	mov	a,#0x0A
   0463 F0                 1056 	movx	@dptr,a
                           1057 ;	printf_large.c:639: break;
                           1058 ;	printf_large.c:641: case 'X':
   0464 80 18              1059 	sjmp	00168$
   0466                    1060 00165$:
                           1061 ;	printf_large.c:642: radix = 16;
   0466 90s00r19           1062 	mov	dptr,#__print_format_radix_1_1
   0469 74 10              1063 	mov	a,#0x10
   046B F0                 1064 	movx	@dptr,a
                           1065 ;	printf_large.c:643: break;
                           1066 ;	printf_large.c:645: case 'F':
   046C 80 10              1067 	sjmp	00168$
   046E                    1068 00166$:
                           1069 ;	printf_large.c:646: float_argument=1;
   046E D2*08              1070 	setb	__print_format_float_argument_1_1
                           1071 ;	printf_large.c:647: break;
                           1072 ;	printf_large.c:649: default:
   0470 80 0C              1073 	sjmp	00168$
   0472                    1074 00167$:
                           1075 ;	printf_large.c:651: OUTPUT_CHAR( c, p );
   0472 8E 82              1076 	mov	dpl,r6
   0474 12s00r00           1077 	lcall	__output_char
                           1078 ;	printf_large.c:828: return charsOutputted;
                           1079 ;	printf_large.c:653: }
   0477 80 05              1080 	sjmp	00168$
   0479                    1081 00323$:
   0479 90s00r1A           1082 	mov	dptr,#__print_format_width_1_1
   047C EA                 1083 	mov	a,r2
   047D F0                 1084 	movx	@dptr,a
   047E                    1085 00168$:
                           1086 ;	printf_large.c:655: if (float_argument) {
   047E 30*08 72           1087 	jnb	__print_format_float_argument_1_1,00234$
                           1088 ;	printf_large.c:656: value.f=va_arg(ap,float);
   0481 90s00r16           1089 	mov	dptr,#__print_format_PARM_4
   0484 E0                 1090 	movx	a,@dptr
   0485 24 FC              1091 	add	a,#0xfc
   0487 F8                 1092 	mov	r0,a
   0488 90s00r16           1093 	mov	dptr,#__print_format_PARM_4
   048B F0                 1094 	movx	@dptr,a
   048C 86 02              1095 	mov	ar2,@r0
   048E 08                 1096 	inc	r0
   048F 86 03              1097 	mov	ar3,@r0
   0491 08                 1098 	inc	r0
   0492 86 04              1099 	mov	ar4,@r0
   0494 08                 1100 	inc	r0
   0495 86 06              1101 	mov	ar6,@r0
   0497 18                 1102 	dec	r0
   0498 18                 1103 	dec	r0
   0499 18                 1104 	dec	r0
   049A 90s00r05           1105 	mov	dptr,#_value
   049D EA                 1106 	mov	a,r2
   049E F0                 1107 	movx	@dptr,a
   049F A3                 1108 	inc	dptr
   04A0 EB                 1109 	mov	a,r3
   04A1 F0                 1110 	movx	@dptr,a
   04A2 A3                 1111 	inc	dptr
   04A3 EC                 1112 	mov	a,r4
   04A4 F0                 1113 	movx	@dptr,a
   04A5 A3                 1114 	inc	dptr
   04A6 EE                 1115 	mov	a,r6
   04A7 F0                 1116 	movx	@dptr,a
                           1117 ;	printf_large.c:658: PTR="<NO FLOAT>";
   04A8 90s00r05           1118 	mov	dptr,#_value
   04AB 74r00              1119 	mov	a,#__str_0
   04AD F0                 1120 	movx	@dptr,a
   04AE A3                 1121 	inc	dptr
   04AF 74s00              1122 	mov	a,#(__str_0 >> 8)
   04B1 F0                 1123 	movx	@dptr,a
   04B2 A3                 1124 	inc	dptr
   04B3 74 80              1125 	mov	a,#0x80
   04B5 F0                 1126 	movx	@dptr,a
                           1127 ;	printf_large.c:659: while (c=*PTR++)
   04B6                    1128 00169$:
   04B6 90s00r05           1129 	mov	dptr,#_value
   04B9 E0                 1130 	movx	a,@dptr
   04BA F5*01              1131 	mov	__print_format_sloc1_1_0,a
   04BC A3                 1132 	inc	dptr
   04BD E0                 1133 	movx	a,@dptr
   04BE F5*02              1134 	mov	(__print_format_sloc1_1_0 + 1),a
   04C0 A3                 1135 	inc	dptr
   04C1 E0                 1136 	movx	a,@dptr
   04C2 F5*03              1137 	mov	(__print_format_sloc1_1_0 + 2),a
   04C4 74 01              1138 	mov	a,#0x01
   04C6 25*01              1139 	add	a,__print_format_sloc1_1_0
   04C8 FE                 1140 	mov	r6,a
   04C9 E4                 1141 	clr	a
   04CA 35*02              1142 	addc	a,(__print_format_sloc1_1_0 + 1)
   04CC FF                 1143 	mov	r7,a
   04CD AA*03              1144 	mov	r2,(__print_format_sloc1_1_0 + 2)
   04CF 90s00r05           1145 	mov	dptr,#_value
   04D2 EE                 1146 	mov	a,r6
   04D3 F0                 1147 	movx	@dptr,a
   04D4 A3                 1148 	inc	dptr
   04D5 EF                 1149 	mov	a,r7
   04D6 F0                 1150 	movx	@dptr,a
   04D7 A3                 1151 	inc	dptr
   04D8 EA                 1152 	mov	a,r2
   04D9 F0                 1153 	movx	@dptr,a
   04DA 85*01 82           1154 	mov	dpl,__print_format_sloc1_1_0
   04DD 85*02 83           1155 	mov	dph,(__print_format_sloc1_1_0 + 1)
   04E0 85*03 F0           1156 	mov	b,(__print_format_sloc1_1_0 + 2)
   04E3 12s00r00           1157 	lcall	__gptrget
   04E6 FA                 1158 	mov	r2,a
   04E7 70 03              1159 	jnz	00385$
   04E9 02s01r03           1160 	ljmp	00239$
   04EC                    1161 00385$:
                           1162 ;	printf_large.c:661: OUTPUT_CHAR (c, p);
   04EC 8A 82              1163 	mov	dpl,r2
   04EE 12s00r00           1164 	lcall	__output_char
   04F1 80 C3              1165 	sjmp	00169$
   04F3                    1166 00234$:
                           1167 ;	printf_large.c:678: } else if (radix != 0)
   04F3 90s00r19           1168 	mov	dptr,#__print_format_radix_1_1
   04F6 E0                 1169 	movx	a,@dptr
   04F7 F5*01              1170 	mov	__print_format_sloc1_1_0,a
   04F9 70 03              1171 	jnz	00386$
   04FB 02s01r03           1172 	ljmp	00239$
   04FE                    1173 00386$:
                           1174 ;	printf_large.c:683: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
   04FE 90s00r24           1175 	mov	dptr,#__print_format_pstore_4_22
   0501 74r23              1176 	mov	a,#(__print_format_store_4_22 + 0x0005)
   0503 F0                 1177 	movx	@dptr,a
   0504 A3                 1178 	inc	dptr
   0505 74s00              1179 	mov	a,#((__print_format_store_4_22 + 0x0005) >> 8)
   0507 F0                 1180 	movx	@dptr,a
                           1181 ;	printf_large.c:686: if (char_argument)
   0508 30*06 47           1182 	jnb	__print_format_char_argument_1_1,00180$
                           1183 ;	printf_large.c:688: value.l = va_arg(ap,char);
   050B 90s00r16           1184 	mov	dptr,#__print_format_PARM_4
   050E E0                 1185 	movx	a,@dptr
   050F 14                 1186 	dec	a
   0510 F8                 1187 	mov	r0,a
   0511 90s00r16           1188 	mov	dptr,#__print_format_PARM_4
   0514 F0                 1189 	movx	@dptr,a
   0515 E6                 1190 	mov	a,@r0
   0516 FB                 1191 	mov	r3,a
   0517 33                 1192 	rlc	a
   0518 95 E0              1193 	subb	a,acc
   051A FC                 1194 	mov	r4,a
   051B FE                 1195 	mov	r6,a
   051C FF                 1196 	mov	r7,a
   051D 90s00r05           1197 	mov	dptr,#_value
   0520 EB                 1198 	mov	a,r3
   0521 F0                 1199 	movx	@dptr,a
   0522 A3                 1200 	inc	dptr
   0523 EC                 1201 	mov	a,r4
   0524 F0                 1202 	movx	@dptr,a
   0525 A3                 1203 	inc	dptr
   0526 EE                 1204 	mov	a,r6
   0527 F0                 1205 	movx	@dptr,a
   0528 A3                 1206 	inc	dptr
   0529 EF                 1207 	mov	a,r7
   052A F0                 1208 	movx	@dptr,a
                           1209 ;	printf_large.c:689: if (!signed_argument)
   052B 30*05 03           1210 	jnb	__print_format_signed_argument_1_1,00388$
   052E 02s05rC4           1211 	ljmp	00181$
   0531                    1212 00388$:
                           1213 ;	printf_large.c:691: value.l &= 0xFF;
   0531 90s00r05           1214 	mov	dptr,#_value
   0534 E0                 1215 	movx	a,@dptr
   0535 FB                 1216 	mov	r3,a
   0536 A3                 1217 	inc	dptr
   0537 E0                 1218 	movx	a,@dptr
   0538 A3                 1219 	inc	dptr
   0539 E0                 1220 	movx	a,@dptr
   053A A3                 1221 	inc	dptr
   053B E0                 1222 	movx	a,@dptr
   053C 7C 00              1223 	mov	r4,#0x00
   053E 7E 00              1224 	mov	r6,#0x00
   0540 7F 00              1225 	mov	r7,#0x00
   0542 90s00r05           1226 	mov	dptr,#_value
   0545 EB                 1227 	mov	a,r3
   0546 F0                 1228 	movx	@dptr,a
   0547 A3                 1229 	inc	dptr
   0548 EC                 1230 	mov	a,r4
   0549 F0                 1231 	movx	@dptr,a
   054A A3                 1232 	inc	dptr
   054B EE                 1233 	mov	a,r6
   054C F0                 1234 	movx	@dptr,a
   054D A3                 1235 	inc	dptr
   054E EF                 1236 	mov	a,r7
   054F F0                 1237 	movx	@dptr,a
   0550 80 72              1238 	sjmp	00181$
   0552                    1239 00180$:
                           1240 ;	printf_large.c:694: else if (long_argument)
   0552 30*07 29           1241 	jnb	__print_format_long_argument_1_1,00177$
                           1242 ;	printf_large.c:696: value.l = va_arg(ap,long);
   0555 90s00r16           1243 	mov	dptr,#__print_format_PARM_4
   0558 E0                 1244 	movx	a,@dptr
   0559 24 FC              1245 	add	a,#0xfc
   055B F8                 1246 	mov	r0,a
   055C 90s00r16           1247 	mov	dptr,#__print_format_PARM_4
   055F F0                 1248 	movx	@dptr,a
   0560 86 03              1249 	mov	ar3,@r0
   0562 08                 1250 	inc	r0
   0563 86 04              1251 	mov	ar4,@r0
   0565 08                 1252 	inc	r0
   0566 86 06              1253 	mov	ar6,@r0
   0568 08                 1254 	inc	r0
   0569 86 07              1255 	mov	ar7,@r0
   056B 18                 1256 	dec	r0
   056C 18                 1257 	dec	r0
   056D 18                 1258 	dec	r0
   056E 90s00r05           1259 	mov	dptr,#_value
   0571 EB                 1260 	mov	a,r3
   0572 F0                 1261 	movx	@dptr,a
   0573 A3                 1262 	inc	dptr
   0574 EC                 1263 	mov	a,r4
   0575 F0                 1264 	movx	@dptr,a
   0576 A3                 1265 	inc	dptr
   0577 EE                 1266 	mov	a,r6
   0578 F0                 1267 	movx	@dptr,a
   0579 A3                 1268 	inc	dptr
   057A EF                 1269 	mov	a,r7
   057B F0                 1270 	movx	@dptr,a
   057C 80 46              1271 	sjmp	00181$
   057E                    1272 00177$:
                           1273 ;	printf_large.c:700: value.l = va_arg(ap,int);
   057E 90s00r16           1274 	mov	dptr,#__print_format_PARM_4
   0581 E0                 1275 	movx	a,@dptr
   0582 24 FE              1276 	add	a,#0xfe
   0584 F8                 1277 	mov	r0,a
   0585 90s00r16           1278 	mov	dptr,#__print_format_PARM_4
   0588 F0                 1279 	movx	@dptr,a
   0589 86 03              1280 	mov	ar3,@r0
   058B 08                 1281 	inc	r0
   058C 86 04              1282 	mov	ar4,@r0
   058E 18                 1283 	dec	r0
   058F EC                 1284 	mov	a,r4
   0590 33                 1285 	rlc	a
   0591 95 E0              1286 	subb	a,acc
   0593 FE                 1287 	mov	r6,a
   0594 FF                 1288 	mov	r7,a
   0595 90s00r05           1289 	mov	dptr,#_value
   0598 EB                 1290 	mov	a,r3
   0599 F0                 1291 	movx	@dptr,a
   059A A3                 1292 	inc	dptr
   059B EC                 1293 	mov	a,r4
   059C F0                 1294 	movx	@dptr,a
   059D A3                 1295 	inc	dptr
   059E EE                 1296 	mov	a,r6
   059F F0                 1297 	movx	@dptr,a
   05A0 A3                 1298 	inc	dptr
   05A1 EF                 1299 	mov	a,r7
   05A2 F0                 1300 	movx	@dptr,a
                           1301 ;	printf_large.c:701: if (!signed_argument)
   05A3 20*05 1E           1302 	jb	__print_format_signed_argument_1_1,00181$
                           1303 ;	printf_large.c:703: value.l &= 0xFFFF;
   05A6 90s00r05           1304 	mov	dptr,#_value
   05A9 E0                 1305 	movx	a,@dptr
   05AA FB                 1306 	mov	r3,a
   05AB A3                 1307 	inc	dptr
   05AC E0                 1308 	movx	a,@dptr
   05AD FC                 1309 	mov	r4,a
   05AE A3                 1310 	inc	dptr
   05AF E0                 1311 	movx	a,@dptr
   05B0 A3                 1312 	inc	dptr
   05B1 E0                 1313 	movx	a,@dptr
   05B2 7E 00              1314 	mov	r6,#0x00
   05B4 7F 00              1315 	mov	r7,#0x00
   05B6 90s00r05           1316 	mov	dptr,#_value
   05B9 EB                 1317 	mov	a,r3
   05BA F0                 1318 	movx	@dptr,a
   05BB A3                 1319 	inc	dptr
   05BC EC                 1320 	mov	a,r4
   05BD F0                 1321 	movx	@dptr,a
   05BE A3                 1322 	inc	dptr
   05BF EE                 1323 	mov	a,r6
   05C0 F0                 1324 	movx	@dptr,a
   05C1 A3                 1325 	inc	dptr
   05C2 EF                 1326 	mov	a,r7
   05C3 F0                 1327 	movx	@dptr,a
   05C4                    1328 00181$:
                           1329 ;	printf_large.c:707: if ( signed_argument )
   05C4 30*05 30           1330 	jnb	__print_format_signed_argument_1_1,00186$
                           1331 ;	printf_large.c:709: if (value.l < 0)
   05C7 90s00r05           1332 	mov	dptr,#_value
   05CA E0                 1333 	movx	a,@dptr
   05CB FB                 1334 	mov	r3,a
   05CC A3                 1335 	inc	dptr
   05CD E0                 1336 	movx	a,@dptr
   05CE FC                 1337 	mov	r4,a
   05CF A3                 1338 	inc	dptr
   05D0 E0                 1339 	movx	a,@dptr
   05D1 FE                 1340 	mov	r6,a
   05D2 A3                 1341 	inc	dptr
   05D3 E0                 1342 	movx	a,@dptr
   05D4 FF                 1343 	mov	r7,a
   05D5 30 E7 1D           1344 	jnb	acc.7,00183$
                           1345 ;	printf_large.c:710: value.l = -value.l;
   05D8 C3                 1346 	clr	c
   05D9 E4                 1347 	clr	a
   05DA 9B                 1348 	subb	a,r3
   05DB FB                 1349 	mov	r3,a
   05DC E4                 1350 	clr	a
   05DD 9C                 1351 	subb	a,r4
   05DE FC                 1352 	mov	r4,a
   05DF E4                 1353 	clr	a
   05E0 9E                 1354 	subb	a,r6
   05E1 FE                 1355 	mov	r6,a
   05E2 E4                 1356 	clr	a
   05E3 9F                 1357 	subb	a,r7
   05E4 FF                 1358 	mov	r7,a
   05E5 90s00r05           1359 	mov	dptr,#_value
   05E8 EB                 1360 	mov	a,r3
   05E9 F0                 1361 	movx	@dptr,a
   05EA A3                 1362 	inc	dptr
   05EB EC                 1363 	mov	a,r4
   05EC F0                 1364 	movx	@dptr,a
   05ED A3                 1365 	inc	dptr
   05EE EE                 1366 	mov	a,r6
   05EF F0                 1367 	movx	@dptr,a
   05F0 A3                 1368 	inc	dptr
   05F1 EF                 1369 	mov	a,r7
   05F2 F0                 1370 	movx	@dptr,a
   05F3 80 02              1371 	sjmp	00186$
   05F5                    1372 00183$:
                           1373 ;	printf_large.c:712: signed_argument = 0;
   05F5 C2*05              1374 	clr	__print_format_signed_argument_1_1
   05F7                    1375 00186$:
                           1376 ;	printf_large.c:716: lsd = 1;
   05F7 D2*09              1377 	setb	__print_format_lsd_1_1
                           1378 ;	printf_large.c:718: do {
   05F9 75*04r23           1379 	mov	__print_format_sloc2_1_0,#(__print_format_store_4_22 + 0x0005)
   05FC 75*05s00           1380 	mov	(__print_format_sloc2_1_0 + 1),#((__print_format_store_4_22 + 0x0005) >> 8)
   05FF 75*00 00           1381 	mov	__print_format_sloc0_1_0,#0x00
   0602                    1382 00190$:
                           1383 ;	printf_large.c:719: value.byte[4] = 0;
   0602 90s00r09           1384 	mov	dptr,#(_value + 0x0004)
   0605 E4                 1385 	clr	a
   0606 F0                 1386 	movx	@dptr,a
                           1387 ;	printf_large.c:723: calculate_digit(radix);
   0607 85*01 82           1388 	mov	dpl,__print_format_sloc1_1_0
   060A 12s00r79           1389 	lcall	_calculate_digit
                           1390 ;	printf_large.c:725: if (!lsd)
   060D 20*09 2D           1391 	jb	__print_format_lsd_1_1,00188$
                           1392 ;	printf_large.c:727: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
   0610 90s00r09           1393 	mov	dptr,#(_value + 0x0004)
   0613 E0                 1394 	movx	a,@dptr
   0614 C4                 1395 	swap	a
   0615 FF                 1396 	mov	r7,a
   0616 85*04 82           1397 	mov	dpl,__print_format_sloc2_1_0
   0619 85*05 83           1398 	mov	dph,(__print_format_sloc2_1_0 + 1)
   061C E0                 1399 	movx	a,@dptr
   061D FA                 1400 	mov	r2,a
   061E 42 07              1401 	orl	ar7,a
   0620 85*04 82           1402 	mov	dpl,__print_format_sloc2_1_0
   0623 85*05 83           1403 	mov	dph,(__print_format_sloc2_1_0 + 1)
   0626 EF                 1404 	mov	a,r7
   0627 F0                 1405 	movx	@dptr,a
                           1406 ;	printf_large.c:728: pstore--;
   0628 15*04              1407 	dec	__print_format_sloc2_1_0
   062A 74 FF              1408 	mov	a,#0xff
   062C B5*04 02           1409 	cjne	a,__print_format_sloc2_1_0,00394$
   062F 15*05              1410 	dec	(__print_format_sloc2_1_0 + 1)
   0631                    1411 00394$:
   0631 90s00r24           1412 	mov	dptr,#__print_format_pstore_4_22
   0634 E5*04              1413 	mov	a,__print_format_sloc2_1_0
   0636 F0                 1414 	movx	@dptr,a
   0637 A3                 1415 	inc	dptr
   0638 E5*05              1416 	mov	a,(__print_format_sloc2_1_0 + 1)
   063A F0                 1417 	movx	@dptr,a
   063B 80 0C              1418 	sjmp	00189$
   063D                    1419 00188$:
                           1420 ;	printf_large.c:732: *pstore = value.byte[4];
   063D 90s00r09           1421 	mov	dptr,#(_value + 0x0004)
   0640 E0                 1422 	movx	a,@dptr
   0641 FF                 1423 	mov	r7,a
   0642 85*04 82           1424 	mov	dpl,__print_format_sloc2_1_0
   0645 85*05 83           1425 	mov	dph,(__print_format_sloc2_1_0 + 1)
   0648 F0                 1426 	movx	@dptr,a
   0649                    1427 00189$:
                           1428 ;	printf_large.c:734: length++;
   0649 05*00              1429 	inc	__print_format_sloc0_1_0
   064B 90s00r1C           1430 	mov	dptr,#__print_format_length_1_1
   064E E5*00              1431 	mov	a,__print_format_sloc0_1_0
   0650 F0                 1432 	movx	@dptr,a
                           1433 ;	printf_large.c:735: lsd = !lsd;
   0651 B2*09              1434 	cpl	__print_format_lsd_1_1
                           1435 ;	printf_large.c:736: } while( value.ul );
   0653 90s00r05           1436 	mov	dptr,#_value
   0656 E0                 1437 	movx	a,@dptr
   0657 FF                 1438 	mov	r7,a
   0658 A3                 1439 	inc	dptr
   0659 E0                 1440 	movx	a,@dptr
   065A FA                 1441 	mov	r2,a
   065B A3                 1442 	inc	dptr
   065C E0                 1443 	movx	a,@dptr
   065D FE                 1444 	mov	r6,a
   065E A3                 1445 	inc	dptr
   065F E0                 1446 	movx	a,@dptr
   0660 FB                 1447 	mov	r3,a
   0661 EF                 1448 	mov	a,r7
   0662 4A                 1449 	orl	a,r2
   0663 4E                 1450 	orl	a,r6
   0664 4B                 1451 	orl	a,r3
   0665 70 9B              1452 	jnz	00190$
                           1453 ;	printf_large.c:738: if (width == 0)
   0667 90s00r24           1454 	mov	dptr,#__print_format_pstore_4_22
   066A E5*04              1455 	mov	a,__print_format_sloc2_1_0
   066C F0                 1456 	movx	@dptr,a
   066D A3                 1457 	inc	dptr
   066E E5*05              1458 	mov	a,(__print_format_sloc2_1_0 + 1)
   0670 F0                 1459 	movx	@dptr,a
   0671 90s00r1C           1460 	mov	dptr,#__print_format_length_1_1
   0674 E5*00              1461 	mov	a,__print_format_sloc0_1_0
   0676 F0                 1462 	movx	@dptr,a
   0677 90s00r1A           1463 	mov	dptr,#__print_format_width_1_1
   067A E0                 1464 	movx	a,@dptr
   067B FA                 1465 	mov	r2,a
   067C 70 06              1466 	jnz	00194$
                           1467 ;	printf_large.c:743: width=1;
   067E 90s00r1A           1468 	mov	dptr,#__print_format_width_1_1
   0681 74 01              1469 	mov	a,#0x01
   0683 F0                 1470 	movx	@dptr,a
   0684                    1471 00194$:
                           1472 ;	printf_large.c:747: if (!zero_padding && !left_justify)
   0684 20*02 28           1473 	jb	__print_format_zero_padding_1_1,00199$
   0687 20*01 25           1474 	jb	__print_format_left_justify_1_1,00199$
                           1475 ;	printf_large.c:749: while ( width > (unsigned char) (length+1) )
   068A E5*00              1476 	mov	a,__print_format_sloc0_1_0
   068C 04                 1477 	inc	a
   068D FA                 1478 	mov	r2,a
   068E 90s00r1A           1479 	mov	dptr,#__print_format_width_1_1
   0691 E0                 1480 	movx	a,@dptr
   0692 FB                 1481 	mov	r3,a
   0693                    1482 00195$:
   0693 EA                 1483 	mov	a,r2
   0694 B5 03 00           1484 	cjne	a,ar3,00399$
   0697                    1485 00399$:
   0697 50 11              1486 	jnc	00325$
                           1487 ;	printf_large.c:751: OUTPUT_CHAR( ' ', p );
   0699 75 82 20           1488 	mov	dpl,#0x20
   069C C0 02              1489 	push	ar2
   069E C0 03              1490 	push	ar3
   06A0 12s00r00           1491 	lcall	__output_char
   06A3 D0 03              1492 	pop	ar3
   06A5 D0 02              1493 	pop	ar2
                           1494 ;	printf_large.c:752: width--;
   06A7 1B                 1495 	dec	r3
   06A8 80 E9              1496 	sjmp	00195$
   06AA                    1497 00325$:
   06AA 90s00r1A           1498 	mov	dptr,#__print_format_width_1_1
   06AD EB                 1499 	mov	a,r3
   06AE F0                 1500 	movx	@dptr,a
   06AF                    1501 00199$:
                           1502 ;	printf_large.c:756: if (signed_argument) // this now means the original value was negative
   06AF 30*05 11           1503 	jnb	__print_format_signed_argument_1_1,00209$
                           1504 ;	printf_large.c:758: OUTPUT_CHAR( '-', p );
   06B2 75 82 2D           1505 	mov	dpl,#0x2D
   06B5 12s00r00           1506 	lcall	__output_char
                           1507 ;	printf_large.c:760: width--;
   06B8 90s00r1A           1508 	mov	dptr,#__print_format_width_1_1
   06BB E0                 1509 	movx	a,@dptr
   06BC 14                 1510 	dec	a
   06BD 90s00r1A           1511 	mov	dptr,#__print_format_width_1_1
   06C0 F0                 1512 	movx	@dptr,a
   06C1 80 2D              1513 	sjmp	00210$
   06C3                    1514 00209$:
                           1515 ;	printf_large.c:762: else if (length != 0)
   06C3 90s00r1C           1516 	mov	dptr,#__print_format_length_1_1
   06C6 E0                 1517 	movx	a,@dptr
   06C7 FA                 1518 	mov	r2,a
   06C8 60 26              1519 	jz	00210$
                           1520 ;	printf_large.c:765: if (prefix_sign)
   06CA 30*03 11           1521 	jnb	__print_format_prefix_sign_1_1,00204$
                           1522 ;	printf_large.c:767: OUTPUT_CHAR( '+', p );
   06CD 75 82 2B           1523 	mov	dpl,#0x2B
   06D0 12s00r00           1524 	lcall	__output_char
                           1525 ;	printf_large.c:769: width--;
   06D3 90s00r1A           1526 	mov	dptr,#__print_format_width_1_1
   06D6 E0                 1527 	movx	a,@dptr
   06D7 14                 1528 	dec	a
   06D8 90s00r1A           1529 	mov	dptr,#__print_format_width_1_1
   06DB F0                 1530 	movx	@dptr,a
   06DC 80 12              1531 	sjmp	00210$
   06DE                    1532 00204$:
                           1533 ;	printf_large.c:771: else if (prefix_space)
   06DE 30*04 0F           1534 	jnb	__print_format_prefix_space_1_1,00210$
                           1535 ;	printf_large.c:773: OUTPUT_CHAR( ' ', p );
   06E1 75 82 20           1536 	mov	dpl,#0x20
   06E4 12s00r00           1537 	lcall	__output_char
                           1538 ;	printf_large.c:775: width--;
   06E7 90s00r1A           1539 	mov	dptr,#__print_format_width_1_1
   06EA E0                 1540 	movx	a,@dptr
   06EB 14                 1541 	dec	a
   06EC 90s00r1A           1542 	mov	dptr,#__print_format_width_1_1
   06EF F0                 1543 	movx	@dptr,a
   06F0                    1544 00210$:
                           1545 ;	printf_large.c:780: if (!left_justify)
   06F0 20*01 30           1546 	jb	__print_format_left_justify_1_1,00218$
                           1547 ;	printf_large.c:781: while ( width-- > length )
   06F3 90s00r1C           1548 	mov	dptr,#__print_format_length_1_1
   06F6 E0                 1549 	movx	a,@dptr
   06F7 FA                 1550 	mov	r2,a
   06F8 90s00r1A           1551 	mov	dptr,#__print_format_width_1_1
   06FB E0                 1552 	movx	a,@dptr
   06FC FB                 1553 	mov	r3,a
   06FD                    1554 00211$:
   06FD 8B 04              1555 	mov	ar4,r3
   06FF 1B                 1556 	dec	r3
   0700 90s00r1A           1557 	mov	dptr,#__print_format_width_1_1
   0703 EB                 1558 	mov	a,r3
   0704 F0                 1559 	movx	@dptr,a
   0705 EA                 1560 	mov	a,r2
   0706 B5 04 00           1561 	cjne	a,ar4,00406$
   0709                    1562 00406$:
   0709 50 37              1563 	jnc	00326$
                           1564 ;	printf_large.c:783: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
   070B 30*02 04           1565 	jnb	__print_format_zero_padding_1_1,00244$
   070E 7C 30              1566 	mov	r4,#0x30
   0710 80 02              1567 	sjmp	00245$
   0712                    1568 00244$:
   0712 7C 20              1569 	mov	r4,#0x20
   0714                    1570 00245$:
   0714 8C 82              1571 	mov	dpl,r4
   0716 C0 02              1572 	push	ar2
   0718 C0 03              1573 	push	ar3
   071A 12s00r00           1574 	lcall	__output_char
   071D D0 03              1575 	pop	ar3
   071F D0 02              1576 	pop	ar2
   0721 80 DA              1577 	sjmp	00211$
   0723                    1578 00218$:
                           1579 ;	printf_large.c:788: if (width > length)
   0723 90s00r1A           1580 	mov	dptr,#__print_format_width_1_1
   0726 E0                 1581 	movx	a,@dptr
   0727 FA                 1582 	mov	r2,a
   0728 90s00r1C           1583 	mov	dptr,#__print_format_length_1_1
   072B E0                 1584 	movx	a,@dptr
   072C FC                 1585 	mov	r4,a
   072D B5 02 00           1586 	cjne	a,ar2,00409$
   0730                    1587 00409$:
   0730 50 09              1588 	jnc	00215$
                           1589 ;	printf_large.c:789: width -= length;
   0732 90s00r1A           1590 	mov	dptr,#__print_format_width_1_1
   0735 EA                 1591 	mov	a,r2
   0736 C3                 1592 	clr	c
   0737 9C                 1593 	subb	a,r4
   0738 F0                 1594 	movx	@dptr,a
   0739 80 0C              1595 	sjmp	00318$
   073B                    1596 00215$:
                           1597 ;	printf_large.c:791: width = 0;
   073B 90s00r1A           1598 	mov	dptr,#__print_format_width_1_1
   073E E4                 1599 	clr	a
   073F F0                 1600 	movx	@dptr,a
                           1601 ;	printf_large.c:828: return charsOutputted;
                           1602 ;	printf_large.c:795: while( length-- )
   0740 80 05              1603 	sjmp	00318$
   0742                    1604 00326$:
   0742 90s00r1A           1605 	mov	dptr,#__print_format_width_1_1
   0745 EB                 1606 	mov	a,r3
   0746 F0                 1607 	movx	@dptr,a
   0747                    1608 00318$:
   0747 90s00r24           1609 	mov	dptr,#__print_format_pstore_4_22
   074A E0                 1610 	movx	a,@dptr
   074B FA                 1611 	mov	r2,a
   074C A3                 1612 	inc	dptr
   074D E0                 1613 	movx	a,@dptr
   074E FB                 1614 	mov	r3,a
   074F 90s00r1C           1615 	mov	dptr,#__print_format_length_1_1
   0752 E0                 1616 	movx	a,@dptr
   0753 FC                 1617 	mov	r4,a
   0754                    1618 00223$:
   0754 8C 06              1619 	mov	ar6,r4
   0756 1C                 1620 	dec	r4
   0757 EE                 1621 	mov	a,r6
   0758 60 3E              1622 	jz	00225$
                           1623 ;	printf_large.c:797: lsd = !lsd;
   075A B2*09              1624 	cpl	__print_format_lsd_1_1
                           1625 ;	printf_large.c:798: if (!lsd)
   075C 20*09 14           1626 	jb	__print_format_lsd_1_1,00221$
                           1627 ;	printf_large.c:800: pstore++;
   075F 0A                 1628 	inc	r2
   0760 BA 00 01           1629 	cjne	r2,#0x00,00413$
   0763 0B                 1630 	inc	r3
   0764                    1631 00413$:
                           1632 ;	printf_large.c:801: value.byte[4] = *pstore >> 4;
   0764 8A 82              1633 	mov	dpl,r2
   0766 8B 83              1634 	mov	dph,r3
   0768 E0                 1635 	movx	a,@dptr
   0769 C4                 1636 	swap	a
   076A 54 0F              1637 	anl	a,#0x0f
   076C FE                 1638 	mov	r6,a
   076D 90s00r09           1639 	mov	dptr,#(_value + 0x0004)
   0770 F0                 1640 	movx	@dptr,a
   0771 80 0E              1641 	sjmp	00222$
   0773                    1642 00221$:
                           1643 ;	printf_large.c:805: value.byte[4] = *pstore & 0x0F;
   0773 8A 82              1644 	mov	dpl,r2
   0775 8B 83              1645 	mov	dph,r3
   0777 E0                 1646 	movx	a,@dptr
   0778 FE                 1647 	mov	r6,a
   0779 53 06 0F           1648 	anl	ar6,#0x0F
   077C 90s00r09           1649 	mov	dptr,#(_value + 0x0004)
   077F EE                 1650 	mov	a,r6
   0780 F0                 1651 	movx	@dptr,a
   0781                    1652 00222$:
                           1653 ;	printf_large.c:811: output_digit( value.byte[4] );
   0781 90s00r09           1654 	mov	dptr,#(_value + 0x0004)
   0784 E0                 1655 	movx	a,@dptr
   0785 F5 82              1656 	mov	dpl,a
   0787 C0 02              1657 	push	ar2
   0789 C0 03              1658 	push	ar3
   078B C0 04              1659 	push	ar4
   078D 12s00r3D           1660 	lcall	_output_digit
   0790 D0 04              1661 	pop	ar4
   0792 D0 03              1662 	pop	ar3
   0794 D0 02              1663 	pop	ar2
   0796 80 BC              1664 	sjmp	00223$
   0798                    1665 00225$:
                           1666 ;	printf_large.c:814: if (left_justify)
   0798 20*01 03           1667 	jb	__print_format_left_justify_1_1,00414$
   079B 02s01r03           1668 	ljmp	00239$
   079E                    1669 00414$:
                           1670 ;	printf_large.c:815: while (width-- > 0)
   079E 90s00r1A           1671 	mov	dptr,#__print_format_width_1_1
   07A1 E0                 1672 	movx	a,@dptr
   07A2 FA                 1673 	mov	r2,a
   07A3                    1674 00226$:
   07A3 8A 03              1675 	mov	ar3,r2
   07A5 1A                 1676 	dec	r2
   07A6 EB                 1677 	mov	a,r3
   07A7 70 03              1678 	jnz	00415$
   07A9 02s01r03           1679 	ljmp	00239$
   07AC                    1680 00415$:
                           1681 ;	printf_large.c:817: OUTPUT_CHAR(' ', p);
   07AC 75 82 20           1682 	mov	dpl,#0x20
   07AF C0 02              1683 	push	ar2
   07B1 12s00r00           1684 	lcall	__output_char
   07B4 D0 02              1685 	pop	ar2
   07B6 80 EB              1686 	sjmp	00226$
   07B8                    1687 00237$:
                           1688 ;	printf_large.c:824: OUTPUT_CHAR( c, p );
   07B8 8D 82              1689 	mov	dpl,r5
   07BA 12s00r00           1690 	lcall	__output_char
   07BD 02s01r03           1691 	ljmp	00239$
   07C0                    1692 00241$:
                           1693 ;	printf_large.c:828: return charsOutputted;
   07C0 90s00r0A           1694 	mov	dptr,#_charsOutputted
   07C3 E0                 1695 	movx	a,@dptr
   07C4 FA                 1696 	mov	r2,a
   07C5 A3                 1697 	inc	dptr
   07C6 E0                 1698 	movx	a,@dptr
   07C7 8A 82              1699 	mov	dpl,r2
   07C9 F5 83              1700 	mov	dph,a
   07CB 22                 1701 	ret
                           1702 	.area CSEG    (CODE)
                           1703 	.area CONST   (CODE)
   0000                    1704 __str_0:
   0000 3C 4E 4F 20 46 4C  1705 	.ascii "<NO FLOAT>"
        4F 41 54 3E
   000A 00                 1706 	.db 0x00
                           1707 	.area XINIT   (CODE)
                           1708 	.area CABS    (ABS,CODE)
