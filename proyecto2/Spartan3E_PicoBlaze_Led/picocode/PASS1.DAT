      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; * picocode.psm -  LED Control
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *      ___       _         _   _       _ ___ _ _ ___
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; * | __._ _ _| |_ ___ _| |_| |___ _| | . | \ |_ _|
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; * | _>| ' ' | . / ._/ . / . / ._/ . |   |   || |
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; * |___|_|_|_|___\___\___\___\___\___|_|_|_\_||_|
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *  Created on : 20/07/2015
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *      Author : Ernesto Andres Rincon Cruz
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *      Web  : www.embeddedant.org
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *    Device : XC3S700AN - 4FGG484
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *    Board  : Spartan-3AN Starter Kit.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *  Based on Ken Chapman code v1.00 - 4th January 2006
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *      Revision History:
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *   Rev 1.0.0 - (ErnestoARC) First release 16/08/2015.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; *
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;//////////////////////////////////////////////////////////////////////////////////
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Use CONSTANT declarations to define output port addresses
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-PORT_A
   OPERAND2-00
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-
INSTRUCTION-ADDRESS
   OPERAND1-000
   OPERAND2-
    COMMENT-; Programs always start at reset vector 0
      LABEL-
INSTRUCTION-DISABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-; If using interrupts, be sure to enable the INTERRUPT input
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sF
   OPERAND2-3f
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-__sdcc_program_startup
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--------------------------------------------------------
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Home
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--------------------------------------------------------
      LABEL-__sdcc_program_startup
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-_main
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; return from main will lock up
      LABEL-__sdcc_loop
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-__sdcc_loop
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--------------------------------------------------------
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; code
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;--------------------------------------------------------
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:20: void main()
      LABEL-_main
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:22: char cont_sato = 20;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-14
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:24: char cont_led = 100;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-64
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:25: led_on();
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-_led_on
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:26: while(1)
      LABEL-_L00111
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:28: if (cont_sato == 0)
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s0
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-_LC00135
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-_L00102
   OPERAND2-
    COMMENT-
      LABEL-_LC00135
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:30: cont_sato = 20;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-14
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:31: saltar();
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-_saltar
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-_L00103
   OPERAND2-
    COMMENT-
      LABEL-_L00102
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:34: cont_sato --;
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
      LABEL-_L00103
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:36: if (cont_led == 50)
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s1
   OPERAND2-32
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-_L00105
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:37: led_on();
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-_led_on
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-_L00106
   OPERAND2-
    COMMENT-
      LABEL-_L00105
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:39: cont_led --;
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-
      LABEL-_L00106
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:40: if (cont_led == 0)
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s1
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-Z
   OPERAND2-_LC00136
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-_L00108
   OPERAND2-
    COMMENT-
      LABEL-_LC00136
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:42: led_off();
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-_led_off
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:43: cont_led = 100;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-64
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-_L00109
   OPERAND2-
    COMMENT-
      LABEL-_L00108
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:46: cont_led --;
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-
      LABEL-_L00109
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:47: delay_ms(10);
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sB
   OPERAND2-0a
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-sC
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-_delay_ms
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-_L00111
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:51: void saltar()
      LABEL-_saltar
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:56: __endasm;
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s7
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:57: delay();
      LABEL-
INSTRUCTION-CALL
   OPERAND1-_delay
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:61: __endasm;
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s7
   OPERAND2-02
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:64: void led_on()
      LABEL-_led_on
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:69: __endasm;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:72: void led_off()
      LABEL-_led_off
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:77: __endasm;
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s7
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:80: void delay()
      LABEL-_delay
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:94: __endasm;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DELAY_LOOP2
   OPERAND2-30
    COMMENT-; Loop delay
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-00
    COMMENT-
      LABEL-_rpt2
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-00
    COMMENT-
      LABEL-_rpt1
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-_rpt1
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s1
   OPERAND2-DELAY_LOOP2
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-_rpt2
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:97: void delay_ms(int n)
      LABEL-_delay_ms
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-sB
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-sC
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:100: while(valor!=0)
      LABEL-_L00127
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-s0
    COMMENT-
      LABEL-
INSTRUCTION-OR
   OPERAND1-s2
   OPERAND2-s1
    COMMENT-
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s2
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-_LC00137
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-_L00134
   OPERAND2-
    COMMENT-
      LABEL-_LC00137
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:102: valor = valor - 1;
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-SUBCY
   OPERAND1-s1
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; programa.c:103: delay();
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-CALL
   OPERAND1-_delay
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-sF
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s0
   OPERAND2-(sF)
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-_L00127
   OPERAND2-
    COMMENT-
      LABEL-_L00134
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay routine (~0.5s.)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; PicoBlaze requires 2 clocks per instruction
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 2 + (4 + (4 + 4*256 + 4) * 256 + 4)*DELAY_LOOP + 2 =
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 500ms = (4 + 264200*DELAY_LOOP )*(1/50MHz)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; DELAY_LOOP = 0x5E
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Use CONSTANT declarations to time delay refinition
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-DELAY_LOOP
   OPERAND2-5E
    COMMENT-; Loop delay
      LABEL-delay
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-00
    COMMENT-; 2
      LABEL-rpt3
INSTRUCTION-ADD
   OPERAND1-s2
   OPERAND2-01
    COMMENT-; 2---------------------------------------------|
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  ---------------------------------------------|
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-00
    COMMENT-; 2---------------------------------------------|
      LABEL-rpt2
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-01
    COMMENT-; 2-------------------------------------|
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  -------------------------------------|
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-00
    COMMENT-; 2-------------------------------------|
      LABEL-rpt1
INSTRUCTION-ADD
   OPERAND1-s0
   OPERAND2-01
    COMMENT-; 2 ---------------|
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-rpt1
    COMMENT-; 2 ----------4*256|
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;  -------------------------------------|
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s1
   OPERAND2-00
    COMMENT-; 2-------------------------------------|
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-rpt2
    COMMENT-; 2----------------(4 + 4*256 + 4) * DELAY_LOOP|
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s2
   OPERAND2-DELAY_LOOP
    COMMENT-; 2---------------------------------------------|
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-rpt3
    COMMENT-; 2---(4 + (4 + 4*256 + 4) * 256 + 4)*DELAY_LOOP|
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-; 2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; An Interrupt Service Routine (ISR) is required if using interrupts
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; Interrupts are automatically disabled when an interrupt is recognized
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; Never re-enable interrupts during the ISR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; Use RETURNI DISABLE to leave interrupts disabled
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-ISR
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; <<< your interrupt code here >>>
      LABEL-
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
   OPERAND2-
    COMMENT-; Return from interrupt service routine
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; Interrupt service routine vector.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-
INSTRUCTION-ADDRESS
   OPERAND1-3FF
   OPERAND2-
    COMMENT-; Interrupt vector is located at highest instruction address
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-ISR
   OPERAND2-
    COMMENT-; Jump to interrupt service routine, ISR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================================
