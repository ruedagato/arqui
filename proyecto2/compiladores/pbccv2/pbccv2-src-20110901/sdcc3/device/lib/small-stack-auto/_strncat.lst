                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:31 2015
                              5 ;--------------------------------------------------------
                              6 	.module _strncat
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _strncat
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in internal ram 
                             34 ;--------------------------------------------------------
                             35 	.area OSEG    (OVR,DATA)
                             36 ;--------------------------------------------------------
                             37 ; indirectly addressable internal ram data
                             38 ;--------------------------------------------------------
                             39 	.area ISEG    (DATA)
                             40 ;--------------------------------------------------------
                             41 ; absolute internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area IABS    (ABS,DATA)
                             44 	.area IABS    (ABS,DATA)
                             45 ;--------------------------------------------------------
                             46 ; bit data
                             47 ;--------------------------------------------------------
                             48 	.area BSEG    (BIT)
                             49 ;--------------------------------------------------------
                             50 ; paged external ram data
                             51 ;--------------------------------------------------------
                             52 	.area PSEG    (PAG,XDATA)
                             53 ;--------------------------------------------------------
                             54 ; external ram data
                             55 ;--------------------------------------------------------
                             56 	.area XSEG    (XDATA)
                             57 ;--------------------------------------------------------
                             58 ; absolute external ram data
                             59 ;--------------------------------------------------------
                             60 	.area XABS    (ABS,XDATA)
                             61 ;--------------------------------------------------------
                             62 ; external initialized ram data
                             63 ;--------------------------------------------------------
                             64 	.area XISEG   (XDATA)
                             65 	.area HOME    (CODE)
                             66 	.area GSINIT0 (CODE)
                             67 	.area GSINIT1 (CODE)
                             68 	.area GSINIT2 (CODE)
                             69 	.area GSINIT3 (CODE)
                             70 	.area GSINIT4 (CODE)
                             71 	.area GSINIT5 (CODE)
                             72 	.area GSINIT  (CODE)
                             73 	.area GSFINAL (CODE)
                             74 	.area CSEG    (CODE)
                             75 ;--------------------------------------------------------
                             76 ; global & static initialisations
                             77 ;--------------------------------------------------------
                             78 	.area HOME    (CODE)
                             79 	.area GSINIT  (CODE)
                             80 	.area GSFINAL (CODE)
                             81 	.area GSINIT  (CODE)
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area HOME    (CODE)
                             86 	.area HOME    (CODE)
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area CSEG    (CODE)
                             91 ;------------------------------------------------------------
                             92 ;Allocation info for local variables in function 'strncat'
                             93 ;------------------------------------------------------------
                             94 ;back                      Allocated to stack - offset -5
                             95 ;count                     Allocated to stack - offset -7
                             96 ;front                     Allocated to stack - offset 1
                             97 ;start                     Allocated to stack - offset 4
                             98 ;sloc0                     Allocated to stack - offset 7
                             99 ;sloc1                     Allocated to stack - offset 10
                            100 ;------------------------------------------------------------
                            101 ;	_strncat.c:31: char * strncat (
                            102 ;	-----------------------------------------
                            103 ;	 function strncat
                            104 ;	-----------------------------------------
   0000                     105 _strncat:
                    0002    106 	ar2 = 0x02
                    0003    107 	ar3 = 0x03
                    0004    108 	ar4 = 0x04
                    0005    109 	ar5 = 0x05
                    0006    110 	ar6 = 0x06
                    0007    111 	ar7 = 0x07
                    0000    112 	ar0 = 0x00
                    0001    113 	ar1 = 0x01
   0000 C0*00               114 	push	_bp
   0002 85 81*00            115 	mov	_bp,sp
   0005 C0 82               116 	push	dpl
   0007 C0 83               117 	push	dph
   0009 C0 F0               118 	push	b
   000B E5 81               119 	mov	a,sp
   000D 24 0B               120 	add	a,#0x0b
   000F F5 81               121 	mov	sp,a
                            122 ;	_strncat.c:37: char *start = front;
   0011 A8*00               123 	mov	r0,_bp
   0013 08                  124 	inc	r0
   0014 E5*00               125 	mov	a,_bp
   0016 24 04               126 	add	a,#0x04
   0018 F9                  127 	mov	r1,a
   0019 E6                  128 	mov	a,@r0
   001A F7                  129 	mov	@r1,a
   001B 08                  130 	inc	r0
   001C 09                  131 	inc	r1
   001D E6                  132 	mov	a,@r0
   001E F7                  133 	mov	@r1,a
   001F 08                  134 	inc	r0
   0020 09                  135 	inc	r1
   0021 E6                  136 	mov	a,@r0
   0022 F7                  137 	mov	@r1,a
                            138 ;	_strncat.c:39: while (*front++);
   0023 A8*00               139 	mov	r0,_bp
   0025 08                  140 	inc	r0
   0026 86 02               141 	mov	ar2,@r0
   0028 08                  142 	inc	r0
   0029 86 03               143 	mov	ar3,@r0
   002B 08                  144 	inc	r0
   002C 86 04               145 	mov	ar4,@r0
   002E                     146 00101$:
   002E 8A 82               147 	mov	dpl,r2
   0030 8B 83               148 	mov	dph,r3
   0032 8C F0               149 	mov	b,r4
   0034 12s00r00            150 	lcall	__gptrget
   0037 FD                  151 	mov	r5,a
   0038 A3                  152 	inc	dptr
   0039 AA 82               153 	mov	r2,dpl
   003B AB 83               154 	mov	r3,dph
   003D ED                  155 	mov	a,r5
   003E 70 EE               156 	jnz	00101$
                            157 ;	_strncat.c:41: front--;
   0040 A8*00               158 	mov	r0,_bp
   0042 08                  159 	inc	r0
   0043 EA                  160 	mov	a,r2
   0044 24 FF               161 	add	a,#0xff
   0046 F6                  162 	mov	@r0,a
   0047 EB                  163 	mov	a,r3
   0048 34 FF               164 	addc	a,#0xff
   004A 08                  165 	inc	r0
   004B F6                  166 	mov	@r0,a
   004C 08                  167 	inc	r0
   004D A6 04               168 	mov	@r0,ar4
                            169 ;	_strncat.c:43: while (count--)
   004F E5*00               170 	mov	a,_bp
   0051 24 FB               171 	add	a,#0xfb
   0053 F8                  172 	mov	r0,a
   0054 86 05               173 	mov	ar5,@r0
   0056 08                  174 	inc	r0
   0057 86 06               175 	mov	ar6,@r0
   0059 08                  176 	inc	r0
   005A 86 07               177 	mov	ar7,@r0
   005C A8*00               178 	mov	r0,_bp
   005E 08                  179 	inc	r0
   005F E5*00               180 	mov	a,_bp
   0061 24 07               181 	add	a,#0x07
   0063 F9                  182 	mov	r1,a
   0064 E6                  183 	mov	a,@r0
   0065 F7                  184 	mov	@r1,a
   0066 08                  185 	inc	r0
   0067 09                  186 	inc	r1
   0068 E6                  187 	mov	a,@r0
   0069 F7                  188 	mov	@r1,a
   006A 08                  189 	inc	r0
   006B 09                  190 	inc	r1
   006C E6                  191 	mov	a,@r0
   006D F7                  192 	mov	@r1,a
   006E E5*00               193 	mov	a,_bp
   0070 24 F9               194 	add	a,#0xf9
   0072 F8                  195 	mov	r0,a
   0073 E5*00               196 	mov	a,_bp
   0075 24 0A               197 	add	a,#0x0a
   0077 F9                  198 	mov	r1,a
   0078 E6                  199 	mov	a,@r0
   0079 F7                  200 	mov	@r1,a
   007A 08                  201 	inc	r0
   007B 09                  202 	inc	r1
   007C E6                  203 	mov	a,@r0
   007D F7                  204 	mov	@r1,a
   007E                     205 00106$:
   007E E5*00               206 	mov	a,_bp
   0080 24 0A               207 	add	a,#0x0a
   0082 F8                  208 	mov	r0,a
   0083 86 02               209 	mov	ar2,@r0
   0085 08                  210 	inc	r0
   0086 86 03               211 	mov	ar3,@r0
   0088 E5*00               212 	mov	a,_bp
   008A 24 0A               213 	add	a,#0x0a
   008C F8                  214 	mov	r0,a
   008D 16                  215 	dec	@r0
   008E B6 FF 02            216 	cjne	@r0,#0xff,00118$
   0091 08                  217 	inc	r0
   0092 16                  218 	dec	@r0
   0093                     219 00118$:
   0093 EA                  220 	mov	a,r2
   0094 4B                  221 	orl	a,r3
   0095 60 4C               222 	jz	00108$
                            223 ;	_strncat.c:44: if (!(*front++ = *back++))
   0097 8D 82               224 	mov	dpl,r5
   0099 8E 83               225 	mov	dph,r6
   009B 8F F0               226 	mov	b,r7
   009D 12s00r00            227 	lcall	__gptrget
   00A0 FA                  228 	mov	r2,a
   00A1 A3                  229 	inc	dptr
   00A2 AD 82               230 	mov	r5,dpl
   00A4 AE 83               231 	mov	r6,dph
   00A6 E5*00               232 	mov	a,_bp
   00A8 24 07               233 	add	a,#0x07
   00AA F8                  234 	mov	r0,a
   00AB 86 82               235 	mov	dpl,@r0
   00AD 08                  236 	inc	r0
   00AE 86 83               237 	mov	dph,@r0
   00B0 08                  238 	inc	r0
   00B1 86 F0               239 	mov	b,@r0
   00B3 EA                  240 	mov	a,r2
   00B4 12s00r00            241 	lcall	__gptrput
   00B7 A3                  242 	inc	dptr
   00B8 18                  243 	dec	r0
   00B9 18                  244 	dec	r0
   00BA A6 82               245 	mov	@r0,dpl
   00BC 08                  246 	inc	r0
   00BD A6 83               247 	mov	@r0,dph
   00BF E5*00               248 	mov	a,_bp
   00C1 24 07               249 	add	a,#0x07
   00C3 F8                  250 	mov	r0,a
   00C4 A9*00               251 	mov	r1,_bp
   00C6 09                  252 	inc	r1
   00C7 E6                  253 	mov	a,@r0
   00C8 F7                  254 	mov	@r1,a
   00C9 08                  255 	inc	r0
   00CA 09                  256 	inc	r1
   00CB E6                  257 	mov	a,@r0
   00CC F7                  258 	mov	@r1,a
   00CD 08                  259 	inc	r0
   00CE 09                  260 	inc	r1
   00CF E6                  261 	mov	a,@r0
   00D0 F7                  262 	mov	@r1,a
   00D1 EA                  263 	mov	a,r2
   00D2 70 AA               264 	jnz	00106$
                            265 ;	_strncat.c:45: return(start);
   00D4 E5*00               266 	mov	a,_bp
   00D6 24 04               267 	add	a,#0x04
   00D8 F8                  268 	mov	r0,a
   00D9 86 82               269 	mov	dpl,@r0
   00DB 08                  270 	inc	r0
   00DC 86 83               271 	mov	dph,@r0
   00DE 08                  272 	inc	r0
   00DF 86 F0               273 	mov	b,@r0
   00E1 80 1C               274 	sjmp	00109$
   00E3                     275 00108$:
                            276 ;	_strncat.c:47: *front = '\0';
   00E3 A8*00               277 	mov	r0,_bp
   00E5 08                  278 	inc	r0
   00E6 86 82               279 	mov	dpl,@r0
   00E8 08                  280 	inc	r0
   00E9 86 83               281 	mov	dph,@r0
   00EB 08                  282 	inc	r0
   00EC 86 F0               283 	mov	b,@r0
   00EE E4                  284 	clr	a
   00EF 12s00r00            285 	lcall	__gptrput
                            286 ;	_strncat.c:48: return(start);
   00F2 E5*00               287 	mov	a,_bp
   00F4 24 04               288 	add	a,#0x04
   00F6 F8                  289 	mov	r0,a
   00F7 86 82               290 	mov	dpl,@r0
   00F9 08                  291 	inc	r0
   00FA 86 83               292 	mov	dph,@r0
   00FC 08                  293 	inc	r0
   00FD 86 F0               294 	mov	b,@r0
   00FF                     295 00109$:
   00FF 85*00 81            296 	mov	sp,_bp
   0102 D0*00               297 	pop	_bp
   0104 22                  298 	ret
                            299 	.area CSEG    (CODE)
                            300 	.area CONST   (CODE)
                            301 	.area XINIT   (CODE)
                            302 	.area CABS    (ABS,CODE)
