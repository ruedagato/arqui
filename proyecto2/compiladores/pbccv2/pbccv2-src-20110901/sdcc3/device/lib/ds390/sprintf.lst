                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:18 2015
                              5 ;--------------------------------------------------------
                              6 	.module sprintf
                              7 	.optsdcc -mds390 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _vsprintf_PARM_3
                             31 	.globl _vsprintf_PARM_2
                             32 	.globl _vsprintf
                             33 	.globl _sprintf
                             34 ;--------------------------------------------------------
                             35 ; special function registers
                             36 ;--------------------------------------------------------
                    0080     37 _P4	=	0x0080
                    0081     38 _SP	=	0x0081
                    0082     39 _DPL	=	0x0082
                    0083     40 _DPH	=	0x0083
                    0084     41 _DPL1	=	0x0084
                    0085     42 _DPH1	=	0x0085
                    0086     43 _DPS	=	0x0086
                    0087     44 _PCON	=	0x0087
                    0088     45 _TCON	=	0x0088
                    0089     46 _TMOD	=	0x0089
                    008A     47 _TL0	=	0x008a
                    008B     48 _TL1	=	0x008b
                    008C     49 _TH0	=	0x008c
                    008D     50 _TH1	=	0x008d
                    008E     51 _CKCON	=	0x008e
                    0090     52 _P1	=	0x0090
                    0091     53 _EXIF	=	0x0091
                    0092     54 _P4CNT	=	0x0092
                    0093     55 _DPX	=	0x0093
                    0095     56 _DPX1	=	0x0095
                    0098     57 _SCON0	=	0x0098
                    0099     58 _SBUF0	=	0x0099
                    009B     59 _ESP	=	0x009b
                    009C     60 _AP	=	0x009c
                    009D     61 _ACON	=	0x009d
                    00A0     62 _P2	=	0x00a0
                    00A1     63 _P5	=	0x00a1
                    00A2     64 _P5CNT	=	0x00a2
                    00A8     65 _IE	=	0x00a8
                    00B0     66 _P3	=	0x00b0
                    00B8     67 _IP	=	0x00b8
                    00C0     68 _SCON1	=	0x00c0
                    00C1     69 _SBUF1	=	0x00c1
                    00C4     70 _PMR	=	0x00c4
                    00C6     71 _MCON	=	0x00c6
                    00C7     72 _TA	=	0x00c7
                    00C8     73 _T2CON	=	0x00c8
                    00C9     74 _T2MOD	=	0x00c9
                    00CA     75 _RCAP2L	=	0x00ca
                    00CA     76 _RTL2	=	0x00ca
                    00CB     77 _RCAP2H	=	0x00cb
                    00CB     78 _RTH2	=	0x00cb
                    00CC     79 _TL2	=	0x00cc
                    00CD     80 _TH2	=	0x00cd
                    00D0     81 _PSW	=	0x00d0
                    00D1     82 _MCNT0	=	0x00d1
                    00D2     83 _MCNT1	=	0x00d2
                    00D3     84 _MA	=	0x00d3
                    00D4     85 _MB	=	0x00d4
                    00D5     86 _MC	=	0x00d5
                    00D8     87 _WDCON	=	0x00d8
                    00E0     88 _ACC	=	0x00e0
                    00E8     89 _EIE	=	0x00e8
                    00EA     90 _MXAX	=	0x00ea
                    00F0     91 _B	=	0x00f0
                    00F8     92 _EIP	=	0x00f8
                    8C8A     93 _TMR0	=	0x8c8a
                    8D8B     94 _TMR1	=	0x8d8b
                    CDCC     95 _TMR2	=	0xcdcc
                    CBCA     96 _RCAP2	=	0xcbca
                             97 ;--------------------------------------------------------
                             98 ; special function bits
                             99 ;--------------------------------------------------------
                    0088    100 _IT0	=	0x0088
                    0089    101 _IE0	=	0x0089
                    008A    102 _IT1	=	0x008a
                    008B    103 _IE1	=	0x008b
                    008C    104 _TR0	=	0x008c
                    008D    105 _TF0	=	0x008d
                    008E    106 _TR1	=	0x008e
                    008F    107 _TF1	=	0x008f
                    0090    108 _T2	=	0x0090
                    0091    109 _T2EX	=	0x0091
                    0092    110 _RXD1	=	0x0092
                    0093    111 _TXD1	=	0x0093
                    0094    112 _INT2	=	0x0094
                    0095    113 _INT3	=	0x0095
                    0096    114 _INT4	=	0x0096
                    0097    115 _INT5	=	0x0097
                    0098    116 _RI_0	=	0x0098
                    0099    117 _TI_0	=	0x0099
                    009A    118 _RB8_0	=	0x009a
                    009B    119 _TB8_0	=	0x009b
                    009C    120 _REN_0	=	0x009c
                    009D    121 _SM2_0	=	0x009d
                    009E    122 _SM1_0	=	0x009e
                    009F    123 _SM0_0	=	0x009f
                    009F    124 _FE_0	=	0x009f
                    00A8    125 _EX0	=	0x00a8
                    00A9    126 _ET0	=	0x00a9
                    00AA    127 _EX1	=	0x00aa
                    00AB    128 _ET1	=	0x00ab
                    00AC    129 _ES0	=	0x00ac
                    00AD    130 _ET2	=	0x00ad
                    00AE    131 _ES1	=	0x00ae
                    00AF    132 _EA	=	0x00af
                    00B0    133 _RXD0	=	0x00b0
                    00B1    134 _TXD0	=	0x00b1
                    00B2    135 _INT0	=	0x00b2
                    00B3    136 _INT1	=	0x00b3
                    00B4    137 _T0	=	0x00b4
                    00B5    138 _T1	=	0x00b5
                    00B6    139 _WR	=	0x00b6
                    00B7    140 _RD	=	0x00b7
                    00B8    141 _PX0	=	0x00b8
                    00B9    142 _PT0	=	0x00b9
                    00BA    143 _PX1	=	0x00ba
                    00BB    144 _PT1	=	0x00bb
                    00BC    145 _PS0	=	0x00bc
                    00BD    146 _PT2	=	0x00bd
                    00BE    147 _PS1	=	0x00be
                    00C0    148 _RI_1	=	0x00c0
                    00C1    149 _TI_1	=	0x00c1
                    00C2    150 _RB8_1	=	0x00c2
                    00C3    151 _TB8_1	=	0x00c3
                    00C4    152 _REN_1	=	0x00c4
                    00C5    153 _SM2_1	=	0x00c5
                    00C6    154 _SM1_1	=	0x00c6
                    00C7    155 _SM0_1	=	0x00c7
                    00C7    156 _FE_1	=	0x00c7
                    00C8    157 _CP_RL	=	0x00c8
                    00C9    158 _C_T	=	0x00c9
                    00CA    159 _TR2	=	0x00ca
                    00CB    160 _EXEN2	=	0x00cb
                    00CC    161 _TCLK	=	0x00cc
                    00CD    162 _RCLK	=	0x00cd
                    00CE    163 _EXF2	=	0x00ce
                    00CF    164 _TF2	=	0x00cf
                    00D0    165 _P	=	0x00d0
                    00D1    166 _F1	=	0x00d1
                    00D2    167 _OV	=	0x00d2
                    00D3    168 _RS0	=	0x00d3
                    00D4    169 _RS1	=	0x00d4
                    00D5    170 _F0	=	0x00d5
                    00D6    171 _AC	=	0x00d6
                    00D7    172 _CY	=	0x00d7
                    00D8    173 _RWT	=	0x00d8
                    00D9    174 _EWT	=	0x00d9
                    00DA    175 _WDRF	=	0x00da
                    00DB    176 _WDIF	=	0x00db
                    00DC    177 _PFI	=	0x00dc
                    00DD    178 _EPFI	=	0x00dd
                    00DE    179 _POR	=	0x00de
                    00DF    180 _SMOD_1	=	0x00df
                    00E8    181 _EX2	=	0x00e8
                    00E9    182 _EX3	=	0x00e9
                    00EA    183 _EX4	=	0x00ea
                    00EB    184 _EX5	=	0x00eb
                    00EC    185 _EWDI	=	0x00ec
                    00ED    186 _C1IE	=	0x00ed
                    00EE    187 _C0IE	=	0x00ee
                    00EF    188 _CANBIE	=	0x00ef
                    00F8    189 _PX2	=	0x00f8
                    00F9    190 _PX3	=	0x00f9
                    00FA    191 _PX4	=	0x00fa
                    00FB    192 _PX5	=	0x00fb
                    00FC    193 _PWDI	=	0x00fc
                    00FD    194 _C1IP	=	0x00fd
                    00FE    195 _C0IP	=	0x00fe
                    00FF    196 _CANBIP	=	0x00ff
                            197 ;--------------------------------------------------------
                            198 ; overlayable register banks
                            199 ;--------------------------------------------------------
                            200 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     201 	.ds 8
                            202 ;--------------------------------------------------------
                            203 ; internal ram data
                            204 ;--------------------------------------------------------
                            205 	.area DSEG    (DATA)
                            206 ;--------------------------------------------------------
                            207 ; overlayable items in internal ram 
                            208 ;--------------------------------------------------------
                            209 	.area OSEG    (OVR,DATA)
                            210 ;--------------------------------------------------------
                            211 ; indirectly addressable internal ram data
                            212 ;--------------------------------------------------------
                            213 	.area ISEG    (DATA)
                            214 ;--------------------------------------------------------
                            215 ; absolute internal ram data
                            216 ;--------------------------------------------------------
                            217 	.area IABS    (ABS,DATA)
                            218 	.area IABS    (ABS,DATA)
                            219 ;--------------------------------------------------------
                            220 ; bit data
                            221 ;--------------------------------------------------------
                            222 	.area BSEG    (BIT)
                            223 ;--------------------------------------------------------
                            224 ; paged external ram data
                            225 ;--------------------------------------------------------
                            226 	.area PSEG    (PAG,XDATA)
                            227 ;--------------------------------------------------------
                            228 ; external ram data
                            229 ;--------------------------------------------------------
                            230 	.area XSEG    (XDATA)
   0000                     231 _vsprintf_PARM_2:
   0000                     232 	.ds 4
   0004                     233 _vsprintf_PARM_3:
   0004                     234 	.ds 4
   0008                     235 _vsprintf_buf_1_1:
   0008                     236 	.ds 4
                            237 ;--------------------------------------------------------
                            238 ; absolute external ram data
                            239 ;--------------------------------------------------------
                            240 	.area XABS    (ABS,XDATA)
                            241 ;--------------------------------------------------------
                            242 ; external initialized ram data
                            243 ;--------------------------------------------------------
                            244 	.area XISEG   (XDATA)
                            245 ;--------------------------------------------------------
                            246 ; global & static initialisations
                            247 ;--------------------------------------------------------
                            248 	.area HOME    (CODE)
                            249 	.area GSINIT  (CODE)
                            250 	.area GSFINAL (CODE)
                            251 	.area GSINIT  (CODE)
                            252 ;--------------------------------------------------------
                            253 ; Home
                            254 ;--------------------------------------------------------
                            255 	.area HOME    (CODE)
                            256 	.area HOME    (CODE)
                            257 ;--------------------------------------------------------
                            258 ; code
                            259 ;--------------------------------------------------------
                            260 	.area CSEG    (CODE)
                            261 ;------------------------------------------------------------
                            262 ;Allocation info for local variables in function 'put_char_to_string'
                            263 ;------------------------------------------------------------
                            264 ;p                         Allocated to stack - offset -8
                            265 ;c                         Allocated to stack - offset 1
                            266 ;buf                       Allocated to registers 
                            267 ;------------------------------------------------------------
                            268 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                            269 ;	-----------------------------------------
                            270 ;	 function put_char_to_string
                            271 ;	-----------------------------------------
   0000                     272 _put_char_to_string:
                    0002    273 	ar2 = 0x02
                    0003    274 	ar3 = 0x03
                    0004    275 	ar4 = 0x04
                    0005    276 	ar5 = 0x05
                    0006    277 	ar6 = 0x06
                    0007    278 	ar7 = 0x07
                    0000    279 	ar0 = 0x00
                    0001    280 	ar1 = 0x01
   0000 C0*00               281 	push	_bpx
   0002 C0*01               282 	push	_bpx+1
   0004 85 81*00            283 	mov	_bpx,sp
   0007 85 9B*01            284 	mov	_bpx+1,esp
   000A 53*01 03            285 	anl	_bpx+1,#3
   000D C0 E0               286 	push	acc
   000F 75 95 40            287 	mov	dpx1,#0x40
   0012 85*01 85            288 	mov	dph1,_bpx+1
   0015 85*00 84            289 	mov	dpl1,_bpx
   0018 75 86 01            290 	mov	dps,#1
   001B A3                  291 	inc	dptr
   001C 75 86 01            292 	mov	dps, #1
   001F E5 82               293 	mov	a,dpl
   0021 F0                  294 	movx	@dptr,a
   0022 75 86 00            295 	mov	dps,#0
                            296 ;	sprintf.c:36: char **buf = (char **)p;
   0025 E5*00               297 	mov	a,_bpx
   0027 C3                  298 	clr	c
   0028 94 08               299 	subb	a,#0x08
   002A F5 82               300 	mov	dpl,a
   002C E5*01               301 	mov	a,_bpx+1
   002E 94 00               302 	subb	a,#0x00
   0030 F5 83               303 	mov	dph,a
   0032 75 93 40            304 	mov	dpx,#0x40
                            305 ;	genAssign: resultIsFar = FALSE
   0035 E0                  306 	movx	a,@dptr
   0036 FB                  307 	mov	r3,a
   0037 A3                  308 	inc	dptr
   0038 E0                  309 	movx	a,@dptr
   0039 FC                  310 	mov	r4,a
   003A A3                  311 	inc	dptr
   003B E0                  312 	movx	a,@dptr
   003C FD                  313 	mov	r5,a
   003D A3                  314 	inc	dptr
   003E E0                  315 	movx	a,@dptr
   003F FE                  316 	mov	r6,a
                            317 ;	genAssign: resultIsFar = FALSE
   0040 8B 82               318 	mov	dpl,r3
   0042 8C 83               319 	mov	dph,r4
   0044 8D 93               320 	mov	dpx,r5
   0046 8E F0               321 	mov	b,r6
                            322 ;	sprintf.c:37: *(*buf)++ = c;
   0048 12s00r00r00         323 	lcall	__gptrgetWord
   004C FB                  324 	mov	r3,a
   004D AC 9C               325 	mov	r4,_ap
   004F A3                  326 	inc	dptr
   0050 12s00r00r00         327 	lcall	__gptrgetWord
   0054 FD                  328 	mov	r5,a
   0055 AE 9C               329 	mov	r6,_ap
   0057 12s00r00r00         330 	lcall	__decdptr
   005B 12s00r00r00         331 	lcall	__decdptr
   005F 12s00r00r00         332 	lcall	__decdptr
   0063 74 01               333 	mov	a,#0x01
   0065 2B                  334 	add	a,r3
   0066 FF                  335 	mov	r7,a
   0067 E4                  336 	clr  a
   0068 3C                  337 	addc	a,r4
   0069 F8                  338 	mov	r0,a
   006A E4                  339 	clr  a
   006B 3D                  340 	addc	a,r5
   006C F9                  341 	mov	r1,a
   006D 8E 02               342 	mov	ar2,r6
   006F 8F 9C               343 	mov	_ap, r7
   0071 E8                  344 	mov	a,r0
   0072 12s00r00r00         345 	lcall	__gptrputWord
   0076 A3                  346 	inc	dptr
   0077 89 9C               347 	mov	_ap, r1
   0079 EA                  348 	mov	a,r2
   007A 12s00r00r00         349 	lcall	__gptrputWord
   007E 8B 82               350 	mov	dpl,r3
   0080 8C 83               351 	mov	dph,r4
   0082 8D 93               352 	mov	dpx,r5
   0084 8E F0               353 	mov	b,r6
   0086 75 95 40            354 	mov	dpx1,#0x40
   0089 85*01 85            355 	mov	dph1,_bpx+1
   008C 85*00 84            356 	mov	dpl1,_bpx
   008F 75 86 01            357 	mov	dps,#1
   0092 A3                  358 	inc	dptr
   0093 75 86 01            359 	mov	dps, #1
   0096 E0                  360 	movx	a,@dptr
   0097 15 86               361 	dec	dps
   0099 12s00r00r00         362 	lcall	__gptrput
   009D                     363 00101$:
   009D 85*00 81            364 	mov	sp,_bpx
   00A0 85*01 9B            365 	mov	esp,_bpx+1
   00A3 D0*01               366 	pop	_bpx+1
   00A5 D0*00               367 	pop	_bpx
   00A7 22                  368 	ret
                            369 ;------------------------------------------------------------
                            370 ;Allocation info for local variables in function 'vsprintf'
                            371 ;------------------------------------------------------------
                            372 ;format                    Allocated with name '_vsprintf_PARM_2'
                            373 ;ap                        Allocated with name '_vsprintf_PARM_3'
                            374 ;buf                       Allocated with name '_vsprintf_buf_1_1'
                            375 ;i                         Allocated to registers r2 r3 
                            376 ;------------------------------------------------------------
                            377 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                            378 ;	-----------------------------------------
                            379 ;	 function vsprintf
                            380 ;	-----------------------------------------
   00A8                     381 _vsprintf:
   00A8 75 86 01            382 	mov     dps, #1
   00AB 90s00r00r08         383 	mov     dptr, #_vsprintf_buf_1_1
   00AF E5 82               384 	mov	a,dpl
   00B1 F0                  385 	movx	@dptr,a
   00B2 A3                  386 	inc	dptr
   00B3 E5 83               387 	mov	a,dph
   00B5 F0                  388 	movx	@dptr,a
   00B6 A3                  389 	inc	dptr
   00B7 E5 93               390 	mov	a,dpx
   00B9 F0                  391 	movx	@dptr,a
   00BA A3                  392 	inc	dptr
   00BB E5 F0               393 	mov	a,b
   00BD F0                  394 	movx	@dptr,a
   00BE 75 86 00            395 	mov	dps,#0
                            396 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
   00C1 90s00r00r00         397 	mov	dptr,#_vsprintf_PARM_2
                            398 ;	genAssign: resultIsFar = FALSE
   00C5 E0                  399 	movx	a,@dptr
   00C6 FA                  400 	mov	r2,a
   00C7 A3                  401 	inc	dptr
   00C8 E0                  402 	movx	a,@dptr
   00C9 FB                  403 	mov	r3,a
   00CA A3                  404 	inc	dptr
   00CB E0                  405 	movx	a,@dptr
   00CC FC                  406 	mov	r4,a
   00CD A3                  407 	inc	dptr
   00CE E0                  408 	movx	a,@dptr
   00CF FD                  409 	mov	r5,a
   00D0 90s00r00r04         410 	mov	dptr,#_vsprintf_PARM_3
                            411 ;	genAssign: resultIsFar = FALSE
   00D4 E0                  412 	movx	a,@dptr
   00D5 FE                  413 	mov	r6,a
   00D6 A3                  414 	inc	dptr
   00D7 E0                  415 	movx	a,@dptr
   00D8 FF                  416 	mov	r7,a
   00D9 A3                  417 	inc	dptr
   00DA E0                  418 	movx	a,@dptr
   00DB F8                  419 	mov	r0,a
   00DC A3                  420 	inc	dptr
   00DD E0                  421 	movx	a,@dptr
   00DE F9                  422 	mov	r1,a
                            423 ;	genAssign: resultIsFar = TRUE
   00DF 90s00r00r00         424 	mov	dptr,#__print_format_PARM_2
   00E3 74r08               425 	mov	a,#_vsprintf_buf_1_1
   00E5 F0                  426 	movx	@dptr,a
   00E6 A3                  427 	inc	dptr
   00E7 74s00               428 	mov	a,#(_vsprintf_buf_1_1 >> 8)
   00E9 F0                  429 	movx	@dptr,a
   00EA A3                  430 	inc	dptr
   00EB 74s00               431 	mov	a,#(_vsprintf_buf_1_1 >> 16)
   00ED F0                  432 	movx	@dptr,a
   00EE A3                  433 	inc	dptr
   00EF E4                  434 	clr  a
   00F0 F0                  435 	movx	@dptr,a
                            436 ;	genAssign: resultIsFar = TRUE
   00F1 90s00r00r00         437 	mov	dptr,#__print_format_PARM_3
   00F5 EA                  438 	mov	a,r2
   00F6 F0                  439 	movx	@dptr,a
   00F7 A3                  440 	inc	dptr
   00F8 EB                  441 	mov	a,r3
   00F9 F0                  442 	movx	@dptr,a
   00FA A3                  443 	inc	dptr
   00FB EC                  444 	mov	a,r4
   00FC F0                  445 	movx	@dptr,a
   00FD A3                  446 	inc	dptr
   00FE ED                  447 	mov	a,r5
   00FF F0                  448 	movx	@dptr,a
                            449 ;	genAssign: resultIsFar = TRUE
   0100 90s00r00r00         450 	mov	dptr,#__print_format_PARM_4
   0104 EE                  451 	mov	a,r6
   0105 F0                  452 	movx	@dptr,a
   0106 A3                  453 	inc	dptr
   0107 EF                  454 	mov	a,r7
   0108 F0                  455 	movx	@dptr,a
   0109 A3                  456 	inc	dptr
   010A E8                  457 	mov	a,r0
   010B F0                  458 	movx	@dptr,a
   010C A3                  459 	inc	dptr
   010D E9                  460 	mov	a,r1
   010E F0                  461 	movx	@dptr,a
   010F 90s00r00r00         462 	mov dptr,#_put_char_to_string
   0113 12s00r00r00         463 	lcall	__print_format
   0117 AA 82               464 	mov	r2,dpl
   0119 AB 83               465 	mov	r3,dph
                            466 ;	genAssign: resultIsFar = TRUE
   011B 8A 84               467 	mov	dpl1,r2
   011D 8B 85               468 	mov	dph1,r3
                            469 ;	sprintf.c:45: *buf = 0;
   011F 90s00r00r08         470 	mov	dptr,#_vsprintf_buf_1_1
                            471 ;	genAssign: resultIsFar = FALSE
   0123 E0                  472 	movx	a,@dptr
   0124 FC                  473 	mov	r4,a
   0125 A3                  474 	inc	dptr
   0126 E0                  475 	movx	a,@dptr
   0127 FD                  476 	mov	r5,a
   0128 A3                  477 	inc	dptr
   0129 E0                  478 	movx	a,@dptr
   012A FE                  479 	mov	r6,a
   012B A3                  480 	inc	dptr
   012C E0                  481 	movx	a,@dptr
   012D FF                  482 	mov	r7,a
   012E 8C 82               483 	mov	dpl,r4
   0130 8D 83               484 	mov	dph,r5
   0132 8E 93               485 	mov	dpx,r6
   0134 8F F0               486 	mov	b,r7
   0136 E4                  487 	clr  a
   0137 12s00r00r00         488 	lcall	__gptrput
                            489 ;	sprintf.c:46: return i;
   013B 85 84 82            490 	mov	dpl,dpl1
   013E 85 85 83            491 	mov	dph,dph1
   0141                     492 00101$:
   0141 22                  493 	ret
                            494 ;------------------------------------------------------------
                            495 ;Allocation info for local variables in function 'sprintf'
                            496 ;------------------------------------------------------------
                            497 ;buf                       Allocated to stack - offset -8
                            498 ;format                    Allocated to stack - offset -12
                            499 ;arg                       Allocated to stack - offset 1
                            500 ;i                         Allocated to registers r2 r3 
                            501 ;------------------------------------------------------------
                            502 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                            503 ;	-----------------------------------------
                            504 ;	 function sprintf
                            505 ;	-----------------------------------------
   0142                     506 _sprintf:
   0142 C0*00               507 	push	_bpx
   0144 C0*01               508 	push	_bpx+1
   0146 85 81*00            509 	mov	_bpx,sp
   0149 85 9B*01            510 	mov	_bpx+1,esp
   014C 53*01 03            511 	anl	_bpx+1,#3
   014F C0 E0               512 	push	acc
   0151 C0 E0               513 	push	acc
   0153 C0 E0               514 	push	acc
   0155 C0 E0               515 	push	acc
                            516 ;	sprintf.c:55: va_start (arg, format);
   0157 E5*00               517 	mov	a,_bpx
   0159 24 F4               518 	add	a,#0xF4
   015B F5 F0               519 	mov	b,a
   015D E5*01               520 	mov	a,_bpx+1
   015F 34 FF               521 	addc	a,#0xFF
   0161 AA F0               522 	mov	r2,b
   0163 FB                  523 	mov	r3,a
   0164 7C 40               524 	mov	r4,#0x40
   0166 75 93 40            525 	mov	dpx,#0x40
   0169 85*01 83            526 	mov	dph,_bpx+1
   016C 85*00 82            527 	mov	dpl,_bpx
   016F A3                  528 	inc	dptr
   0170 EA                  529 	mov	a,r2
   0171 F0                  530 	movx	@dptr,a
   0172 A3                  531 	inc	dptr
   0173 EB                  532 	mov	a,r3
   0174 F0                  533 	movx	@dptr,a
   0175 A3                  534 	inc	dptr
   0176 EC                  535 	mov	a,r4
   0177 F0                  536 	movx	@dptr,a
   0178 A3                  537 	inc	dptr
   0179 E4                  538 	clr  a
   017A F0                  539 	movx	@dptr,a
                            540 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
   017B E5*00               541 	mov	a,_bpx
   017D 24 F8               542 	add	a,#0xF8
   017F F5 F0               543 	mov	b,a
   0181 E5*01               544 	mov	a,_bpx+1
   0183 34 FF               545 	addc	a,#0xFF
   0185 AE F0               546 	mov	r6,b
   0187 FF                  547 	mov	r7,a
   0188 78 40               548 	mov	r0,#0x40
   018A 79 00               549 	mov	r1,#0x00
   018C E5*00               550 	mov	a,_bpx
   018E C3                  551 	clr	c
   018F 94 0C               552 	subb	a,#0x0C
   0191 F5 82               553 	mov	dpl,a
   0193 E5*01               554 	mov	a,_bpx+1
   0195 94 00               555 	subb	a,#0x00
   0197 F5 83               556 	mov	dph,a
   0199 75 93 40            557 	mov	dpx,#0x40
                            558 ;	genAssign: resultIsFar = FALSE
   019C E0                  559 	movx	a,@dptr
   019D FA                  560 	mov	r2,a
   019E A3                  561 	inc	dptr
   019F E0                  562 	movx	a,@dptr
   01A0 FB                  563 	mov	r3,a
   01A1 A3                  564 	inc	dptr
   01A2 E0                  565 	movx	a,@dptr
   01A3 FC                  566 	mov	r4,a
   01A4 A3                  567 	inc	dptr
   01A5 E0                  568 	movx	a,@dptr
   01A6 FD                  569 	mov	r5,a
                            570 ;	genAssign: resultIsFar = TRUE
   01A7 90s00r00r00         571 	mov	dptr,#__print_format_PARM_2
   01AB EE                  572 	mov	a,r6
   01AC F0                  573 	movx	@dptr,a
   01AD A3                  574 	inc	dptr
   01AE EF                  575 	mov	a,r7
   01AF F0                  576 	movx	@dptr,a
   01B0 A3                  577 	inc	dptr
   01B1 E8                  578 	mov	a,r0
   01B2 F0                  579 	movx	@dptr,a
   01B3 A3                  580 	inc	dptr
   01B4 E9                  581 	mov	a,r1
   01B5 F0                  582 	movx	@dptr,a
                            583 ;	genAssign: resultIsFar = TRUE
   01B6 90s00r00r00         584 	mov	dptr,#__print_format_PARM_3
   01BA EA                  585 	mov	a,r2
   01BB F0                  586 	movx	@dptr,a
   01BC A3                  587 	inc	dptr
   01BD EB                  588 	mov	a,r3
   01BE F0                  589 	movx	@dptr,a
   01BF A3                  590 	inc	dptr
   01C0 EC                  591 	mov	a,r4
   01C1 F0                  592 	movx	@dptr,a
   01C2 A3                  593 	inc	dptr
   01C3 ED                  594 	mov	a,r5
   01C4 F0                  595 	movx	@dptr,a
   01C5 75 93 40            596 	mov	dpx,#0x40
   01C8 85*01 83            597 	mov	dph,_bpx+1
   01CB 85*00 82            598 	mov	dpl,_bpx
   01CE A3                  599 	inc	dptr
                            600 ;	genAssign: resultIsFar = TRUE
   01CF 75 86 21            601 	mov	dps,#0x21
   01D2 90s00r00r00         602 	mov	dptr,#__print_format_PARM_4
   01D6 E0                  603 	movx	a,@dptr
   01D7 F0                  604 	movx	@dptr,a
   01D8 A3                  605 	inc	dptr
   01D9 A3                  606 	inc	dptr
   01DA E0                  607 	movx	a,@dptr
   01DB F0                  608 	movx	@dptr,a
   01DC A3                  609 	inc	dptr
   01DD A3                  610 	inc	dptr
   01DE E0                  611 	movx	a,@dptr
   01DF F0                  612 	movx	@dptr,a
   01E0 A3                  613 	inc	dptr
   01E1 A3                  614 	inc	dptr
   01E2 E0                  615 	movx	a,@dptr
   01E3 F0                  616 	movx	@dptr,a
   01E4 75 86 00            617 	mov	dps,#0
   01E7 90s00r00r00         618 	mov dptr,#_put_char_to_string
   01EB 12s00r00r00         619 	lcall	__print_format
   01EF AA 82               620 	mov	r2,dpl
   01F1 AB 83               621 	mov	r3,dph
                            622 ;	genAssign: resultIsFar = TRUE
   01F3 8A 84               623 	mov	dpl1,r2
   01F5 8B 85               624 	mov	dph1,r3
                            625 ;	sprintf.c:57: *buf = 0;
   01F7 E5*00               626 	mov	a,_bpx
   01F9 C3                  627 	clr	c
   01FA 94 08               628 	subb	a,#0x08
   01FC F5 82               629 	mov	dpl,a
   01FE E5*01               630 	mov	a,_bpx+1
   0200 94 00               631 	subb	a,#0x00
   0202 F5 83               632 	mov	dph,a
   0204 75 93 40            633 	mov	dpx,#0x40
                            634 ;	genAssign: resultIsFar = FALSE
   0207 E0                  635 	movx	a,@dptr
   0208 FC                  636 	mov	r4,a
   0209 A3                  637 	inc	dptr
   020A E0                  638 	movx	a,@dptr
   020B FD                  639 	mov	r5,a
   020C A3                  640 	inc	dptr
   020D E0                  641 	movx	a,@dptr
   020E FE                  642 	mov	r6,a
   020F A3                  643 	inc	dptr
   0210 E0                  644 	movx	a,@dptr
   0211 FF                  645 	mov	r7,a
   0212 8C 82               646 	mov	dpl,r4
   0214 8D 83               647 	mov	dph,r5
   0216 8E 93               648 	mov	dpx,r6
   0218 8F F0               649 	mov	b,r7
   021A E4                  650 	clr  a
   021B 12s00r00r00         651 	lcall	__gptrput
                            652 ;	sprintf.c:60: return i;
   021F 85 84 82            653 	mov	dpl,dpl1
   0222 85 85 83            654 	mov	dph,dph1
   0225                     655 00101$:
   0225 85*00 81            656 	mov	sp,_bpx
   0228 85*01 9B            657 	mov	esp,_bpx+1
   022B D0*01               658 	pop	_bpx+1
   022D D0*00               659 	pop	_bpx
   022F 22                  660 	ret
                            661 	.area CSEG    (CODE)
                            662 	.area CONST   (CODE)
                            663 	.area XINIT   (CODE)
                            664 	.area CABS    (ABS,CODE)
