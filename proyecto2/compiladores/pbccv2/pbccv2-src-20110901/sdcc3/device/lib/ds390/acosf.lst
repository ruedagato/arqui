                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:16 2015
                              5 ;--------------------------------------------------------
                              6 	.module acosf
                              7 	.optsdcc -mds390 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _acosf
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; special function bits
                             36 ;--------------------------------------------------------
                             37 ;--------------------------------------------------------
                             38 ; overlayable register banks
                             39 ;--------------------------------------------------------
                             40 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      41 	.ds 8
                             42 ;--------------------------------------------------------
                             43 ; internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area DSEG    (DATA)
                             46 ;--------------------------------------------------------
                             47 ; overlayable items in internal ram 
                             48 ;--------------------------------------------------------
                             49 	.area OSEG    (OVR,DATA)
                             50 ;--------------------------------------------------------
                             51 ; indirectly addressable internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area ISEG    (DATA)
                             54 ;--------------------------------------------------------
                             55 ; absolute internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area IABS    (ABS,DATA)
                             58 	.area IABS    (ABS,DATA)
                             59 ;--------------------------------------------------------
                             60 ; bit data
                             61 ;--------------------------------------------------------
                             62 	.area BSEG    (BIT)
                             63 ;--------------------------------------------------------
                             64 ; paged external ram data
                             65 ;--------------------------------------------------------
                             66 	.area PSEG    (PAG,XDATA)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                             71 ;--------------------------------------------------------
                             72 ; absolute external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XABS    (ABS,XDATA)
                             75 ;--------------------------------------------------------
                             76 ; external initialized ram data
                             77 ;--------------------------------------------------------
                             78 	.area XISEG   (XDATA)
                             79 ;--------------------------------------------------------
                             80 ; global & static initialisations
                             81 ;--------------------------------------------------------
                             82 	.area HOME    (CODE)
                             83 	.area GSINIT  (CODE)
                             84 	.area GSFINAL (CODE)
                             85 	.area GSINIT  (CODE)
                             86 ;--------------------------------------------------------
                             87 ; Home
                             88 ;--------------------------------------------------------
                             89 	.area HOME    (CODE)
                             90 	.area HOME    (CODE)
                             91 ;--------------------------------------------------------
                             92 ; code
                             93 ;--------------------------------------------------------
                             94 	.area CSEG    (CODE)
                             95 ;------------------------------------------------------------
                             96 ;Allocation info for local variables in function 'acosf'
                             97 ;------------------------------------------------------------
                             98 ;x                         Allocated to registers r2 r3 r4 r5 
                             99 ;------------------------------------------------------------
                            100 ;	acosf.c:36: float acosf(const float x) _FLOAT_FUNC_REENTRANT
                            101 ;	-----------------------------------------
                            102 ;	 function acosf
                            103 ;	-----------------------------------------
   0000                     104 _acosf:
                    0002    105 	ar2 = 0x02
                    0003    106 	ar3 = 0x03
                    0004    107 	ar4 = 0x04
                    0005    108 	ar5 = 0x05
                    0006    109 	ar6 = 0x06
                    0007    110 	ar7 = 0x07
                    0000    111 	ar0 = 0x00
                    0001    112 	ar1 = 0x01
   0000 AA 82               113 	mov	r2,dpl
   0002 AB 83               114 	mov	r3,dph
   0004 AC 93               115 	mov	r4,dpx
   0006 AD F0               116 	mov	r5,b
                            117 ;	acosf.c:38: if (x == 1.0) return 0.0;
                            118 ;	genAssign: resultIsFar = TRUE
   0008 90s00r00r00         119 	mov	dptr,#___fseq_PARM_2
   000C E4                  120 	clr  a
   000D F0                  121 	movx @dptr,a
   000E A3                  122 	inc  dptr
   000F F0                  123 	movx @dptr,a
   0010 A3                  124 	inc	dptr
   0011 74 80               125 	mov	a,#0x80
   0013 F0                  126 	movx	@dptr,a
   0014 A3                  127 	inc	dptr
   0015 74 3F               128 	mov	a,#0x3F
   0017 F0                  129 	movx	@dptr,a
   0018 C0 02               130 	push	ar2
   001A C0 03               131 	push	ar3
   001C C0 04               132 	push	ar4
   001E C0 05               133 	push	ar5
   0020 8A 82               134 	mov	dpl,r2
   0022 8B 83               135 	mov	dph,r3
   0024 8C 93               136 	mov	dpx,r4
   0026 8D F0               137 	mov	b,r5
   0028 12s00r00r00         138 	lcall	___fseq
   002C D0 05               139 	pop	ar5
   002E D0 04               140 	pop	ar4
   0030 D0 03               141 	pop	ar3
   0032 D0 02               142 	pop	ar2
   0034 E5 82               143 	mov	a,dpl
   0036 60 09               144 	jz  00108$
   0038                     145 00115$:
   0038 90 00 00 00         146 	mov  dptr,#0x0000
   003C 75 F0 00            147 	mov	b,#0x00
   003F 80 56               148 	sjmp 00110$
   0041                     149 00108$:
                            150 ;	acosf.c:39: else if (x ==-1.0) return PI;
                            151 ;	genAssign: resultIsFar = TRUE
   0041 90s00r00r00         152 	mov	dptr,#___fseq_PARM_2
   0045 E4                  153 	clr  a
   0046 F0                  154 	movx @dptr,a
   0047 A3                  155 	inc  dptr
   0048 F0                  156 	movx @dptr,a
   0049 A3                  157 	inc	dptr
   004A 74 80               158 	mov	a,#0x80
   004C F0                  159 	movx	@dptr,a
   004D A3                  160 	inc	dptr
   004E 74 BF               161 	mov	a,#0xBF
   0050 F0                  162 	movx	@dptr,a
   0051 C0 02               163 	push	ar2
   0053 C0 03               164 	push	ar3
   0055 C0 04               165 	push	ar4
   0057 C0 05               166 	push	ar5
   0059 8A 82               167 	mov	dpl,r2
   005B 8B 83               168 	mov	dph,r3
   005D 8C 93               169 	mov	dpx,r4
   005F 8D F0               170 	mov	b,r5
   0061 12s00r00r00         171 	lcall	___fseq
   0065 D0 05               172 	pop	ar5
   0067 D0 04               173 	pop	ar4
   0069 D0 03               174 	pop	ar3
   006B D0 02               175 	pop	ar2
   006D E5 82               176 	mov	a,dpl
   006F 60 09               177 	jz  00105$
   0071                     178 00116$:
   0071 90 49 0F DB         179 	mov	dptr,#0x490FDB
   0075 75 F0 40            180 	mov	b,#0x40
   0078 80 1D               181 	sjmp 00110$
   007A                     182 00105$:
                            183 ;	acosf.c:40: else if (x == 0.0) return HALF_PI;
   007A EA                  184 	mov	a,r2
   007B 4B                  185 	orl	a,r3
   007C 4C                  186 	orl	a,r4
   007D 4D                  187 	orl	a,r5
   007E 70 09               188 	jnz  00102$
   0080                     189 00117$:
   0080 90 C9 0F DB         190 	mov	dptr,#0xC90FDB
   0084 75 F0 3F            191 	mov	b,#0x3F
   0087 80 0E               192 	sjmp 00110$
   0089                     193 00102$:
                            194 ;	acosf.c:41: else               return asincosf(x, true);
                            195 ;	genAssign: resultIsFar = FALSE
   0089 D2*00               196 	setb	_asincosf_PARM_2
   008B 8A 82               197 	mov	dpl,r2
   008D 8B 83               198 	mov	dph,r3
   008F 8C 93               199 	mov	dpx,r4
   0091 8D F0               200 	mov	b,r5
   0093 12s00r00r00         201 	lcall	_asincosf
   0097                     202 00110$:
   0097 22                  203 	ret
                            204 	.area CSEG    (CODE)
                            205 	.area CONST   (CODE)
                            206 	.area XINIT   (CODE)
                            207 	.area CABS    (ABS,CODE)
