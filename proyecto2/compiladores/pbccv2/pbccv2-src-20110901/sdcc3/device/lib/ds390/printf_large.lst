                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:17 2015
                              5 ;--------------------------------------------------------
                              6 	.module printf_large
                              7 	.optsdcc -mds390 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl __print_format_PARM_4
                             31 	.globl __print_format_PARM_3
                             32 	.globl __print_format_PARM_2
                             33 	.globl _output_float_PARM_3
                             34 	.globl _output_float_PARM_2
                             35 	.globl _output_float_PARM_7
                             36 	.globl _output_float_PARM_6
                             37 	.globl _output_float_PARM_5
                             38 	.globl _output_float_PARM_4
                             39 	.globl __print_format
                             40 ;--------------------------------------------------------
                             41 ; special function registers
                             42 ;--------------------------------------------------------
                    0080     43 _P4	=	0x0080
                    0081     44 _SP	=	0x0081
                    0082     45 _DPL	=	0x0082
                    0083     46 _DPH	=	0x0083
                    0084     47 _DPL1	=	0x0084
                    0085     48 _DPH1	=	0x0085
                    0086     49 _DPS	=	0x0086
                    0087     50 _PCON	=	0x0087
                    0088     51 _TCON	=	0x0088
                    0089     52 _TMOD	=	0x0089
                    008A     53 _TL0	=	0x008a
                    008B     54 _TL1	=	0x008b
                    008C     55 _TH0	=	0x008c
                    008D     56 _TH1	=	0x008d
                    008E     57 _CKCON	=	0x008e
                    0090     58 _P1	=	0x0090
                    0091     59 _EXIF	=	0x0091
                    0092     60 _P4CNT	=	0x0092
                    0093     61 _DPX	=	0x0093
                    0095     62 _DPX1	=	0x0095
                    0098     63 _SCON0	=	0x0098
                    0099     64 _SBUF0	=	0x0099
                    009B     65 _ESP	=	0x009b
                    009C     66 _AP	=	0x009c
                    009D     67 _ACON	=	0x009d
                    00A0     68 _P2	=	0x00a0
                    00A1     69 _P5	=	0x00a1
                    00A2     70 _P5CNT	=	0x00a2
                    00A8     71 _IE	=	0x00a8
                    00B0     72 _P3	=	0x00b0
                    00B8     73 _IP	=	0x00b8
                    00C0     74 _SCON1	=	0x00c0
                    00C1     75 _SBUF1	=	0x00c1
                    00C4     76 _PMR	=	0x00c4
                    00C6     77 _MCON	=	0x00c6
                    00C7     78 _TA	=	0x00c7
                    00C8     79 _T2CON	=	0x00c8
                    00C9     80 _T2MOD	=	0x00c9
                    00CA     81 _RCAP2L	=	0x00ca
                    00CA     82 _RTL2	=	0x00ca
                    00CB     83 _RCAP2H	=	0x00cb
                    00CB     84 _RTH2	=	0x00cb
                    00CC     85 _TL2	=	0x00cc
                    00CD     86 _TH2	=	0x00cd
                    00D0     87 _PSW	=	0x00d0
                    00D1     88 _MCNT0	=	0x00d1
                    00D2     89 _MCNT1	=	0x00d2
                    00D3     90 _MA	=	0x00d3
                    00D4     91 _MB	=	0x00d4
                    00D5     92 _MC	=	0x00d5
                    00D8     93 _WDCON	=	0x00d8
                    00E0     94 _ACC	=	0x00e0
                    00E8     95 _EIE	=	0x00e8
                    00EA     96 _MXAX	=	0x00ea
                    00F0     97 _B	=	0x00f0
                    00F8     98 _EIP	=	0x00f8
                    8C8A     99 _TMR0	=	0x8c8a
                    8D8B    100 _TMR1	=	0x8d8b
                    CDCC    101 _TMR2	=	0xcdcc
                    CBCA    102 _RCAP2	=	0xcbca
                            103 ;--------------------------------------------------------
                            104 ; special function bits
                            105 ;--------------------------------------------------------
                    0088    106 _IT0	=	0x0088
                    0089    107 _IE0	=	0x0089
                    008A    108 _IT1	=	0x008a
                    008B    109 _IE1	=	0x008b
                    008C    110 _TR0	=	0x008c
                    008D    111 _TF0	=	0x008d
                    008E    112 _TR1	=	0x008e
                    008F    113 _TF1	=	0x008f
                    0090    114 _T2	=	0x0090
                    0091    115 _T2EX	=	0x0091
                    0092    116 _RXD1	=	0x0092
                    0093    117 _TXD1	=	0x0093
                    0094    118 _INT2	=	0x0094
                    0095    119 _INT3	=	0x0095
                    0096    120 _INT4	=	0x0096
                    0097    121 _INT5	=	0x0097
                    0098    122 _RI_0	=	0x0098
                    0099    123 _TI_0	=	0x0099
                    009A    124 _RB8_0	=	0x009a
                    009B    125 _TB8_0	=	0x009b
                    009C    126 _REN_0	=	0x009c
                    009D    127 _SM2_0	=	0x009d
                    009E    128 _SM1_0	=	0x009e
                    009F    129 _SM0_0	=	0x009f
                    009F    130 _FE_0	=	0x009f
                    00A8    131 _EX0	=	0x00a8
                    00A9    132 _ET0	=	0x00a9
                    00AA    133 _EX1	=	0x00aa
                    00AB    134 _ET1	=	0x00ab
                    00AC    135 _ES0	=	0x00ac
                    00AD    136 _ET2	=	0x00ad
                    00AE    137 _ES1	=	0x00ae
                    00AF    138 _EA	=	0x00af
                    00B0    139 _RXD0	=	0x00b0
                    00B1    140 _TXD0	=	0x00b1
                    00B2    141 _INT0	=	0x00b2
                    00B3    142 _INT1	=	0x00b3
                    00B4    143 _T0	=	0x00b4
                    00B5    144 _T1	=	0x00b5
                    00B6    145 _WR	=	0x00b6
                    00B7    146 _RD	=	0x00b7
                    00B8    147 _PX0	=	0x00b8
                    00B9    148 _PT0	=	0x00b9
                    00BA    149 _PX1	=	0x00ba
                    00BB    150 _PT1	=	0x00bb
                    00BC    151 _PS0	=	0x00bc
                    00BD    152 _PT2	=	0x00bd
                    00BE    153 _PS1	=	0x00be
                    00C0    154 _RI_1	=	0x00c0
                    00C1    155 _TI_1	=	0x00c1
                    00C2    156 _RB8_1	=	0x00c2
                    00C3    157 _TB8_1	=	0x00c3
                    00C4    158 _REN_1	=	0x00c4
                    00C5    159 _SM2_1	=	0x00c5
                    00C6    160 _SM1_1	=	0x00c6
                    00C7    161 _SM0_1	=	0x00c7
                    00C7    162 _FE_1	=	0x00c7
                    00C8    163 _CP_RL	=	0x00c8
                    00C9    164 _C_T	=	0x00c9
                    00CA    165 _TR2	=	0x00ca
                    00CB    166 _EXEN2	=	0x00cb
                    00CC    167 _TCLK	=	0x00cc
                    00CD    168 _RCLK	=	0x00cd
                    00CE    169 _EXF2	=	0x00ce
                    00CF    170 _TF2	=	0x00cf
                    00D0    171 _P	=	0x00d0
                    00D1    172 _F1	=	0x00d1
                    00D2    173 _OV	=	0x00d2
                    00D3    174 _RS0	=	0x00d3
                    00D4    175 _RS1	=	0x00d4
                    00D5    176 _F0	=	0x00d5
                    00D6    177 _AC	=	0x00d6
                    00D7    178 _CY	=	0x00d7
                    00D8    179 _RWT	=	0x00d8
                    00D9    180 _EWT	=	0x00d9
                    00DA    181 _WDRF	=	0x00da
                    00DB    182 _WDIF	=	0x00db
                    00DC    183 _PFI	=	0x00dc
                    00DD    184 _EPFI	=	0x00dd
                    00DE    185 _POR	=	0x00de
                    00DF    186 _SMOD_1	=	0x00df
                    00E8    187 _EX2	=	0x00e8
                    00E9    188 _EX3	=	0x00e9
                    00EA    189 _EX4	=	0x00ea
                    00EB    190 _EX5	=	0x00eb
                    00EC    191 _EWDI	=	0x00ec
                    00ED    192 _C1IE	=	0x00ed
                    00EE    193 _C0IE	=	0x00ee
                    00EF    194 _CANBIE	=	0x00ef
                    00F8    195 _PX2	=	0x00f8
                    00F9    196 _PX3	=	0x00f9
                    00FA    197 _PX4	=	0x00fa
                    00FB    198 _PX5	=	0x00fb
                    00FC    199 _PWDI	=	0x00fc
                    00FD    200 _C1IP	=	0x00fd
                    00FE    201 _C0IP	=	0x00fe
                    00FF    202 _CANBIP	=	0x00ff
                            203 ;--------------------------------------------------------
                            204 ; overlayable register banks
                            205 ;--------------------------------------------------------
                            206 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     207 	.ds 8
                            208 ;--------------------------------------------------------
                            209 ; internal ram data
                            210 ;--------------------------------------------------------
                            211 	.area DSEG    (DATA)
                            212 ;--------------------------------------------------------
                            213 ; overlayable items in internal ram 
                            214 ;--------------------------------------------------------
                            215 	.area	OSEG    (OVR,DATA)
                            216 ;--------------------------------------------------------
                            217 ; indirectly addressable internal ram data
                            218 ;--------------------------------------------------------
                            219 	.area ISEG    (DATA)
                            220 ;--------------------------------------------------------
                            221 ; absolute internal ram data
                            222 ;--------------------------------------------------------
                            223 	.area IABS    (ABS,DATA)
                            224 	.area IABS    (ABS,DATA)
                            225 ;--------------------------------------------------------
                            226 ; bit data
                            227 ;--------------------------------------------------------
                            228 	.area BSEG    (BIT)
   0000                     229 _lower_case:
   0000                     230 	.ds 1
   0001                     231 _output_float_PARM_4:
   0001                     232 	.ds 1
   0002                     233 _output_float_PARM_5:
   0002                     234 	.ds 1
   0003                     235 _output_float_PARM_6:
   0003                     236 	.ds 1
   0004                     237 _output_float_PARM_7:
   0004                     238 	.ds 1
   0005                     239 _output_float_negative_1_1:
   0005                     240 	.ds 1
   0006                     241 __print_format_left_justify_1_1:
   0006                     242 	.ds 1
   0007                     243 __print_format_zero_padding_1_1:
   0007                     244 	.ds 1
   0008                     245 __print_format_prefix_sign_1_1:
   0008                     246 	.ds 1
   0009                     247 __print_format_prefix_space_1_1:
   0009                     248 	.ds 1
   000A                     249 __print_format_signed_argument_1_1:
   000A                     250 	.ds 1
   000B                     251 __print_format_char_argument_1_1:
   000B                     252 	.ds 1
   000C                     253 __print_format_long_argument_1_1:
   000C                     254 	.ds 1
   000D                     255 __print_format_float_argument_1_1:
   000D                     256 	.ds 1
   000E                     257 __print_format_lsd_1_1:
   000E                     258 	.ds 1
                            259 ;--------------------------------------------------------
                            260 ; paged external ram data
                            261 ;--------------------------------------------------------
                            262 	.area PSEG    (PAG,XDATA)
                            263 ;--------------------------------------------------------
                            264 ; external ram data
                            265 ;--------------------------------------------------------
                            266 	.area XSEG    (XDATA)
   0000                     267 _output_char:
   0000                     268 	.ds 3
   0003                     269 _p:
   0003                     270 	.ds 4
   0007                     271 _value:
   0007                     272 	.ds 5
   000C                     273 _charsOutputted:
   000C                     274 	.ds 2
   000E                     275 _output_float_PARM_2:
   000E                     276 	.ds 1
   000F                     277 _output_float_PARM_3:
   000F                     278 	.ds 1
   0010                     279 _output_float_f_1_1:
   0010                     280 	.ds 4
   0014                     281 _output_float_fpBuffer_1_1:
   0014                     282 	.ds 128
   0094                     283 _output_float_integerPart_1_1:
   0094                     284 	.ds 4
   0098                     285 _output_float_rounding_1_1:
   0098                     286 	.ds 4
   009C                     287 _output_float_decimalPart_1_1:
   009C                     288 	.ds 4
   00A0                     289 __print_format_PARM_2:
   00A0                     290 	.ds 4
   00A4                     291 __print_format_PARM_3:
   00A4                     292 	.ds 4
   00A8                     293 __print_format_PARM_4:
   00A8                     294 	.ds 4
   00AC                     295 __print_format_radix_1_1:
   00AC                     296 	.ds 1
   00AD                     297 __print_format_width_1_1:
   00AD                     298 	.ds 1
   00AE                     299 __print_format_length_1_1:
   00AE                     300 	.ds 1
   00AF                     301 __print_format_store_4_23:
   00AF                     302 	.ds 6
   00B5                     303 __print_format_pstore_4_23:
   00B5                     304 	.ds 3
                            305 ;--------------------------------------------------------
                            306 ; absolute external ram data
                            307 ;--------------------------------------------------------
                            308 	.area XABS    (ABS,XDATA)
                            309 ;--------------------------------------------------------
                            310 ; external initialized ram data
                            311 ;--------------------------------------------------------
                            312 	.area XISEG   (XDATA)
                            313 ;--------------------------------------------------------
                            314 ; global & static initialisations
                            315 ;--------------------------------------------------------
                            316 	.area HOME    (CODE)
                            317 	.area GSINIT  (CODE)
                            318 	.area GSFINAL (CODE)
                            319 	.area GSINIT  (CODE)
                            320 ;--------------------------------------------------------
                            321 ; Home
                            322 ;--------------------------------------------------------
                            323 	.area HOME    (CODE)
                            324 	.area HOME    (CODE)
                            325 ;--------------------------------------------------------
                            326 ; code
                            327 ;--------------------------------------------------------
                            328 	.area CSEG    (CODE)
                            329 ;------------------------------------------------------------
                            330 ;Allocation info for local variables in function '_output_char'
                            331 ;------------------------------------------------------------
                            332 ;c                         Allocated to registers r2 
                            333 ;------------------------------------------------------------
                            334 ;	printf_large.c:105: _output_char (unsigned char c)
                            335 ;	-----------------------------------------
                            336 ;	 function _output_char
                            337 ;	-----------------------------------------
   0000                     338 __output_char:
                    0002    339 	ar2 = 0x02
                    0003    340 	ar3 = 0x03
                    0004    341 	ar4 = 0x04
                    0005    342 	ar5 = 0x05
                    0006    343 	ar6 = 0x06
                    0007    344 	ar7 = 0x07
                    0000    345 	ar0 = 0x00
                    0001    346 	ar1 = 0x01
   0000 AA 82               347 	mov	r2,dpl
                            348 ;	printf_large.c:107: output_char( c, p );
   0002 90s00r00r03         349 	mov	dptr,#_p
   0006 E0                  350 	movx	a,@dptr
   0007 C0 E0               351 	push	acc
   0009 A3                  352 	inc	dptr
   000A E0                  353 	movx	a,@dptr
   000B C0 E0               354 	push	acc
   000D A3                  355 	inc	dptr
   000E E0                  356 	movx	a,@dptr
   000F C0 E0               357 	push	acc
   0011 A3                  358 	inc	dptr
   0012 E0                  359 	movx	a,@dptr
   0013 C0 E0               360 	push	acc
   0015 74r33               361 	mov	a,#00103$
   0017 C0 E0               362 	push	acc
   0019 74s00               363 	mov	a,#(00103$ >> 8)
   001B C0 E0               364 	push	acc
   001D 74s00               365 	mov	a,#(00103$ >> 16)
   001F C0 E0               366 	push	acc
   0021 90s00r00r00         367 	mov	dptr,#_output_char
   0025 E0                  368 	movx	a,@dptr
   0026 C0 E0               369 	push	acc
   0028 A3                  370 	inc	dptr
   0029 E0                  371 	movx	a,@dptr
   002A C0 E0               372 	push	acc
   002C A3                  373 	inc	dptr
   002D E0                  374 	movx	a,@dptr
   002E C0 E0               375 	push	acc
   0030 8A 82               376 	mov	dpl,r2
   0032 22                  377 	ret
   0033                     378 00103$:
                            379 ;	stack adjustment for parms
   0033 D0 E0               380 	pop	acc
   0035 D0 E0               381 	pop	acc
   0037 D0 E0               382 	pop	acc
   0039 D0 E0               383 	pop	acc
                            384 ;	printf_large.c:108: charsOutputted++;
   003B 90s00r00r0C         385 	mov	dptr,#_charsOutputted
   003F E0                  386 	movx	a,@dptr
   0040 24 01               387 	add	a,#0x01
   0042 F0                  388 	movx	@dptr,a
   0043 A3                  389 	inc	dptr
   0044 E0                  390 	movx	a,@dptr
   0045 34 00               391 	addc	a,#0x00
   0047 F0                  392 	movx	@dptr,a
   0048                     393 00101$:
   0048 22                  394 	ret
                            395 ;------------------------------------------------------------
                            396 ;Allocation info for local variables in function 'output_digit'
                            397 ;------------------------------------------------------------
                            398 ;c                         Allocated to registers r2 
                            399 ;n                         Allocated to registers r2 
                            400 ;------------------------------------------------------------
                            401 ;	printf_large.c:130: output_digit (unsigned char n)
                            402 ;	-----------------------------------------
                            403 ;	 function output_digit
                            404 ;	-----------------------------------------
   0049                     405 _output_digit:
   0049 AA 82               406 	mov	r2,dpl
                            407 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
   004B 74 30               408 	mov	a,#0x30
   004D 2A                  409 	add	a,r2
   004E FA                  410 	mov	r2,a
                            411 ;	printf_large.c:134: if (c > (unsigned char)'9')
   004F C3                  412 	clr	c
   0050 74 39               413 	mov	a,#0x39
   0052 9A                  414 	subb	a,r2
   0053 50 0A               415 	jnc  00104$
   0055                     416 00109$:
                            417 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
   0055 74 07               418 	mov	a,#0x07
   0057 2A                  419 	add	a,r2
   0058 FA                  420 	mov	r2,a
                            421 ;	printf_large.c:137: if (lower_case)
   0059 30*00 03            422 	jnb  _lower_case,00104$
   005C                     423 00110$:
                            424 ;	printf_large.c:138: c = tolower(c);
   005C 43 02 20            425 	orl	ar2,#0x20
   005F                     426 00104$:
                            427 ;	printf_large.c:140: _output_char( c );
   005F 8A 82               428 	mov	dpl,r2
   0061 12s00r00r00         429 	lcall	__output_char
   0065                     430 00105$:
   0065 22                  431 	ret
                            432 ;------------------------------------------------------------
                            433 ;Allocation info for local variables in function 'output_2digits'
                            434 ;------------------------------------------------------------
                            435 ;b                         Allocated to registers r2 
                            436 ;------------------------------------------------------------
                            437 ;	printf_large.c:157: output_2digits (unsigned char b)
                            438 ;	-----------------------------------------
                            439 ;	 function output_2digits
                            440 ;	-----------------------------------------
   0066                     441 _output_2digits:
   0066 AA 82               442 	mov	r2,dpl
                            443 ;	printf_large.c:159: output_digit( b>>4   );
   0068 EA                  444 	mov	a,r2
   0069 C4                  445 	swap	a
   006A 54 0F               446 	anl	a,#0x0F
   006C FB                  447 	mov	r3,a
   006D C0 02               448 	push	ar2
   006F 8B 82               449 	mov	dpl,r3
   0071 12s00r00r49         450 	lcall	_output_digit
   0075 D0 02               451 	pop	ar2
                            452 ;	printf_large.c:160: output_digit( b&0x0F );
   0077 53 02 0F            453 	anl	ar2,#0x0F
   007A 8A 82               454 	mov	dpl,r2
   007C 12s00r00r49         455 	lcall	_output_digit
   0080                     456 00101$:
   0080 22                  457 	ret
                            458 ;------------------------------------------------------------
                            459 ;Allocation info for local variables in function 'calculate_digit'
                            460 ;------------------------------------------------------------
                            461 ;radix                     Allocated to registers r2 
                            462 ;ul                        Allocated to registers r3 r4 r5 r6 
                            463 ;b4                        Allocated to registers r7 
                            464 ;i                         Allocated to registers r0 
                            465 ;------------------------------------------------------------
                            466 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                            467 ;	-----------------------------------------
                            468 ;	 function calculate_digit
                            469 ;	-----------------------------------------
   0081                     470 _calculate_digit:
   0081 AA 82               471 	mov	r2,dpl
                            472 ;	printf_large.c:191: register unsigned long ul = value.ul;
   0083 90s00r00r07         473 	mov	dptr,#_value
   0087 E0                  474 	movx	a,@dptr
   0088 A3                  475 	inc	dptr
   0089 FB                  476 	mov	r3,a
   008A E0                  477 	movx	a,@dptr
   008B A3                  478 	inc	dptr
   008C FC                  479 	mov	r4,a
   008D E0                  480 	movx	a,@dptr
   008E A3                  481 	inc	dptr
   008F FD                  482 	mov	r5,a
   0090 E0                  483 	movx	a,@dptr
   0091 FE                  484 	mov	r6,a
                            485 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
   0092 90s00r00r0B         486 	mov	dptr,#(_value + 0x000004)
   0096 E0                  487 	movx	a,@dptr
   0097 FF                  488 	mov	r7,a
                            489 ;	printf_large.c:195: do
                            490 ;	genAssign: resultIsFar = FALSE
   0098 78 20               491 	mov	r0,#0x20
   009A                     492 00103$:
                            493 ;	printf_large.c:197: b4 = (b4 << 1);
   009A EF                  494 	mov	a,r7
   009B 25 E0               495 	add	a,acc
   009D FF                  496 	mov	r7,a
                            497 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
   009E EE                  498 	mov	a,r6
   009F 23                  499 	rl	a
   00A0 54 01               500 	anl	a,#0x01
   00A2 F9                  501 	mov  r1,a
   00A3 42 07               502 	orl	ar7,a
                            503 ;	printf_large.c:199: ul <<= 1;
   00A5 75 F0 02            504 	mov	b,#0x02
   00A8 80 0D               505 	sjmp	00113$
   00AA                     506 00112$:
   00AA EB                  507 	mov	a,r3
   00AB 25 E0               508 	add	a,acc
   00AD FB                  509 	mov	r3,a
   00AE EC                  510 	mov	a,r4
   00AF 33                  511 	rlc	a
   00B0 FC                  512 	mov	r4,a
   00B1 ED                  513 	mov	a,r5
   00B2 33                  514 	rlc	a
   00B3 FD                  515 	mov	r5,a
   00B4 EE                  516 	mov	a,r6
   00B5 33                  517 	rlc	a
   00B6 FE                  518 	mov	r6,a
   00B7                     519 00113$:
   00B7 D5 F0 F0            520 	djnz	b,00112$
                            521 ;	printf_large.c:201: if (radix <= b4 )
   00BA C3                  522 	clr	c
   00BB EF                  523 	mov	a,r7
   00BC 9A                  524 	subb	a,r2
   00BD 40 07               525 	jc   00104$
   00BF                     526 00114$:
                            527 ;	printf_large.c:203: b4 -= radix;
   00BF C3                  528 	clr	c
   00C0 EF                  529 	mov	a,r7
   00C1 9A                  530 	subb	a,r2
   00C2 FF                  531 	mov	r7,a
                            532 ;	printf_large.c:204: ul |= 1;
   00C3 43 03 01            533 	orl	ar3,#0x01
   00C6                     534 00104$:
                            535 ;	printf_large.c:206: } while (--i);
   00C6 D8 D2               536 	djnz  r0,00103$
   00C8                     537 00115$:
   00C8                     538 00116$:
                            539 ;	printf_large.c:207: value.ul = ul;
   00C8 90s00r00r07         540 	mov	dptr,#_value
   00CC EB                  541 	mov	a,r3
   00CD F0                  542 	movx	@dptr,a
   00CE A3                  543 	inc	dptr
   00CF EC                  544 	mov	a,r4
   00D0 F0                  545 	movx	@dptr,a
   00D1 A3                  546 	inc	dptr
   00D2 ED                  547 	mov	a,r5
   00D3 F0                  548 	movx	@dptr,a
   00D4 A3                  549 	inc	dptr
   00D5 EE                  550 	mov	a,r6
   00D6 F0                  551 	movx	@dptr,a
                            552 ;	printf_large.c:208: value.byte[4] = b4;
   00D7 90s00r00r0B         553 	mov	dptr,#(_value + 0x000004)
   00DB EF                  554 	mov	a,r7
   00DC F0                  555 	movx	@dptr,a
   00DD                     556 00106$:
   00DD 22                  557 	ret
                            558 ;------------------------------------------------------------
                            559 ;Allocation info for local variables in function 'output_float'
                            560 ;------------------------------------------------------------
                            561 ;reqWidth                  Allocated with name '_output_float_PARM_2'
                            562 ;reqDecimals               Allocated with name '_output_float_PARM_3'
                            563 ;f                         Allocated with name '_output_float_f_1_1'
                            564 ;fpBuffer                  Allocated with name '_output_float_fpBuffer_1_1'
                            565 ;integerPart               Allocated with name '_output_float_integerPart_1_1'
                            566 ;rounding                  Allocated with name '_output_float_rounding_1_1'
                            567 ;decimalPart               Allocated with name '_output_float_decimalPart_1_1'
                            568 ;fpBI                      Allocated to registers r6 
                            569 ;fpBD                      Allocated to registers 
                            570 ;minWidth                  Allocated to registers r3 
                            571 ;i                         Allocated to registers r2 
                            572 ;exp                       Allocated to registers r7 
                            573 ;sloc0                     Allocated with name '_output_float_sloc0_1_0'
                            574 ;sloc1                     Allocated with name '_output_float_sloc1_1_0'
                            575 ;sloc2                     Allocated with name '_output_float_sloc2_1_0'
                            576 ;------------------------------------------------------------
                            577 ;	printf_large.c:241: output_float (float f, unsigned char reqWidth,
                            578 ;	-----------------------------------------
                            579 ;	 function output_float
                            580 ;	-----------------------------------------
   00DE                     581 _output_float:
   00DE 75 86 01            582 	mov     dps, #1
   00E1 90s00r00r10         583 	mov     dptr, #_output_float_f_1_1
   00E5 E5 82               584 	mov	a,dpl
   00E7 F0                  585 	movx	@dptr,a
   00E8 A3                  586 	inc	dptr
   00E9 E5 83               587 	mov	a,dph
   00EB F0                  588 	movx	@dptr,a
   00EC A3                  589 	inc	dptr
   00ED E5 93               590 	mov	a,dpx
   00EF F0                  591 	movx	@dptr,a
   00F0 A3                  592 	inc	dptr
   00F1 E5 F0               593 	mov	a,b
   00F3 F0                  594 	movx	@dptr,a
   00F4 75 86 00            595 	mov	dps,#0
                            596 ;	printf_large.c:247: BOOL negative = 0;
                            597 ;	genAssign: resultIsFar = FALSE
   00F7 C2*05               598 	clr	_output_float_negative_1_1
                            599 ;	printf_large.c:251: char fpBI=0, fpBD;
                            600 ;	genAssign: resultIsFar = TRUE
   00F9 7E 00               601 	mov	r6,#0x00
                            602 ;	printf_large.c:253: signed char exp = -128;
                            603 ;	genAssign: resultIsFar = TRUE
   00FB 7F 80               604 	mov	r7,#0x80
                            605 ;	printf_large.c:256: if (f<0) {
                            606 ;	genAssign: resultIsFar = TRUE
   00FD 90s00r00r00         607 	mov	dptr,#___fslt_PARM_2
   0101 E4                  608 	clr	a
   0102 F0                  609 	movx	@dptr,a
   0103 A3                  610 	inc	dptr
   0104 F0                  611 	movx	@dptr,a
   0105 A3                  612 	inc	dptr
   0106 F0                  613 	movx	@dptr,a
   0107 A3                  614 	inc	dptr
   0108 F0                  615 	movx	@dptr,a
   0109 C0 07               616 	push	ar7
   010B 05 86               617 	inc	dps
   010D 90s00r00r10         618 	mov	dptr,#_output_float_f_1_1
   0111 E0                  619 	movx	a,@dptr
   0112 F5 82               620 	mov	dpl,a
   0114 A3                  621 	inc	dptr
   0115 E0                  622 	movx	a,@dptr
   0116 F5 83               623 	mov	dph,a
   0118 A3                  624 	inc	dptr
   0119 E0                  625 	movx	a,@dptr
   011A F5 93               626 	mov	dpx,a
   011C A3                  627 	inc	dptr
   011D E0                  628 	movx	a,@dptr
   011E F5 F0               629 	mov	b,a
   0120 75 86 00            630 	mov	dps,#0
   0123 12s00r00r00         631 	lcall	___fslt
   0127 D0 07               632 	pop	ar7
   0129 E5 82               633 	mov	a,dpl
   012B 60 30               634 	jz  00102$
   012D                     635 00257$:
                            636 ;	printf_large.c:257: negative=1;
                            637 ;	genAssign: resultIsFar = FALSE
   012D D2*05               638 	setb	_output_float_negative_1_1
                            639 ;	printf_large.c:258: f=-f;
   012F 90s00r00r10         640 	mov	dptr,#_output_float_f_1_1
   0133 75 86 01            641 	mov	dps, #1
   0136 90s00r00r10         642 	mov	dptr, #_output_float_f_1_1
   013A 15 86               643 	dec	dps
   013C E0                  644 	movx	a,@dptr
   013D 05 86               645 	inc	dps
   013F F0                  646 	movx	@dptr,a
   0140 15 86               647 	dec	dps
   0142 A3                  648 	inc	dptr
   0143 E0                  649 	movx	a,@dptr
   0144 05 86               650 	inc	dps
   0146 A3                  651 	inc	dptr
   0147 F0                  652 	movx	@dptr,a
   0148 15 86               653 	dec	dps
   014A A3                  654 	inc	dptr
   014B E0                  655 	movx	a,@dptr
   014C 05 86               656 	inc	dps
   014E A3                  657 	inc	dptr
   014F F0                  658 	movx	@dptr,a
   0150 15 86               659 	dec	dps
   0152 A3                  660 	inc	dptr
   0153 E0                  661 	movx	a,@dptr
   0154 B2 E7               662 	cpl	acc.7
   0156 05 86               663 	inc	dps
   0158 A3                  664 	inc	dptr
   0159 F0                  665 	movx	@dptr,a
   015A 75 86 00            666 	mov	dps,#0
   015D                     667 00102$:
                            668 ;	printf_large.c:261: if (f>0x00ffffff) {
                            669 ;	genAssign: resultIsFar = TRUE
   015D 90s00r00r00         670 	mov	dptr,#___fsgt_PARM_2
   0161 74 FF               671 	mov  a,#0xFF
   0163 F0                  672 	movx @dptr,a
   0164 A3                  673 	inc  dptr
   0165 F0                  674 	movx @dptr,a
   0166 A3                  675 	inc	dptr
   0167 74 7F               676 	mov	a,#0x7F
   0169 F0                  677 	movx	@dptr,a
   016A A3                  678 	inc	dptr
   016B 74 4B               679 	mov	a,#0x4B
   016D F0                  680 	movx	@dptr,a
   016E C0 07               681 	push	ar7
   0170 05 86               682 	inc	dps
   0172 90s00r00r10         683 	mov	dptr,#_output_float_f_1_1
   0176 E0                  684 	movx	a,@dptr
   0177 F5 82               685 	mov	dpl,a
   0179 A3                  686 	inc	dptr
   017A E0                  687 	movx	a,@dptr
   017B F5 83               688 	mov	dph,a
   017D A3                  689 	inc	dptr
   017E E0                  690 	movx	a,@dptr
   017F F5 93               691 	mov	dpx,a
   0181 A3                  692 	inc	dptr
   0182 E0                  693 	movx	a,@dptr
   0183 F5 F0               694 	mov	b,a
   0185 75 86 00            695 	mov	dps,#0
   0188 12s00r00r00         696 	lcall	___fsgt
   018C D0 07               697 	pop	ar7
   018E E5 82               698 	mov	a,dpl
   0190 70 04               699 	jnz	00258$
   0192 02s00r02rCA         700 	ljmp	00109$
   0196                     701 00258$:
                            702 ;	printf_large.c:264: for (exp = 0; f >= 10.0; exp++) f /=10.0;
                            703 ;	genAssign: resultIsFar = TRUE
   0196 7F 00               704 	mov	r7,#0x00
                            705 ;	genAssign: resultIsFar = FALSE
   0198 7E 00               706 	mov	r6,#0x00
   019A                     707 00176$:
                            708 ;	genAssign: resultIsFar = TRUE
   019A 90s00r00r00         709 	mov	dptr,#___fslt_PARM_2
   019E E4                  710 	clr  a
   019F F0                  711 	movx @dptr,a
   01A0 A3                  712 	inc  dptr
   01A1 F0                  713 	movx @dptr,a
   01A2 A3                  714 	inc	dptr
   01A3 74 20               715 	mov	a,#0x20
   01A5 F0                  716 	movx	@dptr,a
   01A6 A3                  717 	inc	dptr
   01A7 74 41               718 	mov	a,#0x41
   01A9 F0                  719 	movx	@dptr,a
   01AA C0 06               720 	push	ar6
   01AC 05 86               721 	inc	dps
   01AE 90s00r00r10         722 	mov	dptr,#_output_float_f_1_1
   01B2 E0                  723 	movx	a,@dptr
   01B3 F5 82               724 	mov	dpl,a
   01B5 A3                  725 	inc	dptr
   01B6 E0                  726 	movx	a,@dptr
   01B7 F5 83               727 	mov	dph,a
   01B9 A3                  728 	inc	dptr
   01BA E0                  729 	movx	a,@dptr
   01BB F5 93               730 	mov	dpx,a
   01BD A3                  731 	inc	dptr
   01BE E0                  732 	movx	a,@dptr
   01BF F5 F0               733 	mov	b,a
   01C1 75 86 00            734 	mov	dps,#0
   01C4 12s00r00r00         735 	lcall	___fslt
   01C8 D0 06               736 	pop	ar6
   01CA E5 82               737 	mov	a,dpl
   01CC 70 4E               738 	jnz  00205$
   01CE                     739 00259$:
                            740 ;	genAssign: resultIsFar = TRUE
   01CE 90s00r00r00         741 	mov	dptr,#___fsdiv_PARM_2
   01D2 E4                  742 	clr  a
   01D3 F0                  743 	movx @dptr,a
   01D4 A3                  744 	inc  dptr
   01D5 F0                  745 	movx @dptr,a
   01D6 A3                  746 	inc	dptr
   01D7 74 20               747 	mov	a,#0x20
   01D9 F0                  748 	movx	@dptr,a
   01DA A3                  749 	inc	dptr
   01DB 74 41               750 	mov	a,#0x41
   01DD F0                  751 	movx	@dptr,a
   01DE C0 06               752 	push	ar6
   01E0 05 86               753 	inc	dps
   01E2 90s00r00r10         754 	mov	dptr,#_output_float_f_1_1
   01E6 E0                  755 	movx	a,@dptr
   01E7 F5 82               756 	mov	dpl,a
   01E9 A3                  757 	inc	dptr
   01EA E0                  758 	movx	a,@dptr
   01EB F5 83               759 	mov	dph,a
   01ED A3                  760 	inc	dptr
   01EE E0                  761 	movx	a,@dptr
   01EF F5 93               762 	mov	dpx,a
   01F1 A3                  763 	inc	dptr
   01F2 E0                  764 	movx	a,@dptr
   01F3 F5 F0               765 	mov	b,a
   01F5 75 86 00            766 	mov	dps,#0
   01F8 12s00r00r00         767 	lcall	___fsdiv
   01FC AA 82               768 	mov	r2,dpl
   01FE AB 83               769 	mov	r3,dph
   0200 AC 93               770 	mov	r4,dpx
   0202 AD F0               771 	mov	r5,b
   0204 D0 06               772 	pop	ar6
                            773 ;	genAssign: resultIsFar = TRUE
   0206 90s00r00r10         774 	mov	dptr,#_output_float_f_1_1
   020A EA                  775 	mov	a,r2
   020B F0                  776 	movx	@dptr,a
   020C A3                  777 	inc	dptr
   020D EB                  778 	mov	a,r3
   020E F0                  779 	movx	@dptr,a
   020F A3                  780 	inc	dptr
   0210 EC                  781 	mov	a,r4
   0211 F0                  782 	movx	@dptr,a
   0212 A3                  783 	inc	dptr
   0213 ED                  784 	mov	a,r5
   0214 F0                  785 	movx	@dptr,a
   0215 0E                  786 	inc	r6
                            787 ;	genAssign: resultIsFar = TRUE
   0216 8E 07               788 	mov	ar7,r6
   0218 02s00r01r9A         789 	ljmp	00176$
   021C                     790 00205$:
                            791 ;	genAssign: resultIsFar = FALSE
   021C                     792 00180$:
                            793 ;	printf_large.c:265: for (       ; f < 1.0;   exp--) f *=10.0;
                            794 ;	genAssign: resultIsFar = TRUE
   021C 90s00r00r00         795 	mov	dptr,#___fslt_PARM_2
   0220 E4                  796 	clr  a
   0221 F0                  797 	movx @dptr,a
   0222 A3                  798 	inc  dptr
   0223 F0                  799 	movx @dptr,a
   0224 A3                  800 	inc	dptr
   0225 74 80               801 	mov	a,#0x80
   0227 F0                  802 	movx	@dptr,a
   0228 A3                  803 	inc	dptr
   0229 74 3F               804 	mov	a,#0x3F
   022B F0                  805 	movx	@dptr,a
   022C C0 06               806 	push	ar6
   022E 05 86               807 	inc	dps
   0230 90s00r00r10         808 	mov	dptr,#_output_float_f_1_1
   0234 E0                  809 	movx	a,@dptr
   0235 F5 82               810 	mov	dpl,a
   0237 A3                  811 	inc	dptr
   0238 E0                  812 	movx	a,@dptr
   0239 F5 83               813 	mov	dph,a
   023B A3                  814 	inc	dptr
   023C E0                  815 	movx	a,@dptr
   023D F5 93               816 	mov	dpx,a
   023F A3                  817 	inc	dptr
   0240 E0                  818 	movx	a,@dptr
   0241 F5 F0               819 	mov	b,a
   0243 75 86 00            820 	mov	dps,#0
   0246 12s00r00r00         821 	lcall	___fslt
   024A D0 06               822 	pop	ar6
   024C E5 82               823 	mov	a,dpl
   024E 60 4C               824 	jz  00248$
   0250                     825 00260$:
   0250 90s00r00r10         826 	mov	dptr,#_output_float_f_1_1
                            827 ;	genAssign: resultIsFar = TRUE
   0254 75 86 21            828 	mov	dps,#0x21
   0257 90s00r00r00         829 	mov	dptr,#___fsmul_PARM_2
   025B E0                  830 	movx	a,@dptr
   025C F0                  831 	movx	@dptr,a
   025D A3                  832 	inc	dptr
   025E A3                  833 	inc	dptr
   025F E0                  834 	movx	a,@dptr
   0260 F0                  835 	movx	@dptr,a
   0261 A3                  836 	inc	dptr
   0262 A3                  837 	inc	dptr
   0263 E0                  838 	movx	a,@dptr
   0264 F0                  839 	movx	@dptr,a
   0265 A3                  840 	inc	dptr
   0266 A3                  841 	inc	dptr
   0267 E0                  842 	movx	a,@dptr
   0268 F0                  843 	movx	@dptr,a
   0269 75 86 00            844 	mov	dps,#0
   026C C0 06               845 	push	ar6
   026E 90 00 00 00         846 	mov  dptr,#0x0000
   0272 75 93 20            847 	mov	dpx,#0x20
   0275 75 F0 41            848 	mov	b,#0x41
   0278 12s00r00r00         849 	lcall	___fsmul
   027C AA 82               850 	mov	r2,dpl
   027E AB 83               851 	mov	r3,dph
   0280 AC 93               852 	mov	r4,dpx
   0282 AD F0               853 	mov	r5,b
   0284 D0 06               854 	pop	ar6
                            855 ;	genAssign: resultIsFar = TRUE
   0286 90s00r00r10         856 	mov	dptr,#_output_float_f_1_1
   028A EA                  857 	mov	a,r2
   028B F0                  858 	movx	@dptr,a
   028C A3                  859 	inc	dptr
   028D EB                  860 	mov	a,r3
   028E F0                  861 	movx	@dptr,a
   028F A3                  862 	inc	dptr
   0290 EC                  863 	mov	a,r4
   0291 F0                  864 	movx	@dptr,a
   0292 A3                  865 	inc	dptr
   0293 ED                  866 	mov	a,r5
   0294 F0                  867 	movx	@dptr,a
   0295 1E                  868 	dec	r6
                            869 ;	genAssign: resultIsFar = TRUE
   0296 8E 07               870 	mov	ar7,r6
   0298 02s00r02r1C         871 	ljmp	00180$
   029C                     872 00248$:
                            873 ;	genAssign: resultIsFar = TRUE
   029C 8E 07               874 	mov	ar7,r6
                            875 ;	printf_large.c:267: if (negative) {
   029E 30*05 0D            876 	jnb  _output_float_negative_1_1,00106$
   02A1                     877 00261$:
                            878 ;	printf_large.c:268: OUTPUT_CHAR ('-', p);
   02A1 C0 07               879 	push	ar7
   02A3 75 82 2D            880 	mov	dpl,#0x2D
   02A6 12s00r00r00         881 	lcall	__output_char
   02AA D0 07               882 	pop	ar7
   02AC 80 0E               883 	sjmp 00107$
   02AE                     884 00106$:
                            885 ;	printf_large.c:270: if (sign) {
   02AE 30*03 0B            886 	jnb  _output_float_PARM_6,00107$
   02B1                     887 00262$:
                            888 ;	printf_large.c:271: OUTPUT_CHAR ('+', p);
   02B1 C0 07               889 	push	ar7
   02B3 75 82 2B            890 	mov	dpl,#0x2B
   02B6 12s00r00r00         891 	lcall	__output_char
   02BA D0 07               892 	pop	ar7
   02BC                     893 00107$:
                            894 ;	printf_large.c:274: reqWidth = 0;
                            895 ;	genAssign: resultIsFar = TRUE
   02BC 90s00r00r0E         896 	mov	dptr,#_output_float_PARM_2
   02C0 E4                  897 	clr  a
   02C1 F0                  898 	movx	@dptr,a
                            899 ;	printf_large.c:275: left = 0;
                            900 ;	genAssign: resultIsFar = FALSE
   02C2 C2*01               901 	clr	_output_float_PARM_4
                            902 ;	printf_large.c:276: zero = 0;
                            903 ;	genAssign: resultIsFar = FALSE
   02C4 C2*02               904 	clr	_output_float_PARM_5
                            905 ;	printf_large.c:277: sign = 0;
                            906 ;	genAssign: resultIsFar = FALSE
   02C6 C2*03               907 	clr	_output_float_PARM_6
                            908 ;	printf_large.c:278: space = 0;
                            909 ;	genAssign: resultIsFar = FALSE
   02C8 C2*04               910 	clr	_output_float_PARM_7
   02CA                     911 00109$:
                            912 ;	printf_large.c:282: if (reqDecimals==-1)
   02CA 90s00r00r0F         913 	mov	dptr,#_output_float_PARM_3
   02CE E0                  914 	movx	a,@dptr
   02CF B4 FF 07            915 	cjne a,#0xFF,00111$
   02D2                     916 00264$:
                            917 ;	printf_large.c:283: reqDecimals=DEFAULT_FLOAT_PRECISION;
                            918 ;	genAssign: resultIsFar = TRUE
   02D2 90s00r00r0F         919 	mov	dptr,#_output_float_PARM_3
   02D6 74 06               920 	mov	a,#0x06
   02D8 F0                  921 	movx	@dptr,a
   02D9                     922 00111$:
                            923 ;	printf_large.c:286: rounding = 0.5;
                            924 ;	genAssign: resultIsFar = TRUE
   02D9 90s00r00r98         925 	mov	dptr,#_output_float_rounding_1_1
   02DD E4                  926 	clr  a
   02DE F0                  927 	movx @dptr,a
   02DF A3                  928 	inc  dptr
   02E0 F0                  929 	movx @dptr,a
   02E1 A3                  930 	inc	dptr
   02E2 E4                  931 	clr  a
   02E3 F0                  932 	movx	@dptr,a
   02E4 A3                  933 	inc	dptr
   02E5 74 3F               934 	mov	a,#0x3F
   02E7 F0                  935 	movx	@dptr,a
                            936 ;	printf_large.c:287: for (i=reqDecimals; i>0; i--) {
   02E8 90s00r00r0F         937 	mov	dptr,#_output_float_PARM_3
                            938 ;	genAssign: resultIsFar = TRUE
   02EC E0                  939 	movx	a,@dptr
   02ED F8                  940 	mov	r0,a
                            941 ;	genAssign: resultIsFar = FALSE
   02EE                     942 00184$:
   02EE E8                  943 	mov	a,r0
   02EF 60 04               944 	jz  00194$
   02F1                     945 00265$:
                            946 ;	genAssign: resultIsFar = FALSE
   02F1 79 01               947 	mov	r1,#0x01
   02F3 80 02               948 	sjmp 00195$
   02F5                     949 00194$:
                            950 ;	genAssign: resultIsFar = FALSE
   02F5 79 00               951 	mov	r1,#0x00
   02F7                     952 00195$:
   02F7 E9                  953 	mov	a,r1
   02F8 60 4E               954 	jz  00187$
   02FA                     955 00266$:
                            956 ;	printf_large.c:288: rounding /= 10.0;
   02FA C0 07               957 	push	ar7
                            958 ;	genAssign: resultIsFar = TRUE
   02FC 90s00r00r00         959 	mov	dptr,#___fsdiv_PARM_2
   0300 E4                  960 	clr  a
   0301 F0                  961 	movx @dptr,a
   0302 A3                  962 	inc  dptr
   0303 F0                  963 	movx @dptr,a
   0304 A3                  964 	inc	dptr
   0305 74 20               965 	mov	a,#0x20
   0307 F0                  966 	movx	@dptr,a
   0308 A3                  967 	inc	dptr
   0309 74 41               968 	mov	a,#0x41
   030B F0                  969 	movx	@dptr,a
   030C C0 00               970 	push	ar0
   030E 05 86               971 	inc	dps
   0310 90s00r00r98         972 	mov	dptr,#_output_float_rounding_1_1
   0314 E0                  973 	movx	a,@dptr
   0315 F5 82               974 	mov	dpl,a
   0317 A3                  975 	inc	dptr
   0318 E0                  976 	movx	a,@dptr
   0319 F5 83               977 	mov	dph,a
   031B A3                  978 	inc	dptr
   031C E0                  979 	movx	a,@dptr
   031D F5 93               980 	mov	dpx,a
   031F A3                  981 	inc	dptr
   0320 E0                  982 	movx	a,@dptr
   0321 F5 F0               983 	mov	b,a
   0323 75 86 00            984 	mov	dps,#0
   0326 12s00r00r00         985 	lcall	___fsdiv
   032A A9 82               986 	mov	r1,dpl
   032C AF 83               987 	mov	r7,dph
   032E AA 93               988 	mov	r2,dpx
   0330 AB F0               989 	mov	r3,b
   0332 D0 00               990 	pop	ar0
                            991 ;	genAssign: resultIsFar = TRUE
   0334 90s00r00r98         992 	mov	dptr,#_output_float_rounding_1_1
   0338 E9                  993 	mov	a,r1
   0339 F0                  994 	movx	@dptr,a
   033A A3                  995 	inc	dptr
   033B EF                  996 	mov	a,r7
   033C F0                  997 	movx	@dptr,a
   033D A3                  998 	inc	dptr
   033E EA                  999 	mov	a,r2
   033F F0                 1000 	movx	@dptr,a
   0340 A3                 1001 	inc	dptr
   0341 EB                 1002 	mov	a,r3
   0342 F0                 1003 	movx	@dptr,a
                           1004 ;	printf_large.c:287: for (i=reqDecimals; i>0; i--) {
   0343 18                 1005 	dec	r0
   0344 D0 07              1006 	pop	ar7
   0346 80 A6              1007 	sjmp 00184$
   0348                    1008 00187$:
                           1009 ;	printf_large.c:290: f += rounding;
   0348 C0 07              1010 	push	ar7
   034A 90s00r00r98        1011 	mov	dptr,#_output_float_rounding_1_1
                           1012 ;	genAssign: resultIsFar = TRUE
   034E 75 86 21           1013 	mov	dps,#0x21
   0351 90s00r00r00        1014 	mov	dptr,#___fsadd_PARM_2
   0355 E0                 1015 	movx	a,@dptr
   0356 F0                 1016 	movx	@dptr,a
   0357 A3                 1017 	inc	dptr
   0358 A3                 1018 	inc	dptr
   0359 E0                 1019 	movx	a,@dptr
   035A F0                 1020 	movx	@dptr,a
   035B A3                 1021 	inc	dptr
   035C A3                 1022 	inc	dptr
   035D E0                 1023 	movx	a,@dptr
   035E F0                 1024 	movx	@dptr,a
   035F A3                 1025 	inc	dptr
   0360 A3                 1026 	inc	dptr
   0361 E0                 1027 	movx	a,@dptr
   0362 F0                 1028 	movx	@dptr,a
   0363 75 86 00           1029 	mov	dps,#0
   0366 C0 07              1030 	push	ar7
   0368 05 86              1031 	inc	dps
   036A 90s00r00r10        1032 	mov	dptr,#_output_float_f_1_1
   036E E0                 1033 	movx	a,@dptr
   036F F5 82              1034 	mov	dpl,a
   0371 A3                 1035 	inc	dptr
   0372 E0                 1036 	movx	a,@dptr
   0373 F5 83              1037 	mov	dph,a
   0375 A3                 1038 	inc	dptr
   0376 E0                 1039 	movx	a,@dptr
   0377 F5 93              1040 	mov	dpx,a
   0379 A3                 1041 	inc	dptr
   037A E0                 1042 	movx	a,@dptr
   037B F5 F0              1043 	mov	b,a
   037D 75 86 00           1044 	mov	dps,#0
   0380 12s00r00r00        1045 	lcall	___fsadd
   0384 AA 82              1046 	mov	r2,dpl
   0386 AB 83              1047 	mov	r3,dph
   0388 AC 93              1048 	mov	r4,dpx
   038A AD F0              1049 	mov	r5,b
   038C D0 07              1050 	pop	ar7
                           1051 ;	genAssign: resultIsFar = TRUE
   038E 90s00r00r10        1052 	mov	dptr,#_output_float_f_1_1
   0392 EA                 1053 	mov	a,r2
   0393 F0                 1054 	movx	@dptr,a
   0394 A3                 1055 	inc	dptr
   0395 EB                 1056 	mov	a,r3
   0396 F0                 1057 	movx	@dptr,a
   0397 A3                 1058 	inc	dptr
   0398 EC                 1059 	mov	a,r4
   0399 F0                 1060 	movx	@dptr,a
   039A A3                 1061 	inc	dptr
   039B ED                 1062 	mov	a,r5
   039C F0                 1063 	movx	@dptr,a
                           1064 ;	printf_large.c:293: integerPart = f;
   039D C0 07              1065 	push	ar7
   039F 05 86              1066 	inc	dps
   03A1 90s00r00r10        1067 	mov	dptr,#_output_float_f_1_1
   03A5 E0                 1068 	movx	a,@dptr
   03A6 F5 82              1069 	mov	dpl,a
   03A8 A3                 1070 	inc	dptr
   03A9 E0                 1071 	movx	a,@dptr
   03AA F5 83              1072 	mov	dph,a
   03AC A3                 1073 	inc	dptr
   03AD E0                 1074 	movx	a,@dptr
   03AE F5 93              1075 	mov	dpx,a
   03B0 A3                 1076 	inc	dptr
   03B1 E0                 1077 	movx	a,@dptr
   03B2 F5 F0              1078 	mov	b,a
   03B4 75 86 00           1079 	mov	dps,#0
   03B7 12s00r00r00        1080 	lcall	___fs2ulong
   03BB AA 82              1081 	mov	r2,dpl
   03BD AB 83              1082 	mov	r3,dph
   03BF AC 93              1083 	mov	r4,dpx
   03C1 AD F0              1084 	mov	r5,b
   03C3 D0 07              1085 	pop	ar7
                           1086 ;	genAssign: resultIsFar = TRUE
   03C5 90s00r00r94        1087 	mov	dptr,#_output_float_integerPart_1_1
   03C9 EA                 1088 	mov	a,r2
   03CA F0                 1089 	movx	@dptr,a
   03CB A3                 1090 	inc	dptr
   03CC EB                 1091 	mov	a,r3
   03CD F0                 1092 	movx	@dptr,a
   03CE A3                 1093 	inc	dptr
   03CF EC                 1094 	mov	a,r4
   03D0 F0                 1095 	movx	@dptr,a
   03D1 A3                 1096 	inc	dptr
   03D2 ED                 1097 	mov	a,r5
   03D3 F0                 1098 	movx	@dptr,a
                           1099 ;	printf_large.c:294: decimalPart = f - integerPart;
   03D4 05 86              1100 	inc	dps
   03D6 90s00r00r94        1101 	mov	dptr,#_output_float_integerPart_1_1
   03DA E0                 1102 	movx	a,@dptr
   03DB F5 82              1103 	mov	dpl,a
   03DD A3                 1104 	inc	dptr
   03DE E0                 1105 	movx	a,@dptr
   03DF F5 83              1106 	mov	dph,a
   03E1 A3                 1107 	inc	dptr
   03E2 E0                 1108 	movx	a,@dptr
   03E3 F5 93              1109 	mov	dpx,a
   03E5 A3                 1110 	inc	dptr
   03E6 E0                 1111 	movx	a,@dptr
   03E7 F5 F0              1112 	mov	b,a
   03E9 75 86 00           1113 	mov	dps,#0
   03EC 12s00r00r00        1114 	lcall	___ulong2fs
   03F0 A8 82              1115 	mov	r0,dpl
   03F2 A9 83              1116 	mov	r1,dph
   03F4 AF 93              1117 	mov	r7,dpx
   03F6 AA F0              1118 	mov	r2,b
                           1119 ;	genAssign: resultIsFar = TRUE
   03F8 90s00r00r00        1120 	mov	dptr,#___fssub_PARM_2
   03FC E8                 1121 	mov	a,r0
   03FD F0                 1122 	movx	@dptr,a
   03FE A3                 1123 	inc	dptr
   03FF E9                 1124 	mov	a,r1
   0400 F0                 1125 	movx	@dptr,a
   0401 A3                 1126 	inc	dptr
   0402 EF                 1127 	mov	a,r7
   0403 F0                 1128 	movx	@dptr,a
   0404 A3                 1129 	inc	dptr
   0405 EA                 1130 	mov	a,r2
   0406 F0                 1131 	movx	@dptr,a
   0407 C0 07              1132 	push	ar7
   0409 05 86              1133 	inc	dps
   040B 90s00r00r10        1134 	mov	dptr,#_output_float_f_1_1
   040F E0                 1135 	movx	a,@dptr
   0410 F5 82              1136 	mov	dpl,a
   0412 A3                 1137 	inc	dptr
   0413 E0                 1138 	movx	a,@dptr
   0414 F5 83              1139 	mov	dph,a
   0416 A3                 1140 	inc	dptr
   0417 E0                 1141 	movx	a,@dptr
   0418 F5 93              1142 	mov	dpx,a
   041A A3                 1143 	inc	dptr
   041B E0                 1144 	movx	a,@dptr
   041C F5 F0              1145 	mov	b,a
   041E 75 86 00           1146 	mov	dps,#0
   0421 12s00r00r00        1147 	lcall	___fssub
   0425 AA 82              1148 	mov	r2,dpl
   0427 AB 83              1149 	mov	r3,dph
   0429 AC 93              1150 	mov	r4,dpx
   042B AD F0              1151 	mov	r5,b
   042D D0 07              1152 	pop	ar7
                           1153 ;	genAssign: resultIsFar = TRUE
   042F 90s00r00r9C        1154 	mov	dptr,#_output_float_decimalPart_1_1
   0433 EA                 1155 	mov	a,r2
   0434 F0                 1156 	movx	@dptr,a
   0435 A3                 1157 	inc	dptr
   0436 EB                 1158 	mov	a,r3
   0437 F0                 1159 	movx	@dptr,a
   0438 A3                 1160 	inc	dptr
   0439 EC                 1161 	mov	a,r4
   043A F0                 1162 	movx	@dptr,a
   043B A3                 1163 	inc	dptr
   043C ED                 1164 	mov	a,r5
   043D F0                 1165 	movx	@dptr,a
                           1166 ;	printf_large.c:408: return;
   043E D0 07              1167 	pop	ar7
                           1168 ;	printf_large.c:297: while (integerPart) {
                           1169 ;	genAssign: resultIsFar = FALSE
   0440 7A 00              1170 	mov	r2,#0x00
   0442                    1171 00112$:
   0442 90s00r00r94        1172 	mov	dptr,#_output_float_integerPart_1_1
   0446 E0                 1173 	movx	a,@dptr
   0447 F5 F0              1174 	mov	b,a
   0449 A3                 1175 	inc	dptr
   044A E0                 1176 	movx	a,@dptr
   044B 42 F0              1177 	orl	b,a
   044D A3                 1178 	inc	dptr
   044E E0                 1179 	movx	a,@dptr
   044F 42 F0              1180 	orl	b,a
   0451 A3                 1181 	inc	dptr
   0452 E0                 1182 	movx	a,@dptr
   0453 45 F0              1183 	orl	a,b
   0455 70 04              1184 	jnz	00267$
   0457 02s00r05r04        1185 	ljmp	00250$
   045B                    1186 00267$:
                           1187 ;	printf_large.c:298: fpBuffer[fpBI++]='0' + integerPart%10;
                           1188 ;	genAssign: resultIsFar = FALSE
   045B 8A 03              1189 	mov	ar3,r2
   045D 0A                 1190 	inc	r2
                           1191 ;	genAssign: resultIsFar = TRUE
   045E 8A 06              1192 	mov	ar6,r2
   0460 EB                 1193 	mov	a,r3
   0461 24r14              1194 	add	a,#_output_float_fpBuffer_1_1
   0463 FB                 1195 	mov	r3,a
   0464 E4                 1196 	clr	a
   0465 34s00              1197 	addc	a,#(_output_float_fpBuffer_1_1 >> 8)
   0467 FC                 1198 	mov	r4,a
   0468 E4                 1199 	clr	a
   0469 34s00              1200 	addc	a,#(_output_float_fpBuffer_1_1 >> 16)
   046B FD                 1201 	mov	r5,a
                           1202 ;	genAssign: resultIsFar = TRUE
   046C 90s00r00r00        1203 	mov	dptr,#__modulong_PARM_2
   0470 74 0A              1204 	mov	a,#0x0A
   0472 F0                 1205 	movx	@dptr,a
   0473 E4                 1206 	clr	a
   0474 A3                 1207 	inc	dptr
   0475 F0                 1208 	movx	@dptr,a
   0476 A3                 1209 	inc	dptr
   0477 F0                 1210 	movx	@dptr,a
   0478 A3                 1211 	inc	dptr
   0479 F0                 1212 	movx	@dptr,a
   047A C0 02              1213 	push	ar2
   047C C0 03              1214 	push	ar3
   047E C0 04              1215 	push	ar4
   0480 C0 05              1216 	push	ar5
   0482 C0 07              1217 	push	ar7
   0484 05 86              1218 	inc	dps
   0486 90s00r00r94        1219 	mov	dptr,#_output_float_integerPart_1_1
   048A E0                 1220 	movx	a,@dptr
   048B F5 82              1221 	mov	dpl,a
   048D A3                 1222 	inc	dptr
   048E E0                 1223 	movx	a,@dptr
   048F F5 83              1224 	mov	dph,a
   0491 A3                 1225 	inc	dptr
   0492 E0                 1226 	movx	a,@dptr
   0493 F5 93              1227 	mov	dpx,a
   0495 A3                 1228 	inc	dptr
   0496 E0                 1229 	movx	a,@dptr
   0497 F5 F0              1230 	mov	b,a
   0499 75 86 00           1231 	mov	dps,#0
   049C 12s00r00r00        1232 	lcall	__modulong
   04A0 D0 07              1233 	pop	ar7
   04A2 D0 05              1234 	pop	ar5
   04A4 D0 04              1235 	pop	ar4
   04A6 D0 03              1236 	pop	ar3
   04A8 D0 02              1237 	pop	ar2
   04AA A8 82              1238 	mov	r0,dpl
   04AC 74 30              1239 	mov	a,#0x30
   04AE 28                 1240 	add	a,r0
   04AF F8                 1241 	mov  r0,a
   04B0 8B 82              1242 	mov  dpl,r3
   04B2 8C 83              1243 	mov  dph,r4
   04B4 8D 93              1244 	mov  dpx,r5
   04B6 F0                 1245 	movx	@dptr,a
                           1246 ;	printf_large.c:299: integerPart /= 10;
                           1247 ;	genAssign: resultIsFar = TRUE
   04B7 90s00r00r00        1248 	mov	dptr,#__divulong_PARM_2
   04BB 74 0A              1249 	mov	a,#0x0A
   04BD F0                 1250 	movx	@dptr,a
   04BE E4                 1251 	clr	a
   04BF A3                 1252 	inc	dptr
   04C0 F0                 1253 	movx	@dptr,a
   04C1 A3                 1254 	inc	dptr
   04C2 F0                 1255 	movx	@dptr,a
   04C3 A3                 1256 	inc	dptr
   04C4 F0                 1257 	movx	@dptr,a
   04C5 C0 02              1258 	push	ar2
   04C7 C0 07              1259 	push	ar7
   04C9 05 86              1260 	inc	dps
   04CB 90s00r00r94        1261 	mov	dptr,#_output_float_integerPart_1_1
   04CF E0                 1262 	movx	a,@dptr
   04D0 F5 82              1263 	mov	dpl,a
   04D2 A3                 1264 	inc	dptr
   04D3 E0                 1265 	movx	a,@dptr
   04D4 F5 83              1266 	mov	dph,a
   04D6 A3                 1267 	inc	dptr
   04D7 E0                 1268 	movx	a,@dptr
   04D8 F5 93              1269 	mov	dpx,a
   04DA A3                 1270 	inc	dptr
   04DB E0                 1271 	movx	a,@dptr
   04DC F5 F0              1272 	mov	b,a
   04DE 75 86 00           1273 	mov	dps,#0
   04E1 12s00r00r00        1274 	lcall	__divulong
   04E5 AB 82              1275 	mov	r3,dpl
   04E7 AC 83              1276 	mov	r4,dph
   04E9 AD 93              1277 	mov	r5,dpx
   04EB A8 F0              1278 	mov	r0,b
   04ED D0 07              1279 	pop	ar7
   04EF D0 02              1280 	pop	ar2
                           1281 ;	genAssign: resultIsFar = TRUE
   04F1 90s00r00r94        1282 	mov	dptr,#_output_float_integerPart_1_1
   04F5 EB                 1283 	mov	a,r3
   04F6 F0                 1284 	movx	@dptr,a
   04F7 A3                 1285 	inc	dptr
   04F8 EC                 1286 	mov	a,r4
   04F9 F0                 1287 	movx	@dptr,a
   04FA A3                 1288 	inc	dptr
   04FB ED                 1289 	mov	a,r5
   04FC F0                 1290 	movx	@dptr,a
   04FD A3                 1291 	inc	dptr
   04FE E8                 1292 	mov	a,r0
   04FF F0                 1293 	movx	@dptr,a
   0500 02s00r04r42        1294 	ljmp	00112$
   0504                    1295 00250$:
                           1296 ;	genAssign: resultIsFar = TRUE
   0504 8A 06              1297 	mov	ar6,r2
                           1298 ;	printf_large.c:301: if (!fpBI) {
   0506 EA                 1299 	mov	a,r2
   0507 70 16              1300 	jnz  00116$
   0509                    1301 00268$:
                           1302 ;	printf_large.c:303: fpBuffer[fpBI++]='0';
   0509 74 01              1303 	mov	a,#0x01
   050B 2A                 1304 	add	a,r2
   050C FE                 1305 	mov	r6,a
   050D EA                 1306 	mov	a,r2
   050E 24r14              1307 	add	a,#_output_float_fpBuffer_1_1
   0510 F5 82              1308 	mov	dpl,a
   0512 E4                 1309 	clr	a
   0513 34s00              1310 	addc	a,#(_output_float_fpBuffer_1_1 >> 8)
   0515 F5 83              1311 	mov	dph,a
   0517 E4                 1312 	clr	a
   0518 34s00              1313 	addc	a,#(_output_float_fpBuffer_1_1 >> 16)
   051A F5 93              1314 	mov	dpx,a
   051C 74 30              1315 	mov	a,#0x30
   051E F0                 1316 	movx	@dptr,a
   051F                    1317 00116$:
                           1318 ;	printf_large.c:309: for (i=reqDecimals; i>0; i--) {
   051F 90s00r00r0F        1319 	mov	dptr,#_output_float_PARM_3
                           1320 ;	genAssign: resultIsFar = TRUE
   0523 E0                 1321 	movx	a,@dptr
   0524 FA                 1322 	mov	r2,a
                           1323 ;	genAssign: resultIsFar = FALSE
   0525 8E 03              1324 	mov	ar3,r6
                           1325 ;	genAssign: resultIsFar = FALSE
   0527                    1326 00188$:
   0527 EA                 1327 	mov	a,r2
   0528 60 04              1328 	jz  00196$
   052A                    1329 00269$:
                           1330 ;	genAssign: resultIsFar = FALSE
   052A 7C 01              1331 	mov	r4,#0x01
   052C 80 02              1332 	sjmp 00197$
   052E                    1333 00196$:
                           1334 ;	genAssign: resultIsFar = FALSE
   052E 7C 00              1335 	mov	r4,#0x00
   0530                    1336 00197$:
   0530 EC                 1337 	mov	a,r4
   0531 70 04              1338 	jnz	00270$
   0533 02s00r06r76        1339 	ljmp	00251$
   0537                    1340 00270$:
                           1341 ;	printf_large.c:310: decimalPart *= 10.0;
   0537 90s00r00r9C        1342 	mov	dptr,#_output_float_decimalPart_1_1
                           1343 ;	genAssign: resultIsFar = TRUE
   053B 75 86 21           1344 	mov	dps,#0x21
   053E 90s00r00r00        1345 	mov	dptr,#___fsmul_PARM_2
   0542 E0                 1346 	movx	a,@dptr
   0543 F0                 1347 	movx	@dptr,a
   0544 A3                 1348 	inc	dptr
   0545 A3                 1349 	inc	dptr
   0546 E0                 1350 	movx	a,@dptr
   0547 F0                 1351 	movx	@dptr,a
   0548 A3                 1352 	inc	dptr
   0549 A3                 1353 	inc	dptr
   054A E0                 1354 	movx	a,@dptr
   054B F0                 1355 	movx	@dptr,a
   054C A3                 1356 	inc	dptr
   054D A3                 1357 	inc	dptr
   054E E0                 1358 	movx	a,@dptr
   054F F0                 1359 	movx	@dptr,a
   0550 75 86 00           1360 	mov	dps,#0
   0553 C0 02              1361 	push	ar2
   0555 C0 03              1362 	push	ar3
   0557 C0 06              1363 	push	ar6
   0559 C0 07              1364 	push	ar7
   055B 90 00 00 00        1365 	mov  dptr,#0x0000
   055F 75 93 20           1366 	mov	dpx,#0x20
   0562 75 F0 41           1367 	mov	b,#0x41
   0565 12s00r00r00        1368 	lcall	___fsmul
   0569 AC 82              1369 	mov	r4,dpl
   056B AD 83              1370 	mov	r5,dph
   056D A8 93              1371 	mov	r0,dpx
   056F A9 F0              1372 	mov	r1,b
   0571 D0 07              1373 	pop	ar7
   0573 D0 06              1374 	pop	ar6
   0575 D0 03              1375 	pop	ar3
   0577 D0 02              1376 	pop	ar2
                           1377 ;	genAssign: resultIsFar = TRUE
   0579 90s00r00r9C        1378 	mov	dptr,#_output_float_decimalPart_1_1
   057D EC                 1379 	mov	a,r4
   057E F0                 1380 	movx	@dptr,a
   057F A3                 1381 	inc	dptr
   0580 ED                 1382 	mov	a,r5
   0581 F0                 1383 	movx	@dptr,a
   0582 A3                 1384 	inc	dptr
   0583 E8                 1385 	mov	a,r0
   0584 F0                 1386 	movx	@dptr,a
   0585 A3                 1387 	inc	dptr
   0586 E9                 1388 	mov	a,r1
   0587 F0                 1389 	movx	@dptr,a
                           1390 ;	printf_large.c:312: integerPart = decimalPart;
   0588 C0 02              1391 	push	ar2
   058A C0 03              1392 	push	ar3
   058C C0 06              1393 	push	ar6
   058E C0 07              1394 	push	ar7
   0590 05 86              1395 	inc	dps
   0592 90s00r00r9C        1396 	mov	dptr,#_output_float_decimalPart_1_1
   0596 E0                 1397 	movx	a,@dptr
   0597 F5 82              1398 	mov	dpl,a
   0599 A3                 1399 	inc	dptr
   059A E0                 1400 	movx	a,@dptr
   059B F5 83              1401 	mov	dph,a
   059D A3                 1402 	inc	dptr
   059E E0                 1403 	movx	a,@dptr
   059F F5 93              1404 	mov	dpx,a
   05A1 A3                 1405 	inc	dptr
   05A2 E0                 1406 	movx	a,@dptr
   05A3 F5 F0              1407 	mov	b,a
   05A5 75 86 00           1408 	mov	dps,#0
   05A8 12s00r00r00        1409 	lcall	___fs2ulong
   05AC AC 82              1410 	mov	r4,dpl
   05AE AD 83              1411 	mov	r5,dph
   05B0 A8 93              1412 	mov	r0,dpx
   05B2 A9 F0              1413 	mov	r1,b
   05B4 D0 07              1414 	pop	ar7
   05B6 D0 06              1415 	pop	ar6
   05B8 D0 03              1416 	pop	ar3
   05BA D0 02              1417 	pop	ar2
                           1418 ;	genAssign: resultIsFar = TRUE
   05BC 90s00r00r94        1419 	mov	dptr,#_output_float_integerPart_1_1
   05C0 EC                 1420 	mov	a,r4
   05C1 F0                 1421 	movx	@dptr,a
   05C2 A3                 1422 	inc	dptr
   05C3 ED                 1423 	mov	a,r5
   05C4 F0                 1424 	movx	@dptr,a
   05C5 A3                 1425 	inc	dptr
   05C6 E8                 1426 	mov	a,r0
   05C7 F0                 1427 	movx	@dptr,a
   05C8 A3                 1428 	inc	dptr
   05C9 E9                 1429 	mov	a,r1
   05CA F0                 1430 	movx	@dptr,a
                           1431 ;	printf_large.c:313: fpBuffer[fpBD++] = '0' + integerPart;
                           1432 ;	genAssign: resultIsFar = FALSE
   05CB 8B 04              1433 	mov	ar4,r3
   05CD 0B                 1434 	inc	r3
   05CE EC                 1435 	mov	a,r4
   05CF 24r14              1436 	add	a,#_output_float_fpBuffer_1_1
   05D1 F5 84              1437 	mov	dpl1,a
   05D3 E4                 1438 	clr	a
   05D4 34s00              1439 	addc	a,#(_output_float_fpBuffer_1_1 >> 8)
   05D6 F5 85              1440 	mov	dph1,a
   05D8 E4                 1441 	clr	a
   05D9 34s00              1442 	addc	a,#(_output_float_fpBuffer_1_1 >> 16)
   05DB F5 95              1443 	mov	dpx1,a
   05DD 90s00r00r94        1444 	mov	dptr,#_output_float_integerPart_1_1
   05E1 E0                 1445 	movx	a,@dptr
   05E2 24 30              1446 	add  a,#0x30
   05E4 F9                 1447 	mov  r1,a
   05E5 05 86              1448 	inc	dps
   05E7 F0                 1449 	movx	@dptr,a
   05E8 75 86 00           1450 	mov	dps,#0
                           1451 ;	printf_large.c:314: decimalPart -= integerPart;
   05EB C0 02              1452 	push	ar2
   05ED C0 03              1453 	push	ar3
   05EF C0 06              1454 	push	ar6
   05F1 C0 07              1455 	push	ar7
   05F3 05 86              1456 	inc	dps
   05F5 90s00r00r94        1457 	mov	dptr,#_output_float_integerPart_1_1
   05F9 E0                 1458 	movx	a,@dptr
   05FA F5 82              1459 	mov	dpl,a
   05FC A3                 1460 	inc	dptr
   05FD E0                 1461 	movx	a,@dptr
   05FE F5 83              1462 	mov	dph,a
   0600 A3                 1463 	inc	dptr
   0601 E0                 1464 	movx	a,@dptr
   0602 F5 93              1465 	mov	dpx,a
   0604 A3                 1466 	inc	dptr
   0605 E0                 1467 	movx	a,@dptr
   0606 F5 F0              1468 	mov	b,a
   0608 75 86 00           1469 	mov	dps,#0
   060B 12s00r00r00        1470 	lcall	___ulong2fs
   060F AC 82              1471 	mov	r4,dpl
   0611 AD 83              1472 	mov	r5,dph
   0613 A8 93              1473 	mov	r0,dpx
   0615 A9 F0              1474 	mov	r1,b
   0617 D0 07              1475 	pop	ar7
   0619 D0 06              1476 	pop	ar6
   061B D0 03              1477 	pop	ar3
   061D D0 02              1478 	pop	ar2
                           1479 ;	genAssign: resultIsFar = TRUE
   061F 90s00r00r00        1480 	mov	dptr,#___fssub_PARM_2
   0623 EC                 1481 	mov	a,r4
   0624 F0                 1482 	movx	@dptr,a
   0625 A3                 1483 	inc	dptr
   0626 ED                 1484 	mov	a,r5
   0627 F0                 1485 	movx	@dptr,a
   0628 A3                 1486 	inc	dptr
   0629 E8                 1487 	mov	a,r0
   062A F0                 1488 	movx	@dptr,a
   062B A3                 1489 	inc	dptr
   062C E9                 1490 	mov	a,r1
   062D F0                 1491 	movx	@dptr,a
   062E C0 02              1492 	push	ar2
   0630 C0 03              1493 	push	ar3
   0632 C0 06              1494 	push	ar6
   0634 C0 07              1495 	push	ar7
   0636 05 86              1496 	inc	dps
   0638 90s00r00r9C        1497 	mov	dptr,#_output_float_decimalPart_1_1
   063C E0                 1498 	movx	a,@dptr
   063D F5 82              1499 	mov	dpl,a
   063F A3                 1500 	inc	dptr
   0640 E0                 1501 	movx	a,@dptr
   0641 F5 83              1502 	mov	dph,a
   0643 A3                 1503 	inc	dptr
   0644 E0                 1504 	movx	a,@dptr
   0645 F5 93              1505 	mov	dpx,a
   0647 A3                 1506 	inc	dptr
   0648 E0                 1507 	movx	a,@dptr
   0649 F5 F0              1508 	mov	b,a
   064B 75 86 00           1509 	mov	dps,#0
   064E 12s00r00r00        1510 	lcall	___fssub
   0652 AC 82              1511 	mov	r4,dpl
   0654 AD 83              1512 	mov	r5,dph
   0656 A8 93              1513 	mov	r0,dpx
   0658 A9 F0              1514 	mov	r1,b
   065A D0 07              1515 	pop	ar7
   065C D0 06              1516 	pop	ar6
   065E D0 03              1517 	pop	ar3
   0660 D0 02              1518 	pop	ar2
                           1519 ;	genAssign: resultIsFar = TRUE
   0662 90s00r00r9C        1520 	mov	dptr,#_output_float_decimalPart_1_1
   0666 EC                 1521 	mov	a,r4
   0667 F0                 1522 	movx	@dptr,a
   0668 A3                 1523 	inc	dptr
   0669 ED                 1524 	mov	a,r5
   066A F0                 1525 	movx	@dptr,a
   066B A3                 1526 	inc	dptr
   066C E8                 1527 	mov	a,r0
   066D F0                 1528 	movx	@dptr,a
   066E A3                 1529 	inc	dptr
   066F E9                 1530 	mov	a,r1
   0670 F0                 1531 	movx	@dptr,a
                           1532 ;	printf_large.c:309: for (i=reqDecimals; i>0; i--) {
   0671 1A                 1533 	dec	r2
   0672 02s00r05r27        1534 	ljmp	00188$
   0676                    1535 00251$:
                           1536 ;	genAssign: resultIsFar = TRUE
                           1537 ;	printf_large.c:317: minWidth=fpBI; // we need at least these
                           1538 ;	genAssign: resultIsFar = TRUE
   0676 8E 03              1539 	mov	ar3,r6
                           1540 ;	printf_large.c:318: minWidth+=reqDecimals?reqDecimals+1:0; // maybe these
   0678 90s00r00r0F        1541 	mov	dptr,#_output_float_PARM_3
   067C E0                 1542 	movx	a,@dptr
   067D 60 0A              1543 	jz  00198$
   067F                    1544 00271$:
   067F 90s00r00r0F        1545 	mov	dptr,#_output_float_PARM_3
   0683 E0                 1546 	movx	a,@dptr
   0684 24 01              1547 	add	a,#0x01
   0686 FC                 1548 	mov	r4,a
   0687 80 02              1549 	sjmp 00199$
   0689                    1550 00198$:
                           1551 ;	genAssign: resultIsFar = FALSE
   0689 7C 00              1552 	mov	r4,#0x00
   068B                    1553 00199$:
   068B EC                 1554 	mov	a,r4
   068C 2B                 1555 	add	a,r3
   068D FB                 1556 	mov	r3,a
                           1557 ;	printf_large.c:319: if (negative || sign || space)
   068E 20*05 06           1558 	jb   _output_float_negative_1_1,00117$
   0691                    1559 00272$:
   0691 20*03 03           1560 	jb   _output_float_PARM_6,00117$
   0694                    1561 00273$:
   0694 30*04 01           1562 	jnb  _output_float_PARM_7,00118$
   0697                    1563 00274$:
   0697                    1564 00117$:
                           1565 ;	printf_large.c:320: minWidth++; // and maybe even this :)
   0697 0B                 1566 	inc	r3
   0698                    1567 00118$:
                           1568 ;	printf_large.c:322: if (!left && reqWidth>i) {
   0698 30*01 04           1569 	jnb	_output_float_PARM_4,00275$
   069B 02s00r07rA9        1570 	ljmp	00155$
   069F                    1571 00275$:
   069F 90s00r00r0E        1572 	mov	dptr,#_output_float_PARM_2
   06A3 C3                 1573 	clr	c
   06A4 EA                 1574 	mov	a,r2
   06A5 C5 F0              1575 	xch	a, b
   06A7 E0                 1576 	movx	a,@dptr
   06A8 C5 F0              1577 	xch	a, b
   06AA 95 F0              1578 	subb	a,b
   06AC 40 04              1579 	jc	00276$
   06AE 02s00r07rA9        1580 	ljmp	00155$
   06B2                    1581 00276$:
                           1582 ;	printf_large.c:323: if (zero) {
   06B2 30*02 77           1583 	jnb  _output_float_PARM_5,00230$
   06B5                    1584 00277$:
                           1585 ;	printf_large.c:324: if (negative)
   06B5 30*05 15           1586 	jnb  _output_float_negative_1_1,00127$
   06B8                    1587 00278$:
                           1588 ;	printf_large.c:326: OUTPUT_CHAR('-', p);
   06B8 C0 03              1589 	push	ar3
   06BA C0 06              1590 	push	ar6
   06BC C0 07              1591 	push	ar7
   06BE 75 82 2D           1592 	mov	dpl,#0x2D
   06C1 12s00r00r00        1593 	lcall	__output_char
   06C5 D0 07              1594 	pop	ar7
   06C7 D0 06              1595 	pop	ar6
   06C9 D0 03              1596 	pop	ar3
   06CB 80 2E              1597 	sjmp 00228$
   06CD                    1598 00127$:
                           1599 ;	printf_large.c:328: else if (sign)
   06CD 30*03 15           1600 	jnb  _output_float_PARM_6,00124$
   06D0                    1601 00279$:
                           1602 ;	printf_large.c:330: OUTPUT_CHAR('+', p);
   06D0 C0 03              1603 	push	ar3
   06D2 C0 06              1604 	push	ar6
   06D4 C0 07              1605 	push	ar7
   06D6 75 82 2B           1606 	mov	dpl,#0x2B
   06D9 12s00r00r00        1607 	lcall	__output_char
   06DD D0 07              1608 	pop	ar7
   06DF D0 06              1609 	pop	ar6
   06E1 D0 03              1610 	pop	ar3
   06E3 80 16              1611 	sjmp 00228$
   06E5                    1612 00124$:
                           1613 ;	printf_large.c:332: else if (space)
   06E5 30*04 13           1614 	jnb  _output_float_PARM_7,00228$
   06E8                    1615 00280$:
                           1616 ;	printf_large.c:334: OUTPUT_CHAR(' ', p);
   06E8 C0 03              1617 	push	ar3
   06EA C0 06              1618 	push	ar6
   06EC C0 07              1619 	push	ar7
   06EE 75 82 20           1620 	mov	dpl,#0x20
   06F1 12s00r00r00        1621 	lcall	__output_char
   06F5 D0 07              1622 	pop	ar7
   06F7 D0 06              1623 	pop	ar6
   06F9 D0 03              1624 	pop	ar3
                           1625 ;	printf_large.c:336: while (reqWidth-->minWidth)
   06FB                    1626 00228$:
   06FB 90s00r00r0E        1627 	mov	dptr,#_output_float_PARM_2
                           1628 ;	genAssign: resultIsFar = FALSE
   06FF E0                 1629 	movx	a,@dptr
   0700 FC                 1630 	mov	r4,a
   0701                    1631 00129$:
                           1632 ;	genAssign: resultIsFar = FALSE
   0701 8C 05              1633 	mov	ar5,r4
   0703 1C                 1634 	dec	r4
                           1635 ;	genAssign: resultIsFar = TRUE
   0704 90s00r00r0E        1636 	mov	dptr,#_output_float_PARM_2
   0708 EC                 1637 	mov	a,r4
   0709 F0                 1638 	movx	@dptr,a
   070A C3                 1639 	clr	c
   070B EB                 1640 	mov	a,r3
   070C 9D                 1641 	subb	a,r5
   070D 40 04              1642 	jc	00281$
   070F 02s00r07rF1        1643 	ljmp	00252$
   0713                    1644 00281$:
                           1645 ;	printf_large.c:338: OUTPUT_CHAR('0', p);
   0713 C0 03              1646 	push	ar3
   0715 C0 04              1647 	push	ar4
   0717 C0 06              1648 	push	ar6
   0719 C0 07              1649 	push	ar7
   071B 75 82 30           1650 	mov	dpl,#0x30
   071E 12s00r00r00        1651 	lcall	__output_char
   0722 D0 07              1652 	pop	ar7
   0724 D0 06              1653 	pop	ar6
   0726 D0 04              1654 	pop	ar4
   0728 D0 03              1655 	pop	ar3
                           1656 ;	printf_large.c:341: while (reqWidth-->minWidth)
   072A 80 D5              1657 	sjmp 00129$
   072C                    1658 00230$:
   072C 90s00r00r0E        1659 	mov	dptr,#_output_float_PARM_2
                           1660 ;	genAssign: resultIsFar = FALSE
   0730 E0                 1661 	movx	a,@dptr
   0731 FD                 1662 	mov	r5,a
   0732                    1663 00132$:
                           1664 ;	genAssign: resultIsFar = FALSE
   0732 8D 00              1665 	mov	ar0,r5
   0734 1D                 1666 	dec	r5
                           1667 ;	genAssign: resultIsFar = TRUE
   0735 90s00r00r0E        1668 	mov	dptr,#_output_float_PARM_2
   0739 ED                 1669 	mov	a,r5
   073A F0                 1670 	movx	@dptr,a
   073B C3                 1671 	clr	c
   073C EB                 1672 	mov	a,r3
   073D 98                 1673 	subb	a,r0
   073E 50 19              1674 	jnc  00253$
   0740                    1675 00282$:
                           1676 ;	printf_large.c:343: OUTPUT_CHAR(' ', p);
   0740 C0 03              1677 	push	ar3
   0742 C0 05              1678 	push	ar5
   0744 C0 06              1679 	push	ar6
   0746 C0 07              1680 	push	ar7
   0748 75 82 20           1681 	mov	dpl,#0x20
   074B 12s00r00r00        1682 	lcall	__output_char
   074F D0 07              1683 	pop	ar7
   0751 D0 06              1684 	pop	ar6
   0753 D0 05              1685 	pop	ar5
   0755 D0 03              1686 	pop	ar3
   0757 80 D9              1687 	sjmp 00132$
   0759                    1688 00253$:
                           1689 ;	genAssign: resultIsFar = TRUE
   0759 90s00r00r0E        1690 	mov	dptr,#_output_float_PARM_2
   075D ED                 1691 	mov	a,r5
   075E F0                 1692 	movx	@dptr,a
                           1693 ;	printf_large.c:345: if (negative)
   075F 30*05 17           1694 	jnb  _output_float_negative_1_1,00141$
   0762                    1695 00283$:
                           1696 ;	printf_large.c:347: OUTPUT_CHAR('-', p);
   0762 C0 03              1697 	push	ar3
   0764 C0 06              1698 	push	ar6
   0766 C0 07              1699 	push	ar7
   0768 75 82 2D           1700 	mov	dpl,#0x2D
   076B 12s00r00r00        1701 	lcall	__output_char
   076F D0 07              1702 	pop	ar7
   0771 D0 06              1703 	pop	ar6
   0773 D0 03              1704 	pop	ar3
   0775 02s00r07rF7        1705 	ljmp	00156$
   0779                    1706 00141$:
                           1707 ;	printf_large.c:349: else if (sign)
   0779 30*03 15           1708 	jnb  _output_float_PARM_6,00138$
   077C                    1709 00284$:
                           1710 ;	printf_large.c:351: OUTPUT_CHAR('+', p);
   077C C0 03              1711 	push	ar3
   077E C0 06              1712 	push	ar6
   0780 C0 07              1713 	push	ar7
   0782 75 82 2B           1714 	mov	dpl,#0x2B
   0785 12s00r00r00        1715 	lcall	__output_char
   0789 D0 07              1716 	pop	ar7
   078B D0 06              1717 	pop	ar6
   078D D0 03              1718 	pop	ar3
   078F 80 66              1719 	sjmp 00156$
   0791                    1720 00138$:
                           1721 ;	printf_large.c:353: else if (space)
   0791 30*04 63           1722 	jnb  _output_float_PARM_7,00156$
   0794                    1723 00285$:
                           1724 ;	printf_large.c:355: OUTPUT_CHAR(' ', p);
   0794 C0 03              1725 	push	ar3
   0796 C0 06              1726 	push	ar6
   0798 C0 07              1727 	push	ar7
   079A 75 82 20           1728 	mov	dpl,#0x20
   079D 12s00r00r00        1729 	lcall	__output_char
   07A1 D0 07              1730 	pop	ar7
   07A3 D0 06              1731 	pop	ar6
   07A5 D0 03              1732 	pop	ar3
   07A7 80 4E              1733 	sjmp 00156$
   07A9                    1734 00155$:
                           1735 ;	printf_large.c:359: if (negative)
   07A9 30*05 15           1736 	jnb  _output_float_negative_1_1,00152$
   07AC                    1737 00286$:
                           1738 ;	printf_large.c:361: OUTPUT_CHAR('-', p);
   07AC C0 03              1739 	push	ar3
   07AE C0 06              1740 	push	ar6
   07B0 C0 07              1741 	push	ar7
   07B2 75 82 2D           1742 	mov	dpl,#0x2D
   07B5 12s00r00r00        1743 	lcall	__output_char
   07B9 D0 07              1744 	pop	ar7
   07BB D0 06              1745 	pop	ar6
   07BD D0 03              1746 	pop	ar3
   07BF 80 36              1747 	sjmp 00156$
   07C1                    1748 00152$:
                           1749 ;	printf_large.c:363: else if (sign)
   07C1 30*03 15           1750 	jnb  _output_float_PARM_6,00149$
   07C4                    1751 00287$:
                           1752 ;	printf_large.c:365: OUTPUT_CHAR('+', p);
   07C4 C0 03              1753 	push	ar3
   07C6 C0 06              1754 	push	ar6
   07C8 C0 07              1755 	push	ar7
   07CA 75 82 2B           1756 	mov	dpl,#0x2B
   07CD 12s00r00r00        1757 	lcall	__output_char
   07D1 D0 07              1758 	pop	ar7
   07D3 D0 06              1759 	pop	ar6
   07D5 D0 03              1760 	pop	ar3
   07D7 80 1E              1761 	sjmp 00156$
   07D9                    1762 00149$:
                           1763 ;	printf_large.c:367: else if (space)
   07D9 30*04 1B           1764 	jnb  _output_float_PARM_7,00156$
   07DC                    1765 00288$:
                           1766 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
   07DC C0 03              1767 	push	ar3
   07DE C0 06              1768 	push	ar6
   07E0 C0 07              1769 	push	ar7
   07E2 75 82 20           1770 	mov	dpl,#0x20
   07E5 12s00r00r00        1771 	lcall	__output_char
   07E9 D0 07              1772 	pop	ar7
   07EB D0 06              1773 	pop	ar6
   07ED D0 03              1774 	pop	ar3
                           1775 ;	printf_large.c:408: return;
                           1776 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
   07EF 80 06              1777 	sjmp 00156$
   07F1                    1778 00252$:
                           1779 ;	genAssign: resultIsFar = TRUE
   07F1 90s00r00r0E        1780 	mov	dptr,#_output_float_PARM_2
   07F5 EC                 1781 	mov	a,r4
   07F6 F0                 1782 	movx	@dptr,a
   07F7                    1783 00156$:
                           1784 ;	printf_large.c:374: i=fpBI-1;
   07F7 EE                 1785 	mov	a,r6
   07F8 14                 1786 	dec	a
                           1787 ;	genAssign: resultIsFar = TRUE
   07F9 FA                 1788 	mov	r2,a
                           1789 ;	printf_large.c:375: do {
                           1790 ;	genAssign: resultIsFar = FALSE
   07FA                    1791 00158$:
                           1792 ;	printf_large.c:376: OUTPUT_CHAR (fpBuffer[i], p);
   07FA EA                 1793 	mov	a,r2
   07FB 24r14              1794 	add	a,#_output_float_fpBuffer_1_1
   07FD F5 82              1795 	mov	dpl,a
   07FF E4                 1796 	clr	a
   0800 34s00              1797 	addc	a,#(_output_float_fpBuffer_1_1 >> 8)
   0802 F5 83              1798 	mov	dph,a
   0804 E4                 1799 	clr	a
   0805 34s00              1800 	addc	a,#(_output_float_fpBuffer_1_1 >> 16)
   0807 F5 93              1801 	mov	dpx,a
   0809 E0                 1802 	movx	a,@dptr
   080A FC                 1803 	mov	r4,a
   080B C0 02              1804 	push	ar2
   080D C0 03              1805 	push	ar3
   080F C0 06              1806 	push	ar6
   0811 C0 07              1807 	push	ar7
   0813 8C 82              1808 	mov	dpl,r4
   0815 12s00r00r00        1809 	lcall	__output_char
   0819 D0 07              1810 	pop	ar7
   081B D0 06              1811 	pop	ar6
   081D D0 03              1812 	pop	ar3
   081F D0 02              1813 	pop	ar2
                           1814 ;	printf_large.c:377: } while (i--);
                           1815 ;	genAssign: resultIsFar = FALSE
   0821 8A 04              1816 	mov	ar4,r2
   0823 1A                 1817 	dec	r2
   0824 EC                 1818 	mov	a,r4
   0825 70 D3              1819 	jnz  00158$
   0827                    1820 00289$:
                           1821 ;	printf_large.c:380: if (reqDecimals) {
   0827 90s00r00r0F        1822 	mov	dptr,#_output_float_PARM_3
   082B E0                 1823 	movx	a,@dptr
   082C 60 4D              1824 	jz  00165$
   082E                    1825 00290$:
                           1826 ;	printf_large.c:381: OUTPUT_CHAR ('.', p);
   082E C0 03              1827 	push	ar3
   0830 C0 06              1828 	push	ar6
   0832 C0 07              1829 	push	ar7
   0834 75 82 2E           1830 	mov	dpl,#0x2E
   0837 12s00r00r00        1831 	lcall	__output_char
   083B D0 07              1832 	pop	ar7
   083D D0 06              1833 	pop	ar6
   083F D0 03              1834 	pop	ar3
                           1835 ;	printf_large.c:383: while (reqDecimals--)
                           1836 ;	genAssign: resultIsFar = FALSE
   0841 8E 02              1837 	mov	ar2,r6
   0843 90s00r00r0F        1838 	mov	dptr,#_output_float_PARM_3
                           1839 ;	genAssign: resultIsFar = FALSE
   0847 E0                 1840 	movx	a,@dptr
   0848 FC                 1841 	mov	r4,a
   0849                    1842 00161$:
                           1843 ;	genAssign: resultIsFar = FALSE
   0849 8C 05              1844 	mov	ar5,r4
   084B 1C                 1845 	dec	r4
   084C ED                 1846 	mov	a,r5
   084D 60 2C              1847 	jz  00165$
   084F                    1848 00291$:
                           1849 ;	printf_large.c:385: OUTPUT_CHAR (fpBuffer[i++], p);
                           1850 ;	genAssign: resultIsFar = FALSE
   084F 8A 05              1851 	mov	ar5,r2
   0851 0A                 1852 	inc	r2
   0852 ED                 1853 	mov	a,r5
   0853 24r14              1854 	add	a,#_output_float_fpBuffer_1_1
   0855 F5 82              1855 	mov	dpl,a
   0857 E4                 1856 	clr	a
   0858 34s00              1857 	addc	a,#(_output_float_fpBuffer_1_1 >> 8)
   085A F5 83              1858 	mov	dph,a
   085C E4                 1859 	clr	a
   085D 34s00              1860 	addc	a,#(_output_float_fpBuffer_1_1 >> 16)
   085F F5 93              1861 	mov	dpx,a
   0861 E0                 1862 	movx	a,@dptr
   0862 FD                 1863 	mov	r5,a
   0863 C0 02              1864 	push	ar2
   0865 C0 03              1865 	push	ar3
   0867 C0 04              1866 	push	ar4
   0869 C0 07              1867 	push	ar7
   086B 8D 82              1868 	mov	dpl,r5
   086D 12s00r00r00        1869 	lcall	__output_char
   0871 D0 07              1870 	pop	ar7
   0873 D0 04              1871 	pop	ar4
   0875 D0 03              1872 	pop	ar3
   0877 D0 02              1873 	pop	ar2
   0879 80 CE              1874 	sjmp 00161$
   087B                    1875 00165$:
                           1876 ;	printf_large.c:389: if (left && reqWidth>minWidth) {
   087B 30*01 32           1877 	jnb  _output_float_PARM_4,00170$
   087E                    1878 00292$:
   087E 90s00r00r0E        1879 	mov	dptr,#_output_float_PARM_2
   0882 C3                 1880 	clr	c
   0883 EB                 1881 	mov	a,r3
   0884 C5 F0              1882 	xch	a, b
   0886 E0                 1883 	movx	a,@dptr
   0887 C5 F0              1884 	xch	a, b
   0889 95 F0              1885 	subb	a,b
   088B 50 23              1886 	jnc  00170$
   088D                    1887 00293$:
                           1888 ;	printf_large.c:390: while (reqWidth-->minWidth)
   088D 90s00r00r0E        1889 	mov	dptr,#_output_float_PARM_2
                           1890 ;	genAssign: resultIsFar = FALSE
   0891 E0                 1891 	movx	a,@dptr
   0892 FA                 1892 	mov	r2,a
   0893                    1893 00166$:
                           1894 ;	genAssign: resultIsFar = FALSE
   0893 8A 04              1895 	mov	ar4,r2
   0895 1A                 1896 	dec	r2
   0896 C3                 1897 	clr	c
   0897 EB                 1898 	mov	a,r3
   0898 9C                 1899 	subb	a,r4
   0899 50 15              1900 	jnc  00170$
   089B                    1901 00294$:
                           1902 ;	printf_large.c:392: OUTPUT_CHAR(' ', p);
   089B C0 02              1903 	push	ar2
   089D C0 03              1904 	push	ar3
   089F C0 07              1905 	push	ar7
   08A1 75 82 20           1906 	mov	dpl,#0x20
   08A4 12s00r00r00        1907 	lcall	__output_char
   08A8 D0 07              1908 	pop	ar7
   08AA D0 03              1909 	pop	ar3
   08AC D0 02              1910 	pop	ar2
   08AE 80 E3              1911 	sjmp 00166$
   08B0                    1912 00170$:
                           1913 ;	printf_large.c:396: if (exp != -128) {
   08B0 EF                 1914 	mov	a,r7
   08B1 B4 80 02           1915 	cjne	a,#0x80,00295$
   08B4 80 5E              1916 	sjmp 00175$
   08B6                    1917 00295$:
                           1918 ;	printf_large.c:397: OUTPUT_CHAR ('e', p);
   08B6 C0 07              1919 	push	ar7
   08B8 75 82 65           1920 	mov	dpl,#0x65
   08BB 12s00r00r00        1921 	lcall	__output_char
   08BF D0 07              1922 	pop	ar7
                           1923 ;	printf_large.c:398: if (exp<0) {
   08C1 EF                 1924 	mov	a,r7
   08C2 30 E7 0F           1925 	jnb  acc.7,00173$
   08C5                    1926 00296$:
                           1927 ;	printf_large.c:399: OUTPUT_CHAR ('-', p);
   08C5 C0 07              1928 	push	ar7
   08C7 75 82 2D           1929 	mov	dpl,#0x2D
   08CA 12s00r00r00        1930 	lcall	__output_char
   08CE D0 07              1931 	pop	ar7
                           1932 ;	printf_large.c:400: exp = -exp;
   08D0 C3                 1933 	clr	c
   08D1 E4                 1934 	clr	a
   08D2 9F                 1935 	subb	a,r7
   08D3 FF                 1936 	mov	r7,a
   08D4                    1937 00173$:
                           1938 ;	printf_large.c:402: OUTPUT_CHAR ('0'+exp/10, p);
   08D4 C2 D5              1939 	clr	F0
   08D6 75 F0 0A           1940 	mov	b,#0x0a
   08D9 EF                 1941 	mov	a,r7
   08DA 30 E7 04           1942 	jnb	acc.7,00297$
   08DD B2 D5              1943 	cpl	F0
   08DF F4                 1944 	cpl	a
   08E0 04                 1945 	inc	a
   08E1                    1946 00297$:
   08E1 00                 1947 	nop	; workaround for DS80C390 div bug.
   08E2 84                 1948 	div	ab
   08E3 30 D5 02           1949 	jnb	F0,00298$
   08E6 F4                 1950 	cpl	a
   08E7 04                 1951 	inc	a
   08E8                    1952 00298$:
   08E8 24 30              1953 	add  a,#0x30
   08EA FA                 1954 	mov  r2,a
   08EB C0 07              1955 	push	ar7
   08ED 8A 82              1956 	mov	dpl,r2
   08EF 12s00r00r00        1957 	lcall	__output_char
   08F3 D0 07              1958 	pop	ar7
                           1959 ;	printf_large.c:403: OUTPUT_CHAR ('0'+exp%10, p);
   08F5 75 F0 0A           1960 	mov	b,#0x0a
   08F8 EF                 1961 	mov	a,r7
   08F9 C2 D5              1962 	clr	F0
   08FB 30 E7 04           1963 	jnb	acc.7,00299$
   08FE D2 D5              1964 	setb	F0
   0900 F4                 1965 	cpl	a
   0901 04                 1966 	inc	a
   0902                    1967 00299$:
   0902 00                 1968 	nop	; workaround for DS80C390 div bug.
   0903 84                 1969 	div	ab
   0904 E5 F0              1970 	mov	a,b
   0906 30 D5 02           1971 	jnb	F0,00300$
   0909 F4                 1972 	cpl	a
   090A 04                 1973 	inc	a
   090B                    1974 00300$:
   090B 24 30              1975 	add  a,#0x30
   090D FF                 1976 	mov  r7,a
   090E 8F 82              1977 	mov	dpl,r7
   0910 12s00r00r00        1978 	lcall	__output_char
   0914                    1979 00175$:
                           1980 ;	printf_large.c:408: return;
   0914                    1981 00192$:
   0914 22                 1982 	ret
                           1983 ;------------------------------------------------------------
                           1984 ;Allocation info for local variables in function '_print_format'
                           1985 ;------------------------------------------------------------
                           1986 ;pvoid                     Allocated with name '__print_format_PARM_2'
                           1987 ;format                    Allocated with name '__print_format_PARM_3'
                           1988 ;ap                        Allocated with name '__print_format_PARM_4'
                           1989 ;pfn                       Allocated to registers 
                           1990 ;radix                     Allocated with name '__print_format_radix_1_1'
                           1991 ;width                     Allocated with name '__print_format_width_1_1'
                           1992 ;decimals                  Allocated to registers r5 
                           1993 ;length                    Allocated with name '__print_format_length_1_1'
                           1994 ;c                         Allocated to registers r2 
                           1995 ;memtype                   Allocated to registers r2 
                           1996 ;store                     Allocated with name '__print_format_store_4_23'
                           1997 ;pstore                    Allocated with name '__print_format_pstore_4_23'
                           1998 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                           1999 ;------------------------------------------------------------
                           2000 ;	printf_large.c:414: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                           2001 ;	-----------------------------------------
                           2002 ;	 function _print_format
                           2003 ;	-----------------------------------------
   0915                    2004 __print_format:
   0915 75 86 01           2005 	mov     dps, #1
   0918 90s00r00r00        2006 	mov     dptr, #_output_char
   091C E5 82              2007 	mov	a,dpl
   091E F0                 2008 	movx	@dptr,a
   091F A3                 2009 	inc	dptr
   0920 E5 83              2010 	mov	a,dph
   0922 F0                 2011 	movx	@dptr,a
   0923 A3                 2012 	inc	dptr
   0924 E5 93              2013 	mov	a,dpx
   0926 F0                 2014 	movx	@dptr,a
   0927 75 86 00           2015 	mov	dps,#0
                           2016 ;	printf_large.c:442: p = pvoid;
   092A 90s00r00rA0        2017 	mov	dptr,#__print_format_PARM_2
                           2018 ;	genAssign: resultIsFar = FALSE
   092E E0                 2019 	movx	a,@dptr
   092F FA                 2020 	mov	r2,a
   0930 A3                 2021 	inc	dptr
   0931 E0                 2022 	movx	a,@dptr
   0932 FB                 2023 	mov	r3,a
   0933 A3                 2024 	inc	dptr
   0934 E0                 2025 	movx	a,@dptr
   0935 FC                 2026 	mov	r4,a
   0936 A3                 2027 	inc	dptr
   0937 E0                 2028 	movx	a,@dptr
   0938 FD                 2029 	mov	r5,a
                           2030 ;	genAssign: resultIsFar = TRUE
   0939 90s00r00r03        2031 	mov	dptr,#_p
   093D EA                 2032 	mov	a,r2
   093E F0                 2033 	movx	@dptr,a
   093F A3                 2034 	inc	dptr
   0940 EB                 2035 	mov	a,r3
   0941 F0                 2036 	movx	@dptr,a
   0942 A3                 2037 	inc	dptr
   0943 EC                 2038 	mov	a,r4
   0944 F0                 2039 	movx	@dptr,a
   0945 A3                 2040 	inc	dptr
   0946 ED                 2041 	mov	a,r5
   0947 F0                 2042 	movx	@dptr,a
                           2043 ;	printf_large.c:446: charsOutputted = 0;
                           2044 ;	genAssign: resultIsFar = TRUE
   0948 90s00r00r0C        2045 	mov	dptr,#_charsOutputted
   094C E4                 2046 	clr	a
   094D F0                 2047 	movx	@dptr,a
   094E A3                 2048 	inc	dptr
   094F F0                 2049 	movx	@dptr,a
                           2050 ;	printf_large.c:449: if (format==0) {
   0950 90s00r00rA4        2051 	mov	dptr,#__print_format_PARM_3
                           2052 ;	genAssign: resultIsFar = FALSE
   0954 E0                 2053 	movx	a,@dptr
   0955 FA                 2054 	mov	r2,a
   0956 A3                 2055 	inc	dptr
   0957 E0                 2056 	movx	a,@dptr
   0958 FB                 2057 	mov	r3,a
   0959 A3                 2058 	inc	dptr
   095A E0                 2059 	movx	a,@dptr
   095B FC                 2060 	mov	r4,a
   095C A3                 2061 	inc	dptr
   095D E0                 2062 	movx	a,@dptr
   095E FD                 2063 	mov	r5,a
   095F EA                 2064 	mov	a,r2
   0960 4B                 2065 	orl	a,r3
   0961 4C                 2066 	orl	a,r4
   0962 70 13              2067 	jnz  00249$
   0964                    2068 00325$:
                           2069 ;	printf_large.c:450: format=NULL_STRING;
   0964 90s00r00rA4        2070 	mov	dptr,#__print_format_PARM_3
   0968 74r00              2071 	mov	a,#__str_0
   096A F0                 2072 	movx	@dptr,a
   096B A3                 2073 	inc	dptr
   096C 74s00              2074 	mov	a,#(__str_0 >> 8)
   096E F0                 2075 	movx	@dptr,a
   096F A3                 2076 	inc	dptr
   0970 74s00              2077 	mov	a,#(__str_0 >> 16)
   0972 F0                 2078 	movx	@dptr,a
   0973 A3                 2079 	inc	dptr
   0974 74 80              2080 	mov	a,#0x80
   0976 F0                 2081 	movx	@dptr,a
                           2082 ;	printf_large.c:454: while( c=*format++ )
   0977                    2083 00249$:
   0977                    2084 00238$:
   0977 90s00r00rA4        2085 	mov	dptr,#__print_format_PARM_3
                           2086 ;	genAssign: resultIsFar = FALSE
   097B E0                 2087 	movx	a,@dptr
   097C FA                 2088 	mov	r2,a
   097D A3                 2089 	inc	dptr
   097E E0                 2090 	movx	a,@dptr
   097F FB                 2091 	mov	r3,a
   0980 A3                 2092 	inc	dptr
   0981 E0                 2093 	movx	a,@dptr
   0982 FC                 2094 	mov	r4,a
   0983 A3                 2095 	inc	dptr
   0984 E0                 2096 	movx	a,@dptr
   0985 FD                 2097 	mov	r5,a
   0986 8A 82              2098 	mov	dpl,r2
   0988 8B 83              2099 	mov	dph,r3
   098A 8C 93              2100 	mov	dpx,r4
   098C 8D F0              2101 	mov	b,r5
   098E 12s00r00r00        2102 	lcall	__gptrget
   0992 FE                 2103 	mov	r6,a
   0993 90s00r00rA4        2104 	mov	dptr,#__print_format_PARM_3
   0997 74 01              2105 	mov	a,#0x01
   0999 2A                 2106 	add	a,r2
   099A F0                 2107 	movx	@dptr,a
   099B E4                 2108 	clr  a
   099C 3B                 2109 	addc	a,r3
   099D A3                 2110 	inc	dptr
   099E F0                 2111 	movx	@dptr,a
   099F E4                 2112 	clr  a
   09A0 3C                 2113 	addc	a,r4
   09A1 A3                 2114 	inc	dptr
   09A2 F0                 2115 	movx	@dptr,a
   09A3 A3                 2116 	inc	dptr
   09A4 ED                 2117 	mov	a,r5
   09A5 F0                 2118 	movx	@dptr,a
                           2119 ;	genAssign: resultIsFar = TRUE
   09A6 8E 02              2120 	mov	ar2,r6
   09A8 EE                 2121 	mov	a,r6
   09A9 70 04              2122 	jnz	00326$
   09AB 02s00r12rE5        2123 	ljmp	00240$
   09AF                    2124 00326$:
                           2125 ;	printf_large.c:456: if ( c=='%' )
   09AF EA                 2126 	mov	a,r2
   09B0 B4 25 02           2127 	cjne	a,#0x25,00327$
   09B3 80 04              2128 	sjmp	00328$
   09B5                    2129 00327$:
   09B5 02s00r12rDB        2130 	ljmp	00236$
   09B9                    2131 00328$:
                           2132 ;	printf_large.c:458: left_justify    = 0;
                           2133 ;	genAssign: resultIsFar = FALSE
   09B9 C2*06              2134 	clr	__print_format_left_justify_1_1
                           2135 ;	printf_large.c:459: zero_padding    = 0;
                           2136 ;	genAssign: resultIsFar = FALSE
   09BB C2*07              2137 	clr	__print_format_zero_padding_1_1
                           2138 ;	printf_large.c:460: prefix_sign     = 0;
                           2139 ;	genAssign: resultIsFar = FALSE
   09BD C2*08              2140 	clr	__print_format_prefix_sign_1_1
                           2141 ;	printf_large.c:461: prefix_space    = 0;
                           2142 ;	genAssign: resultIsFar = FALSE
   09BF C2*09              2143 	clr	__print_format_prefix_space_1_1
                           2144 ;	printf_large.c:462: signed_argument = 0;
                           2145 ;	genAssign: resultIsFar = FALSE
   09C1 C2*0A              2146 	clr	__print_format_signed_argument_1_1
                           2147 ;	printf_large.c:463: char_argument   = 0;
                           2148 ;	genAssign: resultIsFar = FALSE
   09C3 C2*0B              2149 	clr	__print_format_char_argument_1_1
                           2150 ;	printf_large.c:464: long_argument   = 0;
                           2151 ;	genAssign: resultIsFar = FALSE
   09C5 C2*0C              2152 	clr	__print_format_long_argument_1_1
                           2153 ;	printf_large.c:465: float_argument  = 0;
                           2154 ;	genAssign: resultIsFar = FALSE
   09C7 C2*0D              2155 	clr	__print_format_float_argument_1_1
                           2156 ;	printf_large.c:466: radix           = 0;
                           2157 ;	genAssign: resultIsFar = TRUE
   09C9 90s00r00rAC        2158 	mov	dptr,#__print_format_radix_1_1
                           2159 ;	printf_large.c:467: width           = 0;
                           2160 ;	genAssign: resultIsFar = TRUE
   09CD E4                 2161 	clr   a
   09CE F0                 2162 	movx  @dptr,a
   09CF 90s00r00rAD        2163 	mov   dptr,#__print_format_width_1_1
   09D3 F0                 2164 	movx  @dptr,a
                           2165 ;	printf_large.c:468: decimals        = -1;
                           2166 ;	genAssign: resultIsFar = TRUE
   09D4 7D FF              2167 	mov	r5,#0xFF
                           2168 ;	printf_large.c:470: get_conversion_spec:
   09D6 90s00r00rA4        2169 	mov	dptr,#__print_format_PARM_3
                           2170 ;	genAssign: resultIsFar = FALSE
   09DA E0                 2171 	movx	a,@dptr
   09DB FE                 2172 	mov	r6,a
   09DC A3                 2173 	inc	dptr
   09DD E0                 2174 	movx	a,@dptr
   09DE FF                 2175 	mov	r7,a
   09DF A3                 2176 	inc	dptr
   09E0 E0                 2177 	movx	a,@dptr
   09E1 F8                 2178 	mov	r0,a
   09E2 A3                 2179 	inc	dptr
   09E3 E0                 2180 	movx	a,@dptr
   09E4 F9                 2181 	mov	r1,a
   09E5                    2182 00103$:
                           2183 ;	printf_large.c:472: c = *format++;
   09E5 8E 82              2184 	mov	dpl,r6
   09E7 8F 83              2185 	mov	dph,r7
   09E9 88 93              2186 	mov	dpx,r0
   09EB 89 F0              2187 	mov	b,r1
   09ED 12s00r00r00        2188 	lcall	__gptrget
   09F1 FB                 2189 	mov	r3,a
   09F2 A3                 2190 	inc	dptr
   09F3 AE 82              2191 	mov	r6,dpl
   09F5 AF 83              2192 	mov	r7,dph
   09F7 A8 93              2193 	mov	r0,dpx
   09F9 A9 F0              2194 	mov	r1,b
                           2195 ;	genAssign: resultIsFar = TRUE
   09FB 90s00r00rA4        2196 	mov	dptr,#__print_format_PARM_3
   09FF EE                 2197 	mov	a,r6
   0A00 F0                 2198 	movx	@dptr,a
   0A01 A3                 2199 	inc	dptr
   0A02 EF                 2200 	mov	a,r7
   0A03 F0                 2201 	movx	@dptr,a
   0A04 A3                 2202 	inc	dptr
   0A05 E8                 2203 	mov	a,r0
   0A06 F0                 2204 	movx	@dptr,a
   0A07 A3                 2205 	inc	dptr
   0A08 E9                 2206 	mov	a,r1
   0A09 F0                 2207 	movx	@dptr,a
                           2208 ;	genAssign: resultIsFar = TRUE
   0A0A 8B 02              2209 	mov	ar2,r3
                           2210 ;	printf_large.c:474: if (c=='%') {
   0A0C EA                 2211 	mov	a,r2
   0A0D B4 25 0A           2212 	cjne a,#0x25,00105$
   0A10                    2213 00330$:
                           2214 ;	printf_large.c:475: OUTPUT_CHAR(c, p);
   0A10 8A 82              2215 	mov	dpl,r2
   0A12 12s00r00r00        2216 	lcall	__output_char
                           2217 ;	printf_large.c:476: continue;
   0A16 02s00r09r77        2218 	ljmp	00238$
   0A1A                    2219 00105$:
                           2220 ;	printf_large.c:479: if (isdigit(c)) {
                           2221 ;	genAssign: resultIsFar = FALSE
   0A1A 8A 03              2222 	mov	ar3,r2
   0A1C BB 30 00           2223 	cjne	r3,#0x30,00331$
   0A1F                    2224 00331$:
   0A1F 40 45              2225 	jc   00112$
   0A21                    2226 00332$:
                           2227 ;	genAssign: resultIsFar = FALSE
   0A21 8A 03              2228 	mov	ar3,r2
   0A23 C3                 2229 	clr	c
   0A24 74 39              2230 	mov	a,#0x39
   0A26 9B                 2231 	subb	a,r3
   0A27 40 3D              2232 	jc   00112$
   0A29                    2233 00333$:
                           2234 ;	printf_large.c:480: if (decimals==-1) {
   0A29 ED                 2235 	mov	a,r5
   0A2A B4 FF 1D           2236 	cjne a,#0xFF,00109$
   0A2D                    2237 00335$:
                           2238 ;	printf_large.c:481: width = 10*width + c - '0';
   0A2D 90s00r00rAD        2239 	mov	dptr,#__print_format_width_1_1
   0A31 75 F0 0A           2240 	mov	b,#0x0A
   0A34 E0                 2241 	movx	a,@dptr
   0A35 A4                 2242 	mul	ab
   0A36 2A                 2243 	add	a,r2
   0A37 FB                 2244 	mov  r3,a
   0A38 24 D0              2245 	add	a,#0xD0
                           2246 ;	genAssign: resultIsFar = TRUE
   0A3A 90s00r00rAD        2247 	mov	dptr,#__print_format_width_1_1
   0A3E F0                 2248 	movx	@dptr,a
                           2249 ;	printf_large.c:482: if (width == 0) {
   0A3F 90s00r00rAD        2250 	mov	dptr,#__print_format_width_1_1
   0A43 E0                 2251 	movx	a,@dptr
   0A44 70 9F              2252 	jnz  00103$
   0A46                    2253 00336$:
                           2254 ;	printf_large.c:484: zero_padding = 1;
                           2255 ;	genAssign: resultIsFar = FALSE
   0A46 D2*07              2256 	setb	__print_format_zero_padding_1_1
   0A48 80 9B              2257 	sjmp 00103$
   0A4A                    2258 00109$:
                           2259 ;	printf_large.c:487: decimals = 10*decimals + c - '0';
   0A4A C2 D5              2260 	clr	F0
   0A4C 75 F0 0A           2261 	mov	b,#0x0A
   0A4F ED                 2262 	mov	a,r5
   0A50 30 E7 04           2263 	jnb	acc.7,00337$
   0A53 B2 D5              2264 	cpl	F0
   0A55 F4                 2265 	cpl	a
   0A56 04                 2266 	inc	a
   0A57                    2267 00337$:
   0A57 A4                 2268 	mul	ab
   0A58 30 D5 02           2269 	jnb	F0,00338$
   0A5B F4                 2270 	cpl	a
   0A5C 04                 2271 	inc	a
   0A5D                    2272 00338$:
   0A5D 2A                 2273 	add	a,r2
   0A5E FB                 2274 	mov  r3,a
   0A5F 24 D0              2275 	add	a,#0xD0
                           2276 ;	genAssign: resultIsFar = TRUE
   0A61 FD                 2277 	mov	r5,a
                           2278 ;	printf_large.c:489: goto get_conversion_spec;
   0A62 02s00r09rE5        2279 	ljmp	00103$
   0A66                    2280 00112$:
                           2281 ;	printf_large.c:492: if (c=='.') {
   0A66 EA                 2282 	mov	a,r2
   0A67 B4 2E 10           2283 	cjne a,#0x2E,00117$
   0A6A                    2284 00340$:
                           2285 ;	printf_large.c:493: if (decimals==-1) decimals=0;
   0A6A ED                 2286 	mov	a,r5
   0A6B B4 FF 02           2287 	cjne	a,#0xFF,00341$
   0A6E 80 04              2288 	sjmp	00342$
   0A70                    2289 00341$:
   0A70 02s00r09rE5        2290 	ljmp	00103$
   0A74                    2291 00342$:
                           2292 ;	genAssign: resultIsFar = TRUE
   0A74 7D 00              2293 	mov	r5,#0x00
                           2294 ;	printf_large.c:496: goto get_conversion_spec;
   0A76 02s00r09rE5        2295 	ljmp	00103$
   0A7A                    2296 00117$:
                           2297 ;	printf_large.c:499: if (islower(c))
                           2298 ;	genAssign: resultIsFar = FALSE
   0A7A 8A 03              2299 	mov	ar3,r2
   0A7C BB 61 00           2300 	cjne	r3,#0x61,00343$
   0A7F                    2301 00343$:
   0A7F 40 0F              2302 	jc   00119$
   0A81                    2303 00344$:
                           2304 ;	genAssign: resultIsFar = FALSE
   0A81 8A 03              2305 	mov	ar3,r2
   0A83 C3                 2306 	clr	c
   0A84 74 7A              2307 	mov	a,#0x7A
   0A86 9B                 2308 	subb	a,r3
   0A87 40 07              2309 	jc   00119$
   0A89                    2310 00345$:
                           2311 ;	printf_large.c:501: c = toupper(c);
   0A89 53 02 DF           2312 	anl	ar2,#0xDF
                           2313 ;	printf_large.c:502: lower_case = 1;
                           2314 ;	genAssign: resultIsFar = FALSE
   0A8C D2*00              2315 	setb	_lower_case
   0A8E 80 02              2316 	sjmp 00120$
   0A90                    2317 00119$:
                           2318 ;	printf_large.c:505: lower_case = 0;
                           2319 ;	genAssign: resultIsFar = FALSE
   0A90 C2*00              2320 	clr	_lower_case
   0A92                    2321 00120$:
                           2322 ;	printf_large.c:507: switch( c )
   0A92 EA                 2323 	mov	a,r2
   0A93 B4 20 02           2324 	cjne	a,#0x20,00346$
   0A96 80 6E              2325 	sjmp 00124$
   0A98                    2326 00346$:
   0A98 EA                 2327 	mov	a,r2
   0A99 B4 2B 02           2328 	cjne	a,#0x2B,00347$
   0A9C 80 62              2329 	sjmp 00123$
   0A9E                    2330 00347$:
   0A9E EA                 2331 	mov	a,r2
   0A9F B4 2D 02           2332 	cjne	a,#0x2D,00348$
   0AA2 80 56              2333 	sjmp 00122$
   0AA4                    2334 00348$:
   0AA4 EA                 2335 	mov	a,r2
   0AA5 B4 42 02           2336 	cjne	a,#0x42,00349$
   0AA8 80 62              2337 	sjmp 00125$
   0AAA                    2338 00349$:
   0AAA EA                 2339 	mov	a,r2
   0AAB B4 43 02           2340 	cjne	a,#0x43,00350$
   0AAE 80 68              2341 	sjmp 00127$
   0AB0                    2342 00350$:
   0AB0 EA                 2343 	mov	a,r2
   0AB1 B4 44 04           2344 	cjne	a,#0x44,00351$
   0AB4 02s00r0Er48        2345 	ljmp	00164$
   0AB8                    2346 00351$:
   0AB8 EA                 2347 	mov	a,r2
   0AB9 B4 46 04           2348 	cjne	a,#0x46,00352$
   0ABC 02s00r0Er6E        2349 	ljmp	00168$
   0AC0                    2350 00352$:
   0AC0 EA                 2351 	mov	a,r2
   0AC1 B4 49 04           2352 	cjne	a,#0x49,00353$
   0AC4 02s00r0Er48        2353 	ljmp	00164$
   0AC8                    2354 00353$:
   0AC8 EA                 2355 	mov	a,r2
   0AC9 B4 4C 02           2356 	cjne	a,#0x4C,00354$
   0ACC 80 44              2357 	sjmp 00126$
   0ACE                    2358 00354$:
   0ACE EA                 2359 	mov	a,r2
   0ACF B4 4F 04           2360 	cjne	a,#0x4F,00355$
   0AD2 02s00r0Er53        2361 	ljmp	00165$
   0AD6                    2362 00355$:
   0AD6 EA                 2363 	mov	a,r2
   0AD7 B4 50 04           2364 	cjne	a,#0x50,00356$
   0ADA 02s00r0Dr76        2365 	ljmp	00153$
   0ADE                    2366 00356$:
   0ADE EA                 2367 	mov	a,r2
   0ADF B4 53 04           2368 	cjne	a,#0x53,00357$
   0AE2 02s00r0Br9C        2369 	ljmp	00131$
   0AE6                    2370 00357$:
   0AE6 EA                 2371 	mov	a,r2
   0AE7 B4 55 04           2372 	cjne	a,#0x55,00358$
   0AEA 02s00r0Er5C        2373 	ljmp	00166$
   0AEE                    2374 00358$:
   0AEE EA                 2375 	mov	a,r2
   0AEF B4 58 04           2376 	cjne	a,#0x58,00359$
   0AF2 02s00r0Er65        2377 	ljmp	00167$
   0AF6                    2378 00359$:
   0AF6 02s00r0Er72        2379 	ljmp	00169$
                           2380 ;	printf_large.c:509: case '-':
   0AFA                    2381 00122$:
                           2382 ;	printf_large.c:510: left_justify = 1;
                           2383 ;	genAssign: resultIsFar = FALSE
   0AFA D2*06              2384 	setb	__print_format_left_justify_1_1
                           2385 ;	printf_large.c:511: goto get_conversion_spec;
   0AFC 02s00r09rE5        2386 	ljmp	00103$
                           2387 ;	printf_large.c:512: case '+':
   0B00                    2388 00123$:
                           2389 ;	printf_large.c:513: prefix_sign = 1;
                           2390 ;	genAssign: resultIsFar = FALSE
   0B00 D2*08              2391 	setb	__print_format_prefix_sign_1_1
                           2392 ;	printf_large.c:514: goto get_conversion_spec;
   0B02 02s00r09rE5        2393 	ljmp	00103$
                           2394 ;	printf_large.c:515: case ' ':
   0B06                    2395 00124$:
                           2396 ;	printf_large.c:516: prefix_space = 1;
                           2397 ;	genAssign: resultIsFar = FALSE
   0B06 D2*09              2398 	setb	__print_format_prefix_space_1_1
                           2399 ;	printf_large.c:517: goto get_conversion_spec;
   0B08 02s00r09rE5        2400 	ljmp	00103$
                           2401 ;	printf_large.c:518: case 'B':
   0B0C                    2402 00125$:
                           2403 ;	printf_large.c:519: char_argument = 1;
                           2404 ;	genAssign: resultIsFar = FALSE
   0B0C D2*0B              2405 	setb	__print_format_char_argument_1_1
                           2406 ;	printf_large.c:520: goto get_conversion_spec;
   0B0E 02s00r09rE5        2407 	ljmp	00103$
                           2408 ;	printf_large.c:521: case 'L':
   0B12                    2409 00126$:
                           2410 ;	printf_large.c:522: long_argument = 1;
                           2411 ;	genAssign: resultIsFar = FALSE
   0B12 D2*0C              2412 	setb	__print_format_long_argument_1_1
                           2413 ;	printf_large.c:523: goto get_conversion_spec;
   0B14 02s00r09rE5        2414 	ljmp	00103$
                           2415 ;	printf_large.c:525: case 'C':
   0B18                    2416 00127$:
                           2417 ;	printf_large.c:526: if( char_argument )
   0B18 30*0B 38           2418 	jnb  __print_format_char_argument_1_1,00129$
   0B1B                    2419 00360$:
                           2420 ;	printf_large.c:527: c = va_arg(ap,char);
   0B1B 90s00r00rA8        2421 	mov	dptr,#__print_format_PARM_4
                           2422 ;	genAssign: resultIsFar = FALSE
   0B1F E0                 2423 	movx	a,@dptr
   0B20 FE                 2424 	mov	r6,a
   0B21 A3                 2425 	inc	dptr
   0B22 E0                 2426 	movx	a,@dptr
   0B23 FF                 2427 	mov	r7,a
   0B24 A3                 2428 	inc	dptr
   0B25 E0                 2429 	movx	a,@dptr
   0B26 F8                 2430 	mov	r0,a
   0B27 A3                 2431 	inc	dptr
   0B28 E0                 2432 	movx	a,@dptr
   0B29 F9                 2433 	mov	r1,a
   0B2A 1E                 2434 	dec	r6
   0B2B BE FF 05           2435 	cjne	r6,#0xFF,00361$
   0B2E 1F                 2436 	dec	r7
   0B2F BF FF 01           2437 	cjne	r7,#0xFF,00361$
   0B32 18                 2438 	dec	r0
   0B33                    2439 00361$:
                           2440 ;	genAssign: resultIsFar = TRUE
   0B33 90s00r00rA8        2441 	mov	dptr,#__print_format_PARM_4
   0B37 EE                 2442 	mov	a,r6
   0B38 F0                 2443 	movx	@dptr,a
   0B39 A3                 2444 	inc	dptr
   0B3A EF                 2445 	mov	a,r7
   0B3B F0                 2446 	movx	@dptr,a
   0B3C A3                 2447 	inc	dptr
   0B3D E8                 2448 	mov	a,r0
   0B3E F0                 2449 	movx	@dptr,a
   0B3F A3                 2450 	inc	dptr
   0B40 E9                 2451 	mov	a,r1
   0B41 F0                 2452 	movx	@dptr,a
   0B42 8E 82              2453 	mov	dpl,r6
   0B44 8F 83              2454 	mov	dph,r7
   0B46 88 93              2455 	mov	dpx,r0
   0B48 89 F0              2456 	mov	b,r1
   0B4A 12s00r00r00        2457 	lcall	__gptrget
   0B4E FE                 2458 	mov	r6,a
                           2459 ;	genAssign: resultIsFar = TRUE
   0B4F 8E 02              2460 	mov	ar2,r6
   0B51 80 3B              2461 	sjmp 00130$
   0B53                    2462 00129$:
                           2463 ;	printf_large.c:529: c = va_arg(ap,int);
   0B53 90s00r00rA8        2464 	mov	dptr,#__print_format_PARM_4
                           2465 ;	genAssign: resultIsFar = FALSE
   0B57 E0                 2466 	movx	a,@dptr
   0B58 FE                 2467 	mov	r6,a
   0B59 A3                 2468 	inc	dptr
   0B5A E0                 2469 	movx	a,@dptr
   0B5B FF                 2470 	mov	r7,a
   0B5C A3                 2471 	inc	dptr
   0B5D E0                 2472 	movx	a,@dptr
   0B5E F8                 2473 	mov	r0,a
   0B5F A3                 2474 	inc	dptr
   0B60 E0                 2475 	movx	a,@dptr
   0B61 F9                 2476 	mov	r1,a
   0B62 EE                 2477 	mov	a,r6
   0B63 24 FE              2478 	add	a,#0xFE
   0B65 FE                 2479 	mov	r6,a
   0B66 EF                 2480 	mov	a,r7
   0B67 34 FF              2481 	addc	a,#0xFF
   0B69 FF                 2482 	mov	r7,a
   0B6A E8                 2483 	mov	a,r0
   0B6B 34 FF              2484 	addc	a,#0xFF
   0B6D F8                 2485 	mov	r0,a
                           2486 ;	genAssign: resultIsFar = TRUE
   0B6E 90s00r00rA8        2487 	mov	dptr,#__print_format_PARM_4
   0B72 EE                 2488 	mov	a,r6
   0B73 F0                 2489 	movx	@dptr,a
   0B74 A3                 2490 	inc	dptr
   0B75 EF                 2491 	mov	a,r7
   0B76 F0                 2492 	movx	@dptr,a
   0B77 A3                 2493 	inc	dptr
   0B78 E8                 2494 	mov	a,r0
   0B79 F0                 2495 	movx	@dptr,a
   0B7A A3                 2496 	inc	dptr
   0B7B E9                 2497 	mov	a,r1
   0B7C F0                 2498 	movx	@dptr,a
   0B7D 8E 82              2499 	mov	dpl,r6
   0B7F 8F 83              2500 	mov	dph,r7
   0B81 88 93              2501 	mov	dpx,r0
   0B83 89 F0              2502 	mov	b,r1
   0B85 12s00r00r00        2503 	lcall	__gptrgetWord
   0B89 FE                 2504 	mov	r6,a
   0B8A AF 9C              2505 	mov	r7,_ap
   0B8C 8E 02              2506 	mov	ar2,r6
   0B8E                    2507 00130$:
                           2508 ;	printf_large.c:530: OUTPUT_CHAR( c, p );
   0B8E C0 05              2509 	push	ar5
   0B90 8A 82              2510 	mov	dpl,r2
   0B92 12s00r00r00        2511 	lcall	__output_char
   0B96 D0 05              2512 	pop	ar5
                           2513 ;	printf_large.c:531: break;
   0B98 02s00r0Er84        2514 	ljmp	00170$
                           2515 ;	printf_large.c:533: case 'S':
   0B9C                    2516 00131$:
                           2517 ;	printf_large.c:534: PTR = va_arg(ap,ptr_t);
   0B9C 90s00r00rA8        2518 	mov	dptr,#__print_format_PARM_4
                           2519 ;	genAssign: resultIsFar = FALSE
   0BA0 E0                 2520 	movx	a,@dptr
   0BA1 FE                 2521 	mov	r6,a
   0BA2 A3                 2522 	inc	dptr
   0BA3 E0                 2523 	movx	a,@dptr
   0BA4 FF                 2524 	mov	r7,a
   0BA5 A3                 2525 	inc	dptr
   0BA6 E0                 2526 	movx	a,@dptr
   0BA7 F8                 2527 	mov	r0,a
   0BA8 A3                 2528 	inc	dptr
   0BA9 E0                 2529 	movx	a,@dptr
   0BAA F9                 2530 	mov	r1,a
   0BAB EE                 2531 	mov	a,r6
   0BAC 24 FC              2532 	add	a,#0xFC
   0BAE FE                 2533 	mov	r6,a
   0BAF EF                 2534 	mov	a,r7
   0BB0 34 FF              2535 	addc	a,#0xFF
   0BB2 FF                 2536 	mov	r7,a
   0BB3 E8                 2537 	mov	a,r0
   0BB4 34 FF              2538 	addc	a,#0xFF
   0BB6 F8                 2539 	mov	r0,a
                           2540 ;	genAssign: resultIsFar = TRUE
   0BB7 90s00r00rA8        2541 	mov	dptr,#__print_format_PARM_4
   0BBB EE                 2542 	mov	a,r6
   0BBC F0                 2543 	movx	@dptr,a
   0BBD A3                 2544 	inc	dptr
   0BBE EF                 2545 	mov	a,r7
   0BBF F0                 2546 	movx	@dptr,a
   0BC0 A3                 2547 	inc	dptr
   0BC1 E8                 2548 	mov	a,r0
   0BC2 F0                 2549 	movx	@dptr,a
   0BC3 A3                 2550 	inc	dptr
   0BC4 E9                 2551 	mov	a,r1
   0BC5 F0                 2552 	movx	@dptr,a
   0BC6 8E 82              2553 	mov	dpl,r6
   0BC8 8F 83              2554 	mov	dph,r7
   0BCA 88 93              2555 	mov	dpx,r0
   0BCC 89 F0              2556 	mov	b,r1
   0BCE 12s00r00r00        2557 	lcall	__gptrgetWord
   0BD2 FE                 2558 	mov	r6,a
   0BD3 AF 9C              2559 	mov	r7,_ap
   0BD5 A3                 2560 	inc	dptr
   0BD6 12s00r00r00        2561 	lcall	__gptrgetWord
   0BDA F8                 2562 	mov	r0,a
   0BDB A9 9C              2563 	mov	r1,_ap
   0BDD 90s00r00r07        2564 	mov	dptr,#_value
   0BE1 EE                 2565 	mov	a,r6
   0BE2 F0                 2566 	movx	@dptr,a
   0BE3 A3                 2567 	inc	dptr
   0BE4 EF                 2568 	mov	a,r7
   0BE5 F0                 2569 	movx	@dptr,a
   0BE6 A3                 2570 	inc	dptr
   0BE7 E8                 2571 	mov	a,r0
   0BE8 F0                 2572 	movx	@dptr,a
   0BE9 A3                 2573 	inc	dptr
   0BEA E9                 2574 	mov	a,r1
   0BEB F0                 2575 	movx	@dptr,a
                           2576 ;	printf_large.c:537: if (PTR==0) {
   0BEC EE                 2577 	mov	a,r6
   0BED 4F                 2578 	orl	a,r7
   0BEE 48                 2579 	orl	a,r0
   0BEF 70 1C              2580 	jnz  00133$
   0BF1                    2581 00362$:
                           2582 ;	printf_large.c:538: PTR=NULL_STRING;
   0BF1 90s00r00r07        2583 	mov	dptr,#_value
   0BF5 74r00              2584 	mov	a,#__str_0
   0BF7 F0                 2585 	movx	@dptr,a
   0BF8 A3                 2586 	inc	dptr
   0BF9 74s00              2587 	mov	a,#(__str_0 >> 8)
   0BFB F0                 2588 	movx	@dptr,a
   0BFC A3                 2589 	inc	dptr
   0BFD 74s00              2590 	mov	a,#(__str_0 >> 16)
   0BFF F0                 2591 	movx	@dptr,a
   0C00 A3                 2592 	inc	dptr
   0C01 74 80              2593 	mov	a,#0x80
   0C03 F0                 2594 	movx	@dptr,a
                           2595 ;	printf_large.c:539: length=NULL_STRING_LENGTH;
                           2596 ;	genAssign: resultIsFar = TRUE
   0C04 90s00r00rAE        2597 	mov	dptr,#__print_format_length_1_1
   0C08 74 06              2598 	mov	a,#0x06
   0C0A F0                 2599 	movx	@dptr,a
   0C0B 80 29              2600 	sjmp 00134$
   0C0D                    2601 00133$:
                           2602 ;	printf_large.c:541: length = strlen(PTR);
   0C0D 90s00r00r07        2603 	mov	dptr,#_value
   0C11 E0                 2604 	movx	a,@dptr
   0C12 A3                 2605 	inc	dptr
   0C13 FF                 2606 	mov	r7,a
   0C14 E0                 2607 	movx	a,@dptr
   0C15 A3                 2608 	inc	dptr
   0C16 F8                 2609 	mov	r0,a
   0C17 E0                 2610 	movx	a,@dptr
   0C18 A3                 2611 	inc	dptr
   0C19 F9                 2612 	mov	r1,a
   0C1A E0                 2613 	movx	a,@dptr
   0C1B FB                 2614 	mov	r3,a
   0C1C C0 05              2615 	push	ar5
   0C1E 8F 82              2616 	mov	dpl,r7
   0C20 88 83              2617 	mov	dph,r0
   0C22 89 93              2618 	mov	dpx,r1
   0C24 8B F0              2619 	mov	b,r3
   0C26 12s00r00r00        2620 	lcall	_strlen
   0C2A AB 82              2621 	mov	r3,dpl
   0C2C AF 83              2622 	mov	r7,dph
   0C2E D0 05              2623 	pop	ar5
   0C30 90s00r00rAE        2624 	mov	dptr,#__print_format_length_1_1
   0C34 EB                 2625 	mov	a,r3
   0C35 F0                 2626 	movx	@dptr,a
                           2627 ;	printf_large.c:828: return charsOutputted;
                           2628 ;	printf_large.c:541: length = strlen(PTR);
   0C36                    2629 00134$:
                           2630 ;	printf_large.c:546: if ( decimals == -1 )
   0C36 ED                 2631 	mov	a,r5
   0C37 B4 FF 06           2632 	cjne a,#0xFF,00136$
   0C3A                    2633 00364$:
                           2634 ;	printf_large.c:548: decimals = length;
   0C3A 90s00r00rAE        2635 	mov	dptr,#__print_format_length_1_1
                           2636 ;	genAssign: resultIsFar = TRUE
   0C3E E0                 2637 	movx	a,@dptr
   0C3F FD                 2638 	mov	r5,a
   0C40                    2639 00136$:
                           2640 ;	printf_large.c:550: if ( ( !left_justify ) && (length < width) )
   0C40 20*06 61           2641 	jb   __print_format_left_justify_1_1,00282$
   0C43                    2642 00365$:
   0C43 90s00r00rAD        2643 	mov	dptr,#__print_format_width_1_1
   0C47 75 86 01           2644 	mov	dps, #1
   0C4A 90s00r00rAE        2645 	mov	dptr, #__print_format_length_1_1
   0C4E 15 86              2646 	dec	dps
   0C50 C3                 2647 	clr	c
   0C51 75 86 01           2648 	mov	dps,#1
   0C54 E0                 2649 	movx	a,@dptr
   0C55 75 86 00           2650 	mov	dps,#0
   0C58 C5 F0              2651 	xch	a, b
   0C5A E0                 2652 	movx	a,@dptr
   0C5B C5 F0              2653 	xch	a, b
   0C5D 95 F0              2654 	subb	a,b
   0C5F 50 43              2655 	jnc  00282$
   0C61                    2656 00366$:
                           2657 ;	printf_large.c:552: width -= length;
   0C61 90s00r00rAE        2658 	mov	dptr,#__print_format_length_1_1
   0C65 75 86 01           2659 	mov	dps, #1
   0C68 90s00r00rAD        2660 	mov	dptr, #__print_format_width_1_1
   0C6C 15 86              2661 	dec	dps
   0C6E C3                 2662 	clr	c
   0C6F E0                 2663 	movx	a,@dptr
   0C70 F5 F0              2664 	mov	b,a
   0C72 05 86              2665 	inc	dps
   0C74 E0                 2666 	movx	a,@dptr
   0C75 95 F0              2667 	subb	a,b
   0C77 F0                 2668 	movx	@dptr,a
   0C78 75 86 00           2669 	mov	dps,#0
                           2670 ;	printf_large.c:553: while( width-- != 0 )
   0C7B 90s00r00rAD        2671 	mov	dptr,#__print_format_width_1_1
                           2672 ;	genAssign: resultIsFar = FALSE
   0C7F E0                 2673 	movx	a,@dptr
   0C80 FF                 2674 	mov	r7,a
   0C81                    2675 00137$:
                           2676 ;	genAssign: resultIsFar = FALSE
   0C81 8F 00              2677 	mov	ar0,r7
   0C83 1F                 2678 	dec	r7
                           2679 ;	genAssign: resultIsFar = TRUE
   0C84 90s00r00rAD        2680 	mov	dptr,#__print_format_width_1_1
   0C88 EF                 2681 	mov	a,r7
   0C89 F0                 2682 	movx	@dptr,a
   0C8A E8                 2683 	mov	a,r0
   0C8B 60 11              2684 	jz  00318$
   0C8D                    2685 00367$:
                           2686 ;	printf_large.c:555: OUTPUT_CHAR( ' ', p );
   0C8D C0 05              2687 	push	ar5
   0C8F C0 07              2688 	push	ar7
   0C91 75 82 20           2689 	mov	dpl,#0x20
   0C94 12s00r00r00        2690 	lcall	__output_char
   0C98 D0 07              2691 	pop	ar7
   0C9A D0 05              2692 	pop	ar5
                           2693 ;	printf_large.c:559: while ( (c = *PTR)  && (decimals-- > 0))
   0C9C 80 E3              2694 	sjmp 00137$
   0C9E                    2695 00318$:
                           2696 ;	genAssign: resultIsFar = TRUE
   0C9E 90s00r00rAD        2697 	mov	dptr,#__print_format_width_1_1
   0CA2 EF                 2698 	mov	a,r7
   0CA3 F0                 2699 	movx	@dptr,a
   0CA4                    2700 00282$:
                           2701 ;	genAssign: resultIsFar = FALSE
   0CA4 8D 07              2702 	mov	ar7,r5
   0CA6                    2703 00144$:
   0CA6 90s00r00r07        2704 	mov	dptr,#_value
   0CAA E0                 2705 	movx	a,@dptr
   0CAB A3                 2706 	inc	dptr
   0CAC F8                 2707 	mov	r0,a
   0CAD E0                 2708 	movx	a,@dptr
   0CAE A3                 2709 	inc	dptr
   0CAF F9                 2710 	mov	r1,a
   0CB0 E0                 2711 	movx	a,@dptr
   0CB1 A3                 2712 	inc	dptr
   0CB2 FB                 2713 	mov	r3,a
   0CB3 E0                 2714 	movx	a,@dptr
   0CB4 FE                 2715 	mov	r6,a
   0CB5 88 82              2716 	mov	dpl,r0
   0CB7 89 83              2717 	mov	dph,r1
   0CB9 8B 93              2718 	mov	dpx,r3
   0CBB 8E F0              2719 	mov	b,r6
   0CBD 12s00r00r00        2720 	lcall	__gptrget
                           2721 ;	genAssign: resultIsFar = TRUE
   0CC1 F8                 2722 	mov  r0,a
   0CC2 88 02              2723 	mov  ar2,r0 
   0CC4 60 44              2724 	jz  00319$
   0CC6                    2725 00368$:
                           2726 ;	genAssign: resultIsFar = FALSE
   0CC6 8F 06              2727 	mov	ar6,r7
   0CC8 1F                 2728 	dec	r7
                           2729 ;	genAssign: resultIsFar = TRUE
   0CC9 8F 05              2730 	mov	ar5,r7
   0CCB C3                 2731 	clr	c
   0CCC 74 80              2732 	mov  a,#(0x00 ^ 0x80)
   0CCE 8E F0              2733 	mov	b,r6
   0CD0 63 F0 80           2734 	xrl	b,#0x80
   0CD3 95 F0              2735 	subb	a,b
   0CD5 50 33              2736 	jnc  00319$
   0CD7                    2737 00369$:
                           2738 ;	printf_large.c:561: OUTPUT_CHAR( c, p );
   0CD7 C0 07              2739 	push	ar7
   0CD9 8A 82              2740 	mov	dpl,r2
   0CDB 12s00r00r00        2741 	lcall	__output_char
   0CDF D0 07              2742 	pop	ar7
                           2743 ;	printf_large.c:562: PTR++;
   0CE1 90s00r00r07        2744 	mov	dptr,#_value
   0CE5 E0                 2745 	movx	a,@dptr
   0CE6 A3                 2746 	inc	dptr
   0CE7 FE                 2747 	mov	r6,a
   0CE8 E0                 2748 	movx	a,@dptr
   0CE9 A3                 2749 	inc	dptr
   0CEA F8                 2750 	mov	r0,a
   0CEB E0                 2751 	movx	a,@dptr
   0CEC A3                 2752 	inc	dptr
   0CED F9                 2753 	mov	r1,a
   0CEE E0                 2754 	movx	a,@dptr
   0CEF FB                 2755 	mov	r3,a
   0CF0 0E                 2756 	inc	r6
   0CF1 BE 00 05           2757 	cjne	r6,#0,00370$
   0CF4 08                 2758 	inc	r0
   0CF5 B8 00 01           2759 	cjne	r0,#0,00370$
   0CF8 09                 2760 	inc	r1
   0CF9                    2761 00370$:
   0CF9 90s00r00r07        2762 	mov	dptr,#_value
   0CFD EE                 2763 	mov	a,r6
   0CFE F0                 2764 	movx	@dptr,a
   0CFF A3                 2765 	inc	dptr
   0D00 E8                 2766 	mov	a,r0
   0D01 F0                 2767 	movx	@dptr,a
   0D02 A3                 2768 	inc	dptr
   0D03 E9                 2769 	mov	a,r1
   0D04 F0                 2770 	movx	@dptr,a
   0D05 A3                 2771 	inc	dptr
   0D06 EB                 2772 	mov	a,r3
   0D07 F0                 2773 	movx	@dptr,a
   0D08 80 9C              2774 	sjmp 00144$
   0D0A                    2775 00319$:
                           2776 ;	genAssign: resultIsFar = TRUE
   0D0A 8F 05              2777 	mov	ar5,r7
                           2778 ;	printf_large.c:565: if ( left_justify && (length < width))
   0D0C 20*06 04           2779 	jb	__print_format_left_justify_1_1,00371$
   0D0F 02s00r0Er84        2780 	ljmp	00170$
   0D13                    2781 00371$:
   0D13 90s00r00rAD        2782 	mov	dptr,#__print_format_width_1_1
   0D17 75 86 01           2783 	mov	dps, #1
   0D1A 90s00r00rAE        2784 	mov	dptr, #__print_format_length_1_1
   0D1E 15 86              2785 	dec	dps
   0D20 C3                 2786 	clr	c
   0D21 75 86 01           2787 	mov	dps,#1
   0D24 E0                 2788 	movx	a,@dptr
   0D25 75 86 00           2789 	mov	dps,#0
   0D28 C5 F0              2790 	xch	a, b
   0D2A E0                 2791 	movx	a,@dptr
   0D2B C5 F0              2792 	xch	a, b
   0D2D 95 F0              2793 	subb	a,b
   0D2F 40 04              2794 	jc	00372$
   0D31 02s00r0Er84        2795 	ljmp	00170$
   0D35                    2796 00372$:
                           2797 ;	printf_large.c:567: width -= length;
   0D35 90s00r00rAE        2798 	mov	dptr,#__print_format_length_1_1
   0D39 75 86 01           2799 	mov	dps, #1
   0D3C 90s00r00rAD        2800 	mov	dptr, #__print_format_width_1_1
   0D40 15 86              2801 	dec	dps
   0D42 C3                 2802 	clr	c
   0D43 E0                 2803 	movx	a,@dptr
   0D44 F5 F0              2804 	mov	b,a
   0D46 05 86              2805 	inc	dps
   0D48 E0                 2806 	movx	a,@dptr
   0D49 95 F0              2807 	subb	a,b
   0D4B F0                 2808 	movx	@dptr,a
   0D4C 75 86 00           2809 	mov	dps,#0
                           2810 ;	printf_large.c:568: while( width-- != 0 )
   0D4F 90s00r00rAD        2811 	mov	dptr,#__print_format_width_1_1
                           2812 ;	genAssign: resultIsFar = FALSE
   0D53 E0                 2813 	movx	a,@dptr
   0D54 FE                 2814 	mov	r6,a
   0D55                    2815 00147$:
                           2816 ;	genAssign: resultIsFar = FALSE
   0D55 8E 07              2817 	mov	ar7,r6
   0D57 1E                 2818 	dec	r6
                           2819 ;	genAssign: resultIsFar = TRUE
   0D58 90s00r00rAD        2820 	mov	dptr,#__print_format_width_1_1
   0D5C EE                 2821 	mov	a,r6
   0D5D F0                 2822 	movx	@dptr,a
   0D5E EF                 2823 	mov	a,r7
   0D5F 70 04              2824 	jnz	00373$
   0D61 02s00r0Er7E        2825 	ljmp	00320$
   0D65                    2826 00373$:
                           2827 ;	printf_large.c:570: OUTPUT_CHAR( ' ', p );
   0D65 C0 05              2828 	push	ar5
   0D67 C0 06              2829 	push	ar6
   0D69 75 82 20           2830 	mov	dpl,#0x20
   0D6C 12s00r00r00        2831 	lcall	__output_char
   0D70 D0 06              2832 	pop	ar6
   0D72 D0 05              2833 	pop	ar5
                           2834 ;	printf_large.c:575: case 'P':
   0D74 80 DF              2835 	sjmp 00147$
   0D76                    2836 00153$:
                           2837 ;	printf_large.c:576: PTR = va_arg(ap,ptr_t);
   0D76 90s00r00rA8        2838 	mov	dptr,#__print_format_PARM_4
                           2839 ;	genAssign: resultIsFar = FALSE
   0D7A E0                 2840 	movx	a,@dptr
   0D7B FF                 2841 	mov	r7,a
   0D7C A3                 2842 	inc	dptr
   0D7D E0                 2843 	movx	a,@dptr
   0D7E F8                 2844 	mov	r0,a
   0D7F A3                 2845 	inc	dptr
   0D80 E0                 2846 	movx	a,@dptr
   0D81 F9                 2847 	mov	r1,a
   0D82 A3                 2848 	inc	dptr
   0D83 E0                 2849 	movx	a,@dptr
   0D84 FB                 2850 	mov	r3,a
   0D85 EF                 2851 	mov	a,r7
   0D86 24 FC              2852 	add	a,#0xFC
   0D88 FF                 2853 	mov	r7,a
   0D89 E8                 2854 	mov	a,r0
   0D8A 34 FF              2855 	addc	a,#0xFF
   0D8C F8                 2856 	mov	r0,a
   0D8D E9                 2857 	mov	a,r1
   0D8E 34 FF              2858 	addc	a,#0xFF
   0D90 F9                 2859 	mov	r1,a
                           2860 ;	genAssign: resultIsFar = TRUE
   0D91 90s00r00rA8        2861 	mov	dptr,#__print_format_PARM_4
   0D95 EF                 2862 	mov	a,r7
   0D96 F0                 2863 	movx	@dptr,a
   0D97 A3                 2864 	inc	dptr
   0D98 E8                 2865 	mov	a,r0
   0D99 F0                 2866 	movx	@dptr,a
   0D9A A3                 2867 	inc	dptr
   0D9B E9                 2868 	mov	a,r1
   0D9C F0                 2869 	movx	@dptr,a
   0D9D A3                 2870 	inc	dptr
   0D9E EB                 2871 	mov	a,r3
   0D9F F0                 2872 	movx	@dptr,a
   0DA0 8F 82              2873 	mov	dpl,r7
   0DA2 88 83              2874 	mov	dph,r0
   0DA4 89 93              2875 	mov	dpx,r1
   0DA6 8B F0              2876 	mov	b,r3
   0DA8 12s00r00r00        2877 	lcall	__gptrgetWord
   0DAC FF                 2878 	mov	r7,a
   0DAD A8 9C              2879 	mov	r0,_ap
   0DAF A3                 2880 	inc	dptr
   0DB0 12s00r00r00        2881 	lcall	__gptrgetWord
   0DB4 F9                 2882 	mov	r1,a
   0DB5 AB 9C              2883 	mov	r3,_ap
   0DB7 90s00r00r07        2884 	mov	dptr,#_value
   0DBB EF                 2885 	mov	a,r7
   0DBC F0                 2886 	movx	@dptr,a
   0DBD A3                 2887 	inc	dptr
   0DBE E8                 2888 	mov	a,r0
   0DBF F0                 2889 	movx	@dptr,a
   0DC0 A3                 2890 	inc	dptr
   0DC1 E9                 2891 	mov	a,r1
   0DC2 F0                 2892 	movx	@dptr,a
   0DC3 A3                 2893 	inc	dptr
   0DC4 EB                 2894 	mov	a,r3
   0DC5 F0                 2895 	movx	@dptr,a
                           2896 ;	printf_large.c:580: unsigned char memtype = value.byte[3];
   0DC6 90s00r00r0A        2897 	mov	dptr,#(_value + 0x000003)
   0DCA E0                 2898 	movx	a,@dptr
   0DCB FB                 2899 	mov	r3,a
                           2900 ;	genAssign: resultIsFar = FALSE
   0DCC 8B 02              2901 	mov	ar2,r3
                           2902 ;	printf_large.c:581: if (memtype >= 0x80)
   0DCE BA 80 00           2903 	cjne	r2,#0x80,00374$
   0DD1                    2904 00374$:
   0DD1 40 04              2905 	jc   00161$
   0DD3                    2906 00375$:
                           2907 ;	printf_large.c:582: c = 'C';
                           2908 ;	genAssign: resultIsFar = TRUE
   0DD3 7A 43              2909 	mov	r2,#0x43
   0DD5 80 14              2910 	sjmp 00162$
   0DD7                    2911 00161$:
                           2912 ;	printf_large.c:583: else if (memtype >= 0x60)
   0DD7 BA 60 00           2913 	cjne	r2,#0x60,00376$
   0DDA                    2914 00376$:
   0DDA 40 04              2915 	jc   00158$
   0DDC                    2916 00377$:
                           2917 ;	printf_large.c:584: c = 'P';
                           2918 ;	genAssign: resultIsFar = TRUE
   0DDC 7A 50              2919 	mov	r2,#0x50
   0DDE 80 0B              2920 	sjmp 00162$
   0DE0                    2921 00158$:
                           2922 ;	printf_large.c:585: else if (memtype >= 0x40)
   0DE0 BA 40 00           2923 	cjne	r2,#0x40,00378$
   0DE3                    2924 00378$:
   0DE3 40 04              2925 	jc   00155$
   0DE5                    2926 00379$:
                           2927 ;	printf_large.c:586: c = 'I';
                           2928 ;	genAssign: resultIsFar = TRUE
   0DE5 7A 49              2929 	mov	r2,#0x49
   0DE7 80 02              2930 	sjmp 00162$
   0DE9                    2931 00155$:
                           2932 ;	printf_large.c:588: c = 'X';
                           2933 ;	genAssign: resultIsFar = TRUE
   0DE9 7A 58              2934 	mov	r2,#0x58
   0DEB                    2935 00162$:
                           2936 ;	printf_large.c:590: OUTPUT_CHAR(c, p);
   0DEB C0 05              2937 	push	ar5
   0DED 8A 82              2938 	mov	dpl,r2
   0DEF 12s00r00r00        2939 	lcall	__output_char
   0DF3 D0 05              2940 	pop	ar5
                           2941 ;	printf_large.c:591: OUTPUT_CHAR(':', p);
   0DF5 C0 05              2942 	push	ar5
   0DF7 75 82 3A           2943 	mov	dpl,#0x3A
   0DFA 12s00r00r00        2944 	lcall	__output_char
   0DFE D0 05              2945 	pop	ar5
                           2946 ;	printf_large.c:592: OUTPUT_CHAR('0', p);
   0E00 C0 05              2947 	push	ar5
   0E02 75 82 30           2948 	mov	dpl,#0x30
   0E05 12s00r00r00        2949 	lcall	__output_char
   0E09 D0 05              2950 	pop	ar5
                           2951 ;	printf_large.c:593: OUTPUT_CHAR('x', p);
   0E0B C0 05              2952 	push	ar5
   0E0D 75 82 78           2953 	mov	dpl,#0x78
   0E10 12s00r00r00        2954 	lcall	__output_char
   0E14 D0 05              2955 	pop	ar5
                           2956 ;	printf_large.c:594: OUTPUT_2DIGITS( value.byte[2] );
   0E16 90s00r00r09        2957 	mov	dptr,#(_value + 0x000002)
   0E1A E0                 2958 	movx	a,@dptr
   0E1B FF                 2959 	mov	r7,a
   0E1C C0 05              2960 	push	ar5
   0E1E 8F 82              2961 	mov	dpl,r7
   0E20 12s00r00r66        2962 	lcall	_output_2digits
   0E24 D0 05              2963 	pop	ar5
                           2964 ;	printf_large.c:595: OUTPUT_2DIGITS( value.byte[1] );
   0E26 90s00r00r08        2965 	mov	dptr,#(_value + 0x000001)
   0E2A E0                 2966 	movx	a,@dptr
   0E2B FF                 2967 	mov	r7,a
   0E2C C0 05              2968 	push	ar5
   0E2E 8F 82              2969 	mov	dpl,r7
   0E30 12s00r00r66        2970 	lcall	_output_2digits
   0E34 D0 05              2971 	pop	ar5
                           2972 ;	printf_large.c:596: OUTPUT_2DIGITS( value.byte[0] );
   0E36 90s00r00r07        2973 	mov	dptr,#_value
   0E3A E0                 2974 	movx	a,@dptr
   0E3B FF                 2975 	mov	r7,a
   0E3C C0 05              2976 	push	ar5
   0E3E 8F 82              2977 	mov	dpl,r7
   0E40 12s00r00r66        2978 	lcall	_output_2digits
   0E44 D0 05              2979 	pop	ar5
                           2980 ;	printf_large.c:625: break;
                           2981 ;	printf_large.c:628: case 'I':
   0E46 80 3C              2982 	sjmp 00170$
   0E48                    2983 00164$:
                           2984 ;	printf_large.c:629: signed_argument = 1;
                           2985 ;	genAssign: resultIsFar = FALSE
   0E48 D2*0A              2986 	setb	__print_format_signed_argument_1_1
                           2987 ;	printf_large.c:630: radix = 10;
                           2988 ;	genAssign: resultIsFar = TRUE
   0E4A 90s00r00rAC        2989 	mov	dptr,#__print_format_radix_1_1
   0E4E 74 0A              2990 	mov	a,#0x0A
   0E50 F0                 2991 	movx	@dptr,a
                           2992 ;	printf_large.c:631: break;
                           2993 ;	printf_large.c:633: case 'O':
   0E51 80 31              2994 	sjmp 00170$
   0E53                    2995 00165$:
                           2996 ;	printf_large.c:634: radix = 8;
                           2997 ;	genAssign: resultIsFar = TRUE
   0E53 90s00r00rAC        2998 	mov	dptr,#__print_format_radix_1_1
   0E57 74 08              2999 	mov	a,#0x08
   0E59 F0                 3000 	movx	@dptr,a
                           3001 ;	printf_large.c:635: break;
                           3002 ;	printf_large.c:637: case 'U':
   0E5A 80 28              3003 	sjmp 00170$
   0E5C                    3004 00166$:
                           3005 ;	printf_large.c:638: radix = 10;
                           3006 ;	genAssign: resultIsFar = TRUE
   0E5C 90s00r00rAC        3007 	mov	dptr,#__print_format_radix_1_1
   0E60 74 0A              3008 	mov	a,#0x0A
   0E62 F0                 3009 	movx	@dptr,a
                           3010 ;	printf_large.c:639: break;
                           3011 ;	printf_large.c:641: case 'X':
   0E63 80 1F              3012 	sjmp 00170$
   0E65                    3013 00167$:
                           3014 ;	printf_large.c:642: radix = 16;
                           3015 ;	genAssign: resultIsFar = TRUE
   0E65 90s00r00rAC        3016 	mov	dptr,#__print_format_radix_1_1
   0E69 74 10              3017 	mov	a,#0x10
   0E6B F0                 3018 	movx	@dptr,a
                           3019 ;	printf_large.c:643: break;
                           3020 ;	printf_large.c:645: case 'F':
   0E6C 80 16              3021 	sjmp 00170$
   0E6E                    3022 00168$:
                           3023 ;	printf_large.c:646: float_argument=1;
                           3024 ;	genAssign: resultIsFar = FALSE
   0E6E D2*0D              3025 	setb	__print_format_float_argument_1_1
                           3026 ;	printf_large.c:647: break;
                           3027 ;	printf_large.c:649: default:
   0E70 80 12              3028 	sjmp 00170$
   0E72                    3029 00169$:
                           3030 ;	printf_large.c:651: OUTPUT_CHAR( c, p );
   0E72 C0 05              3031 	push	ar5
   0E74 8A 82              3032 	mov	dpl,r2
   0E76 12s00r00r00        3033 	lcall	__output_char
   0E7A D0 05              3034 	pop	ar5
                           3035 ;	printf_large.c:828: return charsOutputted;
                           3036 ;	printf_large.c:653: }
   0E7C 80 06              3037 	sjmp 00170$
   0E7E                    3038 00320$:
                           3039 ;	genAssign: resultIsFar = TRUE
   0E7E 90s00r00rAD        3040 	mov	dptr,#__print_format_width_1_1
   0E82 EE                 3041 	mov	a,r6
   0E83 F0                 3042 	movx	@dptr,a
   0E84                    3043 00170$:
                           3044 ;	printf_large.c:655: if (float_argument) {
   0E84 20*0D 04           3045 	jb	__print_format_float_argument_1_1,00380$
   0E87 02s00r0Fr16        3046 	ljmp	00233$
   0E8B                    3047 00380$:
                           3048 ;	printf_large.c:656: value.f=va_arg(ap,float);
   0E8B 90s00r00rA8        3049 	mov	dptr,#__print_format_PARM_4
                           3050 ;	genAssign: resultIsFar = FALSE
   0E8F E0                 3051 	movx	a,@dptr
   0E90 FE                 3052 	mov	r6,a
   0E91 A3                 3053 	inc	dptr
   0E92 E0                 3054 	movx	a,@dptr
   0E93 FF                 3055 	mov	r7,a
   0E94 A3                 3056 	inc	dptr
   0E95 E0                 3057 	movx	a,@dptr
   0E96 F8                 3058 	mov	r0,a
   0E97 A3                 3059 	inc	dptr
   0E98 E0                 3060 	movx	a,@dptr
   0E99 F9                 3061 	mov	r1,a
   0E9A EE                 3062 	mov	a,r6
   0E9B 24 FC              3063 	add	a,#0xFC
   0E9D FE                 3064 	mov	r6,a
   0E9E EF                 3065 	mov	a,r7
   0E9F 34 FF              3066 	addc	a,#0xFF
   0EA1 FF                 3067 	mov	r7,a
   0EA2 E8                 3068 	mov	a,r0
   0EA3 34 FF              3069 	addc	a,#0xFF
   0EA5 F8                 3070 	mov	r0,a
                           3071 ;	genAssign: resultIsFar = TRUE
   0EA6 90s00r00rA8        3072 	mov	dptr,#__print_format_PARM_4
   0EAA EE                 3073 	mov	a,r6
   0EAB F0                 3074 	movx	@dptr,a
   0EAC A3                 3075 	inc	dptr
   0EAD EF                 3076 	mov	a,r7
   0EAE F0                 3077 	movx	@dptr,a
   0EAF A3                 3078 	inc	dptr
   0EB0 E8                 3079 	mov	a,r0
   0EB1 F0                 3080 	movx	@dptr,a
   0EB2 A3                 3081 	inc	dptr
   0EB3 E9                 3082 	mov	a,r1
   0EB4 F0                 3083 	movx	@dptr,a
   0EB5 8E 82              3084 	mov	dpl,r6
   0EB7 8F 83              3085 	mov	dph,r7
   0EB9 88 93              3086 	mov	dpx,r0
   0EBB 89 F0              3087 	mov	b,r1
   0EBD 12s00r00r00        3088 	lcall	__gptrgetWord
   0EC1 FE                 3089 	mov	r6,a
   0EC2 AF 9C              3090 	mov	r7,_ap
   0EC4 A3                 3091 	inc	dptr
   0EC5 12s00r00r00        3092 	lcall	__gptrgetWord
   0EC9 F8                 3093 	mov	r0,a
   0ECA A9 9C              3094 	mov	r1,_ap
   0ECC 90s00r00r07        3095 	mov	dptr,#_value
   0ED0 EE                 3096 	mov	a,r6
   0ED1 F0                 3097 	movx	@dptr,a
   0ED2 A3                 3098 	inc	dptr
   0ED3 EF                 3099 	mov	a,r7
   0ED4 F0                 3100 	movx	@dptr,a
   0ED5 A3                 3101 	inc	dptr
   0ED6 E8                 3102 	mov	a,r0
   0ED7 F0                 3103 	movx	@dptr,a
   0ED8 A3                 3104 	inc	dptr
   0ED9 E9                 3105 	mov	a,r1
   0EDA F0                 3106 	movx	@dptr,a
                           3107 ;	printf_large.c:674: OUTPUT_FLOAT(value.f, width, decimals, left_justify,
   0EDB 90s00r00r07        3108 	mov	dptr,#_value
   0EDF E0                 3109 	movx	a,@dptr
   0EE0 A3                 3110 	inc	dptr
   0EE1 E0                 3111 	movx	a,@dptr
   0EE2 A3                 3112 	inc	dptr
   0EE3 E0                 3113 	movx	a,@dptr
   0EE4 A3                 3114 	inc	dptr
   0EE5 E0                 3115 	movx	a,@dptr
   0EE6 90s00r00rAD        3116 	mov	dptr,#__print_format_width_1_1
                           3117 ;	genAssign: resultIsFar = TRUE
   0EEA E0                 3118 	movx	a,@dptr
   0EEB 90s00r00r0E        3119 	mov	dptr,#_output_float_PARM_2
   0EEF F0                 3120 	movx	@dptr,a
                           3121 ;	genAssign: resultIsFar = TRUE
   0EF0 90s00r00r0F        3122 	mov	dptr,#_output_float_PARM_3
   0EF4 ED                 3123 	mov	a,r5
   0EF5 F0                 3124 	movx	@dptr,a
                           3125 ;	genAssign: resultIsFar = FALSE
   0EF6 A2*06              3126 	mov	c,__print_format_left_justify_1_1
   0EF8 92*01              3127 	mov	_output_float_PARM_4,c
                           3128 ;	genAssign: resultIsFar = FALSE
   0EFA A2*07              3129 	mov	c,__print_format_zero_padding_1_1
   0EFC 92*02              3130 	mov	_output_float_PARM_5,c
                           3131 ;	genAssign: resultIsFar = FALSE
   0EFE A2*08              3132 	mov	c,__print_format_prefix_sign_1_1
   0F00 92*03              3133 	mov	_output_float_PARM_6,c
                           3134 ;	genAssign: resultIsFar = FALSE
   0F02 A2*09              3135 	mov	c,__print_format_prefix_space_1_1
   0F04 92*04              3136 	mov	_output_float_PARM_7,c
   0F06 8E 82              3137 	mov	dpl,r6
   0F08 8F 83              3138 	mov	dph,r7
   0F0A 88 93              3139 	mov	dpx,r0
   0F0C 89 F0              3140 	mov	b,r1
   0F0E 12s00r00rDE        3141 	lcall	_output_float
   0F12 02s00r09r77        3142 	ljmp	00238$
   0F16                    3143 00233$:
                           3144 ;	printf_large.c:678: } else if (radix != 0)
   0F16 90s00r00rAC        3145 	mov	dptr,#__print_format_radix_1_1
   0F1A E0                 3146 	movx	a,@dptr
   0F1B 70 04              3147 	jnz	00381$
   0F1D 02s00r09r77        3148 	ljmp	00238$
   0F21                    3149 00381$:
                           3150 ;	printf_large.c:683: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
                           3151 ;	genAssign: resultIsFar = TRUE
   0F21 90s00r00rB5        3152 	mov	dptr,#__print_format_pstore_4_23
   0F25 74rB4              3153 	mov	a,#(__print_format_store_4_23 + 0x000005)
   0F27 F0                 3154 	movx	@dptr,a
   0F28 A3                 3155 	inc	dptr
   0F29 74s00              3156 	mov	a,#((__print_format_store_4_23 + 0x000005) >> 8)
   0F2B F0                 3157 	movx	@dptr,a
   0F2C A3                 3158 	inc	dptr
   0F2D 74s00              3159 	mov	a,#((__print_format_store_4_23 + 0x000005) >> 16)
   0F2F F0                 3160 	movx	@dptr,a
                           3161 ;	printf_large.c:686: if (char_argument)
   0F30 30*0B 78           3162 	jnb  __print_format_char_argument_1_1,00179$
   0F33                    3163 00382$:
                           3164 ;	printf_large.c:688: value.l = va_arg(ap,char);
   0F33 90s00r00rA8        3165 	mov	dptr,#__print_format_PARM_4
                           3166 ;	genAssign: resultIsFar = FALSE
   0F37 E0                 3167 	movx	a,@dptr
   0F38 F8                 3168 	mov	r0,a
   0F39 A3                 3169 	inc	dptr
   0F3A E0                 3170 	movx	a,@dptr
   0F3B F9                 3171 	mov	r1,a
   0F3C A3                 3172 	inc	dptr
   0F3D E0                 3173 	movx	a,@dptr
   0F3E FD                 3174 	mov	r5,a
   0F3F A3                 3175 	inc	dptr
   0F40 E0                 3176 	movx	a,@dptr
   0F41 FE                 3177 	mov	r6,a
   0F42 18                 3178 	dec	r0
   0F43 B8 FF 05           3179 	cjne	r0,#0xFF,00383$
   0F46 19                 3180 	dec	r1
   0F47 B9 FF 01           3181 	cjne	r1,#0xFF,00383$
   0F4A 1D                 3182 	dec	r5
   0F4B                    3183 00383$:
                           3184 ;	genAssign: resultIsFar = TRUE
   0F4B 90s00r00rA8        3185 	mov	dptr,#__print_format_PARM_4
   0F4F E8                 3186 	mov	a,r0
   0F50 F0                 3187 	movx	@dptr,a
   0F51 A3                 3188 	inc	dptr
   0F52 E9                 3189 	mov	a,r1
   0F53 F0                 3190 	movx	@dptr,a
   0F54 A3                 3191 	inc	dptr
   0F55 ED                 3192 	mov	a,r5
   0F56 F0                 3193 	movx	@dptr,a
   0F57 A3                 3194 	inc	dptr
   0F58 EE                 3195 	mov	a,r6
   0F59 F0                 3196 	movx	@dptr,a
   0F5A 88 82              3197 	mov	dpl,r0
   0F5C 89 83              3198 	mov	dph,r1
   0F5E 8D 93              3199 	mov	dpx,r5
   0F60 8E F0              3200 	mov	b,r6
   0F62 12s00r00r00        3201 	lcall	__gptrget
   0F66 F8                 3202 	mov  r0,a
   0F67 33                 3203 	rlc	a
   0F68 95 E0              3204 	subb	a,acc
   0F6A FD                 3205 	mov	r5,a
   0F6B FE                 3206 	mov	r6,a
   0F6C FF                 3207 	mov	r7,a
   0F6D 90s00r00r07        3208 	mov	dptr,#_value
   0F71 E8                 3209 	mov	a,r0
   0F72 F0                 3210 	movx	@dptr,a
   0F73 A3                 3211 	inc	dptr
   0F74 ED                 3212 	mov	a,r5
   0F75 F0                 3213 	movx	@dptr,a
   0F76 A3                 3214 	inc	dptr
   0F77 EE                 3215 	mov	a,r6
   0F78 F0                 3216 	movx	@dptr,a
   0F79 A3                 3217 	inc	dptr
   0F7A EF                 3218 	mov	a,r7
   0F7B F0                 3219 	movx	@dptr,a
                           3220 ;	printf_large.c:689: if (!signed_argument)
   0F7C 30*0A 04           3221 	jnb	__print_format_signed_argument_1_1,00384$
   0F7F 02s00r10r73        3222 	ljmp	00180$
   0F83                    3223 00384$:
                           3224 ;	printf_large.c:691: value.l &= 0xFF;
   0F83 90s00r00r07        3225 	mov	dptr,#_value
   0F87 E0                 3226 	movx	a,@dptr
   0F88 A3                 3227 	inc	dptr
   0F89 F8                 3228 	mov	r0,a
   0F8A E0                 3229 	movx	a,@dptr
   0F8B A3                 3230 	inc	dptr
   0F8C F9                 3231 	mov	r1,a
   0F8D E0                 3232 	movx	a,@dptr
   0F8E A3                 3233 	inc	dptr
   0F8F FD                 3234 	mov	r5,a
   0F90 E0                 3235 	movx	a,@dptr
   0F91 FE                 3236 	mov	r6,a
   0F92 79 00              3237 	mov	r1,#0
   0F94 7D 00              3238 	mov	r5,#0
   0F96 7E 00              3239 	mov	r6,#0
   0F98 90s00r00r07        3240 	mov	dptr,#_value
   0F9C E8                 3241 	mov	a,r0
   0F9D F0                 3242 	movx	@dptr,a
   0F9E A3                 3243 	inc	dptr
   0F9F E9                 3244 	mov	a,r1
   0FA0 F0                 3245 	movx	@dptr,a
   0FA1 A3                 3246 	inc	dptr
   0FA2 ED                 3247 	mov	a,r5
   0FA3 F0                 3248 	movx	@dptr,a
   0FA4 A3                 3249 	inc	dptr
   0FA5 EE                 3250 	mov	a,r6
   0FA6 F0                 3251 	movx	@dptr,a
   0FA7 02s00r10r73        3252 	ljmp	00180$
   0FAB                    3253 00179$:
                           3254 ;	printf_large.c:694: else if (long_argument)
   0FAB 30*0C 52           3255 	jnb  __print_format_long_argument_1_1,00176$
   0FAE                    3256 00385$:
                           3257 ;	printf_large.c:696: value.l = va_arg(ap,long);
   0FAE 90s00r00rA8        3258 	mov	dptr,#__print_format_PARM_4
                           3259 ;	genAssign: resultIsFar = FALSE
   0FB2 E0                 3260 	movx	a,@dptr
   0FB3 F8                 3261 	mov	r0,a
   0FB4 A3                 3262 	inc	dptr
   0FB5 E0                 3263 	movx	a,@dptr
   0FB6 F9                 3264 	mov	r1,a
   0FB7 A3                 3265 	inc	dptr
   0FB8 E0                 3266 	movx	a,@dptr
   0FB9 FD                 3267 	mov	r5,a
   0FBA A3                 3268 	inc	dptr
   0FBB E0                 3269 	movx	a,@dptr
   0FBC FE                 3270 	mov	r6,a
   0FBD E8                 3271 	mov	a,r0
   0FBE 24 FC              3272 	add	a,#0xFC
   0FC0 F8                 3273 	mov	r0,a
   0FC1 E9                 3274 	mov	a,r1
   0FC2 34 FF              3275 	addc	a,#0xFF
   0FC4 F9                 3276 	mov	r1,a
   0FC5 ED                 3277 	mov	a,r5
   0FC6 34 FF              3278 	addc	a,#0xFF
   0FC8 FD                 3279 	mov	r5,a
                           3280 ;	genAssign: resultIsFar = TRUE
   0FC9 90s00r00rA8        3281 	mov	dptr,#__print_format_PARM_4
   0FCD E8                 3282 	mov	a,r0
   0FCE F0                 3283 	movx	@dptr,a
   0FCF A3                 3284 	inc	dptr
   0FD0 E9                 3285 	mov	a,r1
   0FD1 F0                 3286 	movx	@dptr,a
   0FD2 A3                 3287 	inc	dptr
   0FD3 ED                 3288 	mov	a,r5
   0FD4 F0                 3289 	movx	@dptr,a
   0FD5 A3                 3290 	inc	dptr
   0FD6 EE                 3291 	mov	a,r6
   0FD7 F0                 3292 	movx	@dptr,a
   0FD8 88 82              3293 	mov	dpl,r0
   0FDA 89 83              3294 	mov	dph,r1
   0FDC 8D 93              3295 	mov	dpx,r5
   0FDE 8E F0              3296 	mov	b,r6
   0FE0 12s00r00r00        3297 	lcall	__gptrgetWord
   0FE4 F8                 3298 	mov	r0,a
   0FE5 A9 9C              3299 	mov	r1,_ap
   0FE7 A3                 3300 	inc	dptr
   0FE8 12s00r00r00        3301 	lcall	__gptrgetWord
   0FEC FD                 3302 	mov	r5,a
   0FED AE 9C              3303 	mov	r6,_ap
   0FEF 90s00r00r07        3304 	mov	dptr,#_value
   0FF3 E8                 3305 	mov	a,r0
   0FF4 F0                 3306 	movx	@dptr,a
   0FF5 A3                 3307 	inc	dptr
   0FF6 E9                 3308 	mov	a,r1
   0FF7 F0                 3309 	movx	@dptr,a
   0FF8 A3                 3310 	inc	dptr
   0FF9 ED                 3311 	mov	a,r5
   0FFA F0                 3312 	movx	@dptr,a
   0FFB A3                 3313 	inc	dptr
   0FFC EE                 3314 	mov	a,r6
   0FFD F0                 3315 	movx	@dptr,a
   0FFE 80 73              3316 	sjmp 00180$
   1000                    3317 00176$:
                           3318 ;	printf_large.c:700: value.l = va_arg(ap,int);
   1000 90s00r00rA8        3319 	mov	dptr,#__print_format_PARM_4
                           3320 ;	genAssign: resultIsFar = FALSE
   1004 E0                 3321 	movx	a,@dptr
   1005 F8                 3322 	mov	r0,a
   1006 A3                 3323 	inc	dptr
   1007 E0                 3324 	movx	a,@dptr
   1008 F9                 3325 	mov	r1,a
   1009 A3                 3326 	inc	dptr
   100A E0                 3327 	movx	a,@dptr
   100B FD                 3328 	mov	r5,a
   100C A3                 3329 	inc	dptr
   100D E0                 3330 	movx	a,@dptr
   100E FE                 3331 	mov	r6,a
   100F E8                 3332 	mov	a,r0
   1010 24 FE              3333 	add	a,#0xFE
   1012 F8                 3334 	mov	r0,a
   1013 E9                 3335 	mov	a,r1
   1014 34 FF              3336 	addc	a,#0xFF
   1016 F9                 3337 	mov	r1,a
   1017 ED                 3338 	mov	a,r5
   1018 34 FF              3339 	addc	a,#0xFF
   101A FD                 3340 	mov	r5,a
                           3341 ;	genAssign: resultIsFar = TRUE
   101B 90s00r00rA8        3342 	mov	dptr,#__print_format_PARM_4
   101F E8                 3343 	mov	a,r0
   1020 F0                 3344 	movx	@dptr,a
   1021 A3                 3345 	inc	dptr
   1022 E9                 3346 	mov	a,r1
   1023 F0                 3347 	movx	@dptr,a
   1024 A3                 3348 	inc	dptr
   1025 ED                 3349 	mov	a,r5
   1026 F0                 3350 	movx	@dptr,a
   1027 A3                 3351 	inc	dptr
   1028 EE                 3352 	mov	a,r6
   1029 F0                 3353 	movx	@dptr,a
   102A 88 82              3354 	mov	dpl,r0
   102C 89 83              3355 	mov	dph,r1
   102E 8D 93              3356 	mov	dpx,r5
   1030 8E F0              3357 	mov	b,r6
   1032 12s00r00r00        3358 	lcall	__gptrgetWord
   1036 F8                 3359 	mov	r0,a
   1037 A9 9C              3360 	mov	r1,_ap
   1039 E9                 3361 	mov	a,r1
   103A 33                 3362 	rlc	a
   103B 95 E0              3363 	subb	a,acc
   103D FD                 3364 	mov	r5,a
   103E FE                 3365 	mov	r6,a
   103F 90s00r00r07        3366 	mov	dptr,#_value
   1043 E8                 3367 	mov	a,r0
   1044 F0                 3368 	movx	@dptr,a
   1045 A3                 3369 	inc	dptr
   1046 E9                 3370 	mov	a,r1
   1047 F0                 3371 	movx	@dptr,a
   1048 A3                 3372 	inc	dptr
   1049 ED                 3373 	mov	a,r5
   104A F0                 3374 	movx	@dptr,a
   104B A3                 3375 	inc	dptr
   104C EE                 3376 	mov	a,r6
   104D F0                 3377 	movx	@dptr,a
                           3378 ;	printf_large.c:701: if (!signed_argument)
   104E 20*0A 22           3379 	jb   __print_format_signed_argument_1_1,00180$
   1051                    3380 00386$:
                           3381 ;	printf_large.c:703: value.l &= 0xFFFF;
   1051 90s00r00r07        3382 	mov	dptr,#_value
   1055 E0                 3383 	movx	a,@dptr
   1056 A3                 3384 	inc	dptr
   1057 F8                 3385 	mov	r0,a
   1058 E0                 3386 	movx	a,@dptr
   1059 A3                 3387 	inc	dptr
   105A F9                 3388 	mov	r1,a
   105B E0                 3389 	movx	a,@dptr
   105C A3                 3390 	inc	dptr
   105D FD                 3391 	mov	r5,a
   105E E0                 3392 	movx	a,@dptr
   105F FE                 3393 	mov	r6,a
   1060 7D 00              3394 	mov	r5,#0
   1062 7E 00              3395 	mov	r6,#0
   1064 90s00r00r07        3396 	mov	dptr,#_value
   1068 E8                 3397 	mov	a,r0
   1069 F0                 3398 	movx	@dptr,a
   106A A3                 3399 	inc	dptr
   106B E9                 3400 	mov	a,r1
   106C F0                 3401 	movx	@dptr,a
   106D A3                 3402 	inc	dptr
   106E ED                 3403 	mov	a,r5
   106F F0                 3404 	movx	@dptr,a
   1070 A3                 3405 	inc	dptr
   1071 EE                 3406 	mov	a,r6
   1072 F0                 3407 	movx	@dptr,a
                           3408 ;	printf_large.c:828: return charsOutputted;
                           3409 ;	printf_large.c:703: value.l &= 0xFFFF;
   1073                    3410 00180$:
                           3411 ;	printf_large.c:707: if ( signed_argument )
   1073 30*0A 32           3412 	jnb  __print_format_signed_argument_1_1,00185$
   1076                    3413 00387$:
                           3414 ;	printf_large.c:709: if (value.l < 0)
   1076 90s00r00r07        3415 	mov	dptr,#_value
   107A E0                 3416 	movx	a,@dptr
   107B A3                 3417 	inc	dptr
   107C F8                 3418 	mov	r0,a
   107D E0                 3419 	movx	a,@dptr
   107E A3                 3420 	inc	dptr
   107F F9                 3421 	mov	r1,a
   1080 E0                 3422 	movx	a,@dptr
   1081 A3                 3423 	inc	dptr
   1082 FD                 3424 	mov	r5,a
   1083 E0                 3425 	movx	a,@dptr
   1084 FE                 3426 	mov  r6,a
   1085 30 E7 1E           3427 	jnb  acc.7,00182$
   1088                    3428 00388$:
                           3429 ;	printf_large.c:710: value.l = -value.l;
   1088 C3                 3430 	clr	c
   1089 E4                 3431 	clr	a
   108A 98                 3432 	subb	a,r0
   108B F8                 3433 	mov	r0,a
   108C E4                 3434 	clr	a
   108D 99                 3435 	subb	a,r1
   108E F9                 3436 	mov	r1,a
   108F E4                 3437 	clr	a
   1090 9D                 3438 	subb	a,r5
   1091 FD                 3439 	mov	r5,a
   1092 E4                 3440 	clr	a
   1093 9E                 3441 	subb	a,r6
   1094 FE                 3442 	mov	r6,a
   1095 90s00r00r07        3443 	mov	dptr,#_value
   1099 E8                 3444 	mov	a,r0
   109A F0                 3445 	movx	@dptr,a
   109B A3                 3446 	inc	dptr
   109C E9                 3447 	mov	a,r1
   109D F0                 3448 	movx	@dptr,a
   109E A3                 3449 	inc	dptr
   109F ED                 3450 	mov	a,r5
   10A0 F0                 3451 	movx	@dptr,a
   10A1 A3                 3452 	inc	dptr
   10A2 EE                 3453 	mov	a,r6
   10A3 F0                 3454 	movx	@dptr,a
   10A4 80 02              3455 	sjmp 00185$
   10A6                    3456 00182$:
                           3457 ;	printf_large.c:712: signed_argument = 0;
                           3458 ;	genAssign: resultIsFar = FALSE
   10A6 C2*0A              3459 	clr	__print_format_signed_argument_1_1
   10A8                    3460 00185$:
                           3461 ;	printf_large.c:716: lsd = 1;
                           3462 ;	genAssign: resultIsFar = FALSE
   10A8 D2*0E              3463 	setb	__print_format_lsd_1_1
                           3464 ;	printf_large.c:718: do {
   10AA 90s00r00rB5        3465 	mov	dptr,#__print_format_pstore_4_23
                           3466 ;	genAssign: resultIsFar = FALSE
   10AE E0                 3467 	movx	a,@dptr
   10AF FD                 3468 	mov	r5,a
   10B0 A3                 3469 	inc	dptr
   10B1 E0                 3470 	movx	a,@dptr
   10B2 FE                 3471 	mov	r6,a
   10B3 A3                 3472 	inc	dptr
   10B4 E0                 3473 	movx	a,@dptr
   10B5 FF                 3474 	mov	r7,a
                           3475 ;	genAssign: resultIsFar = FALSE
   10B6 7A 00              3476 	mov	r2,#0x00
   10B8                    3477 00189$:
                           3478 ;	printf_large.c:719: value.byte[4] = 0;
   10B8 90s00r00r0B        3479 	mov	dptr,#(_value + 0x000004)
   10BC E4                 3480 	clr  a
   10BD F0                 3481 	movx	@dptr,a
                           3482 ;	printf_large.c:723: calculate_digit(radix);
   10BE C0 02              3483 	push	ar2
   10C0 C0 05              3484 	push	ar5
   10C2 C0 06              3485 	push	ar6
   10C4 C0 07              3486 	push	ar7
   10C6 90s00r00rAC        3487 	mov	dptr,#__print_format_radix_1_1
   10CA E0                 3488 	movx	a,@dptr
   10CB F5 82              3489 	mov	dpl,a
   10CD 12s00r00r81        3490 	lcall	_calculate_digit
   10D1 D0 07              3491 	pop	ar7
   10D3 D0 06              3492 	pop	ar6
   10D5 D0 05              3493 	pop	ar5
   10D7 D0 02              3494 	pop	ar2
                           3495 ;	printf_large.c:725: if (!lsd)
   10D9 20*0E 31           3496 	jb   __print_format_lsd_1_1,00187$
   10DC                    3497 00389$:
                           3498 ;	printf_large.c:727: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
   10DC 90s00r00r0B        3499 	mov	dptr,#(_value + 0x000004)
   10E0 E0                 3500 	movx	a,@dptr
   10E1 F9                 3501 	mov  r1,a
   10E2 C4                 3502 	swap	a
   10E3 F9                 3503 	mov	r1,a
   10E4 8D 82              3504 	mov	dpl,r5
   10E6 8E 83              3505 	mov	dph,r6
   10E8 8F 93              3506 	mov	dpx,r7
   10EA E0                 3507 	movx	a,@dptr
   10EB FB                 3508 	mov  r3,a
   10EC 42 01              3509 	orl	ar1,a
   10EE 8D 82              3510 	mov	dpl,r5
   10F0 8E 83              3511 	mov	dph,r6
   10F2 8F 93              3512 	mov	dpx,r7
   10F4 E9                 3513 	mov	a,r1
   10F5 F0                 3514 	movx	@dptr,a
                           3515 ;	printf_large.c:728: pstore--;
   10F6 1D                 3516 	dec	r5
   10F7 BD FF 05           3517 	cjne	r5,#0xFF,00390$
   10FA 1E                 3518 	dec	r6
   10FB BE FF 01           3519 	cjne	r6,#0xFF,00390$
   10FE 1F                 3520 	dec	r7
   10FF                    3521 00390$:
                           3522 ;	genAssign: resultIsFar = TRUE
   10FF 90s00r00rB5        3523 	mov	dptr,#__print_format_pstore_4_23
   1103 ED                 3524 	mov	a,r5
   1104 F0                 3525 	movx	@dptr,a
   1105 A3                 3526 	inc	dptr
   1106 EE                 3527 	mov	a,r6
   1107 F0                 3528 	movx	@dptr,a
   1108 A3                 3529 	inc	dptr
   1109 EF                 3530 	mov	a,r7
   110A F0                 3531 	movx	@dptr,a
   110B 80 0D              3532 	sjmp 00188$
   110D                    3533 00187$:
                           3534 ;	printf_large.c:732: *pstore = value.byte[4];
   110D 90s00r00r0B        3535 	mov	dptr,#(_value + 0x000004)
   1111 E0                 3536 	movx	a,@dptr
   1112 F9                 3537 	mov  r1,a
   1113 8D 82              3538 	mov  dpl,r5
   1115 8E 83              3539 	mov  dph,r6
   1117 8F 93              3540 	mov  dpx,r7
   1119 F0                 3541 	movx	@dptr,a
   111A                    3542 00188$:
                           3543 ;	printf_large.c:734: length++;
   111A 0A                 3544 	inc	r2
                           3545 ;	genAssign: resultIsFar = TRUE
   111B 90s00r00rAE        3546 	mov	dptr,#__print_format_length_1_1
   111F EA                 3547 	mov	a,r2
   1120 F0                 3548 	movx	@dptr,a
                           3549 ;	printf_large.c:735: lsd = !lsd;
   1121 B2*0E              3550 	cpl	__print_format_lsd_1_1
                           3551 ;	printf_large.c:736: } while( value.ul );
   1123 90s00r00r07        3552 	mov	dptr,#_value
   1127 E0                 3553 	movx	a,@dptr
   1128 A3                 3554 	inc	dptr
   1129 F9                 3555 	mov	r1,a
   112A E0                 3556 	movx	a,@dptr
   112B A3                 3557 	inc	dptr
   112C FC                 3558 	mov	r4,a
   112D E0                 3559 	movx	a,@dptr
   112E A3                 3560 	inc	dptr
   112F FB                 3561 	mov	r3,a
   1130 E0                 3562 	movx	a,@dptr
   1131 F8                 3563 	mov	r0,a
   1132 E9                 3564 	mov	a,r1
   1133 4C                 3565 	orl	a,r4
   1134 4B                 3566 	orl	a,r3
   1135 48                 3567 	orl	a,r0
   1136 60 04              3568 	jz	00391$
   1138 02s00r10rB8        3569 	ljmp	00189$
   113C                    3570 00391$:
                           3571 ;	printf_large.c:738: if (width == 0)
                           3572 ;	genAssign: resultIsFar = TRUE
   113C 90s00r00rB5        3573 	mov	dptr,#__print_format_pstore_4_23
   1140 ED                 3574 	mov	a,r5
   1141 F0                 3575 	movx	@dptr,a
   1142 A3                 3576 	inc	dptr
   1143 EE                 3577 	mov	a,r6
   1144 F0                 3578 	movx	@dptr,a
   1145 A3                 3579 	inc	dptr
   1146 EF                 3580 	mov	a,r7
   1147 F0                 3581 	movx	@dptr,a
                           3582 ;	genAssign: resultIsFar = TRUE
   1148 90s00r00rAE        3583 	mov	dptr,#__print_format_length_1_1
   114C EA                 3584 	mov	a,r2
   114D F0                 3585 	movx	@dptr,a
   114E 90s00r00rAD        3586 	mov	dptr,#__print_format_width_1_1
   1152 E0                 3587 	movx	a,@dptr
   1153 70 07              3588 	jnz  00193$
   1155                    3589 00392$:
                           3590 ;	printf_large.c:743: width=1;
                           3591 ;	genAssign: resultIsFar = TRUE
   1155 90s00r00rAD        3592 	mov	dptr,#__print_format_width_1_1
   1159 74 01              3593 	mov	a,#0x01
   115B F0                 3594 	movx	@dptr,a
   115C                    3595 00193$:
                           3596 ;	printf_large.c:747: if (!zero_padding && !left_justify)
   115C 20*07 2E           3597 	jb   __print_format_zero_padding_1_1,00198$
   115F                    3598 00393$:
   115F 20*06 2B           3599 	jb   __print_format_left_justify_1_1,00198$
   1162                    3600 00394$:
                           3601 ;	printf_large.c:749: while ( width > (unsigned char) (length+1) )
   1162 90s00r00rAE        3602 	mov	dptr,#__print_format_length_1_1
   1166 E0                 3603 	movx	a,@dptr
   1167 24 01              3604 	add	a,#0x01
   1169 FB                 3605 	mov	r3,a
   116A 90s00r00rAD        3606 	mov	dptr,#__print_format_width_1_1
                           3607 ;	genAssign: resultIsFar = FALSE
   116E E0                 3608 	movx	a,@dptr
   116F FC                 3609 	mov	r4,a
   1170                    3610 00194$:
   1170 C3                 3611 	clr	c
   1171 EB                 3612 	mov	a,r3
   1172 9C                 3613 	subb	a,r4
   1173 50 12              3614 	jnc  00322$
   1175                    3615 00395$:
                           3616 ;	printf_large.c:751: OUTPUT_CHAR( ' ', p );
   1175 C0 03              3617 	push	ar3
   1177 C0 04              3618 	push	ar4
   1179 75 82 20           3619 	mov	dpl,#0x20
   117C 12s00r00r00        3620 	lcall	__output_char
   1180 D0 04              3621 	pop	ar4
   1182 D0 03              3622 	pop	ar3
                           3623 ;	printf_large.c:752: width--;
   1184 1C                 3624 	dec	r4
   1185 80 E9              3625 	sjmp 00194$
   1187                    3626 00322$:
                           3627 ;	genAssign: resultIsFar = TRUE
   1187 90s00r00rAD        3628 	mov	dptr,#__print_format_width_1_1
   118B EC                 3629 	mov	a,r4
   118C F0                 3630 	movx	@dptr,a
   118D                    3631 00198$:
                           3632 ;	printf_large.c:756: if (signed_argument) // this now means the original value was negative
   118D 30*0A 14           3633 	jnb  __print_format_signed_argument_1_1,00208$
   1190                    3634 00396$:
                           3635 ;	printf_large.c:758: OUTPUT_CHAR( '-', p );
   1190 75 82 2D           3636 	mov	dpl,#0x2D
   1193 12s00r00r00        3637 	lcall	__output_char
                           3638 ;	printf_large.c:760: width--;
   1197 90s00r00rAD        3639 	mov	dptr,#__print_format_width_1_1
   119B E0                 3640 	movx	a,@dptr
   119C 14                 3641 	dec	a
                           3642 ;	genAssign: resultIsFar = TRUE
   119D 90s00r00rAD        3643 	mov	dptr,#__print_format_width_1_1
   11A1 F0                 3644 	movx	@dptr,a
   11A2 80 33              3645 	sjmp 00209$
   11A4                    3646 00208$:
                           3647 ;	printf_large.c:762: else if (length != 0)
   11A4 90s00r00rAE        3648 	mov	dptr,#__print_format_length_1_1
   11A8 E0                 3649 	movx	a,@dptr
   11A9 60 2C              3650 	jz  00209$
   11AB                    3651 00397$:
                           3652 ;	printf_large.c:765: if (prefix_sign)
   11AB 30*08 14           3653 	jnb  __print_format_prefix_sign_1_1,00203$
   11AE                    3654 00398$:
                           3655 ;	printf_large.c:767: OUTPUT_CHAR( '+', p );
   11AE 75 82 2B           3656 	mov	dpl,#0x2B
   11B1 12s00r00r00        3657 	lcall	__output_char
                           3658 ;	printf_large.c:769: width--;
   11B5 90s00r00rAD        3659 	mov	dptr,#__print_format_width_1_1
   11B9 E0                 3660 	movx	a,@dptr
   11BA 14                 3661 	dec	a
                           3662 ;	genAssign: resultIsFar = TRUE
   11BB 90s00r00rAD        3663 	mov	dptr,#__print_format_width_1_1
   11BF F0                 3664 	movx	@dptr,a
   11C0 80 15              3665 	sjmp 00209$
   11C2                    3666 00203$:
                           3667 ;	printf_large.c:771: else if (prefix_space)
   11C2 30*09 12           3668 	jnb  __print_format_prefix_space_1_1,00209$
   11C5                    3669 00399$:
                           3670 ;	printf_large.c:773: OUTPUT_CHAR( ' ', p );
   11C5 75 82 20           3671 	mov	dpl,#0x20
   11C8 12s00r00r00        3672 	lcall	__output_char
                           3673 ;	printf_large.c:775: width--;
   11CC 90s00r00rAD        3674 	mov	dptr,#__print_format_width_1_1
   11D0 E0                 3675 	movx	a,@dptr
   11D1 14                 3676 	dec	a
                           3677 ;	genAssign: resultIsFar = TRUE
   11D2 90s00r00rAD        3678 	mov	dptr,#__print_format_width_1_1
   11D6 F0                 3679 	movx	@dptr,a
   11D7                    3680 00209$:
                           3681 ;	printf_large.c:780: if (!left_justify)
   11D7 20*06 2D           3682 	jb   __print_format_left_justify_1_1,00217$
   11DA                    3683 00400$:
                           3684 ;	printf_large.c:781: while ( width-- > length )
   11DA 90s00r00rAD        3685 	mov	dptr,#__print_format_width_1_1
                           3686 ;	genAssign: resultIsFar = FALSE
   11DE E0                 3687 	movx	a,@dptr
   11DF FB                 3688 	mov	r3,a
   11E0                    3689 00210$:
                           3690 ;	genAssign: resultIsFar = FALSE
   11E0 8B 04              3691 	mov	ar4,r3
   11E2 1B                 3692 	dec	r3
                           3693 ;	genAssign: resultIsFar = TRUE
   11E3 90s00r00rAD        3694 	mov	dptr,#__print_format_width_1_1
   11E7 EB                 3695 	mov	a,r3
   11E8 F0                 3696 	movx	@dptr,a
   11E9 90s00r00rAE        3697 	mov	dptr,#__print_format_length_1_1
   11ED C3                 3698 	clr	c
   11EE E0                 3699 	movx	a,@dptr
   11EF 9C                 3700 	subb	a,r4
   11F0 50 57              3701 	jnc  00323$
   11F2                    3702 00401$:
                           3703 ;	printf_large.c:783: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
   11F2 30*07 04           3704 	jnb  __print_format_zero_padding_1_1,00243$
   11F5                    3705 00402$:
                           3706 ;	genAssign: resultIsFar = FALSE
   11F5 7C 30              3707 	mov	r4,#0x30
   11F7 80 02              3708 	sjmp 00244$
   11F9                    3709 00243$:
                           3710 ;	genAssign: resultIsFar = FALSE
   11F9 7C 20              3711 	mov	r4,#0x20
   11FB                    3712 00244$:
   11FB C0 03              3713 	push	ar3
   11FD 8C 82              3714 	mov	dpl,r4
   11FF 12s00r00r00        3715 	lcall	__output_char
   1203 D0 03              3716 	pop	ar3
   1205 80 D9              3717 	sjmp 00210$
   1207                    3718 00217$:
                           3719 ;	printf_large.c:788: if (width > length)
   1207 90s00r00rAE        3720 	mov	dptr,#__print_format_length_1_1
   120B 75 86 01           3721 	mov	dps, #1
   120E 90s00r00rAD        3722 	mov	dptr, #__print_format_width_1_1
   1212 15 86              3723 	dec	dps
   1214 C3                 3724 	clr	c
   1215 E0                 3725 	movx	a,@dptr
   1216 75 86 01           3726 	mov	dps,#1
   1219 C5 F0              3727 	xch	a, b
   121B E0                 3728 	movx	a,@dptr
   121C 75 86 00           3729 	mov	dps,#0
   121F C5 F0              3730 	xch	a, b
   1221 95 F0              3731 	subb	a,b
   1223 50 1C              3732 	jnc  00214$
   1225                    3733 00403$:
                           3734 ;	printf_large.c:789: width -= length;
   1225 90s00r00rAE        3735 	mov	dptr,#__print_format_length_1_1
   1229 75 86 01           3736 	mov	dps, #1
   122C 90s00r00rAD        3737 	mov	dptr, #__print_format_width_1_1
   1230 15 86              3738 	dec	dps
   1232 C3                 3739 	clr	c
   1233 E0                 3740 	movx	a,@dptr
   1234 F5 F0              3741 	mov	b,a
   1236 05 86              3742 	inc	dps
   1238 E0                 3743 	movx	a,@dptr
   1239 95 F0              3744 	subb	a,b
   123B F0                 3745 	movx	@dptr,a
   123C 75 86 00           3746 	mov	dps,#0
   123F 80 0E              3747 	sjmp 00315$
   1241                    3748 00214$:
                           3749 ;	printf_large.c:791: width = 0;
                           3750 ;	genAssign: resultIsFar = TRUE
   1241 90s00r00rAD        3751 	mov	dptr,#__print_format_width_1_1
   1245 E4                 3752 	clr  a
   1246 F0                 3753 	movx	@dptr,a
                           3754 ;	printf_large.c:828: return charsOutputted;
                           3755 ;	printf_large.c:795: while( length-- )
   1247 80 06              3756 	sjmp 00315$
   1249                    3757 00323$:
                           3758 ;	genAssign: resultIsFar = TRUE
   1249 90s00r00rAD        3759 	mov	dptr,#__print_format_width_1_1
   124D EB                 3760 	mov	a,r3
   124E F0                 3761 	movx	@dptr,a
   124F                    3762 00315$:
   124F 90s00r00rB5        3763 	mov	dptr,#__print_format_pstore_4_23
                           3764 ;	genAssign: resultIsFar = FALSE
   1253 E0                 3765 	movx	a,@dptr
   1254 FB                 3766 	mov	r3,a
   1255 A3                 3767 	inc	dptr
   1256 E0                 3768 	movx	a,@dptr
   1257 FC                 3769 	mov	r4,a
   1258 A3                 3770 	inc	dptr
   1259 E0                 3771 	movx	a,@dptr
   125A FD                 3772 	mov	r5,a
   125B 90s00r00rAE        3773 	mov	dptr,#__print_format_length_1_1
                           3774 ;	genAssign: resultIsFar = FALSE
   125F E0                 3775 	movx	a,@dptr
   1260 FE                 3776 	mov	r6,a
   1261                    3777 00222$:
                           3778 ;	genAssign: resultIsFar = FALSE
   1261 8E 07              3779 	mov	ar7,r6
   1263 1E                 3780 	dec	r6
   1264 EF                 3781 	mov	a,r7
   1265 60 50              3782 	jz  00224$
   1267                    3783 00404$:
                           3784 ;	printf_large.c:797: lsd = !lsd;
   1267 B2*0E              3785 	cpl	__print_format_lsd_1_1
                           3786 ;	printf_large.c:798: if (!lsd)
   1269 20*0E 1C           3787 	jb   __print_format_lsd_1_1,00220$
   126C                    3788 00405$:
                           3789 ;	printf_large.c:800: pstore++;
   126C 0B                 3790 	inc	r3
   126D BB 00 05           3791 	cjne	r3,#0,00406$
   1270 0C                 3792 	inc	r4
   1271 BC 00 01           3793 	cjne	r4,#0,00406$
   1274 0D                 3794 	inc	r5
   1275                    3795 00406$:
                           3796 ;	printf_large.c:801: value.byte[4] = *pstore >> 4;
   1275 8B 82              3797 	mov	dpl,r3
   1277 8C 83              3798 	mov	dph,r4
   1279 8D 93              3799 	mov	dpx,r5
   127B E0                 3800 	movx	a,@dptr
   127C FF                 3801 	mov  r7,a
   127D C4                 3802 	swap	a
   127E 54 0F              3803 	anl	a,#0x0F
   1280 FF                 3804 	mov  r7,a
   1281 90s00r00r0B        3805 	mov  dptr,#(_value + 0x000004)
   1285 F0                 3806 	movx @dptr,a
   1286 80 11              3807 	sjmp 00221$
   1288                    3808 00220$:
                           3809 ;	printf_large.c:805: value.byte[4] = *pstore & 0x0F;
   1288 8B 82              3810 	mov	dpl,r3
   128A 8C 83              3811 	mov	dph,r4
   128C 8D 93              3812 	mov	dpx,r5
   128E E0                 3813 	movx	a,@dptr
   128F FF                 3814 	mov	r7,a
   1290 53 07 0F           3815 	anl	ar7,#0x0F
   1293 90s00r00r0B        3816 	mov	dptr,#(_value + 0x000004)
   1297 EF                 3817 	mov	a,r7
   1298 F0                 3818 	movx	@dptr,a
   1299                    3819 00221$:
                           3820 ;	printf_large.c:811: output_digit( value.byte[4] );
   1299 90s00r00r0B        3821 	mov	dptr,#(_value + 0x000004)
   129D E0                 3822 	movx	a,@dptr
   129E FF                 3823 	mov	r7,a
   129F C0 03              3824 	push	ar3
   12A1 C0 04              3825 	push	ar4
   12A3 C0 05              3826 	push	ar5
   12A5 C0 06              3827 	push	ar6
   12A7 8F 82              3828 	mov	dpl,r7
   12A9 12s00r00r49        3829 	lcall	_output_digit
   12AD D0 06              3830 	pop	ar6
   12AF D0 05              3831 	pop	ar5
   12B1 D0 04              3832 	pop	ar4
   12B3 D0 03              3833 	pop	ar3
   12B5 80 AA              3834 	sjmp 00222$
   12B7                    3835 00224$:
                           3836 ;	printf_large.c:814: if (left_justify)
   12B7 20*06 04           3837 	jb	__print_format_left_justify_1_1,00407$
   12BA 02s00r09r77        3838 	ljmp	00238$
   12BE                    3839 00407$:
                           3840 ;	printf_large.c:815: while (width-- > 0)
   12BE 90s00r00rAD        3841 	mov	dptr,#__print_format_width_1_1
                           3842 ;	genAssign: resultIsFar = FALSE
   12C2 E0                 3843 	movx	a,@dptr
   12C3 FB                 3844 	mov	r3,a
   12C4                    3845 00225$:
                           3846 ;	genAssign: resultIsFar = FALSE
   12C4 8B 04              3847 	mov	ar4,r3
   12C6 1B                 3848 	dec	r3
   12C7 EC                 3849 	mov	a,r4
   12C8 70 04              3850 	jnz	00408$
   12CA 02s00r09r77        3851 	ljmp	00238$
   12CE                    3852 00408$:
                           3853 ;	printf_large.c:817: OUTPUT_CHAR(' ', p);
   12CE C0 03              3854 	push	ar3
   12D0 75 82 20           3855 	mov	dpl,#0x20
   12D3 12s00r00r00        3856 	lcall	__output_char
   12D7 D0 03              3857 	pop	ar3
   12D9 80 E9              3858 	sjmp 00225$
   12DB                    3859 00236$:
                           3860 ;	printf_large.c:824: OUTPUT_CHAR( c, p );
   12DB 8A 82              3861 	mov	dpl,r2
   12DD 12s00r00r00        3862 	lcall	__output_char
   12E1 02s00r09r77        3863 	ljmp	00238$
   12E5                    3864 00240$:
                           3865 ;	printf_large.c:828: return charsOutputted;
   12E5 75 86 01           3866 	mov     dps, #1
   12E8 90s00r00r0C        3867 	mov     dptr, #_charsOutputted
   12EC E0                 3868 	movx	a,@dptr
   12ED F5 82              3869 	mov	dpl,a
   12EF A3                 3870 	inc	dptr
   12F0 E0                 3871 	movx	a,@dptr
   12F1 F5 83              3872 	mov	dph,a
   12F3 75 86 00           3873 	mov	dps,#0
   12F6                    3874 00241$:
   12F6 22                 3875 	ret
                           3876 	.area CSEG    (CODE)
                           3877 	.area CONST   (CODE)
   0000                    3878 __str_0:
   0000 3C 4E 55 4C 4C 3E  3879 	.ascii "<NULL>"
   0006 00                 3880 	.db 0x00
                           3881 	.area XINIT   (CODE)
                           3882 	.area CABS    (ABS,CODE)
