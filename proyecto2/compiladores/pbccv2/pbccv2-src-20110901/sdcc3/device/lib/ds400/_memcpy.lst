                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:19 2015
                              5 ;--------------------------------------------------------
                              6 	.module _memcpy
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _memcpy_PARM_3
                             31 	.globl _memcpy_PARM_2
                             32 	.globl _memcpy
                             33 ;--------------------------------------------------------
                             34 ; special function registers
                             35 ;--------------------------------------------------------
                             36 ;--------------------------------------------------------
                             37 ; special function bits
                             38 ;--------------------------------------------------------
                             39 ;--------------------------------------------------------
                             40 ; overlayable register banks
                             41 ;--------------------------------------------------------
                             42 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      43 	.ds 8
                             44 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                      45 	.ds 8
                             46 ;--------------------------------------------------------
                             47 ; internal ram data
                             48 ;--------------------------------------------------------
                             49 	.area DSEG    (DATA)
                             50 ;--------------------------------------------------------
                             51 ; overlayable items in internal ram 
                             52 ;--------------------------------------------------------
                             53 	.area OSEG    (OVR,DATA)
                             54 ;--------------------------------------------------------
                             55 ; indirectly addressable internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area ISEG    (DATA)
                             58 ;--------------------------------------------------------
                             59 ; absolute internal ram data
                             60 ;--------------------------------------------------------
                             61 	.area IABS    (ABS,DATA)
                             62 	.area IABS    (ABS,DATA)
                             63 ;--------------------------------------------------------
                             64 ; bit data
                             65 ;--------------------------------------------------------
                             66 	.area BSEG    (BIT)
                             67 ;--------------------------------------------------------
                             68 ; paged external ram data
                             69 ;--------------------------------------------------------
                             70 	.area PSEG    (PAG,XDATA)
                             71 ;--------------------------------------------------------
                             72 ; external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XSEG    (XDATA)
   0000                      75 _memcpy_PARM_2:
   0000                      76 	.ds 4
   0004                      77 _memcpy_PARM_3:
   0004                      78 	.ds 2
   0006                      79 _memcpy_ret_1_1:
   0006                      80 	.ds 4
   000A                      81 _memcpy_sloc0_1_0:
   000A                      82 	.ds 4
                             83 ;--------------------------------------------------------
                             84 ; absolute external ram data
                             85 ;--------------------------------------------------------
                             86 	.area XABS    (ABS,XDATA)
                             87 ;--------------------------------------------------------
                             88 ; external initialized ram data
                             89 ;--------------------------------------------------------
                             90 	.area XISEG   (XDATA)
                             91 ;--------------------------------------------------------
                             92 ; global & static initialisations
                             93 ;--------------------------------------------------------
                             94 	.area HOME    (CODE)
                             95 	.area GSINIT  (CODE)
                             96 	.area GSFINAL (CODE)
                             97 	.area GSINIT  (CODE)
                             98 ;--------------------------------------------------------
                             99 ; Home
                            100 ;--------------------------------------------------------
                            101 	.area HOME    (CODE)
                            102 	.area HOME    (CODE)
                            103 ;--------------------------------------------------------
                            104 ; code
                            105 ;--------------------------------------------------------
                            106 	.area CSEG    (CODE)
                            107 ;------------------------------------------------------------
                            108 ;Allocation info for local variables in function 'memcpy'
                            109 ;------------------------------------------------------------
                            110 ;src                       Allocated with name '_memcpy_PARM_2'
                            111 ;acount                    Allocated with name '_memcpy_PARM_3'
                            112 ;dst                       Allocated to registers r6 r7 r0 r1 
                            113 ;ret                       Allocated with name '_memcpy_ret_1_1'
                            114 ;d                         Allocated to registers 
                            115 ;s                         Allocated to registers r2 r3 r4 r5 
                            116 ;sloc0                     Allocated with name '_memcpy_sloc0_1_0'
                            117 ;sloc1                     Allocated with name '_memcpy_sloc1_1_0'
                            118 ;------------------------------------------------------------
                            119 ;	_memcpy.c:36: void * memcpy (
                            120 ;	-----------------------------------------
                            121 ;	 function memcpy
                            122 ;	-----------------------------------------
   0000                     123 _memcpy:
                    0002    124 	ar2 = 0x02
                    0003    125 	ar3 = 0x03
                    0004    126 	ar4 = 0x04
                    0005    127 	ar5 = 0x05
                    0006    128 	ar6 = 0x06
                    0007    129 	ar7 = 0x07
                    0000    130 	ar0 = 0x00
                    0001    131 	ar1 = 0x01
   0000 AE 82               132 	mov	r6,dpl
   0002 AF 83               133 	mov	r7,dph
   0004 A8 93               134 	mov	r0,dpx
   0006 A9 F0               135 	mov	r1,b
                            136 ;	_memcpy.c:42: void * ret = dst;
                            137 ;	genAssign: resultIsFar = TRUE
   0008 90s00r00r06         138 	mov	dptr,#_memcpy_ret_1_1
   000C EE                  139 	mov	a,r6
   000D F0                  140 	movx	@dptr,a
   000E A3                  141 	inc	dptr
   000F EF                  142 	mov	a,r7
   0010 F0                  143 	movx	@dptr,a
   0011 A3                  144 	inc	dptr
   0012 E8                  145 	mov	a,r0
   0013 F0                  146 	movx	@dptr,a
   0014 A3                  147 	inc	dptr
   0015 E9                  148 	mov	a,r1
   0016 F0                  149 	movx	@dptr,a
                            150 ;	_memcpy.c:44: char * s = src;
   0017 90s00r00r00         151 	mov	dptr,#_memcpy_PARM_2
                            152 ;	genAssign: resultIsFar = FALSE
   001B E0                  153 	movx	a,@dptr
   001C FA                  154 	mov	r2,a
   001D A3                  155 	inc	dptr
   001E E0                  156 	movx	a,@dptr
   001F FB                  157 	mov	r3,a
   0020 A3                  158 	inc	dptr
   0021 E0                  159 	movx	a,@dptr
   0022 FC                  160 	mov	r4,a
   0023 A3                  161 	inc	dptr
   0024 E0                  162 	movx	a,@dptr
   0025 FD                  163 	mov	r5,a
                            164 ;	genAssign: resultIsFar = TRUE
                            165 ;	_memcpy.c:49: while (acount--) {
                            166 ;	genAssign: resultIsFar = FALSE
                            167 ;	genAssign: resultIsFar = TRUE
   0026 90s00r00r0A         168 	mov	dptr,#_memcpy_sloc0_1_0
   002A EE                  169 	mov	a,r6
   002B F0                  170 	movx	@dptr,a
   002C A3                  171 	inc	dptr
   002D EF                  172 	mov	a,r7
   002E F0                  173 	movx	@dptr,a
   002F A3                  174 	inc	dptr
   0030 E8                  175 	mov	a,r0
   0031 F0                  176 	movx	@dptr,a
   0032 A3                  177 	inc	dptr
   0033 E9                  178 	mov	a,r1
   0034 F0                  179 	movx	@dptr,a
   0035 90s00r00r04         180 	mov	dptr,#_memcpy_PARM_3
                            181 ;	genAssign: resultIsFar = FALSE
   0039 E0                  182 	movx	a,@dptr
   003A F8                  183 	mov	r0,a
   003B A3                  184 	inc	dptr
   003C E0                  185 	movx	a,@dptr
   003D F9                  186 	mov	r1,a
   003E                     187 00101$:
                            188 ;	genAssign: resultIsFar = FALSE
   003E 88 06               189 	mov	ar6,r0
   0040 89 07               190 	mov	ar7,r1
   0042 18                  191 	dec	r0
   0043 B8 FF 01            192 	cjne	r0,#0xFF,00109$
   0046 19                  193 	dec	r1
   0047                     194 00109$:
   0047 EE                  195 	mov	a,r6
   0048 4F                  196 	orl	a,r7
   0049 60 57               197 	jz  00103$
   004B                     198 00110$:
                            199 ;	_memcpy.c:50: *d++ = *s++;
   004B 8A 82               200 	mov	dpl,r2
   004D 8B 83               201 	mov	dph,r3
   004F 8C 93               202 	mov	dpx,r4
   0051 8D F0               203 	mov	b,r5
   0053 12s00r00r00         204 	lcall	__gptrget
   0057 FE                  205 	mov	r6,a
   0058 A3                  206 	inc	dptr
   0059 AA 82               207 	mov	r2,dpl
   005B AB 83               208 	mov	r3,dph
   005D AC 93               209 	mov	r4,dpx
   005F AD F0               210 	mov	r5,b
   0061 75 86 01            211 	mov     dps, #1
   0064 90s00r00r0A         212 	mov     dptr, #_memcpy_sloc0_1_0
   0068 E0                  213 	movx	a,@dptr
   0069 F5 82               214 	mov	dpl,a
   006B A3                  215 	inc	dptr
   006C E0                  216 	movx	a,@dptr
   006D F5 83               217 	mov	dph,a
   006F A3                  218 	inc	dptr
   0070 E0                  219 	movx	a,@dptr
   0071 F5 93               220 	mov	dpx,a
   0073 A3                  221 	inc	dptr
   0074 E0                  222 	movx	a,@dptr
   0075 F5 F0               223 	mov	b,a
   0077 75 86 00            224 	mov	dps,#0
   007A EE                  225 	mov	a,r6
   007B 12s00r00r00         226 	lcall	__gptrput
   007F A3                  227 	inc	dptr
   0080 05 86               228 	inc	dps
   0082 12s00r00r00         229 	lcall	__decdptr
   0086 12s00r00r00         230 	lcall	__decdptr
   008A 12s00r00r00         231 	lcall	__decdptr
   008E E5 82               232 	mov	a,dpl
   0090 F0                  233 	movx	@dptr,a
   0091 A3                  234 	inc	dptr
   0092 E5 83               235 	mov	a,dph
   0094 F0                  236 	movx	@dptr,a
   0095 A3                  237 	inc	dptr
   0096 E5 93               238 	mov	a,dpx
   0098 F0                  239 	movx	@dptr,a
   0099 A3                  240 	inc	dptr
   009A E5 F0               241 	mov	a,b
   009C F0                  242 	movx	@dptr,a
   009D 75 86 00            243 	mov	dps,#0
   00A0 80 9C               244 	sjmp 00101$
   00A2                     245 00103$:
                            246 ;	_memcpy.c:53: return(ret);
   00A2 75 86 01            247 	mov     dps, #1
   00A5 90s00r00r06         248 	mov     dptr, #_memcpy_ret_1_1
   00A9 E0                  249 	movx	a,@dptr
   00AA F5 82               250 	mov	dpl,a
   00AC A3                  251 	inc	dptr
   00AD E0                  252 	movx	a,@dptr
   00AE F5 83               253 	mov	dph,a
   00B0 A3                  254 	inc	dptr
   00B1 E0                  255 	movx	a,@dptr
   00B2 F5 93               256 	mov	dpx,a
   00B4 A3                  257 	inc	dptr
   00B5 E0                  258 	movx	a,@dptr
   00B6 F5 F0               259 	mov	b,a
   00B8 75 86 00            260 	mov	dps,#0
   00BB                     261 00104$:
   00BB 22                  262 	ret
                            263 	.area CSEG    (CODE)
                            264 	.area CONST   (CODE)
                            265 	.area XINIT   (CODE)
                            266 	.area CABS    (ABS,CODE)
