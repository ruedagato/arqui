                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:29 2015
                              5 ;--------------------------------------------------------
                              6 	.module _ser
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _TF2
                             13 	.globl _EXF2
                             14 	.globl _RCLK
                             15 	.globl _TCLK
                             16 	.globl _EXEN2
                             17 	.globl _TR2
                             18 	.globl _C_T2
                             19 	.globl _CP_RL2
                             20 	.globl _T2CON_7
                             21 	.globl _T2CON_6
                             22 	.globl _T2CON_5
                             23 	.globl _T2CON_4
                             24 	.globl _T2CON_3
                             25 	.globl _T2CON_2
                             26 	.globl _T2CON_1
                             27 	.globl _T2CON_0
                             28 	.globl _PT2
                             29 	.globl _ET2
                             30 	.globl _CY
                             31 	.globl _AC
                             32 	.globl _F0
                             33 	.globl _RS1
                             34 	.globl _RS0
                             35 	.globl _OV
                             36 	.globl _F1
                             37 	.globl _P
                             38 	.globl _PS
                             39 	.globl _PT1
                             40 	.globl _PX1
                             41 	.globl _PT0
                             42 	.globl _PX0
                             43 	.globl _RD
                             44 	.globl _WR
                             45 	.globl _T1
                             46 	.globl _T0
                             47 	.globl _INT1
                             48 	.globl _INT0
                             49 	.globl _TXD
                             50 	.globl _RXD
                             51 	.globl _P3_7
                             52 	.globl _P3_6
                             53 	.globl _P3_5
                             54 	.globl _P3_4
                             55 	.globl _P3_3
                             56 	.globl _P3_2
                             57 	.globl _P3_1
                             58 	.globl _P3_0
                             59 	.globl _EA
                             60 	.globl _ES
                             61 	.globl _ET1
                             62 	.globl _EX1
                             63 	.globl _ET0
                             64 	.globl _EX0
                             65 	.globl _P2_7
                             66 	.globl _P2_6
                             67 	.globl _P2_5
                             68 	.globl _P2_4
                             69 	.globl _P2_3
                             70 	.globl _P2_2
                             71 	.globl _P2_1
                             72 	.globl _P2_0
                             73 	.globl _SM0
                             74 	.globl _SM1
                             75 	.globl _SM2
                             76 	.globl _REN
                             77 	.globl _TB8
                             78 	.globl _RB8
                             79 	.globl _TI
                             80 	.globl _RI
                             81 	.globl _P1_7
                             82 	.globl _P1_6
                             83 	.globl _P1_5
                             84 	.globl _P1_4
                             85 	.globl _P1_3
                             86 	.globl _P1_2
                             87 	.globl _P1_1
                             88 	.globl _P1_0
                             89 	.globl _TF1
                             90 	.globl _TR1
                             91 	.globl _TF0
                             92 	.globl _TR0
                             93 	.globl _IE1
                             94 	.globl _IT1
                             95 	.globl _IE0
                             96 	.globl _IT0
                             97 	.globl _P0_7
                             98 	.globl _P0_6
                             99 	.globl _P0_5
                            100 	.globl _P0_4
                            101 	.globl _P0_3
                            102 	.globl _P0_2
                            103 	.globl _P0_1
                            104 	.globl _P0_0
                            105 	.globl _TH2
                            106 	.globl _TL2
                            107 	.globl _RCAP2H
                            108 	.globl _RCAP2L
                            109 	.globl _T2CON
                            110 	.globl _B
                            111 	.globl _ACC
                            112 	.globl _PSW
                            113 	.globl _IP
                            114 	.globl _P3
                            115 	.globl _IE
                            116 	.globl _P2
                            117 	.globl _SBUF
                            118 	.globl _SCON
                            119 	.globl _P1
                            120 	.globl _TH1
                            121 	.globl _TH0
                            122 	.globl _TL1
                            123 	.globl _TL0
                            124 	.globl _TMOD
                            125 	.globl _TCON
                            126 	.globl _PCON
                            127 	.globl _DPH
                            128 	.globl _DPL
                            129 	.globl _SP
                            130 	.globl _P0
                            131 	.globl _ser_rxBuffer
                            132 	.globl _ser_txBuffer
                            133 	.globl _ser_rxIndexOut
                            134 	.globl _ser_rxIndexIn
                            135 	.globl _ser_txIndexOut
                            136 	.globl _ser_txIndexIn
                            137 	.globl _ser_init
                            138 	.globl _ser_interrupt_handler
                            139 	.globl _ser_putc
                            140 	.globl _ser_getc
                            141 	.globl _ser_printString
                            142 	.globl _ser_charAvail
                            143 ;--------------------------------------------------------
                            144 ; special function registers
                            145 ;--------------------------------------------------------
                            146 	.area RSEG    (ABS,DATA)
   0000                     147 	.org 0x0000
                    0080    148 _P0	=	0x0080
                    0081    149 _SP	=	0x0081
                    0082    150 _DPL	=	0x0082
                    0083    151 _DPH	=	0x0083
                    0087    152 _PCON	=	0x0087
                    0088    153 _TCON	=	0x0088
                    0089    154 _TMOD	=	0x0089
                    008A    155 _TL0	=	0x008a
                    008B    156 _TL1	=	0x008b
                    008C    157 _TH0	=	0x008c
                    008D    158 _TH1	=	0x008d
                    0090    159 _P1	=	0x0090
                    0098    160 _SCON	=	0x0098
                    0099    161 _SBUF	=	0x0099
                    00A0    162 _P2	=	0x00a0
                    00A8    163 _IE	=	0x00a8
                    00B0    164 _P3	=	0x00b0
                    00B8    165 _IP	=	0x00b8
                    00D0    166 _PSW	=	0x00d0
                    00E0    167 _ACC	=	0x00e0
                    00F0    168 _B	=	0x00f0
                    00C8    169 _T2CON	=	0x00c8
                    00CA    170 _RCAP2L	=	0x00ca
                    00CB    171 _RCAP2H	=	0x00cb
                    00CC    172 _TL2	=	0x00cc
                    00CD    173 _TH2	=	0x00cd
                            174 ;--------------------------------------------------------
                            175 ; special function bits
                            176 ;--------------------------------------------------------
                            177 	.area RSEG    (ABS,DATA)
   0000                     178 	.org 0x0000
                    0080    179 _P0_0	=	0x0080
                    0081    180 _P0_1	=	0x0081
                    0082    181 _P0_2	=	0x0082
                    0083    182 _P0_3	=	0x0083
                    0084    183 _P0_4	=	0x0084
                    0085    184 _P0_5	=	0x0085
                    0086    185 _P0_6	=	0x0086
                    0087    186 _P0_7	=	0x0087
                    0088    187 _IT0	=	0x0088
                    0089    188 _IE0	=	0x0089
                    008A    189 _IT1	=	0x008a
                    008B    190 _IE1	=	0x008b
                    008C    191 _TR0	=	0x008c
                    008D    192 _TF0	=	0x008d
                    008E    193 _TR1	=	0x008e
                    008F    194 _TF1	=	0x008f
                    0090    195 _P1_0	=	0x0090
                    0091    196 _P1_1	=	0x0091
                    0092    197 _P1_2	=	0x0092
                    0093    198 _P1_3	=	0x0093
                    0094    199 _P1_4	=	0x0094
                    0095    200 _P1_5	=	0x0095
                    0096    201 _P1_6	=	0x0096
                    0097    202 _P1_7	=	0x0097
                    0098    203 _RI	=	0x0098
                    0099    204 _TI	=	0x0099
                    009A    205 _RB8	=	0x009a
                    009B    206 _TB8	=	0x009b
                    009C    207 _REN	=	0x009c
                    009D    208 _SM2	=	0x009d
                    009E    209 _SM1	=	0x009e
                    009F    210 _SM0	=	0x009f
                    00A0    211 _P2_0	=	0x00a0
                    00A1    212 _P2_1	=	0x00a1
                    00A2    213 _P2_2	=	0x00a2
                    00A3    214 _P2_3	=	0x00a3
                    00A4    215 _P2_4	=	0x00a4
                    00A5    216 _P2_5	=	0x00a5
                    00A6    217 _P2_6	=	0x00a6
                    00A7    218 _P2_7	=	0x00a7
                    00A8    219 _EX0	=	0x00a8
                    00A9    220 _ET0	=	0x00a9
                    00AA    221 _EX1	=	0x00aa
                    00AB    222 _ET1	=	0x00ab
                    00AC    223 _ES	=	0x00ac
                    00AF    224 _EA	=	0x00af
                    00B0    225 _P3_0	=	0x00b0
                    00B1    226 _P3_1	=	0x00b1
                    00B2    227 _P3_2	=	0x00b2
                    00B3    228 _P3_3	=	0x00b3
                    00B4    229 _P3_4	=	0x00b4
                    00B5    230 _P3_5	=	0x00b5
                    00B6    231 _P3_6	=	0x00b6
                    00B7    232 _P3_7	=	0x00b7
                    00B0    233 _RXD	=	0x00b0
                    00B1    234 _TXD	=	0x00b1
                    00B2    235 _INT0	=	0x00b2
                    00B3    236 _INT1	=	0x00b3
                    00B4    237 _T0	=	0x00b4
                    00B5    238 _T1	=	0x00b5
                    00B6    239 _WR	=	0x00b6
                    00B7    240 _RD	=	0x00b7
                    00B8    241 _PX0	=	0x00b8
                    00B9    242 _PT0	=	0x00b9
                    00BA    243 _PX1	=	0x00ba
                    00BB    244 _PT1	=	0x00bb
                    00BC    245 _PS	=	0x00bc
                    00D0    246 _P	=	0x00d0
                    00D1    247 _F1	=	0x00d1
                    00D2    248 _OV	=	0x00d2
                    00D3    249 _RS0	=	0x00d3
                    00D4    250 _RS1	=	0x00d4
                    00D5    251 _F0	=	0x00d5
                    00D6    252 _AC	=	0x00d6
                    00D7    253 _CY	=	0x00d7
                    00AD    254 _ET2	=	0x00ad
                    00BD    255 _PT2	=	0x00bd
                    00C8    256 _T2CON_0	=	0x00c8
                    00C9    257 _T2CON_1	=	0x00c9
                    00CA    258 _T2CON_2	=	0x00ca
                    00CB    259 _T2CON_3	=	0x00cb
                    00CC    260 _T2CON_4	=	0x00cc
                    00CD    261 _T2CON_5	=	0x00cd
                    00CE    262 _T2CON_6	=	0x00ce
                    00CF    263 _T2CON_7	=	0x00cf
                    00C8    264 _CP_RL2	=	0x00c8
                    00C9    265 _C_T2	=	0x00c9
                    00CA    266 _TR2	=	0x00ca
                    00CB    267 _EXEN2	=	0x00cb
                    00CC    268 _TCLK	=	0x00cc
                    00CD    269 _RCLK	=	0x00cd
                    00CE    270 _EXF2	=	0x00ce
                    00CF    271 _TF2	=	0x00cf
                            272 ;--------------------------------------------------------
                            273 ; overlayable register banks
                            274 ;--------------------------------------------------------
                            275 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     276 	.ds 8
                            277 	.area REG_BANK_1	(REL,OVR,DATA)
   0000                     278 	.ds 8
                            279 ;--------------------------------------------------------
                            280 ; internal ram data
                            281 ;--------------------------------------------------------
                            282 	.area DSEG    (DATA)
                            283 ;--------------------------------------------------------
                            284 ; overlayable items in internal ram 
                            285 ;--------------------------------------------------------
                            286 	.area OSEG    (OVR,DATA)
                            287 ;--------------------------------------------------------
                            288 ; indirectly addressable internal ram data
                            289 ;--------------------------------------------------------
                            290 	.area ISEG    (DATA)
                            291 ;--------------------------------------------------------
                            292 ; absolute internal ram data
                            293 ;--------------------------------------------------------
                            294 	.area IABS    (ABS,DATA)
                            295 	.area IABS    (ABS,DATA)
                            296 ;--------------------------------------------------------
                            297 ; bit data
                            298 ;--------------------------------------------------------
                            299 	.area BSEG    (BIT)
   0000                     300 _ser_txBusy:
   0000                     301 	.ds 1
                            302 ;--------------------------------------------------------
                            303 ; paged external ram data
                            304 ;--------------------------------------------------------
                            305 	.area PSEG    (PAG,XDATA)
                            306 ;--------------------------------------------------------
                            307 ; external ram data
                            308 ;--------------------------------------------------------
                            309 	.area XSEG    (XDATA)
   0000                     310 _ser_txIndexIn::
   0000                     311 	.ds 1
   0001                     312 _ser_txIndexOut::
   0001                     313 	.ds 1
   0002                     314 _ser_rxIndexIn::
   0002                     315 	.ds 1
   0003                     316 _ser_rxIndexOut::
   0003                     317 	.ds 1
   0004                     318 _ser_txBuffer::
   0004                     319 	.ds 256
   0104                     320 _ser_rxBuffer::
   0104                     321 	.ds 256
   0204                     322 _ser_putc_c_1_1:
   0204                     323 	.ds 1
   0205                     324 _ser_getc_tmp_1_1:
   0205                     325 	.ds 1
   0206                     326 _ser_printString_String_1_1:
   0206                     327 	.ds 3
   0209                     328 _ser_charAvail_ret_1_1:
   0209                     329 	.ds 1
                            330 ;--------------------------------------------------------
                            331 ; absolute external ram data
                            332 ;--------------------------------------------------------
                            333 	.area XABS    (ABS,XDATA)
                            334 ;--------------------------------------------------------
                            335 ; external initialized ram data
                            336 ;--------------------------------------------------------
                            337 	.area XISEG   (XDATA)
                            338 	.area HOME    (CODE)
                            339 	.area GSINIT0 (CODE)
                            340 	.area GSINIT1 (CODE)
                            341 	.area GSINIT2 (CODE)
                            342 	.area GSINIT3 (CODE)
                            343 	.area GSINIT4 (CODE)
                            344 	.area GSINIT5 (CODE)
                            345 	.area GSINIT  (CODE)
                            346 	.area GSFINAL (CODE)
                            347 	.area CSEG    (CODE)
                            348 ;--------------------------------------------------------
                            349 ; global & static initialisations
                            350 ;--------------------------------------------------------
                            351 	.area HOME    (CODE)
                            352 	.area GSINIT  (CODE)
                            353 	.area GSFINAL (CODE)
                            354 	.area GSINIT  (CODE)
                            355 ;--------------------------------------------------------
                            356 ; Home
                            357 ;--------------------------------------------------------
                            358 	.area HOME    (CODE)
                            359 	.area HOME    (CODE)
                            360 ;--------------------------------------------------------
                            361 ; code
                            362 ;--------------------------------------------------------
                            363 	.area CSEG    (CODE)
                            364 ;------------------------------------------------------------
                            365 ;Allocation info for local variables in function 'ser_init'
                            366 ;------------------------------------------------------------
                            367 ;------------------------------------------------------------
                            368 ;	_ser.c:76: ser_init(void)
                            369 ;	-----------------------------------------
                            370 ;	 function ser_init
                            371 ;	-----------------------------------------
   0000                     372 _ser_init:
                    0002    373 	ar2 = 0x02
                    0003    374 	ar3 = 0x03
                    0004    375 	ar4 = 0x04
                    0005    376 	ar5 = 0x05
                    0006    377 	ar6 = 0x06
                    0007    378 	ar7 = 0x07
                    0000    379 	ar0 = 0x00
                    0001    380 	ar1 = 0x01
                            381 ;	_ser.c:78: ES = 0;
   0000 C2 AC               382 	clr	_ES
                            383 ;	_ser.c:80: ser_txBusy     = 0;
   0002 C2*00               384 	clr	_ser_txBusy
                            385 ;	_ser.c:82: ser_txIndexIn  = 0;
   0004 90s00r00            386 	mov	dptr,#_ser_txIndexIn
                            387 ;	_ser.c:83: ser_txIndexOut = 0;
                            388 ;	_ser.c:84: ser_rxIndexIn  = 0;
                            389 ;	_ser.c:85: ser_rxIndexOut = 0;
   0007 E4                  390 	clr	a
   0008 F0                  391 	movx	@dptr,a
   0009 90s00r01            392 	mov	dptr,#_ser_txIndexOut
   000C F0                  393 	movx	@dptr,a
   000D 90s00r02            394 	mov	dptr,#_ser_rxIndexIn
   0010 F0                  395 	movx	@dptr,a
   0011 90s00r03            396 	mov	dptr,#_ser_rxIndexOut
   0014 F0                  397 	movx	@dptr,a
                            398 ;	_ser.c:87: T2CON = 0x30;
   0015 75 C8 30            399 	mov	_T2CON,#0x30
                            400 ;	_ser.c:90: RCAP2H = 0xFF;
   0018 75 CB FF            401 	mov	_RCAP2H,#0xFF
                            402 ;	_ser.c:91: RCAP2L = 0xDD;
   001B 75 CA DD            403 	mov	_RCAP2L,#0xDD
                            404 ;	_ser.c:94: T2CON = 0x34;
   001E 75 C8 34            405 	mov	_T2CON,#0x34
                            406 ;	_ser.c:96: SCON = 0x50;
   0021 75 98 50            407 	mov	_SCON,#0x50
                            408 ;	_ser.c:98: if (TI) {
                            409 ;	_ser.c:99: TI = 0;
   0024 10 99 02            410 	jbc	_TI,00109$
   0027 80 00               411 	sjmp	00102$
   0029                     412 00109$:
   0029                     413 00102$:
                            414 ;	_ser.c:101: if (RI) {
                            415 ;	_ser.c:102: RI = 0;
   0029 10 98 02            416 	jbc	_RI,00110$
   002C 80 00               417 	sjmp	00104$
   002E                     418 00110$:
   002E                     419 00104$:
                            420 ;	_ser.c:105: ES=1;  
   002E D2 AC               421 	setb	_ES
   0030 22                  422 	ret
                            423 ;------------------------------------------------------------
                            424 ;Allocation info for local variables in function 'ser_interrupt_handler'
                            425 ;------------------------------------------------------------
                            426 ;------------------------------------------------------------
                            427 ;	_ser.c:109: ser_interrupt_handler(void) __interrupt 4 __using 1
                            428 ;	-----------------------------------------
                            429 ;	 function ser_interrupt_handler
                            430 ;	-----------------------------------------
   0031                     431 _ser_interrupt_handler:
                    000A    432 	ar2 = 0x0a
                    000B    433 	ar3 = 0x0b
                    000C    434 	ar4 = 0x0c
                    000D    435 	ar5 = 0x0d
                    000E    436 	ar6 = 0x0e
                    000F    437 	ar7 = 0x0f
                    0008    438 	ar0 = 0x08
                    0009    439 	ar1 = 0x09
   0031 C0 E0               440 	push	acc
   0033 C0 82               441 	push	dpl
   0035 C0 83               442 	push	dph
   0037 C0 D0               443 	push	psw
   0039 75 D0 08            444 	mov	psw,#0x08
                            445 ;	_ser.c:111: ES=0;
   003C C2 AC               446 	clr	_ES
                            447 ;	_ser.c:113: if (RI) {
                            448 ;	_ser.c:114: RI = 0;
   003E 10 98 02            449 	jbc	_RI,00113$
   0041 80 17               450 	sjmp	00102$
   0043                     451 00113$:
                            452 ;	_ser.c:115: ser_rxBuffer[ser_rxIndexIn++] = SBUF;
   0043 90s00r02            453 	mov	dptr,#_ser_rxIndexIn
   0046 E0                  454 	movx	a,@dptr
   0047 FA                  455 	mov	r2,a
   0048 90s00r02            456 	mov	dptr,#_ser_rxIndexIn
   004B 04                  457 	inc	a
   004C F0                  458 	movx	@dptr,a
   004D EA                  459 	mov	a,r2
   004E 24r04               460 	add	a,#_ser_rxBuffer
   0050 F5 82               461 	mov	dpl,a
   0052 E4                  462 	clr	a
   0053 34s01               463 	addc	a,#(_ser_rxBuffer >> 8)
   0055 F5 83               464 	mov	dph,a
   0057 E5 99               465 	mov	a,_SBUF
   0059 F0                  466 	movx	@dptr,a
   005A                     467 00102$:
                            468 ;	_ser.c:118: if (TI) {
                            469 ;	_ser.c:119: TI = 0;
   005A 10 99 02            470 	jbc	_TI,00114$
   005D 80 25               471 	sjmp	00107$
   005F                     472 00114$:
                            473 ;	_ser.c:120: if (ser_txIndexIn == ser_txIndexOut) {
   005F 90s00r00            474 	mov	dptr,#_ser_txIndexIn
   0062 E0                  475 	movx	a,@dptr
   0063 FA                  476 	mov	r2,a
   0064 90s00r01            477 	mov	dptr,#_ser_txIndexOut
   0067 E0                  478 	movx	a,@dptr
   0068 FB                  479 	mov	r3,a
   0069 EA                  480 	mov	a,r2
   006A B5 0B 04            481 	cjne	a,ar3,00104$
                            482 ;	_ser.c:121: ser_txBusy = 0;
   006D C2*00               483 	clr	_ser_txBusy
   006F 80 13               484 	sjmp	00107$
   0071                     485 00104$:
                            486 ;	_ser.c:124: SBUF = ser_txBuffer[ser_txIndexOut++];
   0071 90s00r01            487 	mov	dptr,#_ser_txIndexOut
   0074 EB                  488 	mov	a,r3
   0075 04                  489 	inc	a
   0076 F0                  490 	movx	@dptr,a
   0077 EB                  491 	mov	a,r3
   0078 24r04               492 	add	a,#_ser_txBuffer
   007A F5 82               493 	mov	dpl,a
   007C E4                  494 	clr	a
   007D 34s00               495 	addc	a,#(_ser_txBuffer >> 8)
   007F F5 83               496 	mov	dph,a
   0081 E0                  497 	movx	a,@dptr
   0082 F5 99               498 	mov	_SBUF,a
   0084                     499 00107$:
                            500 ;	_ser.c:128: ES=1;
   0084 D2 AC               501 	setb	_ES
   0086 D0 D0               502 	pop	psw
   0088 D0 83               503 	pop	dph
   008A D0 82               504 	pop	dpl
   008C D0 E0               505 	pop	acc
   008E 32                  506 	reti
                            507 ;	eliminated unneeded push/pop b
                            508 ;------------------------------------------------------------
                            509 ;Allocation info for local variables in function 'ser_putc'
                            510 ;------------------------------------------------------------
                            511 ;c                         Allocated with name '_ser_putc_c_1_1'
                            512 ;------------------------------------------------------------
                            513 ;	_ser.c:132: ser_putc(unsigned char c)
                            514 ;	-----------------------------------------
                            515 ;	 function ser_putc
                            516 ;	-----------------------------------------
   008F                     517 _ser_putc:
                    0002    518 	ar2 = 0x02
                    0003    519 	ar3 = 0x03
                    0004    520 	ar4 = 0x04
                    0005    521 	ar5 = 0x05
                    0006    522 	ar6 = 0x06
                    0007    523 	ar7 = 0x07
                    0000    524 	ar0 = 0x00
                    0001    525 	ar1 = 0x01
   008F E5 82               526 	mov	a,dpl
   0091 90s02r04            527 	mov	dptr,#_ser_putc_c_1_1
   0094 F0                  528 	movx	@dptr,a
                            529 ;	_ser.c:134: ES=0;
   0095 C2 AC               530 	clr	_ES
                            531 ;	_ser.c:136: if (ser_txBusy) {
   0097 30*00 1E            532 	jnb	_ser_txBusy,00102$
                            533 ;	_ser.c:137: ser_txBuffer[ser_txIndexIn++] = c;
   009A 90s00r00            534 	mov	dptr,#_ser_txIndexIn
   009D E0                  535 	movx	a,@dptr
   009E FA                  536 	mov	r2,a
   009F 90s00r00            537 	mov	dptr,#_ser_txIndexIn
   00A2 04                  538 	inc	a
   00A3 F0                  539 	movx	@dptr,a
   00A4 EA                  540 	mov	a,r2
   00A5 24r04               541 	add	a,#_ser_txBuffer
   00A7 FA                  542 	mov	r2,a
   00A8 E4                  543 	clr	a
   00A9 34s00               544 	addc	a,#(_ser_txBuffer >> 8)
   00AB FB                  545 	mov	r3,a
   00AC 90s02r04            546 	mov	dptr,#_ser_putc_c_1_1
   00AF E0                  547 	movx	a,@dptr
   00B0 FC                  548 	mov	r4,a
   00B1 8A 82               549 	mov	dpl,r2
   00B3 8B 83               550 	mov	dph,r3
   00B5 F0                  551 	movx	@dptr,a
   00B6 80 08               552 	sjmp	00103$
   00B8                     553 00102$:
                            554 ;	_ser.c:140: ser_txBusy = 1;
   00B8 D2*00               555 	setb	_ser_txBusy
                            556 ;	_ser.c:141: SBUF = c;
   00BA 90s02r04            557 	mov	dptr,#_ser_putc_c_1_1
   00BD E0                  558 	movx	a,@dptr
   00BE F5 99               559 	mov	_SBUF,a
   00C0                     560 00103$:
                            561 ;	_ser.c:144: ES=1;
   00C0 D2 AC               562 	setb	_ES
   00C2 22                  563 	ret
                            564 ;------------------------------------------------------------
                            565 ;Allocation info for local variables in function 'ser_getc'
                            566 ;------------------------------------------------------------
                            567 ;tmp                       Allocated with name '_ser_getc_tmp_1_1'
                            568 ;------------------------------------------------------------
                            569 ;	_ser.c:148: ser_getc(void)
                            570 ;	-----------------------------------------
                            571 ;	 function ser_getc
                            572 ;	-----------------------------------------
   00C3                     573 _ser_getc:
                            574 ;	_ser.c:153: if (ser_rxIndexIn != ser_rxIndexOut) {
   00C3 90s00r02            575 	mov	dptr,#_ser_rxIndexIn
   00C6 E0                  576 	movx	a,@dptr
   00C7 FA                  577 	mov	r2,a
   00C8 90s00r03            578 	mov	dptr,#_ser_rxIndexOut
   00CB E0                  579 	movx	a,@dptr
   00CC FB                  580 	mov	r3,a
   00CD EA                  581 	mov	a,r2
   00CE B5 03 02            582 	cjne	a,ar3,00107$
   00D1 80 18               583 	sjmp	00102$
   00D3                     584 00107$:
                            585 ;	_ser.c:154: tmp = ser_rxBuffer[ser_rxIndexOut++];
   00D3 90s00r03            586 	mov	dptr,#_ser_rxIndexOut
   00D6 EB                  587 	mov	a,r3
   00D7 04                  588 	inc	a
   00D8 F0                  589 	movx	@dptr,a
   00D9 EB                  590 	mov	a,r3
   00DA 24r04               591 	add	a,#_ser_rxBuffer
   00DC F5 82               592 	mov	dpl,a
   00DE E4                  593 	clr	a
   00DF 34s01               594 	addc	a,#(_ser_rxBuffer >> 8)
   00E1 F5 83               595 	mov	dph,a
   00E3 E0                  596 	movx	a,@dptr
   00E4 FA                  597 	mov	r2,a
   00E5 90s02r05            598 	mov	dptr,#_ser_getc_tmp_1_1
   00E8 F0                  599 	movx	@dptr,a
   00E9 80 05               600 	sjmp	00103$
   00EB                     601 00102$:
                            602 ;	_ser.c:157: tmp = 0;
   00EB 90s02r05            603 	mov	dptr,#_ser_getc_tmp_1_1
   00EE E4                  604 	clr	a
   00EF F0                  605 	movx	@dptr,a
   00F0                     606 00103$:
                            607 ;	_ser.c:161: return(tmp);
   00F0 90s02r05            608 	mov	dptr,#_ser_getc_tmp_1_1
   00F3 E0                  609 	movx	a,@dptr
   00F4 F5 82               610 	mov	dpl,a
   00F6 22                  611 	ret
                            612 ;------------------------------------------------------------
                            613 ;Allocation info for local variables in function 'ser_printString'
                            614 ;------------------------------------------------------------
                            615 ;String                    Allocated with name '_ser_printString_String_1_1'
                            616 ;------------------------------------------------------------
                            617 ;	_ser.c:165: ser_printString(char *String)
                            618 ;	-----------------------------------------
                            619 ;	 function ser_printString
                            620 ;	-----------------------------------------
   00F7                     621 _ser_printString:
   00F7 AA F0               622 	mov	r2,b
   00F9 AB 83               623 	mov	r3,dph
   00FB E5 82               624 	mov	a,dpl
   00FD 90s02r06            625 	mov	dptr,#_ser_printString_String_1_1
   0100 F0                  626 	movx	@dptr,a
   0101 A3                  627 	inc	dptr
   0102 EB                  628 	mov	a,r3
   0103 F0                  629 	movx	@dptr,a
   0104 A3                  630 	inc	dptr
   0105 EA                  631 	mov	a,r2
   0106 F0                  632 	movx	@dptr,a
                            633 ;	_ser.c:167: while (*String) {
   0107 90s02r06            634 	mov	dptr,#_ser_printString_String_1_1
   010A E0                  635 	movx	a,@dptr
   010B FA                  636 	mov	r2,a
   010C A3                  637 	inc	dptr
   010D E0                  638 	movx	a,@dptr
   010E FB                  639 	mov	r3,a
   010F A3                  640 	inc	dptr
   0110 E0                  641 	movx	a,@dptr
   0111 FC                  642 	mov	r4,a
   0112                     643 00101$:
   0112 8A 82               644 	mov	dpl,r2
   0114 8B 83               645 	mov	dph,r3
   0116 8C F0               646 	mov	b,r4
   0118 12s00r00            647 	lcall	__gptrget
   011B FD                  648 	mov	r5,a
   011C 60 23               649 	jz	00108$
                            650 ;	_ser.c:168: ser_putc(*String++);
   011E 0A                  651 	inc	r2
   011F BA 00 01            652 	cjne	r2,#0x00,00110$
   0122 0B                  653 	inc	r3
   0123                     654 00110$:
   0123 90s02r06            655 	mov	dptr,#_ser_printString_String_1_1
   0126 EA                  656 	mov	a,r2
   0127 F0                  657 	movx	@dptr,a
   0128 A3                  658 	inc	dptr
   0129 EB                  659 	mov	a,r3
   012A F0                  660 	movx	@dptr,a
   012B A3                  661 	inc	dptr
   012C EC                  662 	mov	a,r4
   012D F0                  663 	movx	@dptr,a
   012E 8D 82               664 	mov	dpl,r5
   0130 C0 02               665 	push	ar2
   0132 C0 03               666 	push	ar3
   0134 C0 04               667 	push	ar4
   0136 12s00r8F            668 	lcall	_ser_putc
   0139 D0 04               669 	pop	ar4
   013B D0 03               670 	pop	ar3
   013D D0 02               671 	pop	ar2
   013F 80 D1               672 	sjmp	00101$
   0141                     673 00108$:
   0141 90s02r06            674 	mov	dptr,#_ser_printString_String_1_1
   0144 EA                  675 	mov	a,r2
   0145 F0                  676 	movx	@dptr,a
   0146 A3                  677 	inc	dptr
   0147 EB                  678 	mov	a,r3
   0148 F0                  679 	movx	@dptr,a
   0149 A3                  680 	inc	dptr
   014A EC                  681 	mov	a,r4
   014B F0                  682 	movx	@dptr,a
   014C 22                  683 	ret
                            684 ;------------------------------------------------------------
                            685 ;Allocation info for local variables in function 'ser_charAvail'
                            686 ;------------------------------------------------------------
                            687 ;ret                       Allocated with name '_ser_charAvail_ret_1_1'
                            688 ;------------------------------------------------------------
                            689 ;	_ser.c:173: ser_charAvail(void)
                            690 ;	-----------------------------------------
                            691 ;	 function ser_charAvail
                            692 ;	-----------------------------------------
   014D                     693 _ser_charAvail:
                            694 ;	_ser.c:175: char ret = 0;
   014D 90s02r09            695 	mov	dptr,#_ser_charAvail_ret_1_1
   0150 E4                  696 	clr	a
   0151 F0                  697 	movx	@dptr,a
                            698 ;	_ser.c:177: if (ser_rxIndexIn != ser_rxIndexOut) {
   0152 90s00r02            699 	mov	dptr,#_ser_rxIndexIn
   0155 E0                  700 	movx	a,@dptr
   0156 FA                  701 	mov	r2,a
   0157 90s00r03            702 	mov	dptr,#_ser_rxIndexOut
   015A E0                  703 	movx	a,@dptr
   015B FB                  704 	mov	r3,a
   015C EA                  705 	mov	a,r2
   015D B5 03 02            706 	cjne	a,ar3,00106$
   0160 80 06               707 	sjmp	00102$
   0162                     708 00106$:
                            709 ;	_ser.c:178: ret = 1;
   0162 90s02r09            710 	mov	dptr,#_ser_charAvail_ret_1_1
   0165 74 01               711 	mov	a,#0x01
   0167 F0                  712 	movx	@dptr,a
   0168                     713 00102$:
                            714 ;	_ser.c:181: return(ret);
   0168 90s02r09            715 	mov	dptr,#_ser_charAvail_ret_1_1
   016B E0                  716 	movx	a,@dptr
   016C F5 82               717 	mov	dpl,a
   016E 22                  718 	ret
                            719 	.area CSEG    (CODE)
                            720 	.area CONST   (CODE)
                            721 	.area XINIT   (CODE)
                            722 	.area CABS    (ABS,CODE)
