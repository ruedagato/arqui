    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; * picocode.psm -  LED Control
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *      ___       _         _   _       _ ___ _ _ ___
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; * | __._ _ _| |_ ___ _| |_| |___ _| | . | \ |_ _|
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; * | _>| ' ' | . / ._/ . / . / ._/ . |   |   || |
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; * |___|_|_|_|___\___\___\___\___\___|_|_|_\_||_|
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *  Created on : 20/07/2015
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *      Author : Ernesto Andres Rincon Cruz
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *      Web  : www.embeddedant.org
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *    Device : XC3S700AN - 4FGG484
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *    Board  : Spartan-3AN Starter Kit.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *  Based on Ken Chapman code v1.00 - 4th January 2006
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *      Revision History:
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *   Rev 1.0.0 - (ErnestoARC) First release 16/08/2015.
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; *
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;//////////////////////////////////////////////////////////////////////////////////
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Use CONSTANT declarations to define output port addresses
    ADDRESS-000
      LABEL-
  FORMATTED-CONSTANT PORT_A, 00
  LOGFORMAT-CONSTANT PORT_A, 00
INSTRUCTION-CONSTANT
   OPERAND1-PORT_A
  OP1 VALUE-PORT_A
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;
    ADDRESS-000
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-000
      LABEL-
  FORMATTED-ADDRESS 000
  LOGFORMAT-ADDRESS 000
INSTRUCTION-ADDRESS
   OPERAND1-000
  OP1 VALUE-000
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Programs always start at reset vector 0
    ADDRESS-000
      LABEL-
  FORMATTED-DISABLE INTERRUPT
  LOGFORMAT-DISABLE INTERRUPT
INSTRUCTION-DISABLE
   OPERAND1-INTERRUPT
  OP1 VALUE-INTERRUPT
   OPERAND2-
  OP2 VALUE-
    COMMENT-; If using interrupts, be sure to enable the INTERRUPT input
    ADDRESS-001
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-001
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;
    ADDRESS-001
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-001
      LABEL-
  FORMATTED-LOAD sF, 3F
  LOGFORMAT-LOAD sF, 3F
INSTRUCTION-LOAD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-3F
  OP2 VALUE-3F
    COMMENT-
    ADDRESS-002
      LABEL-
  FORMATTED-JUMP __sdcc_program_startup
  LOGFORMAT-JUMP __sdcc_program_startup[003]
INSTRUCTION-JUMP
   OPERAND1-__sdcc_program_startup
  OP1 VALUE-003
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-003
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;--------------------------------------------------------
    ADDRESS-003
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Home
    ADDRESS-003
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;--------------------------------------------------------
    ADDRESS-003
      LABEL-__sdcc_program_startup
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-003
      LABEL-
  FORMATTED-CALL _main
  LOGFORMAT-CALL _main[005]
INSTRUCTION-CALL
   OPERAND1-_main
  OP1 VALUE-005
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-004
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; return from main will lock up
    ADDRESS-004
      LABEL-__sdcc_loop
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-004
      LABEL-
  FORMATTED-JUMP __sdcc_loop
  LOGFORMAT-JUMP __sdcc_loop[004]
INSTRUCTION-JUMP
   OPERAND1-__sdcc_loop
  OP1 VALUE-004
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;--------------------------------------------------------
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; code
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;--------------------------------------------------------
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:20: void main()
    ADDRESS-005
      LABEL-_main
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-005
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:22: char cont_sato = 20;
    ADDRESS-005
      LABEL-
  FORMATTED-LOAD s0, 14
  LOGFORMAT-LOAD s0, 14
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-14
  OP2 VALUE-14
    COMMENT-
    ADDRESS-006
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:24: char cont_led = 100;
    ADDRESS-006
      LABEL-
  FORMATTED-LOAD s1, 64
  LOGFORMAT-LOAD s1, 64
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-64
  OP2 VALUE-64
    COMMENT-
    ADDRESS-007
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:25: led_on();
    ADDRESS-007
      LABEL-
  FORMATTED-STORE s0, (sF)
  LOGFORMAT-STORE s0, (sF)
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-008
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-009
      LABEL-
  FORMATTED-STORE s1, (sF)
  LOGFORMAT-STORE s1, (sF)
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-00A
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-00B
      LABEL-
  FORMATTED-CALL _led_on
  LOGFORMAT-CALL _led_on[04D]
INSTRUCTION-CALL
   OPERAND1-_led_on
  OP1 VALUE-04D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-00C
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-00D
      LABEL-
  FORMATTED-FETCH s1, (sF)
  LOGFORMAT-FETCH s1, (sF)
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-00E
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-00F
      LABEL-
  FORMATTED-FETCH s0, (sF)
  LOGFORMAT-FETCH s0, (sF)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-010
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:26: while(1)
    ADDRESS-010
      LABEL-_L00111
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-010
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:28: if (cont_sato == 0)
    ADDRESS-010
      LABEL-
  FORMATTED-COMPARE s0, 00
  LOGFORMAT-COMPARE s0, 00
INSTRUCTION-COMPARE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-011
      LABEL-
  FORMATTED-JUMP Z, _LC00135
  LOGFORMAT-JUMP Z, _LC00135[013]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-_LC00135
  OP2 VALUE-013
    COMMENT-
    ADDRESS-012
      LABEL-
  FORMATTED-JUMP _L00102
  LOGFORMAT-JUMP _L00102[01E]
INSTRUCTION-JUMP
   OPERAND1-_L00102
  OP1 VALUE-01E
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-013
      LABEL-_LC00135
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-013
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:30: cont_sato = 20;
    ADDRESS-013
      LABEL-
  FORMATTED-LOAD s0, 14
  LOGFORMAT-LOAD s0, 14
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-14
  OP2 VALUE-14
    COMMENT-
    ADDRESS-014
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:31: saltar();
    ADDRESS-014
      LABEL-
  FORMATTED-STORE s0, (sF)
  LOGFORMAT-STORE s0, (sF)
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-015
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-016
      LABEL-
  FORMATTED-STORE s1, (sF)
  LOGFORMAT-STORE s1, (sF)
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-017
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-018
      LABEL-
  FORMATTED-CALL _saltar
  LOGFORMAT-CALL _saltar[047]
INSTRUCTION-CALL
   OPERAND1-_saltar
  OP1 VALUE-047
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-019
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-01A
      LABEL-
  FORMATTED-FETCH s1, (sF)
  LOGFORMAT-FETCH s1, (sF)
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-01B
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-01C
      LABEL-
  FORMATTED-FETCH s0, (sF)
  LOGFORMAT-FETCH s0, (sF)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-01D
      LABEL-
  FORMATTED-JUMP _L00103
  LOGFORMAT-JUMP _L00103[01F]
INSTRUCTION-JUMP
   OPERAND1-_L00103
  OP1 VALUE-01F
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-01E
      LABEL-_L00102
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-01E
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:34: cont_sato --;
    ADDRESS-01E
      LABEL-
  FORMATTED-SUB s0, 01
  LOGFORMAT-SUB s0, 01
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-01F
      LABEL-_L00103
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-01F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:36: if (cont_led == 50)
    ADDRESS-01F
      LABEL-
  FORMATTED-COMPARE s1, 32
  LOGFORMAT-COMPARE s1, 32
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-32
  OP2 VALUE-32
    COMMENT-
    ADDRESS-020
      LABEL-
  FORMATTED-JUMP NZ, _L00105
  LOGFORMAT-JUMP NZ, _L00105[02B]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-_L00105
  OP2 VALUE-02B
    COMMENT-
    ADDRESS-021
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:37: led_on();
    ADDRESS-021
      LABEL-
  FORMATTED-STORE s0, (sF)
  LOGFORMAT-STORE s0, (sF)
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-022
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-023
      LABEL-
  FORMATTED-STORE s1, (sF)
  LOGFORMAT-STORE s1, (sF)
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-024
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-025
      LABEL-
  FORMATTED-CALL _led_on
  LOGFORMAT-CALL _led_on[04D]
INSTRUCTION-CALL
   OPERAND1-_led_on
  OP1 VALUE-04D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-026
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-027
      LABEL-
  FORMATTED-FETCH s1, (sF)
  LOGFORMAT-FETCH s1, (sF)
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-028
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-029
      LABEL-
  FORMATTED-FETCH s0, (sF)
  LOGFORMAT-FETCH s0, (sF)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-02A
      LABEL-
  FORMATTED-JUMP _L00106
  LOGFORMAT-JUMP _L00106[02C]
INSTRUCTION-JUMP
   OPERAND1-_L00106
  OP1 VALUE-02C
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02B
      LABEL-_L00105
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:39: cont_led --;
    ADDRESS-02B
      LABEL-
  FORMATTED-SUB s1, 01
  LOGFORMAT-SUB s1, 01
INSTRUCTION-SUB
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-02C
      LABEL-_L00106
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:40: if (cont_led == 0)
    ADDRESS-02C
      LABEL-
  FORMATTED-COMPARE s1, 00
  LOGFORMAT-COMPARE s1, 00
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-02D
      LABEL-
  FORMATTED-JUMP Z, _LC00136
  LOGFORMAT-JUMP Z, _LC00136[02F]
INSTRUCTION-JUMP
   OPERAND1-Z
  OP1 VALUE-Z
   OPERAND2-_LC00136
  OP2 VALUE-02F
    COMMENT-
    ADDRESS-02E
      LABEL-
  FORMATTED-JUMP _L00108
  LOGFORMAT-JUMP _L00108[03A]
INSTRUCTION-JUMP
   OPERAND1-_L00108
  OP1 VALUE-03A
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02F
      LABEL-_LC00136
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-02F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:42: led_off();
    ADDRESS-02F
      LABEL-
  FORMATTED-STORE s0, (sF)
  LOGFORMAT-STORE s0, (sF)
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-030
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-031
      LABEL-
  FORMATTED-STORE s1, (sF)
  LOGFORMAT-STORE s1, (sF)
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-032
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-033
      LABEL-
  FORMATTED-CALL _led_off
  LOGFORMAT-CALL _led_off[050]
INSTRUCTION-CALL
   OPERAND1-_led_off
  OP1 VALUE-050
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-034
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-035
      LABEL-
  FORMATTED-FETCH s1, (sF)
  LOGFORMAT-FETCH s1, (sF)
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-036
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-037
      LABEL-
  FORMATTED-FETCH s0, (sF)
  LOGFORMAT-FETCH s0, (sF)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-038
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:43: cont_led = 100;
    ADDRESS-038
      LABEL-
  FORMATTED-LOAD s1, 64
  LOGFORMAT-LOAD s1, 64
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-64
  OP2 VALUE-64
    COMMENT-
    ADDRESS-039
      LABEL-
  FORMATTED-JUMP _L00109
  LOGFORMAT-JUMP _L00109[03B]
INSTRUCTION-JUMP
   OPERAND1-_L00109
  OP1 VALUE-03B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-03A
      LABEL-_L00108
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-03A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:46: cont_led --;
    ADDRESS-03A
      LABEL-
  FORMATTED-SUB s1, 01
  LOGFORMAT-SUB s1, 01
INSTRUCTION-SUB
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-03B
      LABEL-_L00109
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-03B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:47: delay_ms(10);
    ADDRESS-03B
      LABEL-
  FORMATTED-STORE s0, (sF)
  LOGFORMAT-STORE s0, (sF)
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-03C
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-03D
      LABEL-
  FORMATTED-STORE s1, (sF)
  LOGFORMAT-STORE s1, (sF)
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-03E
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-03F
      LABEL-
  FORMATTED-LOAD sB, 0A
  LOGFORMAT-LOAD sB, 0A
INSTRUCTION-LOAD
   OPERAND1-sB
  OP1 VALUE-sB
   OPERAND2-0A
  OP2 VALUE-0A
    COMMENT-
    ADDRESS-040
      LABEL-
  FORMATTED-LOAD sC, 00
  LOGFORMAT-LOAD sC, 00
INSTRUCTION-LOAD
   OPERAND1-sC
  OP1 VALUE-sC
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-041
      LABEL-
  FORMATTED-CALL _delay_ms
  LOGFORMAT-CALL _delay_ms[05B]
INSTRUCTION-CALL
   OPERAND1-_delay_ms
  OP1 VALUE-05B
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-042
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-043
      LABEL-
  FORMATTED-FETCH s1, (sF)
  LOGFORMAT-FETCH s1, (sF)
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-044
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-045
      LABEL-
  FORMATTED-FETCH s0, (sF)
  LOGFORMAT-FETCH s0, (sF)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-046
      LABEL-
  FORMATTED-JUMP _L00111
  LOGFORMAT-JUMP _L00111[010]
INSTRUCTION-JUMP
   OPERAND1-_L00111
  OP1 VALUE-010
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-047
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:51: void saltar()
    ADDRESS-047
      LABEL-_saltar
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-047
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:56: __endasm;
    ADDRESS-047
      LABEL-
  FORMATTED-XOR s7, 02
  LOGFORMAT-XOR s7, 02
INSTRUCTION-XOR
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-
    ADDRESS-048
      LABEL-
  FORMATTED-OUTPUT s7, 00
  LOGFORMAT-OUTPUT s7, 00
INSTRUCTION-OUTPUT
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-049
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:57: delay();
    ADDRESS-049
      LABEL-
  FORMATTED-CALL _delay
  LOGFORMAT-CALL _delay[053]
INSTRUCTION-CALL
   OPERAND1-_delay
  OP1 VALUE-053
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04A
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:61: __endasm;
    ADDRESS-04A
      LABEL-
  FORMATTED-XOR s7, 02
  LOGFORMAT-XOR s7, 02
INSTRUCTION-XOR
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-02
  OP2 VALUE-02
    COMMENT-
    ADDRESS-04B
      LABEL-
  FORMATTED-OUTPUT s7, 00
  LOGFORMAT-OUTPUT s7, 00
INSTRUCTION-OUTPUT
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-04C
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:64: void led_on()
    ADDRESS-04D
      LABEL-_led_on
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-04D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:69: __endasm;
    ADDRESS-04D
      LABEL-
  FORMATTED-LOAD s7, 01
  LOGFORMAT-LOAD s7, 01
INSTRUCTION-LOAD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-04E
      LABEL-
  FORMATTED-OUTPUT s7, 00
  LOGFORMAT-OUTPUT s7, 00
INSTRUCTION-OUTPUT
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-04F
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-050
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:72: void led_off()
    ADDRESS-050
      LABEL-_led_off
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-050
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:77: __endasm;
    ADDRESS-050
      LABEL-
  FORMATTED-LOAD s7, 00
  LOGFORMAT-LOAD s7, 00
INSTRUCTION-LOAD
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-051
      LABEL-
  FORMATTED-OUTPUT s7, 00
  LOGFORMAT-OUTPUT s7, 00
INSTRUCTION-OUTPUT
   OPERAND1-s7
  OP1 VALUE-s7
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-052
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-053
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:80: void delay()
    ADDRESS-053
      LABEL-_delay
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-053
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:94: __endasm;
    ADDRESS-053
      LABEL-
  FORMATTED-CONSTANT DELAY_LOOP2, 30
  LOGFORMAT-CONSTANT DELAY_LOOP2, 30
INSTRUCTION-CONSTANT
   OPERAND1-DELAY_LOOP2
  OP1 VALUE-DELAY_LOOP2
   OPERAND2-30
  OP2 VALUE-30
    COMMENT-; Loop delay
    ADDRESS-053
      LABEL-
  FORMATTED-LOAD s1, 00
  LOGFORMAT-LOAD s1, 00
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-054
      LABEL-_rpt2
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-054
      LABEL-
  FORMATTED-ADD s1, 01
  LOGFORMAT-ADD s1, 01
INSTRUCTION-ADD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-055
      LABEL-
  FORMATTED-LOAD s0, 00
  LOGFORMAT-LOAD s0, 00
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-056
      LABEL-_rpt1
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-056
      LABEL-
  FORMATTED-ADD s0, 01
  LOGFORMAT-ADD s0, 01
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-057
      LABEL-
  FORMATTED-JUMP NZ, _rpt1
  LOGFORMAT-JUMP NZ, _rpt1[056]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-_rpt1
  OP2 VALUE-056
    COMMENT-
    ADDRESS-058
      LABEL-
  FORMATTED-COMPARE s1, DELAY_LOOP2
  LOGFORMAT-COMPARE s1, DELAY_LOOP2[30]
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-DELAY_LOOP2
  OP2 VALUE-30
    COMMENT-
    ADDRESS-059
      LABEL-
  FORMATTED-JUMP NZ, _rpt2
  LOGFORMAT-JUMP NZ, _rpt2[054]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-_rpt2
  OP2 VALUE-054
    COMMENT-
    ADDRESS-05A
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-05B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:97: void delay_ms(int n)
    ADDRESS-05B
      LABEL-_delay_ms
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-05B
      LABEL-
  FORMATTED-LOAD s0, sB
  LOGFORMAT-LOAD s0, sB
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-sB
  OP2 VALUE-sB
    COMMENT-
    ADDRESS-05C
      LABEL-
  FORMATTED-LOAD s1, sC
  LOGFORMAT-LOAD s1, sC
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-sC
  OP2 VALUE-sC
    COMMENT-
    ADDRESS-05D
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:100: while(valor!=0)
    ADDRESS-05D
      LABEL-_L00127
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-05D
      LABEL-
  FORMATTED-LOAD s2, s0
  LOGFORMAT-LOAD s2, s0
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s0
  OP2 VALUE-s0
    COMMENT-
    ADDRESS-05E
      LABEL-
  FORMATTED-OR s2, s1
  LOGFORMAT-OR s2, s1
INSTRUCTION-OR
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-s1
  OP2 VALUE-s1
    COMMENT-
    ADDRESS-05F
      LABEL-
  FORMATTED-COMPARE s2, 00
  LOGFORMAT-COMPARE s2, 00
INSTRUCTION-COMPARE
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-060
      LABEL-
  FORMATTED-JUMP NZ, _LC00137
  LOGFORMAT-JUMP NZ, _LC00137[062]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-_LC00137
  OP2 VALUE-062
    COMMENT-
    ADDRESS-061
      LABEL-
  FORMATTED-JUMP _L00134
  LOGFORMAT-JUMP _L00134[06E]
INSTRUCTION-JUMP
   OPERAND1-_L00134
  OP1 VALUE-06E
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-062
      LABEL-_LC00137
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-062
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:102: valor = valor - 1;
    ADDRESS-062
      LABEL-
  FORMATTED-SUB s0, 01
  LOGFORMAT-SUB s0, 01
INSTRUCTION-SUB
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-063
      LABEL-
  FORMATTED-SUBCY s1, 00
  LOGFORMAT-SUBCY s1, 00
INSTRUCTION-SUBCY
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-
    ADDRESS-064
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; programa.c:103: delay();
    ADDRESS-064
      LABEL-
  FORMATTED-STORE s0, (sF)
  LOGFORMAT-STORE s0, (sF)
INSTRUCTION-STORE
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-065
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-066
      LABEL-
  FORMATTED-STORE s1, (sF)
  LOGFORMAT-STORE s1, (sF)
INSTRUCTION-STORE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-067
      LABEL-
  FORMATTED-SUB sF, 01
  LOGFORMAT-SUB sF, 01
INSTRUCTION-SUB
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-068
      LABEL-
  FORMATTED-CALL _delay
  LOGFORMAT-CALL _delay[053]
INSTRUCTION-CALL
   OPERAND1-_delay
  OP1 VALUE-053
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-069
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-06A
      LABEL-
  FORMATTED-FETCH s1, (sF)
  LOGFORMAT-FETCH s1, (sF)
INSTRUCTION-FETCH
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-06B
      LABEL-
  FORMATTED-ADD sF, 01
  LOGFORMAT-ADD sF, 01
INSTRUCTION-ADD
   OPERAND1-sF
  OP1 VALUE-sF
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-
    ADDRESS-06C
      LABEL-
  FORMATTED-FETCH s0, (sF)
  LOGFORMAT-FETCH s0, (sF)
INSTRUCTION-FETCH
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-(sF)
  OP2 VALUE-(sF)
    COMMENT-
    ADDRESS-06D
      LABEL-
  FORMATTED-JUMP _L00127
  LOGFORMAT-JUMP _L00127[05D]
INSTRUCTION-JUMP
   OPERAND1-_L00127
  OP1 VALUE-05D
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06E
      LABEL-_L00134
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06E
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-06F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Delay routine (~0.5s.)
    ADDRESS-06F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-06F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; PicoBlaze requires 2 clocks per instruction
    ADDRESS-06F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; 2 + (4 + (4 + 4*256 + 4) * 256 + 4)*DELAY_LOOP + 2 =
    ADDRESS-06F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; 500ms = (4 + 264200*DELAY_LOOP )*(1/50MHz)
    ADDRESS-06F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; DELAY_LOOP = 0x5E
    ADDRESS-06F
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Use CONSTANT declarations to time delay refinition
    ADDRESS-06F
      LABEL-
  FORMATTED-CONSTANT DELAY_LOOP, 5E
  LOGFORMAT-CONSTANT DELAY_LOOP, 5E
INSTRUCTION-CONSTANT
   OPERAND1-DELAY_LOOP
  OP1 VALUE-DELAY_LOOP
   OPERAND2-5E
  OP2 VALUE-5E
    COMMENT-; Loop delay
    ADDRESS-06F
      LABEL-delay
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-06F
      LABEL-
  FORMATTED-LOAD s2, 00
  LOGFORMAT-LOAD s2, 00
INSTRUCTION-LOAD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; 2
    ADDRESS-070
      LABEL-rpt3
  FORMATTED-ADD s2, 01
  LOGFORMAT-ADD s2, 01
INSTRUCTION-ADD
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; 2---------------------------------------------|
    ADDRESS-071
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  ---------------------------------------------|
    ADDRESS-071
      LABEL-
  FORMATTED-LOAD s1, 00
  LOGFORMAT-LOAD s1, 00
INSTRUCTION-LOAD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; 2---------------------------------------------|
    ADDRESS-072
      LABEL-rpt2
  FORMATTED-ADD s1, 01
  LOGFORMAT-ADD s1, 01
INSTRUCTION-ADD
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; 2-------------------------------------|
    ADDRESS-073
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  -------------------------------------|
    ADDRESS-073
      LABEL-
  FORMATTED-LOAD s0, 00
  LOGFORMAT-LOAD s0, 00
INSTRUCTION-LOAD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; 2-------------------------------------|
    ADDRESS-074
      LABEL-rpt1
  FORMATTED-ADD s0, 01
  LOGFORMAT-ADD s0, 01
INSTRUCTION-ADD
   OPERAND1-s0
  OP1 VALUE-s0
   OPERAND2-01
  OP2 VALUE-01
    COMMENT-; 2 ---------------|
    ADDRESS-075
      LABEL-
  FORMATTED-JUMP NZ, rpt1
  LOGFORMAT-JUMP NZ, rpt1[074]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-rpt1
  OP2 VALUE-074
    COMMENT-; 2 ----------4*256|
    ADDRESS-076
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;  -------------------------------------|
    ADDRESS-076
      LABEL-
  FORMATTED-COMPARE s1, 00
  LOGFORMAT-COMPARE s1, 00
INSTRUCTION-COMPARE
   OPERAND1-s1
  OP1 VALUE-s1
   OPERAND2-00
  OP2 VALUE-00
    COMMENT-; 2-------------------------------------|
    ADDRESS-077
      LABEL-
  FORMATTED-JUMP NZ, rpt2
  LOGFORMAT-JUMP NZ, rpt2[072]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-rpt2
  OP2 VALUE-072
    COMMENT-; 2----------------(4 + 4*256 + 4) * DELAY_LOOP|
    ADDRESS-078
      LABEL-
  FORMATTED-COMPARE s2, DELAY_LOOP
  LOGFORMAT-COMPARE s2, DELAY_LOOP[5E]
INSTRUCTION-COMPARE
   OPERAND1-s2
  OP1 VALUE-s2
   OPERAND2-DELAY_LOOP
  OP2 VALUE-5E
    COMMENT-; 2---------------------------------------------|
    ADDRESS-079
      LABEL-
  FORMATTED-JUMP NZ, rpt3
  LOGFORMAT-JUMP NZ, rpt3[070]
INSTRUCTION-JUMP
   OPERAND1-NZ
  OP1 VALUE-NZ
   OPERAND2-rpt3
  OP2 VALUE-070
    COMMENT-; 2---(4 + (4 + 4*256 + 4) * 256 + 4)*DELAY_LOOP|
    ADDRESS-07A
      LABEL-
  FORMATTED-RETURN
  LOGFORMAT-RETURN
INSTRUCTION-RETURN
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; 2
    ADDRESS-07B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-07B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; An Interrupt Service Routine (ISR) is required if using interrupts
    ADDRESS-07B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; Interrupts are automatically disabled when an interrupt is recognized
    ADDRESS-07B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; Never re-enable interrupts during the ISR
    ADDRESS-07B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; Use RETURNI DISABLE to leave interrupts disabled
    ADDRESS-07B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-07B
      LABEL-ISR
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-
    ADDRESS-07B
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-; <<< your interrupt code here >>>
    ADDRESS-07B
      LABEL-
  FORMATTED-RETURNI ENABLE
  LOGFORMAT-RETURNI ENABLE
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
  OP1 VALUE-ENABLE
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Return from interrupt service routine
    ADDRESS-07C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-07C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;; Interrupt service routine vector.
    ADDRESS-07C
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-3FF
      LABEL-
  FORMATTED-ADDRESS 3FF
  LOGFORMAT-ADDRESS 3FF
INSTRUCTION-ADDRESS
   OPERAND1-3FF
  OP1 VALUE-3FF
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Interrupt vector is located at highest instruction address
    ADDRESS-3FF
      LABEL-
  FORMATTED-JUMP ISR
  LOGFORMAT-JUMP ISR[07B]
INSTRUCTION-JUMP
   OPERAND1-ISR
  OP1 VALUE-07B
   OPERAND2-
  OP2 VALUE-
    COMMENT-; Jump to interrupt service routine, ISR
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;
    ADDRESS-3FF
      LABEL-
  FORMATTED-
  LOGFORMAT-
INSTRUCTION-
   OPERAND1-
  OP1 VALUE-
   OPERAND2-
  OP2 VALUE-
    COMMENT-;;============================================================================
