                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:19 2015
                              5 ;--------------------------------------------------------
                              6 	.module floorf
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _floorf
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; special function bits
                             36 ;--------------------------------------------------------
                             37 ;--------------------------------------------------------
                             38 ; overlayable register banks
                             39 ;--------------------------------------------------------
                             40 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      41 	.ds 8
                             42 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                      43 	.ds 8
                             44 ;--------------------------------------------------------
                             45 ; internal ram data
                             46 ;--------------------------------------------------------
                             47 	.area DSEG    (DATA)
                             48 ;--------------------------------------------------------
                             49 ; overlayable items in internal ram 
                             50 ;--------------------------------------------------------
                             51 	.area OSEG    (OVR,DATA)
                             52 ;--------------------------------------------------------
                             53 ; indirectly addressable internal ram data
                             54 ;--------------------------------------------------------
                             55 	.area ISEG    (DATA)
                             56 ;--------------------------------------------------------
                             57 ; absolute internal ram data
                             58 ;--------------------------------------------------------
                             59 	.area IABS    (ABS,DATA)
                             60 	.area IABS    (ABS,DATA)
                             61 ;--------------------------------------------------------
                             62 ; bit data
                             63 ;--------------------------------------------------------
                             64 	.area BSEG    (BIT)
                             65 ;--------------------------------------------------------
                             66 ; paged external ram data
                             67 ;--------------------------------------------------------
                             68 	.area PSEG    (PAG,XDATA)
                             69 ;--------------------------------------------------------
                             70 ; external ram data
                             71 ;--------------------------------------------------------
                             72 	.area XSEG    (XDATA)
                             73 ;--------------------------------------------------------
                             74 ; absolute external ram data
                             75 ;--------------------------------------------------------
                             76 	.area XABS    (ABS,XDATA)
                             77 ;--------------------------------------------------------
                             78 ; external initialized ram data
                             79 ;--------------------------------------------------------
                             80 	.area XISEG   (XDATA)
                             81 ;--------------------------------------------------------
                             82 ; global & static initialisations
                             83 ;--------------------------------------------------------
                             84 	.area HOME    (CODE)
                             85 	.area GSINIT  (CODE)
                             86 	.area GSFINAL (CODE)
                             87 	.area GSINIT  (CODE)
                             88 ;--------------------------------------------------------
                             89 ; Home
                             90 ;--------------------------------------------------------
                             91 	.area HOME    (CODE)
                             92 	.area HOME    (CODE)
                             93 ;--------------------------------------------------------
                             94 ; code
                             95 ;--------------------------------------------------------
                             96 	.area CSEG    (CODE)
                             97 ;------------------------------------------------------------
                             98 ;Allocation info for local variables in function 'floorf'
                             99 ;------------------------------------------------------------
                            100 ;x                         Allocated to stack - offset 1
                            101 ;r                         Allocated to registers r6 r7 r0 r1 
                            102 ;------------------------------------------------------------
                            103 ;	floorf.c:33: float floorf (float x) _FLOAT_FUNC_REENTRANT
                            104 ;	-----------------------------------------
                            105 ;	 function floorf
                            106 ;	-----------------------------------------
   0000                     107 _floorf:
                    0002    108 	ar2 = 0x02
                    0003    109 	ar3 = 0x03
                    0004    110 	ar4 = 0x04
                    0005    111 	ar5 = 0x05
                    0006    112 	ar6 = 0x06
                    0007    113 	ar7 = 0x07
                    0000    114 	ar0 = 0x00
                    0001    115 	ar1 = 0x01
   0000 C0*00               116 	push	_bpx
   0002 C0*01               117 	push	_bpx+1
   0004 85 81*00            118 	mov	_bpx,sp
   0007 85 9B*01            119 	mov	_bpx+1,esp
   000A 53*01 03            120 	anl	_bpx+1,#3
   000D 43*01 DC            121 	orl	_bpx+1,#0xDC
   0010 C0 E0               122 	push	acc
   0012 C0 E0               123 	push	acc
   0014 C0 E0               124 	push	acc
   0016 C0 E0               125 	push	acc
   0018 75 95 FF            126 	mov	dpx1,#0xFF
   001B 85*01 85            127 	mov	dph1,_bpx+1
   001E 85*00 84            128 	mov	dpl1,_bpx
   0021 75 86 01            129 	mov	dps,#1
   0024 A3                  130 	inc	dptr
   0025 75 86 01            131 	mov	dps, #1
   0028 E5 82               132 	mov	a,dpl
   002A F0                  133 	movx	@dptr,a
   002B A3                  134 	inc	dptr
   002C E5 83               135 	mov	a,dph
   002E F0                  136 	movx	@dptr,a
   002F A3                  137 	inc	dptr
   0030 E5 93               138 	mov	a,dpx
   0032 F0                  139 	movx	@dptr,a
   0033 A3                  140 	inc	dptr
   0034 E5 F0               141 	mov	a,b
   0036 F0                  142 	movx	@dptr,a
   0037 75 86 00            143 	mov	dps,#0
                            144 ;	floorf.c:36: r=x;
   003A 75 95 FF            145 	mov	dpx1,#0xFF
   003D 85*01 85            146 	mov	dph1,_bpx+1
   0040 85*00 84            147 	mov	dpl1,_bpx
   0043 75 86 01            148 	mov	dps,#1
   0046 A3                  149 	inc	dptr
   0047 75 86 01            150 	mov	dps, #1
   004A E0                  151 	movx	a,@dptr
   004B F5 82               152 	mov	dpl,a
   004D A3                  153 	inc	dptr
   004E E0                  154 	movx	a,@dptr
   004F F5 83               155 	mov	dph,a
   0051 A3                  156 	inc	dptr
   0052 E0                  157 	movx	a,@dptr
   0053 F5 93               158 	mov	dpx,a
   0055 A3                  159 	inc	dptr
   0056 E0                  160 	movx	a,@dptr
   0057 F5 F0               161 	mov	b,a
   0059 75 86 00            162 	mov	dps,#0
   005C 12s00r00r00         163 	lcall	___fs2slong
   0060 AE 82               164 	mov	r6,dpl
   0062 AF 83               165 	mov	r7,dph
   0064 A8 93               166 	mov	r0,dpx
   0066 A9 F0               167 	mov	r1,b
                            168 ;	genAssign: resultIsFar = TRUE
                            169 ;	floorf.c:37: if (r<=0)
   0068 C3                  170 	clr	c
   0069 E4                  171 	clr  a
   006A 9E                  172 	subb	a,r6
   006B E4                  173 	clr  a
   006C 9F                  174 	subb	a,r7
   006D E4                  175 	clr  a
   006E 98                  176 	subb	a,r0
   006F 74 80               177 	mov  a,#(0x00 ^ 0x80)
   0071 89 F0               178 	mov	b,r1
   0073 63 F0 80            179 	xrl	b,#0x80
   0076 95 F0               180 	subb	a,b
   0078 50 04               181 	jnc	00110$
   007A 02s00r01r0B         182 	ljmp	00102$
   007E                     183 00110$:
                            184 ;	floorf.c:38: return (r+((r>x)?-1:0));
   007E C0 06               185 	push	ar6
   0080 C0 07               186 	push	ar7
   0082 C0 00               187 	push	ar0
   0084 C0 01               188 	push	ar1
   0086 8E 82               189 	mov	dpl,r6
   0088 8F 83               190 	mov	dph,r7
   008A 88 93               191 	mov	dpx,r0
   008C 89 F0               192 	mov	b,r1
   008E 12s00r00r00         193 	lcall	___slong2fs
   0092 AA 82               194 	mov	r2,dpl
   0094 AB 83               195 	mov	r3,dph
   0096 AC 93               196 	mov	r4,dpx
   0098 AD F0               197 	mov	r5,b
   009A D0 01               198 	pop	ar1
   009C D0 00               199 	pop	ar0
   009E D0 07               200 	pop	ar7
   00A0 D0 06               201 	pop	ar6
   00A2 75 93 FF            202 	mov	dpx,#0xFF
   00A5 85*01 83            203 	mov	dph,_bpx+1
   00A8 85*00 82            204 	mov	dpl,_bpx
   00AB A3                  205 	inc	dptr
                            206 ;	genAssign: resultIsFar = TRUE
   00AC 75 86 21            207 	mov	dps,#0x21
   00AF 90s00r00r00         208 	mov	dptr,#___fsgt_PARM_2
   00B3 E0                  209 	movx	a,@dptr
   00B4 F0                  210 	movx	@dptr,a
   00B5 A3                  211 	inc	dptr
   00B6 A3                  212 	inc	dptr
   00B7 E0                  213 	movx	a,@dptr
   00B8 F0                  214 	movx	@dptr,a
   00B9 A3                  215 	inc	dptr
   00BA A3                  216 	inc	dptr
   00BB E0                  217 	movx	a,@dptr
   00BC F0                  218 	movx	@dptr,a
   00BD A3                  219 	inc	dptr
   00BE A3                  220 	inc	dptr
   00BF E0                  221 	movx	a,@dptr
   00C0 F0                  222 	movx	@dptr,a
   00C1 75 86 00            223 	mov	dps,#0
   00C4 C0 06               224 	push	ar6
   00C6 C0 07               225 	push	ar7
   00C8 C0 00               226 	push	ar0
   00CA C0 01               227 	push	ar1
   00CC 8A 82               228 	mov	dpl,r2
   00CE 8B 83               229 	mov	dph,r3
   00D0 8C 93               230 	mov	dpx,r4
   00D2 8D F0               231 	mov	b,r5
   00D4 12s00r00r00         232 	lcall	___fsgt
   00D8 D0 01               233 	pop	ar1
   00DA D0 00               234 	pop	ar0
   00DC D0 07               235 	pop	ar7
   00DE D0 06               236 	pop	ar6
   00E0 E5 82               237 	mov	a,dpl
   00E2 60 04               238 	jz  00106$
   00E4                     239 00111$:
                            240 ;	genAssign: resultIsFar = FALSE
   00E4 7A FF               241 	mov	r2,#0xFF
   00E6 80 02               242 	sjmp 00107$
   00E8                     243 00106$:
                            244 ;	genAssign: resultIsFar = FALSE
   00E8 7A 00               245 	mov	r2,#0x00
   00EA                     246 00107$:
   00EA EA                  247 	mov	a,r2
   00EB 33                  248 	rlc	a
   00EC 95 E0               249 	subb	a,acc
   00EE FB                  250 	mov	r3,a
   00EF FC                  251 	mov	r4,a
   00F0 FD                  252 	mov	r5,a
   00F1 EA                  253 	mov	a,r2
   00F2 2E                  254 	add	a,r6
   00F3 FA                  255 	mov	r2,a
   00F4 EB                  256 	mov	a,r3
   00F5 3F                  257 	addc	a,r7
   00F6 FB                  258 	mov	r3,a
   00F7 EC                  259 	mov	a,r4
   00F8 38                  260 	addc	a,r0
   00F9 FC                  261 	mov	r4,a
   00FA ED                  262 	mov	a,r5
   00FB 39                  263 	addc	a,r1
   00FC FD                  264 	mov	r5,a
   00FD 8A 82               265 	mov	dpl,r2
   00FF 8B 83               266 	mov	dph,r3
   0101 8C 93               267 	mov	dpx,r4
   0103 8D F0               268 	mov	b,r5
   0105 12s00r00r00         269 	lcall	___slong2fs
   0109 80 0C               270 	sjmp 00104$
   010B                     271 00102$:
                            272 ;	floorf.c:40: return r;
   010B 8E 82               273 	mov	dpl,r6
   010D 8F 83               274 	mov	dph,r7
   010F 88 93               275 	mov	dpx,r0
   0111 89 F0               276 	mov	b,r1
   0113 12s00r00r00         277 	lcall	___slong2fs
   0117                     278 00104$:
   0117 85*00 81            279 	mov	sp,_bpx
   011A 85*01 9B            280 	mov	esp,_bpx+1
   011D D0*01               281 	pop	_bpx+1
   011F D0*00               282 	pop	_bpx
   0121 22                  283 	ret
                            284 	.area CSEG    (CODE)
                            285 	.area CONST   (CODE)
                            286 	.area XINIT   (CODE)
                            287 	.area CABS    (ABS,CODE)
