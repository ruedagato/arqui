                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:23 2015
                              5 ;--------------------------------------------------------
                              6 	.module _malloc
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __sdcc_first_memheader
                             13 	.globl _malloc
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (ABS,DATA)
   0000                      18 	.org 0x0000
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (ABS,DATA)
   0000                      23 	.org 0x0000
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
   0000                      33 __sdcc_first_memheader::
   0000                      34 	.ds 2
   0002                      35 _malloc_size_1_1:
   0002                      36 	.ds 2
                             37 ;--------------------------------------------------------
                             38 ; overlayable items in internal ram 
                             39 ;--------------------------------------------------------
                             40 	.area	OSEG    (OVR,DATA)
                             41 ;--------------------------------------------------------
                             42 ; indirectly addressable internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area ISEG    (DATA)
                             45 ;--------------------------------------------------------
                             46 ; absolute internal ram data
                             47 ;--------------------------------------------------------
                             48 	.area IABS    (ABS,DATA)
                             49 	.area IABS    (ABS,DATA)
                             50 ;--------------------------------------------------------
                             51 ; bit data
                             52 ;--------------------------------------------------------
                             53 	.area BSEG    (BIT)
                             54 ;--------------------------------------------------------
                             55 ; paged external ram data
                             56 ;--------------------------------------------------------
                             57 	.area PSEG    (PAG,XDATA)
                             58 ;--------------------------------------------------------
                             59 ; external ram data
                             60 ;--------------------------------------------------------
                             61 	.area XSEG    (XDATA)
                             62 ;--------------------------------------------------------
                             63 ; absolute external ram data
                             64 ;--------------------------------------------------------
                             65 	.area XABS    (ABS,XDATA)
                             66 ;--------------------------------------------------------
                             67 ; external initialized ram data
                             68 ;--------------------------------------------------------
                             69 	.area XISEG   (XDATA)
                             70 	.area HOME    (CODE)
                             71 	.area GSINIT0 (CODE)
                             72 	.area GSINIT1 (CODE)
                             73 	.area GSINIT2 (CODE)
                             74 	.area GSINIT3 (CODE)
                             75 	.area GSINIT4 (CODE)
                             76 	.area GSINIT5 (CODE)
                             77 	.area GSINIT  (CODE)
                             78 	.area GSFINAL (CODE)
                             79 	.area CSEG    (CODE)
                             80 ;--------------------------------------------------------
                             81 ; global & static initialisations
                             82 ;--------------------------------------------------------
                             83 	.area HOME    (CODE)
                             84 	.area GSINIT  (CODE)
                             85 	.area GSFINAL (CODE)
                             86 	.area GSINIT  (CODE)
                             87 ;	_malloc.c:161: MEMHEADER __xdata * _sdcc_first_memheader = NULL;
   0000 E4                   88 	clr	a
   0001 F5*00                89 	mov	__sdcc_first_memheader,a
   0003 F5*01                90 	mov	(__sdcc_first_memheader + 1),a
                             91 ;--------------------------------------------------------
                             92 ; Home
                             93 ;--------------------------------------------------------
                             94 	.area HOME    (CODE)
                             95 	.area HOME    (CODE)
                             96 ;--------------------------------------------------------
                             97 ; code
                             98 ;--------------------------------------------------------
                             99 	.area CSEG    (CODE)
                            100 ;------------------------------------------------------------
                            101 ;Allocation info for local variables in function 'init_dynamic_memory'
                            102 ;------------------------------------------------------------
                            103 ;heap                      Allocated to registers r2 r3 
                            104 ;size                      Allocated to registers r4 r5 
                            105 ;------------------------------------------------------------
                            106 ;	_malloc.c:166: static void init_dynamic_memory(void)
                            107 ;	-----------------------------------------
                            108 ;	 function init_dynamic_memory
                            109 ;	-----------------------------------------
   0000                     110 _init_dynamic_memory:
                    0002    111 	ar2 = 0x02
                    0003    112 	ar3 = 0x03
                    0004    113 	ar4 = 0x04
                    0005    114 	ar5 = 0x05
                    0006    115 	ar6 = 0x06
                    0007    116 	ar7 = 0x07
                    0000    117 	ar0 = 0x00
                    0001    118 	ar1 = 0x01
                            119 ;	_malloc.c:168: char __xdata * heap = (char __xdata *)_sdcc_heap;
   0000 7Ar00               120 	mov	r2,#__sdcc_heap
   0002 7Bs00               121 	mov	r3,#(__sdcc_heap >> 8)
                            122 ;	_malloc.c:169: unsigned int size = _sdcc_heap_size;
   0004 90s00r00            123 	mov	dptr,#__sdcc_heap_size
   0007 E4                  124 	clr	a
   0008 93                  125 	movc	a,@a+dptr
   0009 FC                  126 	mov	r4,a
   000A 74 01               127 	mov	a,#0x01
   000C 93                  128 	movc	a,@a+dptr
   000D FD                  129 	mov	r5,a
                            130 ;	_malloc.c:171: if ( !heap ) //Reserved memory starts at 0x0000 but that's NULL...
   000E EA                  131 	mov	a,r2
   000F 4B                  132 	orl	a,r3
   0010 70 0A               133 	jnz	00102$
                            134 ;	_malloc.c:173: heap++;
   0012 0A                  135 	inc	r2
   0013 BA 00 01            136 	cjne	r2,#0x00,00107$
   0016 0B                  137 	inc	r3
   0017                     138 00107$:
                            139 ;	_malloc.c:174: size--;
   0017 1C                  140 	dec	r4
   0018 BC FF 01            141 	cjne	r4,#0xff,00108$
   001B 1D                  142 	dec	r5
   001C                     143 00108$:
   001C                     144 00102$:
                            145 ;	_malloc.c:176: _sdcc_first_memheader = (MEMHEADER __xdata * ) heap;
   001C 8A*00               146 	mov	__sdcc_first_memheader,r2
   001E 8B*01               147 	mov	(__sdcc_first_memheader + 1),r3
                            148 ;	_malloc.c:178: _sdcc_first_memheader->next = (MEMHEADER __xdata * )(heap + size - sizeof(MEMHEADER __xdata *));
   0020 85*00 82            149 	mov	dpl,__sdcc_first_memheader
   0023 85*01 83            150 	mov	dph,(__sdcc_first_memheader + 1)
   0026 EC                  151 	mov	a,r4
   0027 2A                  152 	add	a,r2
   0028 FA                  153 	mov	r2,a
   0029 ED                  154 	mov	a,r5
   002A 3B                  155 	addc	a,r3
   002B FB                  156 	mov	r3,a
   002C EA                  157 	mov	a,r2
   002D 24 FE               158 	add	a,#0xfe
   002F FA                  159 	mov	r2,a
   0030 EB                  160 	mov	a,r3
   0031 34 FF               161 	addc	a,#0xff
   0033 FB                  162 	mov	r3,a
   0034 EA                  163 	mov	a,r2
   0035 F0                  164 	movx	@dptr,a
   0036 A3                  165 	inc	dptr
   0037 EB                  166 	mov	a,r3
   0038 F0                  167 	movx	@dptr,a
                            168 ;	_malloc.c:179: _sdcc_first_memheader->next->next = (MEMHEADER __xdata * ) NULL; //And mark it as last
   0039 85*00 82            169 	mov	dpl,__sdcc_first_memheader
   003C 85*01 83            170 	mov	dph,(__sdcc_first_memheader + 1)
   003F E0                  171 	movx	a,@dptr
   0040 FA                  172 	mov	r2,a
   0041 A3                  173 	inc	dptr
   0042 E0                  174 	movx	a,@dptr
   0043 FB                  175 	mov	r3,a
   0044 8A 82               176 	mov	dpl,r2
   0046 8B 83               177 	mov	dph,r3
   0048 E4                  178 	clr	a
   0049 F0                  179 	movx	@dptr,a
   004A A3                  180 	inc	dptr
   004B F0                  181 	movx	@dptr,a
                            182 ;	_malloc.c:180: _sdcc_first_memheader->len        = 0;    //Empty and ready.
   004C 85*00 82            183 	mov	dpl,__sdcc_first_memheader
   004F 85*01 83            184 	mov	dph,(__sdcc_first_memheader + 1)
   0052 A3                  185 	inc	dptr
   0053 A3                  186 	inc	dptr
   0054 E4                  187 	clr	a
   0055 F0                  188 	movx	@dptr,a
   0056 A3                  189 	inc	dptr
   0057 F0                  190 	movx	@dptr,a
   0058 22                  191 	ret
                            192 ;------------------------------------------------------------
                            193 ;Allocation info for local variables in function 'malloc'
                            194 ;------------------------------------------------------------
                            195 ;size                      Allocated with name '_malloc_size_1_1'
                            196 ;current_header            Allocated to registers r4 r5 
                            197 ;new_header                Allocated to registers r0 r1 
                            198 ;ret                       Allocated to registers r2 r3 
                            199 ;------------------------------------------------------------
                            200 ;	_malloc.c:183: void __xdata * malloc (unsigned int size)
                            201 ;	-----------------------------------------
                            202 ;	 function malloc
                            203 ;	-----------------------------------------
   0059                     204 _malloc:
   0059 85 82*02            205 	mov	_malloc_size_1_1,dpl
   005C 85 83*03            206 	mov	(_malloc_size_1_1 + 1),dph
                            207 ;	_malloc.c:189: if (size>(0xFFFF-HEADER_SIZE))
   005F C3                  208 	clr	c
   0060 74 FB               209 	mov	a,#0xFB
   0062 95*02               210 	subb	a,_malloc_size_1_1
   0064 74 FF               211 	mov	a,#0xFF
   0066 95*03               212 	subb	a,(_malloc_size_1_1 + 1)
   0068 50 04               213 	jnc	00102$
                            214 ;	_malloc.c:190: return (void __xdata *) NULL; //To prevent overflow in next line
   006A 90 00 00            215 	mov	dptr,#0x0000
   006D 22                  216 	ret
   006E                     217 00102$:
                            218 ;	_malloc.c:191: size += HEADER_SIZE; //We need a memory for header too
   006E 74 04               219 	mov	a,#0x04
   0070 25*02               220 	add	a,_malloc_size_1_1
   0072 F5*02               221 	mov	_malloc_size_1_1,a
   0074 E4                  222 	clr	a
   0075 35*03               223 	addc	a,(_malloc_size_1_1 + 1)
   0077 F5*03               224 	mov	(_malloc_size_1_1 + 1),a
                            225 ;	_malloc.c:193: if (!_sdcc_first_memheader)
   0079 E5*00               226 	mov	a,__sdcc_first_memheader
   007B 45*01               227 	orl	a,(__sdcc_first_memheader + 1)
   007D 70 03               228 	jnz	00104$
                            229 ;	_malloc.c:194: init_dynamic_memory();
   007F 12s00r00            230 	lcall	_init_dynamic_memory
   0082                     231 00104$:
                            232 ;	_malloc.c:196: current_header = _sdcc_first_memheader;
   0082 AC*00               233 	mov	r4,__sdcc_first_memheader
   0084 AD*01               234 	mov	r5,(__sdcc_first_memheader + 1)
                            235 ;	_malloc.c:199: while (1)
   0086                     236 00110$:
                            237 ;	_malloc.c:209: if ((((unsigned int)current_header->next) -
   0086 8C 82               238 	mov	dpl,r4
   0088 8D 83               239 	mov	dph,r5
   008A E0                  240 	movx	a,@dptr
   008B FE                  241 	mov	r6,a
   008C A3                  242 	inc	dptr
   008D E0                  243 	movx	a,@dptr
   008E FF                  244 	mov	r7,a
   008F 8E 00               245 	mov	ar0,r6
   0091 8F 01               246 	mov	ar1,r7
                            247 ;	_malloc.c:210: ((unsigned int)current_header) -
   0093 8C 02               248 	mov	ar2,r4
   0095 8D 03               249 	mov	ar3,r5
   0097 E8                  250 	mov	a,r0
   0098 C3                  251 	clr	c
   0099 9A                  252 	subb	a,r2
   009A F8                  253 	mov	r0,a
   009B E9                  254 	mov	a,r1
   009C 9B                  255 	subb	a,r3
   009D F9                  256 	mov	r1,a
                            257 ;	_malloc.c:211: current_header->len) >= size)
   009E 8C 82               258 	mov	dpl,r4
   00A0 8D 83               259 	mov	dph,r5
   00A2 A3                  260 	inc	dptr
   00A3 A3                  261 	inc	dptr
   00A4 E0                  262 	movx	a,@dptr
   00A5 FA                  263 	mov	r2,a
   00A6 A3                  264 	inc	dptr
   00A7 E0                  265 	movx	a,@dptr
   00A8 FB                  266 	mov	r3,a
   00A9 E8                  267 	mov	a,r0
   00AA C3                  268 	clr	c
   00AB 9A                  269 	subb	a,r2
   00AC F8                  270 	mov	r0,a
   00AD E9                  271 	mov	a,r1
   00AE 9B                  272 	subb	a,r3
   00AF F9                  273 	mov	r1,a
   00B0 C3                  274 	clr	c
   00B1 E8                  275 	mov	a,r0
   00B2 95*02               276 	subb	a,_malloc_size_1_1
   00B4 E9                  277 	mov	a,r1
   00B5 95*03               278 	subb	a,(_malloc_size_1_1 + 1)
   00B7 40 09               279 	jc	00106$
                            280 ;	_malloc.c:213: ret = current_header->mem;
   00B9 74 04               281 	mov	a,#0x04
   00BB 2C                  282 	add	a,r4
   00BC FA                  283 	mov	r2,a
   00BD E4                  284 	clr	a
   00BE 3D                  285 	addc	a,r5
   00BF FB                  286 	mov	r3,a
                            287 ;	_malloc.c:214: break;
   00C0 80 12               288 	sjmp	00111$
   00C2                     289 00106$:
                            290 ;	_malloc.c:216: current_header = current_header->next;    //else try next
   00C2 8E 04               291 	mov	ar4,r6
   00C4 8F 05               292 	mov	ar5,r7
                            293 ;	_malloc.c:217: if (!current_header->next)
   00C6 8C 82               294 	mov	dpl,r4
   00C8 8D 83               295 	mov	dph,r5
   00CA E0                  296 	movx	a,@dptr
   00CB FE                  297 	mov	r6,a
   00CC A3                  298 	inc	dptr
   00CD E0                  299 	movx	a,@dptr
   00CE FF                  300 	mov	r7,a
   00CF 4E                  301 	orl	a,r6
                            302 ;	_malloc.c:219: ret = (void __xdata *) NULL;
   00D0 70 B4               303 	jnz	00110$
   00D2 FA                  304 	mov	r2,a
   00D3 FB                  305 	mov	r3,a
                            306 ;	_malloc.c:220: break;
   00D4                     307 00111$:
                            308 ;	_malloc.c:223: if (ret)
   00D4 EA                  309 	mov	a,r2
   00D5 4B                  310 	orl	a,r3
   00D6 60 55               311 	jz	00116$
                            312 ;	_malloc.c:225: if (!current_header->len)
   00D8 74 02               313 	mov	a,#0x02
   00DA 2C                  314 	add	a,r4
   00DB FE                  315 	mov	r6,a
   00DC E4                  316 	clr	a
   00DD 3D                  317 	addc	a,r5
   00DE FF                  318 	mov	r7,a
   00DF 8E 82               319 	mov	dpl,r6
   00E1 8F 83               320 	mov	dph,r7
   00E3 E0                  321 	movx	a,@dptr
   00E4 F8                  322 	mov	r0,a
   00E5 A3                  323 	inc	dptr
   00E6 E0                  324 	movx	a,@dptr
   00E7 F9                  325 	mov	r1,a
   00E8 48                  326 	orl	a,r0
   00E9 70 0D               327 	jnz	00113$
                            328 ;	_malloc.c:227: current_header->len = size; //for first allocation
   00EB 8E 82               329 	mov	dpl,r6
   00ED 8F 83               330 	mov	dph,r7
   00EF E5*02               331 	mov	a,_malloc_size_1_1
   00F1 F0                  332 	movx	@dptr,a
   00F2 A3                  333 	inc	dptr
   00F3 E5*03               334 	mov	a,(_malloc_size_1_1 + 1)
   00F5 F0                  335 	movx	@dptr,a
   00F6 80 35               336 	sjmp	00116$
   00F8                     337 00113$:
                            338 ;	_malloc.c:231: new_header = (MEMHEADER __xdata * )((char __xdata *)current_header + current_header->len);
   00F8 E8                  339 	mov	a,r0
   00F9 2C                  340 	add	a,r4
   00FA F8                  341 	mov	r0,a
   00FB E9                  342 	mov	a,r1
   00FC 3D                  343 	addc	a,r5
   00FD F9                  344 	mov	r1,a
                            345 ;	_malloc.c:232: new_header->next = current_header->next; //and plug it into the chain
   00FE 8C 82               346 	mov	dpl,r4
   0100 8D 83               347 	mov	dph,r5
   0102 E0                  348 	movx	a,@dptr
   0103 FE                  349 	mov	r6,a
   0104 A3                  350 	inc	dptr
   0105 E0                  351 	movx	a,@dptr
   0106 FF                  352 	mov	r7,a
   0107 88 82               353 	mov	dpl,r0
   0109 89 83               354 	mov	dph,r1
   010B EE                  355 	mov	a,r6
   010C F0                  356 	movx	@dptr,a
   010D A3                  357 	inc	dptr
   010E EF                  358 	mov	a,r7
   010F F0                  359 	movx	@dptr,a
                            360 ;	_malloc.c:233: current_header->next  = new_header;
   0110 8C 82               361 	mov	dpl,r4
   0112 8D 83               362 	mov	dph,r5
   0114 E8                  363 	mov	a,r0
   0115 F0                  364 	movx	@dptr,a
   0116 A3                  365 	inc	dptr
   0117 E9                  366 	mov	a,r1
   0118 F0                  367 	movx	@dptr,a
                            368 ;	_malloc.c:234: new_header->len  = size; //mark as used
   0119 88 82               369 	mov	dpl,r0
   011B 89 83               370 	mov	dph,r1
   011D A3                  371 	inc	dptr
   011E A3                  372 	inc	dptr
   011F E5*02               373 	mov	a,_malloc_size_1_1
   0121 F0                  374 	movx	@dptr,a
   0122 A3                  375 	inc	dptr
   0123 E5*03               376 	mov	a,(_malloc_size_1_1 + 1)
   0125 F0                  377 	movx	@dptr,a
                            378 ;	_malloc.c:235: ret = new_header->mem;
   0126 74 04               379 	mov	a,#0x04
   0128 28                  380 	add	a,r0
   0129 FA                  381 	mov	r2,a
   012A E4                  382 	clr	a
   012B 39                  383 	addc	a,r1
   012C FB                  384 	mov	r3,a
   012D                     385 00116$:
                            386 ;	_malloc.c:239: return ret;
   012D 8A 82               387 	mov	dpl,r2
   012F 8B 83               388 	mov	dph,r3
   0131 22                  389 	ret
                            390 	.area CSEG    (CODE)
                            391 	.area CONST   (CODE)
                            392 	.area XINIT   (CODE)
                            393 	.area CABS    (ABS,CODE)
