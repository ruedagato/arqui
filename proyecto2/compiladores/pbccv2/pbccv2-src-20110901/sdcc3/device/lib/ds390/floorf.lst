                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:16 2015
                              5 ;--------------------------------------------------------
                              6 	.module floorf
                              7 	.optsdcc -mds390 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _floorf
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; special function bits
                             36 ;--------------------------------------------------------
                             37 ;--------------------------------------------------------
                             38 ; overlayable register banks
                             39 ;--------------------------------------------------------
                             40 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      41 	.ds 8
                             42 ;--------------------------------------------------------
                             43 ; internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area DSEG    (DATA)
                             46 ;--------------------------------------------------------
                             47 ; overlayable items in internal ram 
                             48 ;--------------------------------------------------------
                             49 	.area OSEG    (OVR,DATA)
                             50 ;--------------------------------------------------------
                             51 ; indirectly addressable internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area ISEG    (DATA)
                             54 ;--------------------------------------------------------
                             55 ; absolute internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area IABS    (ABS,DATA)
                             58 	.area IABS    (ABS,DATA)
                             59 ;--------------------------------------------------------
                             60 ; bit data
                             61 ;--------------------------------------------------------
                             62 	.area BSEG    (BIT)
                             63 ;--------------------------------------------------------
                             64 ; paged external ram data
                             65 ;--------------------------------------------------------
                             66 	.area PSEG    (PAG,XDATA)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                             71 ;--------------------------------------------------------
                             72 ; absolute external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XABS    (ABS,XDATA)
                             75 ;--------------------------------------------------------
                             76 ; external initialized ram data
                             77 ;--------------------------------------------------------
                             78 	.area XISEG   (XDATA)
                             79 ;--------------------------------------------------------
                             80 ; global & static initialisations
                             81 ;--------------------------------------------------------
                             82 	.area HOME    (CODE)
                             83 	.area GSINIT  (CODE)
                             84 	.area GSFINAL (CODE)
                             85 	.area GSINIT  (CODE)
                             86 ;--------------------------------------------------------
                             87 ; Home
                             88 ;--------------------------------------------------------
                             89 	.area HOME    (CODE)
                             90 	.area HOME    (CODE)
                             91 ;--------------------------------------------------------
                             92 ; code
                             93 ;--------------------------------------------------------
                             94 	.area CSEG    (CODE)
                             95 ;------------------------------------------------------------
                             96 ;Allocation info for local variables in function 'floorf'
                             97 ;------------------------------------------------------------
                             98 ;x                         Allocated to stack - offset 1
                             99 ;r                         Allocated to registers r6 r7 r0 r1 
                            100 ;------------------------------------------------------------
                            101 ;	floorf.c:33: float floorf (float x) _FLOAT_FUNC_REENTRANT
                            102 ;	-----------------------------------------
                            103 ;	 function floorf
                            104 ;	-----------------------------------------
   0000                     105 _floorf:
                    0002    106 	ar2 = 0x02
                    0003    107 	ar3 = 0x03
                    0004    108 	ar4 = 0x04
                    0005    109 	ar5 = 0x05
                    0006    110 	ar6 = 0x06
                    0007    111 	ar7 = 0x07
                    0000    112 	ar0 = 0x00
                    0001    113 	ar1 = 0x01
   0000 C0*00               114 	push	_bpx
   0002 C0*01               115 	push	_bpx+1
   0004 85 81*00            116 	mov	_bpx,sp
   0007 85 9B*01            117 	mov	_bpx+1,esp
   000A 53*01 03            118 	anl	_bpx+1,#3
   000D C0 E0               119 	push	acc
   000F C0 E0               120 	push	acc
   0011 C0 E0               121 	push	acc
   0013 C0 E0               122 	push	acc
   0015 75 95 40            123 	mov	dpx1,#0x40
   0018 85*01 85            124 	mov	dph1,_bpx+1
   001B 85*00 84            125 	mov	dpl1,_bpx
   001E 75 86 01            126 	mov	dps,#1
   0021 A3                  127 	inc	dptr
   0022 75 86 01            128 	mov	dps, #1
   0025 E5 82               129 	mov	a,dpl
   0027 F0                  130 	movx	@dptr,a
   0028 A3                  131 	inc	dptr
   0029 E5 83               132 	mov	a,dph
   002B F0                  133 	movx	@dptr,a
   002C A3                  134 	inc	dptr
   002D E5 93               135 	mov	a,dpx
   002F F0                  136 	movx	@dptr,a
   0030 A3                  137 	inc	dptr
   0031 E5 F0               138 	mov	a,b
   0033 F0                  139 	movx	@dptr,a
   0034 75 86 00            140 	mov	dps,#0
                            141 ;	floorf.c:36: r=x;
   0037 75 95 40            142 	mov	dpx1,#0x40
   003A 85*01 85            143 	mov	dph1,_bpx+1
   003D 85*00 84            144 	mov	dpl1,_bpx
   0040 75 86 01            145 	mov	dps,#1
   0043 A3                  146 	inc	dptr
   0044 75 86 01            147 	mov	dps, #1
   0047 E0                  148 	movx	a,@dptr
   0048 F5 82               149 	mov	dpl,a
   004A A3                  150 	inc	dptr
   004B E0                  151 	movx	a,@dptr
   004C F5 83               152 	mov	dph,a
   004E A3                  153 	inc	dptr
   004F E0                  154 	movx	a,@dptr
   0050 F5 93               155 	mov	dpx,a
   0052 A3                  156 	inc	dptr
   0053 E0                  157 	movx	a,@dptr
   0054 F5 F0               158 	mov	b,a
   0056 75 86 00            159 	mov	dps,#0
   0059 12s00r00r00         160 	lcall	___fs2slong
   005D AE 82               161 	mov	r6,dpl
   005F AF 83               162 	mov	r7,dph
   0061 A8 93               163 	mov	r0,dpx
   0063 A9 F0               164 	mov	r1,b
                            165 ;	genAssign: resultIsFar = TRUE
                            166 ;	floorf.c:37: if (r<=0)
   0065 C3                  167 	clr	c
   0066 E4                  168 	clr  a
   0067 9E                  169 	subb	a,r6
   0068 E4                  170 	clr  a
   0069 9F                  171 	subb	a,r7
   006A E4                  172 	clr  a
   006B 98                  173 	subb	a,r0
   006C 74 80               174 	mov  a,#(0x00 ^ 0x80)
   006E 89 F0               175 	mov	b,r1
   0070 63 F0 80            176 	xrl	b,#0x80
   0073 95 F0               177 	subb	a,b
   0075 50 04               178 	jnc	00110$
   0077 02s00r01r08         179 	ljmp	00102$
   007B                     180 00110$:
                            181 ;	floorf.c:38: return (r+((r>x)?-1:0));
   007B C0 06               182 	push	ar6
   007D C0 07               183 	push	ar7
   007F C0 00               184 	push	ar0
   0081 C0 01               185 	push	ar1
   0083 8E 82               186 	mov	dpl,r6
   0085 8F 83               187 	mov	dph,r7
   0087 88 93               188 	mov	dpx,r0
   0089 89 F0               189 	mov	b,r1
   008B 12s00r00r00         190 	lcall	___slong2fs
   008F AA 82               191 	mov	r2,dpl
   0091 AB 83               192 	mov	r3,dph
   0093 AC 93               193 	mov	r4,dpx
   0095 AD F0               194 	mov	r5,b
   0097 D0 01               195 	pop	ar1
   0099 D0 00               196 	pop	ar0
   009B D0 07               197 	pop	ar7
   009D D0 06               198 	pop	ar6
   009F 75 93 40            199 	mov	dpx,#0x40
   00A2 85*01 83            200 	mov	dph,_bpx+1
   00A5 85*00 82            201 	mov	dpl,_bpx
   00A8 A3                  202 	inc	dptr
                            203 ;	genAssign: resultIsFar = TRUE
   00A9 75 86 21            204 	mov	dps,#0x21
   00AC 90s00r00r00         205 	mov	dptr,#___fsgt_PARM_2
   00B0 E0                  206 	movx	a,@dptr
   00B1 F0                  207 	movx	@dptr,a
   00B2 A3                  208 	inc	dptr
   00B3 A3                  209 	inc	dptr
   00B4 E0                  210 	movx	a,@dptr
   00B5 F0                  211 	movx	@dptr,a
   00B6 A3                  212 	inc	dptr
   00B7 A3                  213 	inc	dptr
   00B8 E0                  214 	movx	a,@dptr
   00B9 F0                  215 	movx	@dptr,a
   00BA A3                  216 	inc	dptr
   00BB A3                  217 	inc	dptr
   00BC E0                  218 	movx	a,@dptr
   00BD F0                  219 	movx	@dptr,a
   00BE 75 86 00            220 	mov	dps,#0
   00C1 C0 06               221 	push	ar6
   00C3 C0 07               222 	push	ar7
   00C5 C0 00               223 	push	ar0
   00C7 C0 01               224 	push	ar1
   00C9 8A 82               225 	mov	dpl,r2
   00CB 8B 83               226 	mov	dph,r3
   00CD 8C 93               227 	mov	dpx,r4
   00CF 8D F0               228 	mov	b,r5
   00D1 12s00r00r00         229 	lcall	___fsgt
   00D5 D0 01               230 	pop	ar1
   00D7 D0 00               231 	pop	ar0
   00D9 D0 07               232 	pop	ar7
   00DB D0 06               233 	pop	ar6
   00DD E5 82               234 	mov	a,dpl
   00DF 60 04               235 	jz  00106$
   00E1                     236 00111$:
                            237 ;	genAssign: resultIsFar = FALSE
   00E1 7A FF               238 	mov	r2,#0xFF
   00E3 80 02               239 	sjmp 00107$
   00E5                     240 00106$:
                            241 ;	genAssign: resultIsFar = FALSE
   00E5 7A 00               242 	mov	r2,#0x00
   00E7                     243 00107$:
   00E7 EA                  244 	mov	a,r2
   00E8 33                  245 	rlc	a
   00E9 95 E0               246 	subb	a,acc
   00EB FB                  247 	mov	r3,a
   00EC FC                  248 	mov	r4,a
   00ED FD                  249 	mov	r5,a
   00EE EA                  250 	mov	a,r2
   00EF 2E                  251 	add	a,r6
   00F0 FA                  252 	mov	r2,a
   00F1 EB                  253 	mov	a,r3
   00F2 3F                  254 	addc	a,r7
   00F3 FB                  255 	mov	r3,a
   00F4 EC                  256 	mov	a,r4
   00F5 38                  257 	addc	a,r0
   00F6 FC                  258 	mov	r4,a
   00F7 ED                  259 	mov	a,r5
   00F8 39                  260 	addc	a,r1
   00F9 FD                  261 	mov	r5,a
   00FA 8A 82               262 	mov	dpl,r2
   00FC 8B 83               263 	mov	dph,r3
   00FE 8C 93               264 	mov	dpx,r4
   0100 8D F0               265 	mov	b,r5
   0102 12s00r00r00         266 	lcall	___slong2fs
   0106 80 0C               267 	sjmp 00104$
   0108                     268 00102$:
                            269 ;	floorf.c:40: return r;
   0108 8E 82               270 	mov	dpl,r6
   010A 8F 83               271 	mov	dph,r7
   010C 88 93               272 	mov	dpx,r0
   010E 89 F0               273 	mov	b,r1
   0110 12s00r00r00         274 	lcall	___slong2fs
   0114                     275 00104$:
   0114 85*00 81            276 	mov	sp,_bpx
   0117 85*01 9B            277 	mov	esp,_bpx+1
   011A D0*01               278 	pop	_bpx+1
   011C D0*00               279 	pop	_bpx
   011E 22                  280 	ret
                            281 	.area CSEG    (CODE)
                            282 	.area CONST   (CODE)
                            283 	.area XINIT   (CODE)
                            284 	.area CABS    (ABS,CODE)
