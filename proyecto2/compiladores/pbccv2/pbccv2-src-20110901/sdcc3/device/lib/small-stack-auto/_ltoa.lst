                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6227 (Oct  2 2015) (Linux)
                              4 ; This file was generated Fri Oct  2 17:15:32 2015
                              5 ;--------------------------------------------------------
                              6 	.module _ltoa
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __ltoa
                             13 	.globl __ultoa
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (ABS,DATA)
   0000                      18 	.org 0x0000
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (ABS,DATA)
   0000                      23 	.org 0x0000
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
                             33 ;--------------------------------------------------------
                             34 ; overlayable items in internal ram 
                             35 ;--------------------------------------------------------
                             36 	.area OSEG    (OVR,DATA)
                             37 ;--------------------------------------------------------
                             38 ; indirectly addressable internal ram data
                             39 ;--------------------------------------------------------
                             40 	.area ISEG    (DATA)
                             41 ;--------------------------------------------------------
                             42 ; absolute internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area IABS    (ABS,DATA)
                             45 	.area IABS    (ABS,DATA)
                             46 ;--------------------------------------------------------
                             47 ; bit data
                             48 ;--------------------------------------------------------
                             49 	.area BSEG    (BIT)
                             50 ;--------------------------------------------------------
                             51 ; paged external ram data
                             52 ;--------------------------------------------------------
                             53 	.area PSEG    (PAG,XDATA)
                             54 ;--------------------------------------------------------
                             55 ; external ram data
                             56 ;--------------------------------------------------------
                             57 	.area XSEG    (XDATA)
                             58 ;--------------------------------------------------------
                             59 ; absolute external ram data
                             60 ;--------------------------------------------------------
                             61 	.area XABS    (ABS,XDATA)
                             62 ;--------------------------------------------------------
                             63 ; external initialized ram data
                             64 ;--------------------------------------------------------
                             65 	.area XISEG   (XDATA)
                             66 	.area HOME    (CODE)
                             67 	.area GSINIT0 (CODE)
                             68 	.area GSINIT1 (CODE)
                             69 	.area GSINIT2 (CODE)
                             70 	.area GSINIT3 (CODE)
                             71 	.area GSINIT4 (CODE)
                             72 	.area GSINIT5 (CODE)
                             73 	.area GSINIT  (CODE)
                             74 	.area GSFINAL (CODE)
                             75 	.area CSEG    (CODE)
                             76 ;--------------------------------------------------------
                             77 ; global & static initialisations
                             78 ;--------------------------------------------------------
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT  (CODE)
                             81 	.area GSFINAL (CODE)
                             82 	.area GSINIT  (CODE)
                             83 ;--------------------------------------------------------
                             84 ; Home
                             85 ;--------------------------------------------------------
                             86 	.area HOME    (CODE)
                             87 	.area HOME    (CODE)
                             88 ;--------------------------------------------------------
                             89 ; code
                             90 ;--------------------------------------------------------
                             91 	.area CSEG    (CODE)
                             92 ;------------------------------------------------------------
                             93 ;Allocation info for local variables in function '_ultoa'
                             94 ;------------------------------------------------------------
                             95 ;string                    Allocated to stack - offset -5
                             96 ;radix                     Allocated to stack - offset -6
                             97 ;value                     Allocated to stack - offset 1
                             98 ;buffer                    Allocated to stack - offset 5
                             99 ;index                     Allocated to registers r5 
                            100 ;c                         Allocated to registers r2 
                            101 ;sloc0                     Allocated to stack - offset 37
                            102 ;------------------------------------------------------------
                            103 ;	_ltoa.c:56: void _ultoa(unsigned long value, char* string, unsigned char radix)
                            104 ;	-----------------------------------------
                            105 ;	 function _ultoa
                            106 ;	-----------------------------------------
   0000                     107 __ultoa:
                    0002    108 	ar2 = 0x02
                    0003    109 	ar3 = 0x03
                    0004    110 	ar4 = 0x04
                    0005    111 	ar5 = 0x05
                    0006    112 	ar6 = 0x06
                    0007    113 	ar7 = 0x07
                    0000    114 	ar0 = 0x00
                    0001    115 	ar1 = 0x01
   0000 C0*00               116 	push	_bp
   0002 85 81*00            117 	mov	_bp,sp
   0005 C0 82               118 	push	dpl
   0007 C0 83               119 	push	dph
   0009 C0 F0               120 	push	b
   000B C0 E0               121 	push	acc
   000D E5 81               122 	mov	a,sp
   000F 24 28               123 	add	a,#0x28
   0011 F5 81               124 	mov	sp,a
                            125 ;	_ltoa.c:61: do {
   0013 E5*00               126 	mov	a,_bp
   0015 24 05               127 	add	a,#0x05
   0017 FE                  128 	mov	r6,a
   0018 7D 20               129 	mov	r5,#0x20
   001A                     130 00103$:
                            131 ;	_ltoa.c:62: unsigned char c = '0' + (value % radix);
   001A C0 06               132 	push	ar6
   001C E5*00               133 	mov	a,_bp
   001E 24 FA               134 	add	a,#0xfa
   0020 F8                  135 	mov	r0,a
   0021 E5*00               136 	mov	a,_bp
   0023 24 25               137 	add	a,#0x25
   0025 F9                  138 	mov	r1,a
   0026 E6                  139 	mov	a,@r0
   0027 F7                  140 	mov	@r1,a
   0028 09                  141 	inc	r1
   0029 77 00               142 	mov	@r1,#0x00
   002B 09                  143 	inc	r1
   002C 77 00               144 	mov	@r1,#0x00
   002E 09                  145 	inc	r1
   002F 77 00               146 	mov	@r1,#0x00
   0031 C0 05               147 	push	ar5
   0033 E5*00               148 	mov	a,_bp
   0035 24 25               149 	add	a,#0x25
   0037 F8                  150 	mov	r0,a
   0038 E6                  151 	mov	a,@r0
   0039 C0 E0               152 	push	acc
   003B 08                  153 	inc	r0
   003C E6                  154 	mov	a,@r0
   003D C0 E0               155 	push	acc
   003F 08                  156 	inc	r0
   0040 E6                  157 	mov	a,@r0
   0041 C0 E0               158 	push	acc
   0043 08                  159 	inc	r0
   0044 E6                  160 	mov	a,@r0
   0045 C0 E0               161 	push	acc
   0047 A8*00               162 	mov	r0,_bp
   0049 08                  163 	inc	r0
   004A 86 82               164 	mov	dpl,@r0
   004C 08                  165 	inc	r0
   004D 86 83               166 	mov	dph,@r0
   004F 08                  167 	inc	r0
   0050 86 F0               168 	mov	b,@r0
   0052 08                  169 	inc	r0
   0053 E6                  170 	mov	a,@r0
   0054 12s00r00            171 	lcall	__modulong
   0057 AE 82               172 	mov	r6,dpl
   0059 AF 83               173 	mov	r7,dph
   005B FB                  174 	mov	r3,a
   005C E5 81               175 	mov	a,sp
   005E 24 FC               176 	add	a,#0xfc
   0060 F5 81               177 	mov	sp,a
   0062 D0 05               178 	pop	ar5
   0064 74 30               179 	mov	a,#0x30
   0066 2E                  180 	add	a,r6
   0067 FA                  181 	mov	r2,a
                            182 ;	_ltoa.c:63: if (c > (unsigned char)'9')
   0068 74 39               183 	mov	a,#0x39
   006A B5 02 00            184 	cjne	a,ar2,00117$
   006D                     185 00117$:
   006D D0 06               186 	pop	ar6
   006F 50 04               187 	jnc	00102$
                            188 ;	_ltoa.c:64: c += 'A' - '9' - 1;
   0071 74 07               189 	mov	a,#0x07
   0073 2A                  190 	add	a,r2
   0074 FA                  191 	mov	r2,a
   0075                     192 00102$:
                            193 ;	_ltoa.c:65: buffer[--index] = c;
   0075 1D                  194 	dec	r5
   0076 ED                  195 	mov	a,r5
   0077 2E                  196 	add	a,r6
   0078 F8                  197 	mov	r0,a
   0079 A6 02               198 	mov	@r0,ar2
                            199 ;	_ltoa.c:66: value /= radix;
   007B C0 05               200 	push	ar5
   007D C0 06               201 	push	ar6
   007F E5*00               202 	mov	a,_bp
   0081 24 25               203 	add	a,#0x25
   0083 F8                  204 	mov	r0,a
   0084 E6                  205 	mov	a,@r0
   0085 C0 E0               206 	push	acc
   0087 08                  207 	inc	r0
   0088 E6                  208 	mov	a,@r0
   0089 C0 E0               209 	push	acc
   008B 08                  210 	inc	r0
   008C E6                  211 	mov	a,@r0
   008D C0 E0               212 	push	acc
   008F 08                  213 	inc	r0
   0090 E6                  214 	mov	a,@r0
   0091 C0 E0               215 	push	acc
   0093 A8*00               216 	mov	r0,_bp
   0095 08                  217 	inc	r0
   0096 86 82               218 	mov	dpl,@r0
   0098 08                  219 	inc	r0
   0099 86 83               220 	mov	dph,@r0
   009B 08                  221 	inc	r0
   009C 86 F0               222 	mov	b,@r0
   009E 08                  223 	inc	r0
   009F E6                  224 	mov	a,@r0
   00A0 12s00r00            225 	lcall	__divulong
   00A3 A8*00               226 	mov	r0,_bp
   00A5 08                  227 	inc	r0
   00A6 A6 82               228 	mov	@r0,dpl
   00A8 08                  229 	inc	r0
   00A9 A6 83               230 	mov	@r0,dph
   00AB 08                  231 	inc	r0
   00AC A6 F0               232 	mov	@r0,b
   00AE 08                  233 	inc	r0
   00AF F6                  234 	mov	@r0,a
   00B0 E5 81               235 	mov	a,sp
   00B2 24 FC               236 	add	a,#0xfc
   00B4 F5 81               237 	mov	sp,a
   00B6 D0 06               238 	pop	ar6
   00B8 D0 05               239 	pop	ar5
                            240 ;	_ltoa.c:67: } while (value);
   00BA A8*00               241 	mov	r0,_bp
   00BC 08                  242 	inc	r0
   00BD E6                  243 	mov	a,@r0
   00BE 08                  244 	inc	r0
   00BF 46                  245 	orl	a,@r0
   00C0 08                  246 	inc	r0
   00C1 46                  247 	orl	a,@r0
   00C2 08                  248 	inc	r0
   00C3 46                  249 	orl	a,@r0
   00C4 60 03               250 	jz	00119$
   00C6 02s00r1A            251 	ljmp	00103$
   00C9                     252 00119$:
                            253 ;	_ltoa.c:69: do {
   00C9 E5*00               254 	mov	a,_bp
   00CB 24 FB               255 	add	a,#0xfb
   00CD F8                  256 	mov	r0,a
   00CE 86 02               257 	mov	ar2,@r0
   00D0 08                  258 	inc	r0
   00D1 86 03               259 	mov	ar3,@r0
   00D3 08                  260 	inc	r0
   00D4 86 04               261 	mov	ar4,@r0
   00D6                     262 00106$:
                            263 ;	_ltoa.c:70: *string++ = buffer[index];
   00D6 ED                  264 	mov	a,r5
   00D7 2E                  265 	add	a,r6
   00D8 F8                  266 	mov	r0,a
   00D9 86 07               267 	mov	ar7,@r0
   00DB 8A 82               268 	mov	dpl,r2
   00DD 8B 83               269 	mov	dph,r3
   00DF 8C F0               270 	mov	b,r4
   00E1 EF                  271 	mov	a,r7
   00E2 12s00r00            272 	lcall	__gptrput
   00E5 A3                  273 	inc	dptr
   00E6 AA 82               274 	mov	r2,dpl
   00E8 AB 83               275 	mov	r3,dph
                            276 ;	_ltoa.c:71: } while ( ++index != NUMBER_OF_DIGITS );
   00EA 0D                  277 	inc	r5
   00EB BD 20 E8            278 	cjne	r5,#0x20,00106$
                            279 ;	_ltoa.c:73: *string = 0;  /* string terminator */
   00EE 8A 82               280 	mov	dpl,r2
   00F0 8B 83               281 	mov	dph,r3
   00F2 8C F0               282 	mov	b,r4
   00F4 E4                  283 	clr	a
   00F5 12s00r00            284 	lcall	__gptrput
   00F8 85*00 81            285 	mov	sp,_bp
   00FB D0*00               286 	pop	_bp
   00FD 22                  287 	ret
                            288 ;------------------------------------------------------------
                            289 ;Allocation info for local variables in function '_ltoa'
                            290 ;------------------------------------------------------------
                            291 ;string                    Allocated to stack - offset -5
                            292 ;radix                     Allocated to stack - offset -6
                            293 ;value                     Allocated to stack - offset 1
                            294 ;------------------------------------------------------------
                            295 ;	_ltoa.c:76: void _ltoa(long value, char* string, unsigned char radix)
                            296 ;	-----------------------------------------
                            297 ;	 function _ltoa
                            298 ;	-----------------------------------------
   00FE                     299 __ltoa:
   00FE C0*00               300 	push	_bp
   0100 85 81*00            301 	mov	_bp,sp
   0103 C0 82               302 	push	dpl
   0105 C0 83               303 	push	dph
   0107 C0 F0               304 	push	b
   0109 C0 E0               305 	push	acc
                            306 ;	_ltoa.c:78: if (value < 0 && radix == 10) {
   010B A8*00               307 	mov	r0,_bp
   010D 08                  308 	inc	r0
   010E 08                  309 	inc	r0
   010F 08                  310 	inc	r0
   0110 08                  311 	inc	r0
   0111 E6                  312 	mov	a,@r0
   0112 30 E7 43            313 	jnb	acc.7,00102$
   0115 E5*00               314 	mov	a,_bp
   0117 24 FA               315 	add	a,#0xfa
   0119 F8                  316 	mov	r0,a
   011A B6 0A 3B            317 	cjne	@r0,#0x0A,00102$
                            318 ;	_ltoa.c:79: *string++ = '-';
   011D E5*00               319 	mov	a,_bp
   011F 24 FB               320 	add	a,#0xfb
   0121 F8                  321 	mov	r0,a
   0122 86 06               322 	mov	ar6,@r0
   0124 08                  323 	inc	r0
   0125 86 07               324 	mov	ar7,@r0
   0127 08                  325 	inc	r0
   0128 86 02               326 	mov	ar2,@r0
   012A 8E 82               327 	mov	dpl,r6
   012C 8F 83               328 	mov	dph,r7
   012E 8A F0               329 	mov	b,r2
   0130 74 2D               330 	mov	a,#0x2D
   0132 12s00r00            331 	lcall	__gptrput
   0135 E5*00               332 	mov	a,_bp
   0137 24 FB               333 	add	a,#0xfb
   0139 F8                  334 	mov	r0,a
   013A 74 01               335 	mov	a,#0x01
   013C 2E                  336 	add	a,r6
   013D F6                  337 	mov	@r0,a
   013E E4                  338 	clr	a
   013F 3F                  339 	addc	a,r7
   0140 08                  340 	inc	r0
   0141 F6                  341 	mov	@r0,a
   0142 08                  342 	inc	r0
   0143 A6 02               343 	mov	@r0,ar2
                            344 ;	_ltoa.c:80: value = -value;
   0145 A8*00               345 	mov	r0,_bp
   0147 08                  346 	inc	r0
   0148 C3                  347 	clr	c
   0149 E4                  348 	clr	a
   014A 96                  349 	subb	a,@r0
   014B F6                  350 	mov	@r0,a
   014C 08                  351 	inc	r0
   014D E4                  352 	clr	a
   014E 96                  353 	subb	a,@r0
   014F F6                  354 	mov	@r0,a
   0150 08                  355 	inc	r0
   0151 E4                  356 	clr	a
   0152 96                  357 	subb	a,@r0
   0153 F6                  358 	mov	@r0,a
   0154 08                  359 	inc	r0
   0155 E4                  360 	clr	a
   0156 96                  361 	subb	a,@r0
   0157 F6                  362 	mov	@r0,a
   0158                     363 00102$:
                            364 ;	_ltoa.c:82: _ultoa(value, string, radix);
   0158 E5*00               365 	mov	a,_bp
   015A 24 FA               366 	add	a,#0xfa
   015C F8                  367 	mov	r0,a
   015D E6                  368 	mov	a,@r0
   015E C0 E0               369 	push	acc
   0160 E5*00               370 	mov	a,_bp
   0162 24 FB               371 	add	a,#0xfb
   0164 F8                  372 	mov	r0,a
   0165 E6                  373 	mov	a,@r0
   0166 C0 E0               374 	push	acc
   0168 08                  375 	inc	r0
   0169 E6                  376 	mov	a,@r0
   016A C0 E0               377 	push	acc
   016C 08                  378 	inc	r0
   016D E6                  379 	mov	a,@r0
   016E C0 E0               380 	push	acc
   0170 A8*00               381 	mov	r0,_bp
   0172 08                  382 	inc	r0
   0173 86 82               383 	mov	dpl,@r0
   0175 08                  384 	inc	r0
   0176 86 83               385 	mov	dph,@r0
   0178 08                  386 	inc	r0
   0179 86 F0               387 	mov	b,@r0
   017B 08                  388 	inc	r0
   017C E6                  389 	mov	a,@r0
   017D 12s00r00            390 	lcall	__ultoa
   0180 E5 81               391 	mov	a,sp
   0182 24 FC               392 	add	a,#0xfc
   0184 F5 81               393 	mov	sp,a
   0186 85*00 81            394 	mov	sp,_bp
   0189 D0*00               395 	pop	_bp
   018B 22                  396 	ret
                            397 	.area CSEG    (CODE)
                            398 	.area CONST   (CODE)
                            399 	.area XINIT   (CODE)
                            400 	.area CABS    (ABS,CODE)
